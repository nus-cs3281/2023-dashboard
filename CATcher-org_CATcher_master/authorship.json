[{"path":"electron-utils/oauth.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { BrowserWindow, shell } from \u0027electron\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { v4 as uuid } from \u0027uuid\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"const nodeUrl \u003d require(\u0027url\u0027);"},{"lineNumber":5,"author":{"gitId":"-"},"content":"const Logger \u003d require(\u0027electron-log\u0027);"},{"lineNumber":6,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"const fetch \u003d require(\u0027node-fetch\u0027);"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"const CLIENT_ID \u003d \u00276750652c0c9001314434\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"const BASE_URL \u003d \u0027https://github.com\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"const ACCESS_TOKEN_URL \u003d \u0027https://catcher-auth.herokuapp.com/authenticate\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"const CALLBACK_URL \u003d \u0027http://localhost:4200\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"let authWindow;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Will retrieve the access token from a proxy server which acts as a intermediary to retrieve the tokens from Github."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * @param window - The main window of CATcher."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * @param repoPermissionLevel - The level of permission required to be granted by the user to use CATcher."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export function getAccessToken(window: BrowserWindow, repoPermissionLevel: string): Promise\u003cany\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  return getAuthorizationCode(window, repoPermissionLevel)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    .then((code) \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      Logger.info(\u0027Obtained authorization code from Github\u0027);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      const accessTokenUrl \u003d `${ACCESS_TOKEN_URL}/${code}`;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      return fetch(accessTokenUrl)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        .then((res) \u003d\u003e res.json())"},{"lineNumber":27,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        .then((data: { error }) \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          if (data.error) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            throw new Error(data.error);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          return data;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    .catch((error) \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      throw error;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Get the authorization code from Github after success login."},{"lineNumber":41,"author":{"gitId":"-"},"content":" * @param parentWindow - The main window of CATcher"},{"lineNumber":42,"author":{"gitId":"-"},"content":" * @param repoPermissionLevel - The level of permission required to be granted by the user to use CATcher."},{"lineNumber":43,"author":{"gitId":"-"},"content":" */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"function getAuthorizationCode(parentWindow: BrowserWindow, repoPermissionLevel: string) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  let state: string;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  state \u003d generateStateString();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  const oauthUrl \u003d encodeURI("},{"lineNumber":48,"author":{"gitId":"-"},"content":"    `${BASE_URL}/login/oauth/authorize?client_id\u003d${CLIENT_ID}\u0026scope\u003d${repoPermissionLevel},read:user\u0026state\u003d${state}`"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  );"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  return new Promise(function (resolve, reject) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    const windowParams \u003d {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      autoHideMenuBar: true,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      alwaysOnTop: false,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      fullscreenable: false,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      parent: parentWindow,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      webPreferences: {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        nodeIntegration: true"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    authWindow \u003d new BrowserWindow(windowParams);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    authWindow.loadURL(oauthUrl);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    authWindow.show();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    Logger.info(\u0027Opening authentication window\u0027);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    authWindow.on(\u0027closed\u0027, (event) \u003d\u003e {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      reject(new Error(\u0027WINDOW_CLOSED\u0027));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027will-navigate\u0027, (event, newUrl) \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      if (newUrl.startsWith(CALLBACK_URL)) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        onCallback(newUrl);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      } else if (newUrl.startsWith(`${BASE_URL}/session`) || newUrl.startsWith(`${BASE_URL}/login`)) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // continue navigation within the auth window"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // do not navigate to external links in the auth window"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // instead, navigate to them in the user\u0027s browser"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        event.preventDefault();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        shell.openExternal(newUrl).then(() \u003d\u003e Logger.info(\u0027External link is clicked on auth window, opening system browser...\u0027));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027new-window\u0027, (event, url, frameName, disposition, options) \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      event.preventDefault();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      shell.openExternal(url).then(() \u003d\u003e Logger.info(\u0027External link is clicked on auth window, opening system browser...\u0027));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    authWindow.webContents.on(\u0027will-redirect\u0027, (event, newUrl) \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      Logger.info(\u0027Received redirect in auth window\u0027);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      if (newUrl.startsWith(CALLBACK_URL)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        onCallback(newUrl);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    function onCallback(callbackUrl: string) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      const url_parts \u003d nodeUrl.parse(callbackUrl, true);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      const query \u003d url_parts.query;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      const code \u003d query.code;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      const error \u003d query.error;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      const returnedState \u003d query.state;"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"      if (error !\u003d\u003d undefined) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        reject(error);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      } else if (isReturnedStateSame(state, returnedState) \u0026\u0026 code) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        resolve(code);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      setImmediate(function () {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        authWindow.close();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        authWindow.on(\u0027closed\u0027, () \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          Logger.info(\u0027Closing authentication window\u0027);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          authWindow \u003d null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":120,"author":{"gitId":"-"},"content":" * Generates and assigns an unguessable random \u0027state\u0027 string to pass to Github for protection against cross-site request forgery attacks"},{"lineNumber":121,"author":{"gitId":"-"},"content":" */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"function generateStateString(): string {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  return uuid();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"function isReturnedStateSame(state: string, returnedState: string): boolean {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  return state \u003d\u003d\u003d returnedState;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":126}},{"path":"src/app/app.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { AfterViewInit, Component } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../environments/environment\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./core/services/electron.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027./core/services/error-handling.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./core/services/logging.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  selector: \u0027app-root\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./app.component.html\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./app.component.css\u0027]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"})"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export class AppComponent implements AfterViewInit {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  NOT_CONNECTED_ERROR: Error \u003d new Error(\u0027You are not connected to the internet.\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(public electronService: ElectronService, logger: LoggingService, public errorHandlingService: ErrorHandlingService) {"},{"lineNumber":16,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    logger.info(\u0027AppComponent: AppConfig\u0027, AppConfig);"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    if (electronService.isElectron()) {"},{"lineNumber":19,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.info(\u0027AppComponent: Mode electron\u0027);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":21,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.info(\u0027AppComponent: Mode web\u0027);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  ngAfterViewInit() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    this.addListenerForHttpLinks();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    this.addListenerForNetworkOffline();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * This listener will prevent the default behaviour of electron to open http links on electron browser itself."},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * Will use the client\u0027s default OS browser to open the link."},{"lineNumber":33,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  addListenerForHttpLinks() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    document.addEventListener("},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u0027click\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      (event) \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        const elem \u003d \u003cHTMLLinkElement\u003e(\u003cHTMLElement\u003eevent.target).closest(\u0027a[href^\u003d\"http\"]\u0027);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (elem) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          event.preventDefault();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          event.stopPropagation();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          this.electronService.openLink(elem.href);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   * This listener checks if CATcher has a connection to a network, and will show an error snackbar if it does not."},{"lineNumber":51,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  addListenerForNetworkOffline() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    window.addEventListener("},{"lineNumber":54,"author":{"gitId":"-"},"content":"      \u0027offline\u0027,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      (event) \u003d\u003e {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(this.NOT_CONNECTED_ERROR);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      false"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":3,"-":58}},{"path":"src/app/app.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { HttpClientModule } from \u0027@angular/common/http\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ErrorHandler, NgModule, NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { BrowserModule, Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { NavigationEnd, Router } from \u0027@angular/router\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Apollo, ApolloModule } from \u0027apollo-angular\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { HttpLink, HttpLinkModule } from \u0027apollo-angular-link-http\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { InMemoryCache, IntrospectionFragmentMatcher } from \u0027apollo-cache-inmemory\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ApolloLink } from \u0027apollo-link\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { setContext } from \u0027apollo-link-context\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { MarkdownModule, MarkedOptions } from \u0027ngx-markdown\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import \u0027reflect-metadata\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import graphqlTypes from \u0027../../graphql/graphql-types\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import \u0027../polyfills\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { AppRoutingModule } from \u0027./app-routing.module\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { AppComponent } from \u0027./app.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { AuthModule } from \u0027./auth/auth.module\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { UserConfirmationComponent } from \u0027./core/guards/user-confirmation/user-confirmation.component\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027./core/services/auth.service\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./core/services/data.service\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./core/services/electron.service\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027./core/services/error-handling.service\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { AuthServiceFactory } from \u0027./core/services/factories/factory.auth.service\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { GithubServiceFactory } from \u0027./core/services/factories/factory.github.service\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import { IssueServiceFactory } from \u0027./core/services/factories/factory.issue.service\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./core/services/github.service\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027./core/services/githubevent.service\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./core/services/issue.service\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./core/services/logging.service\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027./core/services/phase.service\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import { SessionFixConfirmationComponent } from \u0027./core/services/session-fix-confirmation/session-fix-confirmation.component\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./core/services/user.service\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import { PhaseBugReportingModule } from \u0027./phase-bug-reporting/phase-bug-reporting.module\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import { PhaseModerationModule } from \u0027./phase-moderation/phase-moderation.module\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import { PhaseTeamResponseModule } from \u0027./phase-team-response/phase-team-response.module\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import { PhaseTesterResponseModule } from \u0027./phase-tester-response/phase-tester-response.module\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import { LabelDefinitionPopupComponent } from \u0027./shared/label-definition-popup/label-definition-popup.component\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import { HeaderComponent } from \u0027./shared/layout\u0027;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import { markedOptionsFactory } from \u0027./shared/lib/marked\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027./shared/shared.module\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  declarations: [AppComponent, HeaderComponent, UserConfirmationComponent, LabelDefinitionPopupComponent, SessionFixConfirmationComponent],"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  imports: ["},{"lineNumber":45,"author":{"gitId":"-"},"content":"    BrowserModule,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    PhaseTesterResponseModule,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    BrowserAnimationsModule,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    AuthModule,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    PhaseBugReportingModule,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    PhaseTeamResponseModule,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    PhaseModerationModule,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    SharedModule,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    HttpClientModule,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    MarkdownModule.forRoot({"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      markedOptions: {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        provide: MarkedOptions,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        useFactory: markedOptionsFactory"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }),"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    AppRoutingModule,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    ApolloModule,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    HttpLinkModule"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  providers: ["},{"lineNumber":65,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      provide: GithubService,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      useFactory: GithubServiceFactory,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      deps: [ErrorHandlingService, Apollo, ElectronService, LoggingService]"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      provide: AuthService,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      useFactory: AuthServiceFactory,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      deps: ["},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ElectronService,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Router,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        NgZone,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        GithubService,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserService,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        IssueService,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        PhaseService,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DataService,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        GithubEventService,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Title,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        LoggingService"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      ]"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      provide: IssueService,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      useFactory: IssueServiceFactory,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      deps: [GithubService, UserService, PhaseService, ElectronService, DataService, LoggingService]"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      provide: ErrorHandler,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      useClass: ErrorHandlingService"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":97,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  bootstrap: [AppComponent]"},{"lineNumber":98,"author":{"gitId":"-"},"content":"})"},{"lineNumber":99,"author":{"gitId":"-"},"content":"export class AppModule {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private apollo: Apollo,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private httpLink: HttpLink,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private authService: AuthService,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    const URI \u003d \u0027https://api.github.com/graphql\u0027;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    const basic \u003d setContext(() \u003d\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      return { headers: { Accept: \u0027charset\u003dutf-8\u0027 } };"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    const auth \u003d setContext(() \u003d\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      return { headers: { Authorization: `Token ${this.authService.accessToken.getValue()}` } };"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    const link \u003d ApolloLink.from([basic, auth, this.httpLink.create({ uri: URI })]);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    const fragmentMatcher \u003d new IntrospectionFragmentMatcher({"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      introspectionQueryResultData: graphqlTypes"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    const cache \u003d new InMemoryCache({ fragmentMatcher });"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    this.apollo.create({"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      link: link,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      cache: cache"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    this.router.events.subscribe((event) \u003d\u003e {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      if (event instanceof NavigationEnd) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        this.errorHandlingService.clearError();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":128}},{"path":"src/app/auth/auth.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, NgZone, OnDestroy, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ActivatedRoute, Router } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Observable, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { filter, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../environments/environment\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../core/models/github-user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ApplicationService } from \u0027../core/services/application.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { AuthService, AuthState } from \u0027../core/services/auth.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../core/services/electron.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../core/services/github.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../core/services/logging.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../core/services/user.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"const APPLICATION_VERSION_OUTDATED_ERROR \u003d \u0027Please update to the latest version of CATcher.\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  selector: \u0027app-auth\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./auth.component.html\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./auth.component.css\u0027]"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export class AuthComponent implements OnInit, OnDestroy {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  authState: AuthState;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  accessTokenSubscription: Subscription;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  authStateSubscription: Subscription;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  currentUserName: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  urlEncodedSessionName: string;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  sessionInformation: string;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public appService: ApplicationService,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public electronService: ElectronService,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private authService: AuthService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private ngZone: NgZone,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private activatedRoute: ActivatedRoute,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    this.electronService.registerIpcListener(\u0027github-oauth-reply\u0027, (event, { token, error, isWindowClosed }) \u003d\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (error) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          if (!isWindowClosed) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            this.errorHandlingService.handleError(error);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          this.goToSessionSelect();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          return;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.authService.storeOAuthAccessToken(token);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.logger.startSession();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    const oauthCode \u003d this.activatedRoute.snapshot.queryParamMap.get(\u0027code\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    const state \u003d this.activatedRoute.snapshot.queryParamMap.get(\u0027state\u0027);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    if (this.authService.isAuthenticated()) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      this.router.navigate([this.phaseService.currentPhase]);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.initAccessTokenSubscription();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    this.initAuthStateSubscription();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    this.createProfileFromUrlQueryParams();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    if (oauthCode) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      // runs upon receiving oauthCode from the redirect"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      this.authService.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      this.restoreOrgDetailsFromLocalStorage();"},{"lineNumber":75,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.info(\u0027AuthComponent: Obtained authorisation code from Github\u0027);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      this.fetchAccessToken(oauthCode, state);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * Will fetch the access token from GitHub."},{"lineNumber":82,"author":{"gitId":"-"},"content":"   * @param oauthCode - The authorisation code obtained from GitHub."},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * @param state - The state returned from GitHub."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  fetchAccessToken(oauthCode: string, state: string) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    if (!this.authService.isReturnedStateSame(state)) {"},{"lineNumber":87,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.info(`AuthComponent: Received incorrect state ${state}, continue waiting for correct state`);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(\u0027AuthComponent: Retrieving access token from Github\u0027);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    const accessTokenUrl \u003d `${AppConfig.accessTokenUrl}/${oauthCode}/client_id/${AppConfig.clientId}`;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    fetch(accessTokenUrl)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .then((res) \u003d\u003e res.json())"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      .then((data) \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (data.error) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          throw new Error(data.error);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.authService.storeOAuthAccessToken(data.token);"},{"lineNumber":101,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        this.logger.info(\u0027AuthComponent: Sucessfully obtained access token\u0027);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      .catch((err) \u003d\u003e {"},{"lineNumber":104,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        this.logger.info(`AuthComponent: Error in data fetched from access token URL: ${err}`);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(err);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  ngOnDestroy() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    this.electronService.removeIpcListeners(\u0027github-oauth-reply\u0027);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    if (this.authStateSubscription) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      this.authStateSubscription.unsubscribe();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    if (this.accessTokenSubscription) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      this.accessTokenSubscription.unsubscribe();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"   * Checks whether the current version of CATcher is outdated."},{"lineNumber":122,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  checkAppIsOutdated(): Observable\u003cany\u003e {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    return this.appService.isApplicationOutdated().pipe("},{"lineNumber":125,"author":{"gitId":"-"},"content":"      map((isOutdated: boolean) \u003d\u003e {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (isOutdated) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"          throw new Error(APPLICATION_VERSION_OUTDATED_ERROR);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  updateSession(sessionEvent: string) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    this.sessionInformation \u003d sessionEvent;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"  goToSessionSelect() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"  isUserNotAuthenticated(): boolean {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.NotAuthenticated;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  isUserAuthenticating(): boolean {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.AwaitingAuthentication;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  isAwaitingOAuthUserConfirm(): boolean {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    return this.authState \u003d\u003d\u003d AuthState.ConfirmOAuthUser;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"  get currentSessionOrg(): string {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    if (!this.sessionInformation) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      // Retrieve org details of session information from local storage"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      return window.localStorage.getItem(\u0027org\u0027);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    return this.getOrgDetails(this.sessionInformation);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":162,"author":{"gitId":"-"},"content":"   * Extracts organization and data repository details from local storage"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   * and restores them to CATcher."},{"lineNumber":164,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  private restoreOrgDetailsFromLocalStorage() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    const org \u003d window.localStorage.getItem(\u0027org\u0027);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    const dataRepo \u003d window.localStorage.getItem(\u0027dataRepo\u0027);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    this.githubService.storeOrganizationDetails(org, dataRepo);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    this.phaseService.setSessionData();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"   * Extracts the Organization Details from the input sessionInformation."},{"lineNumber":174,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  private getOrgDetails(sessionInformation: string) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[0];"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"  private initAuthStateSubscription() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    this.authStateSubscription \u003d this.authService.currentAuthState.subscribe((state) \u003d\u003e {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      this.ngZone.run(() \u003d\u003e {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        this.authState \u003d state;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"  private initAccessTokenSubscription() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    this.accessTokenSubscription \u003d this.authService.accessToken"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":191,"author":{"gitId":"-"},"content":"        filter((token: string) \u003d\u003e !!token),"},{"lineNumber":192,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap(() \u003d\u003e this.userService.getAuthenticatedUser())"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      .subscribe((user: GithubUser) \u003d\u003e {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        this.ngZone.run(() \u003d\u003e {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"          this.currentUserName \u003d user.login;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"          this.authService.changeAuthState(AuthState.ConfirmOAuthUser);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  private createProfileFromUrlQueryParams() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    const urlParams \u003d this.activatedRoute.snapshot.queryParamMap;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    if (urlParams.has(\u0027session\u0027)) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      this.urlEncodedSessionName \u003d urlParams.get(\u0027session\u0027);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":7,"-":201}},{"path":"src/app/auth/auth.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { CommonModule } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027../shared/shared.module\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { AuthRoutingModule } from \u0027./auth-routing.module\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { AuthComponent } from \u0027./auth.component\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ConfirmLoginComponent } from \u0027./confirm-login/confirm-login.component\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { JsonParseErrorDialogComponent } from \u0027./profiles/json-parse-error-dialog/json-parse-error-dialog.component\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ProfilesComponent } from \u0027./profiles/profiles.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { SessionSelectionComponent } from \u0027./session-selection/session-selection.component\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  imports: [AuthRoutingModule, SharedModule, CommonModule],"},{"lineNumber":13,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  declarations: [AuthComponent, ProfilesComponent, JsonParseErrorDialogComponent, ConfirmLoginComponent, SessionSelectionComponent]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class AuthModule {}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":14}},{"path":"src/app/auth/confirm-login/confirm-login.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Input, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { AuthService, AuthState } from \u0027../../core/services/auth.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../core/services/electron.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../../core/services/githubevent.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  selector: \u0027app-auth-confirm-login\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./confirm-login.component.html\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./confirm-login.component.css\u0027]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"})"},{"lineNumber":17,"author":{"gitId":"-"},"content":"export class ConfirmLoginComponent implements OnInit {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  @Input() username: string;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  @Input() currentSessionOrg: string;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public electronService: ElectronService,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private authService: AuthService,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private logger: LoggingService,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private router: Router"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  onGithubWebsiteClicked() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    window.open(\u0027https://github.com/\u0027, \u0027_blank\u0027);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    window.location.reload();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  logIntoAnotherAccount() {"},{"lineNumber":40,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(\u0027ConfirmLoginComponent: Logging into another account\u0027);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    this.electronService.clearCookies();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    this.authService.startOAuthProcess();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"   * Handles the clean up required after authentication and setting up of user data is completed."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  handleAuthSuccess() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    this.authService.setTitleWithPhaseDetail();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.Authenticated);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * Will complete the process of logging in the given user."},{"lineNumber":56,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  completeLoginProcess(): void {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.authService.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.phaseService.setPhaseOwners(this.currentSessionOrg, this.username);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.userService"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      .createUserModel(this.username)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":63,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap(() \u003d\u003e this.phaseService.sessionSetup()),"},{"lineNumber":64,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap(() \u003d\u003e this.githubEventService.setLatestChangeEvent())"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":67,"author":{"gitId":"-"},"content":"        () \u003d\u003e {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          this.handleAuthSuccess();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":73,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          this.logger.info(`ConfirmLoginComponent: Completion of login process failed with an error: ${error}`);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":5,"-":72}},{"path":"src/app/auth/profiles/profiles.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cmat-form-field class\u003d\"profile-field\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cmat-label\u003eSelect Session\u003c/mat-label\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cmat-select [value]\u003d\"this.selectedProfile.profileName\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cmat-option (click)\u003d\"selectProfile(this.blankProfile)\"\u003eNone\u003c/mat-option\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cmat-option *ngFor\u003d\"let profile of profiles\" (click)\u003d\"selectProfile(profile)\" [value]\u003d\"profile.profileName\"\u003e{{"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      profile.profileName"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    }}\u003c/mat-option\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003c/mat-select\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/mat-form-field\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cinput #fileInput type\u003d\"file\" style\u003d\"display: none\" accept\u003d\".json\" (change)\u003d\"this.fileSelected($event)\" /\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cbutton"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  class\u003d\"profile-input\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  type\u003d\"button\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  mat-icon-button"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  (click)\u003d\"this.fileSelectorInitiation(fileInput)\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  disableRipple\u003d\"true\""},{"lineNumber":17,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  matTooltip\u003d\"Configure your custom settings\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  (mousedown)\u003d\"this.animationActivated \u003d true\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  (mouseleave)\u003d\"this.animationActivated \u003d false\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003cmat-icon [@triggerFileInput]\u003d\"this.animationActivated ? \u0027pressed\u0027 : \u0027normal\u0027\"\u003efolder_open\u003c/mat-icon\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003c/button\u003e"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":21}},{"path":"src/app/auth/session-selection/session-selection.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Profile } from \u0027../../core/models/profile.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { AuthService, AuthState } from \u0027../../core/services/auth.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  selector: \u0027app-session-selection\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./session-selection.component.html\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./session-selection.component.css\u0027, \u0027../auth.component.css\u0027]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class SessionSelectionComponent implements OnInit {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  // isSettingUpSession is used to indicate whether CATcher is in the midst of setting up the session."},{"lineNumber":17,"author":{"gitId":"-"},"content":"  isSettingUpSession: boolean;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  profileForm: FormGroup;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  @Input() urlEncodedSessionName: string;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  @Output() sessionEmitter: EventEmitter\u003cstring\u003e \u003d new EventEmitter\u003cstring\u003e();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private logger: LoggingService,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private authService: AuthService,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    this.isSettingUpSession \u003d false;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    this.initProfileForm();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * Fills the login form with data from the given Profile."},{"lineNumber":40,"author":{"gitId":"-"},"content":"   * @param profile - Profile selected by the user."},{"lineNumber":41,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  onProfileSelect(profile: Profile): void {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    this.profileForm.get(\u0027session\u0027).setValue(profile.repoName);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    this.sessionEmitter.emit(profile.repoName);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  setupSession() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    if (this.profileForm.invalid) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.isSettingUpSession \u003d true;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    const sessionInformation: string \u003d this.profileForm.get(\u0027session\u0027).value;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    const org: string \u003d this.getOrgDetails(sessionInformation);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    const dataRepo: string \u003d this.getDataRepoDetails(sessionInformation);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Persist session information in local storage"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    window.localStorage.setItem(\u0027org\u0027, org);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    window.localStorage.setItem(\u0027dataRepo\u0027, dataRepo);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.githubService.storeOrganizationDetails(org, dataRepo);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`SessionSelectionComponent: Selected Settings Repo: ${sessionInformation}`);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.phaseService.storeSessionData().subscribe("},{"lineNumber":63,"author":{"gitId":"-"},"content":"      () \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"          this.authService.startOAuthProcess();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (error) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          this.authService.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.isSettingUpSession \u003d false;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      () \u003d\u003e (this.isSettingUpSession \u003d false)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"   * Extracts the Organization Details from the input sessionInformation."},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":82,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  private getOrgDetails(sessionInformation: string) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[0];"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"   * Extracts the Data Repository Details from the input sessionInformation."},{"lineNumber":89,"author":{"gitId":"-"},"content":"   * @param sessionInformation - string in the format of \u0027orgName/dataRepo\u0027"},{"lineNumber":90,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  private getDataRepoDetails(sessionInformation: string) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    return sessionInformation.split(\u0027/\u0027)[1];"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"  private initProfileForm() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    this.profileForm \u003d this.formBuilder.group({"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      session: [\u0027\u0027, Validators.required]"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":99}},{"path":"src/app/core/guards/user-confirmation/user-confirmation.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatDialogRef, MAT_DIALOG_DATA } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { CanDeactivateIssueGuard } from \u0027../can-deactivate-issue-guard.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The UserConfirmationComponent is responsible for rendering the UserDialog"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * to verify if certain changes made to relevant inputs are to be discarded."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  selector: \u0027app-user-confirmation\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./user-confirmation.component.html\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./user-confirmation.component.css\u0027]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class UserConfirmationComponent implements OnInit {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  // Injection of a reference to Dialog from the Service that it is to be"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  // displayed in."},{"lineNumber":18,"author":{"gitId":"-"},"content":"  constructor(public dialogRef: MatDialogRef\u003cCanDeactivateIssueGuard\u003e, @Inject(MAT_DIALOG_DATA) public data) {}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   * Closes the dialog."},{"lineNumber":24,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  onNoClick(): void {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    this.dialogRef.close(false);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":27}},{"path":"src/app/core/models/issue.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import * as moment from \u0027moment\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027./comment.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027./github/github-comment.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027./github/github-issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027./github/github-label.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027./hidden-data.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027./issue-dispute.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Team } from \u0027./team.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { TeamAcceptedTemplate } from \u0027./templates/team-accepted-template.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { TeamResponseTemplate } from \u0027./templates/team-response-template.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { TesterResponseTemplate } from \u0027./templates/tester-response-template.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { TutorModerationIssueTemplate } from \u0027./templates/tutor-moderation-issue-template.model\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { TutorModerationTodoTemplate } from \u0027./templates/tutor-moderation-todo-template.model\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027./tester-response.model\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"export class Issue {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  /** Basic Fields */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  readonly globalId: string;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  readonly id: number;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  readonly created_at: string;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  readonly githubIssue: GithubIssue;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  githubComments: GithubComment[];"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  title: string;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  description: string;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  hiddenDataInDescription: HiddenData;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  /** Fields derived from Labels */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  severity: string;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  type: string;"},{"lineNumber":31,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  response?: string; // all instance of this should be renamed to response"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  duplicated?: boolean;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  status?: string;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  pending?: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  unsure?: boolean;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  teamAssigned?: Team;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  /** Depending on the phase, assignees attribute can be derived from Github\u0027s assignee feature OR from the Github\u0027s issue description */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  assignees?: string[];"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  /** Fields derived from parsing of Github\u0027s issue description */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  duplicateOf?: number;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  teamResponse?: string;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  testerResponses?: TesterResponse[];"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  testerDisagree?: boolean; // whether tester agrees or disagree to teams reponse"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  issueComment?: IssueComment; // Issue comment is used for Tutor Response and Tester Response"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  issueDisputes?: IssueDispute[];"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  teamChosenSeverity?: string;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  teamChosenType?: string;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  teamAccepted?: boolean;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  /** Fields for error messages during parsing of Github\u0027s issue description */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  teamResponseError: boolean;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  testerResponseError: boolean;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  parseError: string;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * Formats the text to create space at the end of the user input to prevent any issues with"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   * the markdown interpretation."},{"lineNumber":60,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":61,"author":{"gitId":"-"},"content":"   * Brought over from comment-editor.component.ts"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  static formatText(text: string): string {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    if (text \u003d\u003d\u003d null) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    if (text \u003d\u003d\u003d undefined) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      return undefined;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    const newLinesRegex \u003d /[\\n\\r]/gi;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    const textSplitArray \u003d text.split(newLinesRegex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    if (textSplitArray.filter((split) \u003d\u003e split.trim() !\u003d\u003d \u0027\u0027).length \u003e 0) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      return `${text}\\n\\n`;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      return text;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"   * Processes and cleans a raw issue description obtained from user input."},{"lineNumber":83,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  static updateDescription(description: string): string {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const defaultString \u003d \u0027No details provided by bug reporter.\u0027;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    return Issue.orDefaultString(Issue.formatText(description), defaultString);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"   * Processes and cleans a raw team response obtained from user input."},{"lineNumber":91,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  static updateTeamResponse(teamResponse: string): string {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    const defaultString \u003d \u0027No details provided by team.\u0027;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return Issue.orDefaultString(Issue.formatText(teamResponse), defaultString);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"   * Given two strings, returns the first if it is not an empty string or a false value such as null/undefined."},{"lineNumber":99,"author":{"gitId":"-"},"content":"   * Returns the second string if the first is an empty string."},{"lineNumber":100,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  private static orDefaultString(stringA: string, def: string): string {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    if (!stringA) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      return def;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    return stringA.length !\u003d\u003d 0 ? stringA : def;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  protected constructor(githubIssue: GithubIssue) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /** Basic Fields */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    this.globalId \u003d githubIssue.id;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    this.id \u003d +githubIssue.number;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    this.created_at \u003d moment(githubIssue.created_at).format(\u0027lll\u0027);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    this.title \u003d githubIssue.title;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.hiddenDataInDescription \u003d new HiddenData(githubIssue.body);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.description \u003d Issue.updateDescription(this.hiddenDataInDescription.originalStringWithoutHiddenData);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.githubIssue \u003d githubIssue;"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /** Fields derived from Labels */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    this.severity \u003d githubIssue.findLabel(GithubLabel.LABELS.severity);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    this.type \u003d githubIssue.findLabel(GithubLabel.LABELS.type);"},{"lineNumber":121,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.response \u003d githubIssue.findLabel(GithubLabel.LABELS.response);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    this.duplicated \u003d !!githubIssue.findLabel(GithubLabel.LABELS.duplicated, false);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    this.status \u003d githubIssue.findLabel(GithubLabel.LABELS.status);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    this.pending \u003d githubIssue.findLabel(GithubLabel.LABELS.pending);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"  public static createPhaseBugReportingIssue(githubIssue: GithubIssue): Issue {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    return new Issue(githubIssue);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  public static createPhaseTeamResponseIssue(githubIssue: GithubIssue, teamData: Team): Issue {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    const template \u003d new TeamResponseTemplate(githubIssue.comments);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    issue.teamAssigned \u003d teamData;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    issue.assignees \u003d githubIssue.assignees.map((assignee) \u003d\u003e assignee.login);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    issue.teamResponseError \u003d template.parseFailure;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    issue.parseError \u003d template.parseError;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    issue.issueComment \u003d template.comment;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d template.teamResponse;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    issue.duplicateOf \u003d template.duplicateOf;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    issue.duplicated \u003d issue.duplicateOf !\u003d\u003d undefined \u0026\u0026 issue.duplicateOf !\u003d\u003d null;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  public static createPhaseTesterResponseIssue(githubIssue: GithubIssue): Issue {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    const testerResponseTemplate \u003d new TesterResponseTemplate(githubIssue.comments);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    const teamAcceptedTemplate \u003d new TeamAcceptedTemplate(githubIssue.comments);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    issue.testerResponseError \u003d testerResponseTemplate.parseFailure \u0026\u0026 teamAcceptedTemplate.parseFailure;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    issue.parseError \u003d testerResponseTemplate.parseError;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    issue.teamAccepted \u003d teamAcceptedTemplate.teamAccepted;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    issue.issueComment \u003d testerResponseTemplate.comment;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d testerResponseTemplate.teamResponse;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    issue.testerResponses \u003d testerResponseTemplate.testerResponses;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    issue.testerDisagree \u003d testerResponseTemplate.testerDisagree;"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    issue.teamChosenSeverity \u003d testerResponseTemplate.teamChosenSeverity || null;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    issue.teamChosenType \u003d testerResponseTemplate.teamChosenType || null;"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"  public static createPhaseModerationIssue(githubIssue: GithubIssue, teamData: Team): Issue {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    const issue \u003d new Issue(githubIssue);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    const issueTemplate \u003d new TutorModerationIssueTemplate(githubIssue);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    const todoTemplate \u003d new TutorModerationTodoTemplate(githubIssue.comments);"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    issue.githubComments \u003d githubIssue.comments;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    issue.teamAssigned \u003d teamData;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    issue.description \u003d issueTemplate.description;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    issue.teamResponse \u003d issueTemplate.teamResponse;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    issue.issueDisputes \u003d issueTemplate.disputes;"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    if (todoTemplate.disputesToResolve \u0026\u0026 todoTemplate.comment) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      issue.issueDisputes \u003d todoTemplate.disputesToResolve.map((dispute, i) \u003d\u003e {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        dispute.description \u003d issueTemplate.disputes[i].description;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        return dispute;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      issue.issueComment \u003d todoTemplate.comment;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"   * Creates a new copy of an exact same issue."},{"lineNumber":192,"author":{"gitId":"-"},"content":"   * This would come useful in the event when you want to update the issue but not the actual"},{"lineNumber":193,"author":{"gitId":"-"},"content":"   * state of the application."},{"lineNumber":194,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  clone(phase: Phase): Issue {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    switch (phase) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(this.githubIssue);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTeamResponseIssue(this.githubIssue, this.teamAssigned);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTesterResponseIssue(this.githubIssue);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return Issue.createPhaseModerationIssue(this.githubIssue, this.teamAssigned);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(this.githubIssue);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":211,"author":{"gitId":"-"},"content":"   * Depending on the phase of the peer testing, each phase will have a response associated to them."},{"lineNumber":212,"author":{"gitId":"-"},"content":"   * This function will allow the current instance of issue to retain the state of response of the given `issue`."},{"lineNumber":213,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":214,"author":{"gitId":"-"},"content":"   * @param phase - The phase in which you want to retain your responses."},{"lineNumber":215,"author":{"gitId":"-"},"content":"   * @param issue - The issue which you want your current instance to retain from."},{"lineNumber":216,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  retainResponses(phase: Phase, issue: Issue) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    this.issueComment \u003d issue.issueComment;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    this.githubComments \u003d issue.githubComments;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    switch (phase) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        this.description \u003d issue.description;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        this.teamResponse \u003d issue.teamResponse;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        this.testerResponses \u003d issue.testerResponses;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        this.teamResponse \u003d issue.teamResponse;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        this.issueDisputes \u003d issue.issueDisputes;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":240,"author":{"gitId":"-"},"content":"   * Updates the tester\u0027s responses and team response based on the given githubComment."},{"lineNumber":241,"author":{"gitId":"-"},"content":"   * @param githubComment - A version of githubComment to update the issue with."},{"lineNumber":242,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  updateTesterResponse(githubComment: GithubComment): void {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const template \u003d new TesterResponseTemplate([githubComment]);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    this.issueComment \u003d template.comment;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    this.teamResponse \u003d template.teamResponse;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    this.testerResponses \u003d template.testerResponses;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":251,"author":{"gitId":"-"},"content":"   * Updates the tutor\u0027s resolution of the disputes with a new version of githubComment."},{"lineNumber":252,"author":{"gitId":"-"},"content":"   * @param githubComment - A version of githubComment to update the dispute with."},{"lineNumber":253,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  updateDispute(githubComment: GithubComment): void {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    const todoTemplate \u003d new TutorModerationTodoTemplate([githubComment]);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    this.issueComment \u003d todoTemplate.comment;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    this.issueDisputes \u003d todoTemplate.disputesToResolve.map((dispute, i) \u003d\u003e {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      dispute.description \u003d this.issueDisputes[i].description;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      return dispute;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"  createGithubIssueDescription(): string {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    return `${this.description}\\n${this.hiddenDataInDescription.toString()}`;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#dev-response-phase"},{"lineNumber":268,"author":{"gitId":"-"},"content":"  createGithubTeamResponse(): string {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":270,"author":{"gitId":"-"},"content":"      `# Team\\\u0027s Response\\n${this.teamResponse}\\n` +"},{"lineNumber":271,"author":{"gitId":"-"},"content":"      `## Duplicate status (if any):\\n${this.duplicateOf ? `Duplicate of #${this.duplicateOf}` : `--`}`"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#tutor-moderation"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  createGithubTutorResponse(): string {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    let tutorResponseString \u003d \u0027# Tutor Moderation\\n\\n\u0027;"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    if (this.issueDisputes !\u003d\u003d undefined) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      for (const issueDispute of this.issueDisputes) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        tutorResponseString +\u003d issueDispute.toTutorResponseString();"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    return tutorResponseString;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"  // Template url: https://github.com/CATcher-org/templates#teams-response-1"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  createGithubTesterResponse(): string {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":289,"author":{"gitId":"-"},"content":"      `# Team\\\u0027s Response\\n${this.teamResponse}\\n` +"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      `# Items for the Tester to Verify\\n${this.getTesterResponsesString(this.testerResponses)}`"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":292,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":295,"author":{"gitId":"-"},"content":"   * Gets the number of unresolved disputes in an Issue."},{"lineNumber":296,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  numOfUnresolvedDisputes(): number {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    if (!this.issueDisputes) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"      return 0;"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    return this.issueDisputes.reduce((prev, current) \u003d\u003e prev + Number(!current.isDone()), 0);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"  private getTesterResponsesString(testerResponses: TesterResponse[]): string {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    let testerResponsesString \u003d \u0027\u0027;"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    for (const testerResponse of testerResponses) {"},{"lineNumber":308,"author":{"gitId":"-"},"content":"      testerResponsesString +\u003d testerResponse.toString();"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    return testerResponsesString;"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"export interface Issues {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"  [id: number]: Issue;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"export const SEVERITY_ORDER \u003d { \u0027-\u0027: 0, VeryLow: 1, Low: 2, Medium: 3, High: 4 };"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"export const ISSUE_TYPE_ORDER \u003d { \u0027-\u0027: 0, DocumentationBug: 1, FeatureFlaw: 2, FunctionalityBug: 3 };"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"export enum STATUS {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"  Incomplete \u003d \u0027Incomplete\u0027,"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  Done \u003d \u0027Done\u0027"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"export enum FILTER {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"  NoFilter \u003d \u0027NoFilter\u0027,"},{"lineNumber":329,"author":{"gitId":"-"},"content":"  NoAccess \u003d \u0027NoAccess\u0027,"},{"lineNumber":330,"author":{"gitId":"-"},"content":"  FilterByCreator \u003d \u0027FilterByCreator\u0027,"},{"lineNumber":331,"author":{"gitId":"-"},"content":"  FilterByTeam \u003d \u0027FilterByTeam\u0027,"},{"lineNumber":332,"author":{"gitId":"-"},"content":"  FilterByTeamAssigned \u003d \u0027FilterByTeamAssigned\u0027"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"export const IssuesFilter \u003d {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"  phaseBugReporting: {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    Student: FILTER.FilterByCreator,"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    Tutor: FILTER.NoFilter,"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    Admin: FILTER.NoFilter"},{"lineNumber":340,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":341,"author":{"gitId":"-"},"content":"  phaseTeamResponse: {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    Student: FILTER.FilterByTeam,"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    Tutor: FILTER.FilterByTeamAssigned,"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    Admin: FILTER.NoFilter"},{"lineNumber":345,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":346,"author":{"gitId":"-"},"content":"  phaseTesterResponse: {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    Student: FILTER.NoFilter,"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    Tutor: FILTER.NoAccess,"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    Admin: FILTER.NoFilter"},{"lineNumber":350,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":351,"author":{"gitId":"-"},"content":"  phaseModeration: {"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    Student: FILTER.NoAccess,"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    Tutor: FILTER.FilterByTeamAssigned,"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    Admin: FILTER.NoFilter"},{"lineNumber":355,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":356,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":354}},{"path":"src/app/core/models/templates/section-parsers/issue-dispute-section-parser.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../../issue-dispute.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"const { coroutine, everyCharUntil, optionalWhitespace, str } \u003d require(\u0027arcsecond\u0027);"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"const SECTION_TITLE_PREFIX \u003d \u0027## :question: \u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"const TEAM_SAYS_HEADER \u003d \u0027### Team says:\u0027;"},{"lineNumber":7,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"const LINE_SEPARATOR \u003d \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const IssueDisputeSectionParser \u003d coroutine(function* () {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  yield str(SECTION_TITLE_PREFIX);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  const title \u003d yield everyCharUntil(str(TEAM_SAYS_HEADER));"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  const description \u003d yield everyCharUntil(str(LINE_SEPARATOR));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  yield str(LINE_SEPARATOR);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  yield optionalWhitespace;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  return new IssueDispute(title.trim(), description.trim());"},{"lineNumber":18,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":17}},{"path":"src/app/core/models/templates/section-parsers/moderation-section-parser.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Checkbox } from \u0027../../checkbox.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../../issue-dispute.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { buildCheckboxParser } from \u0027./common-parsers.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"const { coroutine, everyCharUntil, lookAhead, optionalWhitespace, str, whitespace } \u003d require(\u0027arcsecond\u0027);"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const SECTION_TITLE_PREFIX \u003d \u0027## :question: \u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"const DONE_CHECKBOX_DESCRIPTION \u003d \u0027Done\u0027;"},{"lineNumber":9,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"const LINE_SEPARATOR \u003d \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const DoneCheckboxParser \u003d buildCheckboxParser(DONE_CHECKBOX_DESCRIPTION);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const ModerationSectionParser \u003d coroutine(function* () {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  yield str(SECTION_TITLE_PREFIX);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  const title \u003d yield everyCharUntil(str(\u0027- [\u0027)); // every char until the done checkbox"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  const description \u003d yield lookAhead(everyCharUntil(str(LINE_SEPARATOR)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  const doneCheckboxValue \u003d yield DoneCheckboxParser;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  const tutorResponse \u003d yield everyCharUntil(str(LINE_SEPARATOR));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  yield str(LINE_SEPARATOR);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  yield optionalWhitespace;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  const dispute \u003d new IssueDispute(title.trim(), description.trim());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  dispute.todo \u003d new Checkbox(DONE_CHECKBOX_DESCRIPTION, doneCheckboxValue);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  dispute.tutorResponse \u003d tutorResponse.trim();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  return dispute;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":29}},{"path":"src/app/core/models/templates/section-parsers/tester-response-section-parser.model.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { buildCheckboxParser } from \u0027./common-parsers.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"const {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  between,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  coroutine,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  everyCharUntil,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  letters,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  lookAhead,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  optionalWhitespace,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  pipeParsers,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  possibly,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  str,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  whitespace"},{"lineNumber":14,"author":{"gitId":"-"},"content":"} \u003d require(\u0027arcsecond\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"const SECTION_TITLE_PREFIX \u003d \u0027## :question: Issue \u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"const TEAM_CHOSE_PREFIX \u003d \u0027Team chose \u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"const TESTER_CHOSE_PREFIX \u003d \u0027Originally \u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"const DISAGREE_CHECKBOX_DESCRIPTION \u003d \u0027I disagree\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"const DISAGREEMENT_REASON_PREFIX \u003d \u0027**Reason for disagreement:** \u0027;"},{"lineNumber":21,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"const LINE_SEPARATOR \u003d \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"const DUPLICATE_STATUS_MESSAGE \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \"Team chose to mark this issue as a duplicate of another issue (as explained in the _**Team\u0027s response**_ above)\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"export const DisagreeCheckboxParser \u003d buildCheckboxParser(DISAGREE_CHECKBOX_DESCRIPTION);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"function buildExtractResponseParser(category: string) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  return between(str(\u0027[`\u0027 + category + \u0027.\u0027))(str(\u0027`]\u0027))(letters);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"function buildTeamResponseParser(category: string) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  const extractResponseParser \u003d buildExtractResponseParser(category);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  return pipeParsers([str(TEAM_CHOSE_PREFIX), extractResponseParser]);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"function buildTesterResponseParser(category: string) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  const extractResponseParser \u003d buildExtractResponseParser(category);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  return pipeParsers([str(TESTER_CHOSE_PREFIX), extractResponseParser]);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"export const DisagreeReasonParser \u003d coroutine(function* () {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  yield str(DISAGREEMENT_REASON_PREFIX);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  const reasonForDisagreement \u003d yield everyCharUntil(str(LINE_SEPARATOR));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  yield str(LINE_SEPARATOR);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  return reasonForDisagreement.trim();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"});"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"// Issue duplicate section has a different format than the other three"},{"lineNumber":52,"author":{"gitId":"-"},"content":"const DuplicateSectionParser \u003d coroutine(function* () {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  yield str(\u0027status\u0027);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  yield str(DUPLICATE_STATUS_MESSAGE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  const disagreeCheckboxValue \u003d yield DisagreeCheckboxParser;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  const reasonForDisagreement \u003d yield DisagreeReasonParser;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  return {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    disagreeCheckboxValue: disagreeCheckboxValue,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    reasonForDisagreement: reasonForDisagreement"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":66,"author":{"gitId":"-"},"content":"});"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"export const TesterResponseSectionParser \u003d coroutine(function* () {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  // section title"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  yield str(SECTION_TITLE_PREFIX);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  const title \u003d yield letters;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  if (title \u003d\u003d\u003d \u0027duplicate\u0027) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    const dupSectionResult \u003d yield DuplicateSectionParser;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    yield optionalWhitespace;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    return {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      title: title + \u0027 status\u0027,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      description: DUPLICATE_STATUS_MESSAGE,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      teamChose: null,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      testerChose: null,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      disagreeCheckboxValue: dupSectionResult.disagreeCheckboxValue,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      reasonForDisagreement: dupSectionResult.reasonForDisagreement"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  const description \u003d yield lookAhead(everyCharUntil(DisagreeCheckboxParser));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  // team and tester response"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  const teamResponseParser \u003d buildTeamResponseParser(title);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  const testerResponseParser \u003d buildTesterResponseParser(title);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  const teamChose \u003d yield teamResponseParser;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  // response section does not have tester response"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  const testerChose \u003d yield possibly(testerResponseParser);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  yield optionalWhitespace;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  const disagreeCheckboxValue \u003d yield DisagreeCheckboxParser;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  yield whitespace;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  const reasonForDisagreement \u003d yield DisagreeReasonParser;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  yield optionalWhitespace;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  return {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    title: title,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    description: description.trim(),"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    teamChose: teamChose,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    testerChose: testerChose,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    disagreeCheckboxValue: disagreeCheckboxValue,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    reasonForDisagreement: reasonForDisagreement"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":113,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":112}},{"path":"src/app/core/services/auth.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { BehaviorSubject } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { generateSessionId } from \u0027../../shared/lib/session\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../shared/lib/uuid\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027./githubevent.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./issue.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"export enum AuthState {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u0027NotAuthenticated\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u0027AwaitingAuthentication\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u0027ConfirmOAuthUser\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u0027Authenticated\u0027"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"})"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Responsible for initiating the authentication process and querying or"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * updating the application state with regards to authentication."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"export class AuthService {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  authStateSource \u003d new BehaviorSubject(AuthState.NotAuthenticated);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  currentAuthState \u003d this.authStateSource.asObservable();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  accessToken \u003d new BehaviorSubject(undefined);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private state: string;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  ENABLE_POPUP_MESSAGE \u003d \u0027Please enable pop-ups in your browser\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private electronService: ElectronService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private ngZone: NgZone,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private dataService: DataService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private titleService: Title,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   * Will store the OAuth token."},{"lineNumber":57,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(token: string) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.githubService.storeOAuthAccessToken(token);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.accessToken.next(token);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":64,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(\u0027AuthService: Clearing access token and setting AuthState to NotAuthenticated.\u0027);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.accessToken.next(undefined);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.ngZone.run(() \u003d\u003e this.router.navigate([\u0027\u0027]));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  logOut(): void {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    this.userService.reset();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.issueService.reset(true);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    this.phaseService.reset();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.dataService.reset();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    this.githubEventService.reset();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.logger.reset();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    this.setLandingPageTitle();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(\u0027All Teams\u0027);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    this.reset();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  setTitleWithPhaseDetail(): void {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version} - ${this.phaseService.getPhaseDetail()}`;"},{"lineNumber":86,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`AuthService: Setting Title as ${title}`);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  setLandingPageTitle(): void {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../package.json\u0027);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version}`;"},{"lineNumber":93,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`AuthService: Setting LandingPageTitle as ${title}`);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  isAuthenticated(): boolean {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    return this.authStateSource.getValue() \u003d\u003d\u003d AuthState.Authenticated;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"  changeAuthState(newAuthState: AuthState) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    if (newAuthState \u003d\u003d\u003d AuthState.Authenticated) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      const sessionId \u003d generateSessionId();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      this.issueService.setSessionId(sessionId);"},{"lineNumber":105,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.info(`AuthService: Successfully authenticated with session: ${sessionId}`);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    this.authStateSource.next(newAuthState);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Generates and assigns an unguessable random \u0027state\u0027 string to pass to Github for protection against cross-site request forgery attacks"},{"lineNumber":112,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  generateStateString() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    this.state \u003d uuid();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    sessionStorage.setItem(\u0027state\u0027, this.state);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  isReturnedStateSame(returnedState: string): boolean {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const state \u003d sessionStorage.getItem(\u0027state\u0027);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    return returnedState \u003d\u003d\u003d state;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"   * Will start the Github OAuth web flow process."},{"lineNumber":125,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  startOAuthProcess() {"},{"lineNumber":127,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(\u0027AuthService: Starting authentication\u0027);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    const githubRepoPermission \u003d this.phaseService.githubRepoPermissionLevel();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.AwaitingAuthentication);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    if (this.electronService.isElectron()) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      this.electronService.sendIpcMessage(\u0027github-oauth\u0027, githubRepoPermission);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      this.generateStateString();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      this.redirectToOAuthPage("},{"lineNumber":136,"author":{"gitId":"-"},"content":"        encodeURI("},{"lineNumber":137,"author":{"gitId":"-"},"content":"          `${AppConfig.githubUrl}/login/oauth/authorize?client_id\u003d${AppConfig.clientId}\u0026scope\u003d${githubRepoPermission},read:user\u0026state\u003d${this.state}`"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":140,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.info(\u0027AuthService: Redirecting for Github authentication\u0027);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   * Will redirect to GitHub OAuth page"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  private redirectToOAuthPage(url: string): void {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    if (url \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    window.location.href \u003d url;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":6,"-":147}},{"path":"src/app/core/services/dialog.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { FormGroup } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { LabelDefinitionPopupComponent } from \u0027../../shared/label-definition-popup/label-definition-popup.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserConfirmationComponent } from \u0027../guards/user-confirmation/user-confirmation.component\u0027;"},{"lineNumber":6,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { Issue } from \u0027../models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":"})"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class DialogService {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  constructor(private dialog: MatDialog) {}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  openUserConfirmationModal(messages: string[], yesButtonMessage: string, noButtonMessage: string) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    return this.dialog.open(UserConfirmationComponent, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      data: {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        messages: messages,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        yesMessage: yesButtonMessage,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        noMessage: noButtonMessage"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  openLabelDefinitionDialog(labelName: String, labelDefinition: String) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    return this.dialog.open(LabelDefinitionPopupComponent, {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      data: {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        header: labelName,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        body: labelDefinition"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":32,"author":{"gitId":"vigneshsankariyer1234567890"},"content":""},{"lineNumber":33,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  checkIfFieldIsModified(form: FormGroup, initialField: string, formField: string, issue: Issue) {"},{"lineNumber":34,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const issueTitleInitialValue \u003d issue[initialField] || \u0027\u0027;"},{"lineNumber":35,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const isModified \u003d form.get(formField).value !\u003d\u003d issueTitleInitialValue;"},{"lineNumber":36,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    return isModified;"},{"lineNumber":37,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"vigneshsankariyer1234567890"},"content":""},{"lineNumber":39,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  performActionIfModified(isModified: boolean, actionIfModified: () \u003d\u003e void, actionIfNotModified: () \u003d\u003e void) {"},{"lineNumber":40,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    if (isModified) {"},{"lineNumber":41,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      // if the field has been edited, request user to confirm the cancellation"},{"lineNumber":42,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      actionIfModified();"},{"lineNumber":43,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    } else {"},{"lineNumber":44,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      // if no changes have been made, simply cancel edit mode without getting confirmation"},{"lineNumber":45,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      actionIfNotModified();"},{"lineNumber":46,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":18,"-":30}},{"path":"src/app/core/services/error-handling.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ErrorHandler, Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatSnackBar } from \u0027@angular/material/snack-bar\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { RequestError } from \u0027@octokit/request-error\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { FormErrorComponent } from \u0027../../shared/error-toasters/form-error/form-error.component\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GeneralMessageErrorComponent } from \u0027../../shared/error-toasters/general-message-error/general-message-error.component\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const ERRORCODE_NOT_FOUND \u003d 404;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"const FILTERABLE \u003d [\u0027node_modules\u0027];"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class ErrorHandlingService implements ErrorHandler {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  constructor(private snackBar: MatSnackBar, private logger: LoggingService) {}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  handleError(error: HttpErrorResponse | Error | RequestError, actionCallback?: () \u003d\u003e void) {"},{"lineNumber":20,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.error(\u0027ErrorHandlingService: \u0027 + error);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    if (error instanceof Error) {"},{"lineNumber":22,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.debug(\u0027ErrorHandlingService: \u0027 + this.cleanStack(error.stack));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    if (error instanceof HttpErrorResponse) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      this.handleHttpError(error, actionCallback);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    } else if (error.constructor.name \u003d\u003d\u003d \u0027RequestError\u0027) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      this.handleHttpError(error as RequestError, actionCallback);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    } else if (typeof error \u003d\u003d\u003d \u0027string\u0027) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      this.handleGeneralError(error);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      this.handleGeneralError(error.message || JSON.stringify(error));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private cleanStack(stacktrace: string): string {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    return stacktrace"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      .split(\u0027\\n\u0027)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      .filter((line) \u003d\u003e !FILTERABLE.some((word) \u003d\u003e line.includes(word))) // exclude lines that contain words in FILTERABLE"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      .join(\u0027\\n\u0027);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  // Ref: https://docs.github.com/en/rest/overview/resources-in-the-rest-api#client-errors"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  private handleHttpError(error: HttpErrorResponse | RequestError, actionCallback?: () \u003d\u003e void): void {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // Angular treats 304 Not Modified as an error, we will ignore it."},{"lineNumber":45,"author":{"gitId":"-"},"content":"    if (error.status \u003d\u003d\u003d 304) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    if (!navigator.onLine) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      this.handleGeneralError(\u0027No Internet Connection\u0027);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    switch (error.status) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      case 500: // Internal Server Error."},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(GeneralMessageErrorComponent, { data: error });"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      case 422: // Form errors"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(FormErrorComponent, { data: error });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      case 400: // Bad request"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      case 401: // Unauthorized"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      case 404: // Not found"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(GeneralMessageErrorComponent, { data: error });"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.snackBar.openFromComponent(GeneralMessageErrorComponent, { data: error });"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  private handleGeneralError(error: string): void {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.snackBar.openFromComponent(GeneralMessageErrorComponent, { data: { message: error } });"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  clearError() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.snackBar.dismiss();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":77}},{"path":"src/app/core/services/github.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Apollo, QueryRef } from \u0027apollo-angular\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { ApolloQueryResult } from \u0027apollo-client\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { DocumentNode } from \u0027graphql\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { forkJoin, from, Observable, of, throwError } from \u0027rxjs\u0027;"},{"lineNumber":7,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { catchError, filter, map, mergeMap, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  FetchIssue,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  FetchIssueQuery,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  FetchIssues,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  FetchIssuesByTeam,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  FetchIssuesByTeamQuery,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  FetchIssuesQuery,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  FetchLabels,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  FetchLabelsQuery"},{"lineNumber":17,"author":{"gitId":"-"},"content":"} from \u0027../../../../graphql/graphql-types\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { getNumberOfPages } from \u0027../../shared/lib/github-paginator-parser\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../models/github-user.model\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { IssueLastModifiedManagerModel } from \u0027../models/github/cache-manager/issue-last-modified-manager.model\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { IssuesCacheManager } from \u0027../models/github/cache-manager/issues-cache-manager.model\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import { GithubGraphqlIssue } from \u0027../models/github/github-graphql.issue\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import { GithubResponse } from \u0027../models/github/github-response.model\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import { GithubRelease } from \u0027../models/github/github.release\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import { SessionData } from \u0027../models/session.model\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import { ERRORCODE_NOT_FOUND, ErrorHandlingService } from \u0027./error-handling.service\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"const { Octokit } \u003d require(\u0027@octokit/rest\u0027);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"const CATCHER_ORG \u003d \u0027CATcher-org\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"const CATCHER_REPO \u003d \u0027CATcher\u0027;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"const UNABLE_TO_OPEN_IN_BROWSER \u003d \u0027Unable to open this issue in Browser\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"let ORG_NAME \u003d \u0027\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"let MOD_ORG \u003d \u0027\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"let REPO \u003d \u0027\u0027;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"let DATA_REPO \u003d \u0027\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"const MAX_ITEMS_PER_PAGE \u003d 100;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"let octokit \u003d new Octokit();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"})"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":54,"author":{"gitId":"-"},"content":" * Responsible for communicating with GitHub to create, update, read and delete"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * features related to Github using GitHub API Requests."},{"lineNumber":56,"author":{"gitId":"-"},"content":" * For example, issues, issue labels and repositories."},{"lineNumber":57,"author":{"gitId":"-"},"content":" */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"export class GithubService {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  private static readonly IF_NONE_MATCH_EMPTY \u003d { \u0027If-None-Match\u0027: \u0027\u0027 };"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  private issuesCacheManager \u003d new IssuesCacheManager();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  private issuesLastModifiedManager \u003d new IssueLastModifiedManagerModel();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  private issueQueryRefs \u003d new Map\u003cNumber, QueryRef\u003cFetchIssueQuery\u003e\u003e();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private apollo: Apollo,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private electronService: ElectronService,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(accessToken: string) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    octokit \u003d new Octokit({"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      auth() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return `Token ${accessToken}`;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      log: {"},{"lineNumber":78,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        debug: (message, ...otherInfo) \u003d\u003e this.logger.debug(\u0027GithubService: \u0027 + message, ...otherInfo),"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Do not log info for HTTP response 304 due to repeated polling"},{"lineNumber":80,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        info: (message, ...otherInfo) \u003d\u003e"},{"lineNumber":81,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          /304 in \\d+ms$/.test(message) ? undefined : this.logger.info(\u0027GithubService: \u0027 + message, ...otherInfo),"},{"lineNumber":82,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        warn: (message, ...otherInfo) \u003d\u003e this.logger.warn(\u0027GithubService: \u0027 + message, ...otherInfo),"},{"lineNumber":83,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        error: (message, ...otherInfo) \u003d\u003e this.logger.error(\u0027GithubService: \u0027 + message, ...otherInfo)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  storeOrganizationDetails(orgName: string, dataRepo: string) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    MOD_ORG \u003d orgName;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    DATA_REPO \u003d dataRepo;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  storePhaseDetails(phaseRepoOwner: string, repoName: string) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    REPO \u003d repoName;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    ORG_NAME \u003d phaseRepoOwner;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"   * Fetches an array of filtered GitHubIssues using GraphQL query for a given team."},{"lineNumber":100,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":101,"author":{"gitId":"-"},"content":"   * @param tutorial - The tutorial that the team belongs to."},{"lineNumber":102,"author":{"gitId":"-"},"content":"   * @param team - The team\u0027s designated name."},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * @param issuesFilter - The issue filter."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @returns An observable array of filtered GithubIssues"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  fetchIssuesGraphqlByTeam(tutorial: string, team: string, issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":109,"author":{"gitId":"-"},"content":"      filter((toFetch) \u003d\u003e toFetch),"},{"lineNumber":110,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap(() \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return this.fetchGraphqlList\u003cFetchIssuesByTeamQuery, GithubGraphqlIssue\u003e("},{"lineNumber":112,"author":{"gitId":"-"},"content":"          FetchIssuesByTeam,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            owner: ORG_NAME,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            name: REPO,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            filter: {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"              ...graphqlFilter,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"              labels: [...(graphqlFilter.labels ? graphqlFilter.labels : []), team]"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            tutorial"},{"lineNumber":121,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":122,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.label.issues.edges,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"   * Fetches an array of filtered GitHubIssues using GraphQL query."},{"lineNumber":131,"author":{"gitId":"-"},"content":"   * @param issuesFilter - The issue filter."},{"lineNumber":132,"author":{"gitId":"-"},"content":"   * @returns An observable array of filtered GithubIssues"},{"lineNumber":133,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  fetchIssuesGraphql(issuesFilter: RestGithubIssueFilter): Observable\u003cArray\u003cGithubIssue\u003e\u003e {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    const graphqlFilter \u003d issuesFilter.convertToGraphqlFilter();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return this.toFetchIssues(issuesFilter).pipe("},{"lineNumber":137,"author":{"gitId":"-"},"content":"      filter((toFetch) \u003d\u003e toFetch),"},{"lineNumber":138,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap(() \u003d\u003e {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return this.fetchGraphqlList\u003cFetchIssuesQuery, GithubGraphqlIssue\u003e("},{"lineNumber":140,"author":{"gitId":"-"},"content":"          FetchIssues,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"          { owner: ORG_NAME, name: REPO, filter: graphqlFilter },"},{"lineNumber":142,"author":{"gitId":"-"},"content":"          (result) \u003d\u003e result.data.repository.issues.edges,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"          GithubGraphqlIssue"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"   * Checks if there are pages of filtered issues that are not cached in the cache model,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   * and updates the model to cache these new pages."},{"lineNumber":152,"author":{"gitId":"-"},"content":"   * @param filter - The issue filter."},{"lineNumber":153,"author":{"gitId":"-"},"content":"   * @returns Observable\u003cboolean\u003e that returns true if there are pages that do not exist in the cache model."},{"lineNumber":154,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  private toFetchIssues(filter: RestGithubIssueFilter): Observable\u003cboolean\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    let responseInFirstPage: GithubResponse\u003cGithubIssue[]\u003e;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    return this.getIssuesAPICall(filter, 1).pipe("},{"lineNumber":158,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue[]\u003e) \u003d\u003e {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        responseInFirstPage \u003d response;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return getNumberOfPages(response);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":162,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((numOfPages: number) \u003d\u003e {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        const apiCalls: Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e[] \u003d [];"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        for (let i \u003d 2; i \u003c\u003d numOfPages; i++) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"          apiCalls.push(this.getIssuesAPICall(filter, i));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return apiCalls.length \u003d\u003d\u003d 0 ? of([]) : forkJoin(apiCalls);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      map((resultArray: GithubResponse\u003cGithubIssue[]\u003e[]) \u003d\u003e {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        const responses \u003d [responseInFirstPage, ...resultArray];"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        const isCached \u003d responses.reduce((result, response) \u003d\u003e {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"          return result \u0026\u0026 response.isCached;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }, true);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        responses.forEach((resp, index) \u003d\u003e this.issuesCacheManager.set(index + 1, resp));"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return !isCached;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"   * Checks if the specified repository exists."},{"lineNumber":182,"author":{"gitId":"-"},"content":"   * @param owner - Owner of Specified Repository."},{"lineNumber":183,"author":{"gitId":"-"},"content":"   * @param repo - Name of Repository."},{"lineNumber":184,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  isRepositoryPresent(owner: string, repo: string): Observable\u003cboolean\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    return from(octokit.repos.get({ owner: owner, repo: repo, headers: GithubService.IF_NONE_MATCH_EMPTY })).pipe("},{"lineNumber":187,"author":{"gitId":"-"},"content":"      map((rawData: { status: number }) \u003d\u003e {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return rawData.status !\u003d\u003d ERRORCODE_NOT_FOUND;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return of(false);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch repo data.\u0027))"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"   * Creates a repository in for the authenticated user location."},{"lineNumber":199,"author":{"gitId":"-"},"content":"   * @param name - Name of Repo to create."},{"lineNumber":200,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - That returns true if the repository has been successfully"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   *                                created."},{"lineNumber":202,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  createRepository(name: string): void {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    octokit.repos.createForAuthenticatedUser({ name: name });"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"   * Fetches information about an issue using GraphQL."},{"lineNumber":209,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":210,"author":{"gitId":"-"},"content":"   * If the issue is not modified, return a `304 - Not Modified` response."},{"lineNumber":211,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   * @param id - The issue id."},{"lineNumber":213,"author":{"gitId":"-"},"content":"   * @returns Observable\u003cGithubGraphqlIssue\u003e that represents the response object."},{"lineNumber":214,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":215,"author":{"gitId":"-"},"content":"  fetchIssueGraphql(id: number): Observable\u003cGithubGraphqlIssue\u003e {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    if (this.issueQueryRefs.get(id) \u003d\u003d\u003d undefined) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      const newQueryRef \u003d this.apollo.watchQuery\u003cFetchIssueQuery\u003e({"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        query: FetchIssue,"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        variables: {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"          owner: ORG_NAME,"},{"lineNumber":221,"author":{"gitId":"-"},"content":"          name: REPO,"},{"lineNumber":222,"author":{"gitId":"-"},"content":"          issueId: id"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      this.issueQueryRefs.set(id, newQueryRef);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    const queryRef \u003d this.issueQueryRefs.get(id);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    return this.toFetchIssue(id).pipe("},{"lineNumber":230,"author":{"gitId":"-"},"content":"      filter((toFetch) \u003d\u003e toFetch),"},{"lineNumber":231,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap(() \u003d\u003e from(queryRef.refetch())),"},{"lineNumber":232,"author":{"gitId":"-"},"content":"      map((value: ApolloQueryResult\u003cFetchIssueQuery\u003e) \u003d\u003e {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return new GithubGraphqlIssue(value.data.repository.issue);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e new HttpErrorResponse({ status: 304 }))"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":240,"author":{"gitId":"-"},"content":"   * Checks if the issue has been modified since the last query, and"},{"lineNumber":241,"author":{"gitId":"-"},"content":"   * updates the model to reflect the last modified time."},{"lineNumber":242,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   * @param id - The issue id."},{"lineNumber":244,"author":{"gitId":"-"},"content":"   * @returns Observable\u003cboolean\u003e that returns true if the issue has been modified."},{"lineNumber":245,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  toFetchIssue(id: number): Observable\u003cboolean\u003e {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":248,"author":{"gitId":"-"},"content":"      octokit.issues.get({"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        owner: ORG_NAME,"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        repo: REPO,"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        issue_number: id,"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        headers: { \u0027If-Modified-Since\u0027: this.issuesLastModifiedManager.get(id) }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":255,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch issue.\u0027))"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":264,"author":{"gitId":"-"},"content":"   * Fetches all labels in the current repository."},{"lineNumber":265,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  fetchAllLabels(): Observable\u003cArray\u003cGithubLabel\u003e\u003e {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    const githubLabels \u003d this.fetchGraphqlList\u003cFetchLabelsQuery, GithubLabel\u003e("},{"lineNumber":268,"author":{"gitId":"-"},"content":"      FetchLabels,"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      { owner: ORG_NAME, name: REPO },"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      (result) \u003d\u003e result.data.repository.labels.edges,"},{"lineNumber":271,"author":{"gitId":"-"},"content":"      GithubLabel"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    return githubLabels.pipe(catchError((err) \u003d\u003e throwError(\u0027Failed to fetch labels.\u0027)));"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":278,"author":{"gitId":"-"},"content":"   * Creates a label in the current repository."},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * @param formattedLabelName - name of new label."},{"lineNumber":280,"author":{"gitId":"-"},"content":"   * @param labelColor - colour of new label."},{"lineNumber":281,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  createLabel(formattedLabelName: string, labelColor: string): void {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    octokit.issues.createLabel({ owner: ORG_NAME, repo: REPO, name: formattedLabelName, color: labelColor });"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":287,"author":{"gitId":"-"},"content":"   * Updates a label\u0027s information in the current repository."},{"lineNumber":288,"author":{"gitId":"-"},"content":"   * @param labelName - name of existing label"},{"lineNumber":289,"author":{"gitId":"-"},"content":"   * @param labelColor - new color to be assigned to existing label."},{"lineNumber":290,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":291,"author":{"gitId":"-"},"content":"  updateLabel(labelName: string, labelColor: string): void {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    octokit.issues.updateLabel({ owner: ORG_NAME, repo: REPO, name: labelName, current_name: labelName, color: labelColor });"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":"  closeIssue(id: number): Observable\u003cGithubIssue\u003e {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({ owner: ORG_NAME, repo: REPO, issue_number: id, state: \u0027closed\u0027 })).pipe("},{"lineNumber":297,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":302,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"  reopenIssue(id: number): Observable\u003cGithubIssue\u003e {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    return from(octokit.issues.update({ owner: ORG_NAME, repo: REPO, issue_number: id, state: \u0027open\u0027 })).pipe("},{"lineNumber":306,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, labels: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    return from(octokit.issues.create({ owner: ORG_NAME, repo: REPO, title: title, body: description, labels: labels })).pipe("},{"lineNumber":315,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":319,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"  createIssueComment(issueId: number, description: string): Observable\u003cGithubComment\u003e {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    return from(octokit.issues.createComment({ owner: ORG_NAME, repo: REPO, issue_number: issueId, body: description })).pipe("},{"lineNumber":323,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        return response.data;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":327,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"  updateIssue(id: number, title: string, description: string, labels: string[], assignees?: string[]): Observable\u003cGithubIssue\u003e {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":331,"author":{"gitId":"-"},"content":"      octokit.issues.update({"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        owner: ORG_NAME,"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        repo: REPO,"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        issue_number: id,"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        title: title,"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        body: description,"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        labels: labels,"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        assignees: assignees"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":341,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubIssue\u003e) \u003d\u003e {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        this.issuesLastModifiedManager.set(id, response.headers[\u0027last-modified\u0027]);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        return new GithubIssue(response.data);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        return throwError(err);"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":349,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"  updateIssueComment(issueComment: IssueComment): Observable\u003cGithubComment\u003e {"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":353,"author":{"gitId":"-"},"content":"      octokit.issues.updateComment({ owner: ORG_NAME, repo: REPO, comment_id: issueComment.id, body: issueComment.description })"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":355,"author":{"gitId":"-"},"content":"      map((response: GithubResponse\u003cGithubComment\u003e) \u003d\u003e {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        return response.data;"},{"lineNumber":357,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":359,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"  uploadFile(filename: string, base64String: string): Observable\u003cany\u003e {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":363,"author":{"gitId":"-"},"content":"      octokit.repos.createOrUpdateFile({"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        owner: ORG_NAME,"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        repo: REPO,"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        path: `files/${filename}`,"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        message: \u0027upload file\u0027,"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        content: base64String"},{"lineNumber":369,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":371,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"  fetchEventsForRepo(): Observable\u003cany[]\u003e {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    return from(octokit.issues.listEventsForRepo({ owner: ORG_NAME, repo: REPO, headers: GithubService.IF_NONE_MATCH_EMPTY })).pipe("},{"lineNumber":375,"author":{"gitId":"-"},"content":"      map((response) \u003d\u003e {"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":377,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":378,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch events for repo.\u0027))"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":380,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"  fetchDataFile(): Observable\u003c{}\u003e {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":384,"author":{"gitId":"-"},"content":"      octokit.repos.getContents({ owner: MOD_ORG, repo: DATA_REPO, path: \u0027data.csv\u0027, headers: GithubService.IF_NONE_MATCH_EMPTY })"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":386,"author":{"gitId":"-"},"content":"      map((rawData) \u003d\u003e {"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        return { data: atob(rawData[\u0027data\u0027][\u0027content\u0027]) };"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":389,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch data file.\u0027))"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":391,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"  fetchLatestRelease(): Observable\u003cGithubRelease\u003e {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":395,"author":{"gitId":"-"},"content":"      octokit.repos.getLatestRelease({ owner: CATCHER_ORG, repo: CATCHER_REPO, headers: GithubService.IF_NONE_MATCH_EMPTY })"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":397,"author":{"gitId":"-"},"content":"      map((res) \u003d\u003e res[\u0027data\u0027]),"},{"lineNumber":398,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch latest release.\u0027))"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":400,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":403,"author":{"gitId":"-"},"content":"   * Fetches the data file that is regulates session information."},{"lineNumber":404,"author":{"gitId":"-"},"content":"   * @return Observable\u003cSessionData\u003e representing session information."},{"lineNumber":405,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":406,"author":{"gitId":"-"},"content":"  fetchSettingsFile(): Observable\u003cSessionData\u003e {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    return from("},{"lineNumber":408,"author":{"gitId":"-"},"content":"      octokit.repos.getContents({ owner: MOD_ORG, repo: DATA_REPO, path: \u0027settings.json\u0027, headers: GithubService.IF_NONE_MATCH_EMPTY })"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    ).pipe("},{"lineNumber":410,"author":{"gitId":"-"},"content":"      map((rawData) \u003d\u003e JSON.parse(atob(rawData[\u0027data\u0027][\u0027content\u0027]))),"},{"lineNumber":411,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch settings file.\u0027))"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":413,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"  fetchAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    return from(octokit.users.getAuthenticated()).pipe("},{"lineNumber":417,"author":{"gitId":"-"},"content":"      map((response) \u003d\u003e {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        return response[\u0027data\u0027];"},{"lineNumber":419,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":420,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e throwError(\u0027Failed to fetch authenticated user.\u0027))"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":422,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"  getRepoURL(): string {"},{"lineNumber":425,"author":{"gitId":"-"},"content":"    return ORG_NAME.concat(\u0027/\u0027).concat(REPO);"},{"lineNumber":426,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"  viewIssueInBrowser(id: number, event: Event) {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    if (id) {"},{"lineNumber":430,"author":{"gitId":"-"},"content":"      this.electronService.openLink(\u0027https://github.com/\u0027.concat(this.getRepoURL()).concat(\u0027/issues/\u0027).concat(String(id)));"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(new Error(UNABLE_TO_OPEN_IN_BROWSER));"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":435,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":438,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`GithubService: Resetting issues cache`);"},{"lineNumber":439,"author":{"gitId":"-"},"content":"    this.issuesCacheManager.clear();"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    this.issuesLastModifiedManager.clear();"},{"lineNumber":441,"author":{"gitId":"-"},"content":"    this.issueQueryRefs.clear();"},{"lineNumber":442,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"  getProfilesData(): Promise\u003cResponse\u003e {"},{"lineNumber":445,"author":{"gitId":"-"},"content":"    return fetch(AppConfig.clientDataUrl);"},{"lineNumber":446,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":449,"author":{"gitId":"-"},"content":"   * Performs an API call to fetch a page of filtered issues with a given pageNumber."},{"lineNumber":450,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":451,"author":{"gitId":"-"},"content":"   * The request is sent with the ETag of the latest cached HTTP response."},{"lineNumber":452,"author":{"gitId":"-"},"content":"   * If page requested has the same ETag, or the request results in an error,"},{"lineNumber":453,"author":{"gitId":"-"},"content":"   * then the cached page is returned instead."},{"lineNumber":454,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":455,"author":{"gitId":"-"},"content":"   * @param filter - The issue filter"},{"lineNumber":456,"author":{"gitId":"-"},"content":"   * @param pageNumber - The page to be fetched"},{"lineNumber":457,"author":{"gitId":"-"},"content":"   * @returns An observable representing the response containing a single page of filtered issues"},{"lineNumber":458,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":459,"author":{"gitId":"-"},"content":"  private getIssuesAPICall(filter: RestGithubIssueFilter, pageNumber: number): Observable\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    const apiCall: Promise\u003cGithubResponse\u003cGithubIssue[]\u003e\u003e \u003d octokit.issues.listForRepo({"},{"lineNumber":461,"author":{"gitId":"-"},"content":"      ...filter,"},{"lineNumber":462,"author":{"gitId":"-"},"content":"      owner: ORG_NAME,"},{"lineNumber":463,"author":{"gitId":"-"},"content":"      repo: REPO,"},{"lineNumber":464,"author":{"gitId":"-"},"content":"      sort: \u0027created\u0027,"},{"lineNumber":465,"author":{"gitId":"-"},"content":"      direction: \u0027desc\u0027,"},{"lineNumber":466,"author":{"gitId":"-"},"content":"      per_page: MAX_ITEMS_PER_PAGE,"},{"lineNumber":467,"author":{"gitId":"-"},"content":"      page: pageNumber,"},{"lineNumber":468,"author":{"gitId":"-"},"content":"      headers: { \u0027If-None-Match\u0027: this.issuesCacheManager.getEtagFor(pageNumber) }"},{"lineNumber":469,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    const apiCall$ \u003d from(apiCall);"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    return apiCall$.pipe("},{"lineNumber":472,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        return of(this.issuesCacheManager.get(pageNumber));"},{"lineNumber":474,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":476,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":479,"author":{"gitId":"-"},"content":"   * Fetches a list of items using a GraphQL query that queries for paginated data."},{"lineNumber":480,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":481,"author":{"gitId":"-"},"content":"   * @param query - The GraphQL query that queries for paginated data."},{"lineNumber":482,"author":{"gitId":"-"},"content":"   * @param variables - Additional variables for the GraphQL query."},{"lineNumber":483,"author":{"gitId":"-"},"content":"   * @callback pluckEdges A function that returns a list of edges in a ApolloQueryResult."},{"lineNumber":484,"author":{"gitId":"-"},"content":"   * @callback Model Constructor for the item model."},{"lineNumber":485,"author":{"gitId":"-"},"content":"   * @returns A list of items from the query."},{"lineNumber":486,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":487,"author":{"gitId":"-"},"content":"  private fetchGraphqlList\u003cT, M\u003e("},{"lineNumber":488,"author":{"gitId":"-"},"content":"    query: DocumentNode,"},{"lineNumber":489,"author":{"gitId":"-"},"content":"    variables: {},"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e,"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    Model: new (data) \u003d\u003e M"},{"lineNumber":492,"author":{"gitId":"-"},"content":"  ): Observable\u003cArray\u003cM\u003e\u003e {"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    return from(this.withPagination\u003cT\u003e(pluckEdges)(query, variables)).pipe("},{"lineNumber":494,"author":{"gitId":"-"},"content":"      map((results: Array\u003cApolloQueryResult\u003cT\u003e\u003e) \u003d\u003e {"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        const issues \u003d results.reduce((accumulated, current) \u003d\u003e accumulated.concat(pluckEdges(current)), []);"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        return issues.map((issue) \u003d\u003e new Model(issue.node));"},{"lineNumber":497,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":498,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e {"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        return new HttpErrorResponse({ status: 304 });"},{"lineNumber":500,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":502,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":505,"author":{"gitId":"-"},"content":"   * Returns an async function that will accept a GraphQL query that requests for paginated items."},{"lineNumber":506,"author":{"gitId":"-"},"content":"   * Said function will recursively query for all subsequent pages until a page that has less than 100 items is found,"},{"lineNumber":507,"author":{"gitId":"-"},"content":"   * then return all queried pages in an array."},{"lineNumber":508,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":509,"author":{"gitId":"-"},"content":"   * @callback pluckEdges - A function that returns a list of edges in a ApolloQueryResult."},{"lineNumber":510,"author":{"gitId":"-"},"content":"   * @returns an async function that accepts a GraphQL query for paginated data and any additional variables to that query"},{"lineNumber":511,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":512,"author":{"gitId":"-"},"content":"  private withPagination\u003cT\u003e(pluckEdges: (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e Array\u003cany\u003e) {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"    return async (query: DocumentNode, variables: { [key: string]: any } \u003d {}): Promise\u003cArray\u003cApolloQueryResult\u003cT\u003e\u003e\u003e \u003d\u003e {"},{"lineNumber":514,"author":{"gitId":"-"},"content":"      const cursor \u003d variables.cursor || null;"},{"lineNumber":515,"author":{"gitId":"-"},"content":"      const graphqlQuery \u003d this.apollo.watchQuery\u003cT\u003e({ query, variables: { ...variables, cursor } });"},{"lineNumber":516,"author":{"gitId":"-"},"content":"      return graphqlQuery.refetch().then(async (results: ApolloQueryResult\u003cT\u003e) \u003d\u003e {"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        const intermediate \u003d Array.isArray(results) ? results : [results];"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        const edges \u003d pluckEdges(results);"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        const nextCursor \u003d edges.length \u003d\u003d\u003d 0 ? null : edges[edges.length - 1].cursor;"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"        if (edges.length \u003c MAX_ITEMS_PER_PAGE || !nextCursor) {"},{"lineNumber":522,"author":{"gitId":"-"},"content":"          return intermediate;"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        const nextResults \u003d await this.withPagination\u003cT\u003e(pluckEdges)(query, {"},{"lineNumber":525,"author":{"gitId":"-"},"content":"          ...variables,"},{"lineNumber":526,"author":{"gitId":"-"},"content":"          cursor: nextCursor"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        return intermediate.concat(nextResults);"},{"lineNumber":529,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":530,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":531,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":532,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":11,"-":521}},{"path":"src/app/core/services/githubevent.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027./issue.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"})"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export class GithubEventService {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  private lastModified: string; // The timestamp when the title or label of an issue is changed"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  private lastModifiedComment: string; // The timestamp when the comment of an issue is changed"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private issueService: IssueService) {}"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   * Calls the Github service api to return the latest github event (e.g renaming an issue\u0027s title)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   * of current repository and store the timestamps of the event in this service"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  setLatestChangeEvent(): Observable\u003cany\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    return this.githubService.fetchEventsForRepo().pipe("},{"lineNumber":22,"author":{"gitId":"-"},"content":"      map((response) \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (response.length \u003d\u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          return response;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.setLastModifiedTime(response[0][\u0027created_at\u0027]);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.setLastModifiedCommentTime(response[0][\u0027issue\u0027][\u0027updated_at\u0027]);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return response;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * Returns the result whether the latest github event (e.g renaming an issue\u0027s title)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * of current repository has been retrieved or not."},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * @returns true if the issues were fetched from GitHub."},{"lineNumber":37,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  reloadPage(): Observable\u003cboolean\u003e {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    return this.githubService.fetchEventsForRepo().pipe("},{"lineNumber":40,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((response: any[]) \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (response.length \u003d\u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          return of(false);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        const eventResponse \u003d response[0];"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Will only allow page to reload if the latest modify time is different"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // from last modified, meaning that some changes to the repo has occured."},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (eventResponse[\u0027created_at\u0027] !\u003d\u003d this.lastModified || eventResponse[\u0027issue\u0027][\u0027updated_at\u0027] !\u003d\u003d this.lastModifiedComment) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          this.setLastModifiedTime(eventResponse[\u0027created_at\u0027]);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          this.setLastModifiedCommentTime(eventResponse[\u0027issue\u0027][\u0027updated_at\u0027]);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          return this.issueService.reloadAllIssues().pipe(map((response: any[]) \u003d\u003e true));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return of(false);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  private setLastModifiedTime(lastModified: string): void {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.lastModified \u003d lastModified;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  private setLastModifiedCommentTime(lastModified: string): void {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.lastModifiedComment \u003d lastModified;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.setLastModifiedTime(undefined);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.setLastModifiedCommentTime(undefined);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":67}},{"path":"src/app/core/services/issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { BehaviorSubject, EMPTY, forkJoin, Observable, of, Subscription, throwError, timer } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { catchError, exhaustMap, finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../models/comment.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../models/github/github-comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import RestGithubIssueFilter from \u0027../models/github/github-issue-filter.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../models/github/github-issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027../models/hidden-data.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../models/issue-dispute.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { FILTER, Issue, Issues, IssuesFilter, STATUS } from \u0027../models/issue.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { appVersion } from \u0027./application.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027./electron.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027./phase.service\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":23,"author":{"gitId":"-"},"content":"})"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Responsible for creating and updating issues, and periodically fetching issues"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * using GitHub."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"export class IssueService {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  static readonly POLL_INTERVAL \u003d 5000; // 5 seconds"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  issues: Issues;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  issues$: BehaviorSubject\u003cIssue[]\u003e;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private sessionId: string;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private issueTeamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private issuesPollSubscription: Subscription;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  /** Whether the IssueService is downloading the data from Github*/"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  public isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private electronService: ElectronService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private dataService: DataService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    this.issues$ \u003d new BehaviorSubject(new Array\u003cIssue\u003e());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  startPollIssues() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription \u003d\u003d\u003d undefined) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      if (this.issues$.getValue().length \u003d\u003d\u003d 0) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.isLoading.next(true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d timer(0, IssueService.POLL_INTERVAL)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        .pipe("},{"lineNumber":60,"author":{"gitId":"-"},"content":"          exhaustMap(() \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return this.reloadAllIssues().pipe("},{"lineNumber":62,"author":{"gitId":"-"},"content":"              catchError(() \u003d\u003e {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                return EMPTY;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"              }),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"              finalize(() \u003d\u003e this.isLoading.next(false))"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":67,"author":{"gitId":"-"},"content":"          })"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        .subscribe();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"  stopPollIssues() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription.unsubscribe();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d undefined;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * Will constantly poll and update the application\u0027s state\u0027s with the updated issue."},{"lineNumber":82,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * @param issueId - The issue\u0027s id to poll for."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  pollIssue(issueId: number): Observable\u003cIssue\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    return timer(0, IssueService.POLL_INTERVAL).pipe("},{"lineNumber":87,"author":{"gitId":"-"},"content":"      exhaustMap(() \u003d\u003e {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this.githubService.fetchIssueGraphql(issueId).pipe("},{"lineNumber":89,"author":{"gitId":"-"},"content":"          map((response) \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            const issue \u003d this.createIssueModel(response);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            this.updateLocalStore(issue);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return issue;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          }),"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          catchError((err) \u003d\u003e {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return this.getIssue(issueId);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"          })"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  reloadAllIssues() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    return this.initializeData();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  getIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      return this.getLatestIssue(id);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      return of(this.issues[id]);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  getLatestIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    return this.githubService.fetchIssueGraphql(id).pipe("},{"lineNumber":116,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        this.createAndSaveIssueModel(response);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return this.issues[id];"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return of(this.issues[id]);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, severity: string, type: string): Observable\u003cIssue\u003e {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    const labelsArray \u003d [this.createLabel(\u0027severity\u0027, severity), this.createLabel(\u0027type\u0027, type)];"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    const clientType \u003d this.electronService.isElectron() ? \u0027Desktop\u0027 : \u0027Web\u0027;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    const hiddenData \u003d new Map(["},{"lineNumber":130,"author":{"gitId":"-"},"content":"      [\u0027session\u0027, this.sessionId],"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      [\u0027Version\u0027, `${clientType} v${appVersion}`]"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    ]);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    const issueDescription \u003d HiddenData.embedDataIntoString(description, hiddenData);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      .createIssue(title, issueDescription, labelsArray)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      .pipe(map((response: GithubIssue) \u003d\u003e this.createIssueModel(response)));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  updateIssue(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    const assignees \u003d this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? [] : issue.assignees;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      .updateIssue(issue.id, issue.title, this.createGithubIssueDescription(issue), this.createLabelsForIssue(issue), assignees)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":144,"author":{"gitId":"-"},"content":"        map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"          response.comments \u003d issue.githubComments;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"          return this.createIssueModel(response);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        catchError((err) \u003d\u003e {"},{"lineNumber":149,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          this.logger.error(\u0027IssueService: \u0027, err); // Log full details of error first"},{"lineNumber":150,"author":{"gitId":"-"},"content":"          return throwError(err.response.data.message); // More readable error message"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  updateIssueWithComment(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    return this.githubService.updateIssueComment(issueComment).pipe("},{"lineNumber":157,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((updatedComment: GithubComment) \u003d\u003e {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [updatedComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d updatedComment.id)];"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  updateTesterResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    const isTesterResponseExist \u003d this.issues[issue.id].testerResponses;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    const commentApiToCall \u003d isTesterResponseExist"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      ? this.githubService.updateIssueComment(issueComment)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      : this.githubService.createIssueComment(issue.id, issueComment.description);"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    const issueClone \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    issueClone.status \u003d STATUS.Done;"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    return forkJoin([commentApiToCall, this.updateIssue(issueClone)]).pipe("},{"lineNumber":174,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        issue.updateTesterResponse(githubComment);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  updateTutorResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.updateIssueComment(issueComment), this.updateIssue(issue)]).pipe("},{"lineNumber":184,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  createTeamResponse(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    const teamResponse \u003d issue.createGithubTeamResponse();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    return this.githubService.createIssueComment(issue.id, teamResponse).pipe("},{"lineNumber":195,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((githubComment: GithubComment) \u003d\u003e {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [githubComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d githubComment.id)];"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  createTutorResponse(issue: Issue, response: string): Observable\u003cIssue\u003e {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.createIssueComment(issue.id, response), this.updateIssue(issue)]).pipe("},{"lineNumber":204,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"   * This function will create a github representation of issue\u0027s description. Given the issue model, it will piece together the different"},{"lineNumber":214,"author":{"gitId":"-"},"content":"   * attributes to create the github\u0027s description."},{"lineNumber":215,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  private createGithubIssueDescription(issue: Issue): string {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return ("},{"lineNumber":221,"author":{"gitId":"-"},"content":"          `# Issue Description\\n${issue.createGithubIssueDescription()}\\n# Team\\\u0027s Response\\n${issue.teamResponse}\\n ` +"},{"lineNumber":222,"author":{"gitId":"-"},"content":"          // `## State the duplicated issue here, if any\\n${issue.duplicateOf ? `Duplicate of #${issue.duplicateOf}` : `--`}\\n` +"},{"lineNumber":223,"author":{"gitId":"-"},"content":"          `# Disputes\\n\\n${this.getIssueDisputeString(issue.issueDisputes)}\\n`"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return issue.createGithubIssueDescription();"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"  private getIssueDisputeString(issueDisputes: IssueDispute[]): string {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    let issueDisputeString \u003d \u0027\u0027;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    for (const issueDispute of issueDisputes) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      issueDisputeString +\u003d issueDispute.toString();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    return issueDisputeString;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"  deleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    return this.githubService.closeIssue(id).pipe("},{"lineNumber":240,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        const deletedIssue \u003d this.createIssueModel(response);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        this.deleteFromLocalStore(deletedIssue);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return deletedIssue;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"  undeleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    return this.githubService.reopenIssue(id).pipe("},{"lineNumber":250,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        const reopenedIssue \u003d this.createIssueModel(response);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        this.updateLocalStore(reopenedIssue);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        return reopenedIssue;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":259,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is deleted."},{"lineNumber":260,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  deleteFromLocalStore(issueToDelete: Issue) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    const { [issueToDelete.id]: issueToRemove, ...withoutIssueToRemove } \u003d this.issues;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    this.issues \u003d withoutIssueToRemove;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":268,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is added/updated."},{"lineNumber":269,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  updateLocalStore(issueToUpdate: Issue) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    this.issues \u003d {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      ...this.issues,"},{"lineNumber":273,"author":{"gitId":"-"},"content":"      [issueToUpdate.id]: issueToUpdate"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * Check whether the issue has been responded in the phase 2/3."},{"lineNumber":280,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  hasTeamResponse(issueId: number): boolean {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    return !!this.issues[issueId].teamResponse;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":286,"author":{"gitId":"-"},"content":"   * Obtain an observable containing an array of issues that are duplicates of the parentIssue."},{"lineNumber":287,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":288,"author":{"gitId":"-"},"content":"  getDuplicateIssuesFor(parentIssue: Issue): Observable\u003cIssue[]\u003e {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    return this.issues$.pipe("},{"lineNumber":290,"author":{"gitId":"-"},"content":"      map((issues) \u003d\u003e {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        return issues.filter((issue) \u003d\u003e {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"          return issue.duplicateOf \u003d\u003d\u003d parentIssue.id;"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":294,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":296,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  reset(resetSessionId: boolean) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    if (resetSessionId) {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      this.sessionId \u003d undefined;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    this.issues \u003d undefined;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    this.issues$.next(new Array\u003cIssue\u003e());"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    this.stopPollIssues();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    this.isLoading.complete();"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    this.isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"  private initializeData(): Observable\u003cIssue[]\u003e {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    const issuesAPICallsByFilter: Array\u003cObservable\u003cArray\u003cGithubIssue\u003e\u003e\u003e \u003d [];"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    switch (IssuesFilter[this.phaseService.currentPhase][this.userService.currentUser.role]) {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"      case FILTER.FilterByCreator:"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":317,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphql(new RestGithubIssueFilter({ creator: this.userService.currentUser.loginId }))"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":320,"author":{"gitId":"-"},"content":"      case FILTER.FilterByTeam: // Only student has this filter"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push("},{"lineNumber":322,"author":{"gitId":"-"},"content":"          this.githubService.fetchIssuesGraphqlByTeam("},{"lineNumber":323,"author":{"gitId":"-"},"content":"            this.createLabel(\u0027tutorial\u0027, this.userService.currentUser.team.tutorialClassId),"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            this.createLabel(\u0027team\u0027, this.userService.currentUser.team.teamId),"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            new RestGithubIssueFilter({})"},{"lineNumber":326,"author":{"gitId":"-"},"content":"          )"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"      case FILTER.FilterByTeamAssigned: // Only for Tutors and Admins"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        const allocatedTeams \u003d this.userService.currentUser.allocatedTeams;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        allocatedTeams.forEach((team) \u003d\u003e {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"          issuesAPICallsByFilter.push("},{"lineNumber":333,"author":{"gitId":"-"},"content":"            this.githubService.fetchIssuesGraphqlByTeam("},{"lineNumber":334,"author":{"gitId":"-"},"content":"              this.createLabel(\u0027tutorial\u0027, team.tutorialClassId),"},{"lineNumber":335,"author":{"gitId":"-"},"content":"              this.createLabel(\u0027team\u0027, team.teamId),"},{"lineNumber":336,"author":{"gitId":"-"},"content":"              new RestGithubIssueFilter({})"},{"lineNumber":337,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":338,"author":{"gitId":"-"},"content":"          );"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      case FILTER.NoFilter:"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        issuesAPICallsByFilter.push(this.githubService.fetchIssuesGraphql(new RestGithubIssueFilter({})));"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"      case FILTER.NoAccess:"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        return of([]);"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"    // const issuesAPICallsByFilter \u003d filters.map(filter \u003d\u003e this.githubService.fetchIssuesGraphql(filter));"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    return forkJoin(issuesAPICallsByFilter).pipe("},{"lineNumber":351,"author":{"gitId":"-"},"content":"      map((issuesByFilter: [][]) \u003d\u003e {"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        const fetchedIssueIds: Array\u003cNumber\u003e \u003d [];"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"        for (const issues of issuesByFilter) {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"          for (const issue of issues) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            fetchedIssueIds.push(this.createIssueModel(issue).id);"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            this.createAndSaveIssueModel(issue);"},{"lineNumber":358,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"-"},"content":""},{"lineNumber":361,"author":{"gitId":"-"},"content":"        const outdatedIssueIds: Array\u003cNumber\u003e \u003d this.getOutdatedIssueIds(fetchedIssueIds);"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        this.deleteIssuesFromLocalStore(outdatedIssueIds);"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return Object.values(this.issues);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":367,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"  private createAndSaveIssueModel(githubIssue: GithubIssue): boolean {"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    const issue \u003d this.createIssueModel(githubIssue);"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    this.updateLocalStore(issue);"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    return true;"},{"lineNumber":373,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"  private deleteIssuesFromLocalStore(ids: Array\u003cNumber\u003e): void {"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    ids.forEach((id: number) \u003d\u003e {"},{"lineNumber":377,"author":{"gitId":"-"},"content":"      this.getIssue(id).subscribe((issue) \u003d\u003e this.deleteFromLocalStore(issue));"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":379,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":382,"author":{"gitId":"-"},"content":"   * Returns an array of outdated issue ids by comparing the ids of the recently"},{"lineNumber":383,"author":{"gitId":"-"},"content":"   * fetched issues with the current issue ids in the local store"},{"lineNumber":384,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":385,"author":{"gitId":"-"},"content":"  private getOutdatedIssueIds(fetchedIssueIds: Array\u003cNumber\u003e): Array\u003cNumber\u003e {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":387,"author":{"gitId":"-"},"content":"      Ignore for first fetch or ignore if there is no fetch result"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"      We also have to ignore for no fetch result as the cache might return a"},{"lineNumber":390,"author":{"gitId":"-"},"content":"      304 reponse with no differences in issues, resulting in the fetchIssueIds"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      to be empty"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined || !fetchedIssueIds.length) {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"      return [];"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"    const fetchedIssueIdsSet \u003d new Set\u003cNumber\u003e(fetchedIssueIds);"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"    const result \u003d Object.keys(this.issues)"},{"lineNumber":400,"author":{"gitId":"-"},"content":"      .map((x) \u003d\u003e +x)"},{"lineNumber":401,"author":{"gitId":"-"},"content":"      .filter((issueId) \u003d\u003e !fetchedIssueIdsSet.has(issueId));"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":407,"author":{"gitId":"-"},"content":"   * Given an issue model, create the necessary labels for github."},{"lineNumber":408,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":409,"author":{"gitId":"-"},"content":"  private createLabelsForIssue(issue: Issue): string[] {"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    const result \u003d [];"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase !\u003d\u003d Phase.phaseBugReporting \u0026\u0026 this.phaseService.currentPhase !\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":413,"author":{"gitId":"-"},"content":"      const studentTeam \u003d issue.teamAssigned.id.split(\u0027-\u0027);"},{"lineNumber":414,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027tutorial\u0027, `${studentTeam[0]}-${studentTeam[1]}`), this.createLabel(\u0027team\u0027, studentTeam[2]));"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"    if (issue.severity) {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027severity\u0027, issue.severity));"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"    if (issue.type) {"},{"lineNumber":422,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027type\u0027, issue.type));"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    if (issue.response) {"},{"lineNumber":426,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      result.push(this.createLabel(\u0027response\u0027, issue.response));"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"    if (issue.duplicated) {"},{"lineNumber":430,"author":{"gitId":"-"},"content":"      result.push(\u0027duplicate\u0027);"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"    if (issue.status) {"},{"lineNumber":434,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027status\u0027, issue.status));"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"    if (issue.pending) {"},{"lineNumber":438,"author":{"gitId":"-"},"content":"      if (+issue.pending \u003e 0) {"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        result.push(this.createLabel(\u0027pending\u0027, issue.pending));"},{"lineNumber":440,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":441,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"    if (issue.unsure) {"},{"lineNumber":444,"author":{"gitId":"-"},"content":"      result.push(\u0027unsure\u0027);"},{"lineNumber":445,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":448,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"  private createLabel(prepend: string, value: string) {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    return `${prepend}.${value}`;"},{"lineNumber":452,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"  private extractTeamIdFromGithubIssue(githubIssue: GithubIssue): string {"},{"lineNumber":455,"author":{"gitId":"-"},"content":"    return githubIssue.findLabel(GithubLabel.LABELS.tutorial).concat(\u0027-\u0027).concat(githubIssue.findLabel(GithubLabel.LABELS.team));"},{"lineNumber":456,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"  private createIssueModel(githubIssue: GithubIssue): Issue {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"    let issue: Issue;"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":462,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseBugReportingIssue(githubIssue);"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":465,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseTeamResponseIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":468,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseTesterResponseIssue(githubIssue);"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":471,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        issue \u003d Issue.createPhaseModerationIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":474,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"    if (issue.parseError) {"},{"lineNumber":479,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.error(\u0027IssueService: \u0027 + issue.parseError);"},{"lineNumber":480,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":481,"author":{"gitId":"-"},"content":"    return issue;"},{"lineNumber":482,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"  setIssueTeamFilter(filterValue: string) {"},{"lineNumber":485,"author":{"gitId":"-"},"content":"    if (filterValue) {"},{"lineNumber":486,"author":{"gitId":"-"},"content":"      this.issueTeamFilter \u003d filterValue;"},{"lineNumber":487,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":488,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"  setSessionId(sessionId: string) {"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    this.sessionId \u003d sessionId;"},{"lineNumber":492,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"  getIssueTeamFilter(): string {"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    return this.issueTeamFilter;"},{"lineNumber":496,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":497,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":7,"-":490}},{"path":"src/app/core/services/label.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable, pipe, UnaryFunction } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../models/github/github-label.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Label } from \u0027../models/label.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":7,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/* The threshold to decide if color is dark or light."},{"lineNumber":10,"author":{"gitId":"-"},"content":"A higher threshold value will result in more colors determined to be \"dark\"."},{"lineNumber":11,"author":{"gitId":"-"},"content":"W3C recommendation is 0.179, but 0.184 is chosen so that some colors (like bright red)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"are considered dark (Github too consider them dark) */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"const COLOR_DARKNESS_THRESHOLD \u003d 0.184;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"const COLOR_BLACK \u003d \u0027000000\u0027; // Dark color for text with light background"},{"lineNumber":16,"author":{"gitId":"-"},"content":"const COLOR_WHITE \u003d \u0027ffffff\u0027; // Light color for text with dark background"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"const COLOR_RED_PALE \u003d \u0027ffe0e0\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"const COLOR_RED_LIGHT \u003d \u0027ffcccc\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"const COLOR_RED \u003d \u0027ff9999\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"const COLOR_RED_DARK \u003d \u0027ff6666\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"const COLOR_PURPLE_LIGHT \u003d \u0027d966ff\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"const COLOR_PURPLE \u003d \u00279900cc\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"const COLOR_GREEN \u003d \u002700802b\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"const COLOR_ORANGE_PALE \u003d \u0027ffebcc\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"const COLOR_ORANGE_LIGHT \u003d \u0027ffcc80\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"const COLOR_ORANGE \u003d \u0027ff9900\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"const COLOR_SILVER \u003d \u0027a6a6a6\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"const COLOR_BLUE \u003d \u00270066ff\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_SEVERITY \u003d \u0027Severity\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_BUG_TYPE \u003d \u0027Bug Type\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"const DISPLAY_NAME_RESPONSE \u003d \u0027Response\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"// The HTML template definition of selected labels are hard-coded here, move to a config file in the future"},{"lineNumber":40,"author":{"gitId":"-"},"content":"const VERY_LOW_DEFINITION \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw that is \u003cmark\u003epurely cosmetic\u003c/mark\u003e and \u003cmark\u003edoes not affect usage\u003c/mark\u003e. For example, \u0027 +"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u0027\u003cul\u003e\u0027 +"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003etypo issues\u003c/li\u003e\u0027 +"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003espacing issues\u003c/li\u003e\u0027 +"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003elayout issues\u003c/li\u003e\u0027 +"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003ecolor issues\u003c/li\u003e\u0027 +"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  \u0027\u003cli\u003efont issues\u003c/li\u003e\u0027 +"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  \u0027\u003c/ul\u003e\u0027 +"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \"in the docs or the UI that doesn\u0027t affect usage.\u003c/p\u003e\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"const LOW_DEFINITION \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw that is unlikely to affect normal operations of the product. \u0027 +"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  \u0027Appears only in very rare situations and causes a minor inconvenience only.\u003c/p\u003e\u0027;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"const MEDIUM_DEFINITION \u003d \u0027\u003cp\u003eA flaw that causes occasional inconvenience to some users but they can \u0027 + \u0027continue to use the product.\u003c/p\u003e\u0027;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"const HIGH_DEFINITION \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw that affects most users and causes major problems for users.\u0027 + \u0027i.e., makes the product almost unusable for most users.\u003c/p\u003e\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"const FUNCTIONALITY_BUG_DEFINITION \u003d \u0027\u003cp\u003eA functionality does not work as specified/expected.\u003c/p\u003e\u0027;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"const FEATURE_FLAW_DEFINITION \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eSome functionality missing from a feature delivered in the current version in \u0027 +"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u0027a way that the feature becomes less useful to the intended target user for \u003ci\u003enormal\u003c/i\u003e usage. \u0027 +"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \"i.e., the feature is not \u0027complete\u0027.\\nIn other words, an acceptance-testing bug that falls within \" +"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u0027the scope of the current version features. These issues are counted against the \u003ci\u003eproduct design\u003c/i\u003e aspect \u0027 +"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u0027of the project.\u003c/p\u003e\u0027;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"const DOCUMENTATION_BUG_DEFINITION \u003d"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eA flaw in the documentation \u0027 + \u0027\u003cspan style\u003d\"color:grey;\"\u003ee.g., a missing step, a wrong instruction, typos\u003c/span\u003e\u003c/p\u003e\u0027;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"const ACCEPTED_DEFINITION \u003d \u0027\u003cp\u003eYou accept it as a bug.\u003c/p\u003e\u0027;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"const NOT_IN_SCOPE_DEFINITION \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u0027\u003cp\u003eIt is a valid issue but not something the team should be penalized for \u0027 +"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  \u0027\u003cspan style\u003d\"color:grey;\"\u003ee.g., it was not related to features delivered in this version\u003c/span\u003e.\u003c/p\u003e\u0027;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"const REJECTED_DEFINITION \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  \"\u003cp\u003eWhat tester treated as a bug is in fact the expected behavior (from the user\u0027s point of view), or the tester \" +"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  \u0027was mistaken in some other way.\u003c/p\u003e\u0027;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"const CANNOT_REPRODUCE_DEFINITION \u003d \u0027\u003cp\u003eYou are unable to reproduce the behavior reported in the bug after multiple tries.\u003c/p\u003e\u0027;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"const ISSUE_UNCLEAR_DEFINITION \u003d \u0027\u003cp\u003eThe issue description is not clear.\u003c/p\u003e\u0027;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"const UNDEFINED_DEFINITION \u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"export const LABEL_DEFINITIONS \u003d {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  severityVeryLow: VERY_LOW_DEFINITION,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  severityLow: LOW_DEFINITION,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  severityMedium: MEDIUM_DEFINITION,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  severityHigh: HIGH_DEFINITION,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  typeFunctionalityBug: FUNCTIONALITY_BUG_DEFINITION,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  typeFeatureFlaw: FEATURE_FLAW_DEFINITION,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  typeDocumentationBug: DOCUMENTATION_BUG_DEFINITION,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  responseAccepted: ACCEPTED_DEFINITION,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  responseNotInScope: NOT_IN_SCOPE_DEFINITION,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  responseRejected: REJECTED_DEFINITION,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  responseCannotProduce: CANNOT_REPRODUCE_DEFINITION,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  responseIssueUnclear: ISSUE_UNCLEAR_DEFINITION,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  undefined: UNDEFINED_DEFINITION"},{"lineNumber":92,"author":{"gitId":"-"},"content":"};"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"const REQUIRED_LABELS \u003d {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  severity: {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    VeryLow: new Label(\u0027severity\u0027, \u0027VeryLow\u0027, COLOR_RED_PALE, VERY_LOW_DEFINITION),"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    Low: new Label(\u0027severity\u0027, \u0027Low\u0027, COLOR_RED_LIGHT, LOW_DEFINITION),"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    Medium: new Label(\u0027severity\u0027, \u0027Medium\u0027, COLOR_RED, MEDIUM_DEFINITION),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    High: new Label(\u0027severity\u0027, \u0027High\u0027, COLOR_RED_DARK, HIGH_DEFINITION)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  type: {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    DocumentationBug: new Label(\u0027type\u0027, \u0027DocumentationBug\u0027, COLOR_PURPLE_LIGHT, DOCUMENTATION_BUG_DEFINITION),"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    FeatureFlaw: new Label(\u0027type\u0027, \u0027FeatureFlaw\u0027, COLOR_PURPLE_LIGHT, FEATURE_FLAW_DEFINITION),"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    FunctionalityBug: new Label(\u0027type\u0027, \u0027FunctionalityBug\u0027, COLOR_PURPLE, FUNCTIONALITY_BUG_DEFINITION)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  response: {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    Accepted: new Label(\u0027response\u0027, \u0027Accepted\u0027, COLOR_GREEN, ACCEPTED_DEFINITION),"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    CannotReproduce: new Label(\u0027response\u0027, \u0027CannotReproduce\u0027, COLOR_ORANGE_PALE, CANNOT_REPRODUCE_DEFINITION),"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    IssueUnclear: new Label(\u0027response\u0027, \u0027IssueUnclear\u0027, COLOR_ORANGE_LIGHT, ISSUE_UNCLEAR_DEFINITION),"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    NotInScope: new Label(\u0027response\u0027, \u0027NotInScope\u0027, COLOR_ORANGE_LIGHT, NOT_IN_SCOPE_DEFINITION),"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    Rejected: new Label(\u0027response\u0027, \u0027Rejected\u0027, COLOR_ORANGE, REJECTED_DEFINITION)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  status: {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    Done: new Label(\u0027status\u0027, \u0027Done\u0027, COLOR_SILVER),"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    Incomplete: new Label(\u0027status\u0027, \u0027Incomplete\u0027, COLOR_BLACK)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  others: {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    duplicate: new Label(undefined, \u0027duplicate\u0027, COLOR_BLUE)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"};"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"export type LabelCategory \u003d keyof typeof REQUIRED_LABELS;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":126,"author":{"gitId":"-"},"content":"})"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":129,"author":{"gitId":"-"},"content":" * Responsible for retrieval and parsing and syncing of label data"},{"lineNumber":130,"author":{"gitId":"-"},"content":" * from the GitHub repository for the CATcher application."},{"lineNumber":131,"author":{"gitId":"-"},"content":" */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"export class LabelService {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  private static severityLabels: Label[] \u003d Object.values(REQUIRED_LABELS.severity);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  private static typeLabels: Label[] \u003d Object.values(REQUIRED_LABELS.type);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  private static responseLabels: Label[] \u003d Object.values(REQUIRED_LABELS.response);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  private static statusLabels: Label[] \u003d Object.values(REQUIRED_LABELS.status);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  private static otherLabels: Label[] \u003d Object.values(REQUIRED_LABELS.others);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  private static allLabelArrays \u003d {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    severity: LabelService.severityLabels,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    type: LabelService.typeLabels,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    response: LabelService.responseLabels,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    status: LabelService.statusLabels,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    others: LabelService.otherLabels"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  private static testerLabelArrays \u003d {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    severity: LabelService.severityLabels,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    type: LabelService.typeLabels"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  constructor(private githubService: GithubService, private logger: LoggingService) {}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"  public static getRequiredLabelsAsArray(needAllLabels: boolean): Label[] {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    let requiredLabels: Label[] \u003d [];"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    const labels \u003d needAllLabels ? Object.values(this.allLabelArrays) : Object.values(this.testerLabelArrays);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    labels.map((label) \u003d\u003e (requiredLabels \u003d requiredLabels.concat(label)));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    return requiredLabels;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":162,"author":{"gitId":"-"},"content":"   * Updates the required label to be in sync with the labels on the GitHub repository."},{"lineNumber":163,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  public static updateRequiredLabelColor(labelColor: string, label: Label) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    const labelArray \u003d LabelService.allLabelArrays[label.labelCategory];"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    if (labelArray) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      const requiredLabel \u003d labelArray.find((requiredLabel: Label) \u003d\u003e requiredLabel.labelValue \u003d\u003d\u003d label.labelValue);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      requiredLabel.labelColor \u003d labelColor;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"   * Returns an custom operator which helps to"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   * synchronise the labels in our application"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   * with the remote repository."},{"lineNumber":177,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  syncLabels(needAllLabels: boolean): UnaryFunction\u003cObservable\u003cboolean\u003e, Observable\u003cany\u003e\u003e {"},{"lineNumber":179,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    return pipe(mergeMap(() \u003d\u003e this.synchronizeRemoteLabels(needAllLabels)));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":183,"author":{"gitId":"-"},"content":"   * Synchronizes the labels in github with those required by the application."},{"lineNumber":184,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  synchronizeRemoteLabels(needAllLabels: boolean): Observable\u003cany\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    return this.githubService.fetchAllLabels().pipe("},{"lineNumber":187,"author":{"gitId":"-"},"content":"      map((githubLabels) \u003d\u003e githubLabels.map(this.toLabel)),"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      map((response) \u003d\u003e {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        this.ensureRepoHasRequiredLabels(response, LabelService.getRequiredLabelsAsArray(needAllLabels));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return response;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"   * Returns all the labels of a certain type (e.g severity)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":198,"author":{"gitId":"-"},"content":"   * @return an array of label of that type"},{"lineNumber":199,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  getLabelList(attributeName: string): Label[] {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return LabelService.severityLabels;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return LabelService.typeLabels;"},{"lineNumber":206,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      // case \u0027responseTag\u0027:"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      case \u0027response\u0027:"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return LabelService.responseLabels;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`LabelService: Unfiltered Attribute ${attributeName} in getLabelList`);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":214,"author":{"gitId":"-"},"content":"   * Returns a title for the label type"},{"lineNumber":215,"author":{"gitId":"-"},"content":"   * @param attributeName: the type of the label"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"  getLabelTitle(attributeName: string): string {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    switch (attributeName) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      case \u0027severity\u0027:"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_SEVERITY;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      case \u0027type\u0027:"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_BUG_TYPE;"},{"lineNumber":223,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      case \u0027response\u0027:"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return DISPLAY_NAME_RESPONSE;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`LabelService: Unfiltered Attribute ${attributeName} in getLabelTitle`);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":230,"author":{"gitId":"-"},"content":"   * Returns the color of the label by searching a list of"},{"lineNumber":231,"author":{"gitId":"-"},"content":"   * all available labels."},{"lineNumber":232,"author":{"gitId":"-"},"content":"   * @param labelValue: the label\u0027s value (e.g Low / Medium / High / ...)"},{"lineNumber":233,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  getColorOfLabel(labelCategory: LabelCategory, labelValue: string): string {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    if (labelValue \u003d\u003d\u003d \u0027\u0027 || !LabelService.allLabelArrays[labelCategory]) {"},{"lineNumber":236,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.info(`LabelService: Unfiltered Attribute, ${labelValue}: ${labelCategory} in getColorOfLabel`);"},{"lineNumber":237,"author":{"gitId":"vigneshsankariyer1234567890"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"      return COLOR_WHITE;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    const existingLabel \u003d LabelService.allLabelArrays[labelCategory].find((label: Label) \u003d\u003e label.labelValue \u003d\u003d\u003d labelValue);"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"    if (existingLabel \u003d\u003d\u003d undefined || existingLabel.labelColor \u003d\u003d\u003d undefined) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      return COLOR_WHITE;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      return existingLabel.labelColor;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":251,"author":{"gitId":"-"},"content":"   * Returns the definition of the label by searching a list of"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   * all available labels."},{"lineNumber":253,"author":{"gitId":"-"},"content":"   * @param labelValue: the label\u0027s value (e.g Low/ Medium/ High / ...)."},{"lineNumber":254,"author":{"gitId":"-"},"content":"   * @param labelCategory: the label\u0027s category (e.g Type/ Severity / ...)."},{"lineNumber":255,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  getLabelDefinition(labelValue: string, labelCategory: string): string {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    if (labelValue \u003d\u003d\u003d \u0027\u0027 || labelValue \u003d\u003d\u003d null || labelCategory \u003d\u003d\u003d \u0027\u0027 || labelCategory \u003d\u003d\u003d null) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    const existingLabel \u003d LabelService.getRequiredLabelsAsArray(true).find("},{"lineNumber":262,"author":{"gitId":"-"},"content":"      (label) \u003d\u003e label.labelValue \u003d\u003d\u003d labelValue \u0026\u0026 label.labelCategory \u003d\u003d\u003d labelCategory"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    if (existingLabel \u003d\u003d\u003d undefined || existingLabel.labelDefinition \u003d\u003d\u003d undefined) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      return null;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"      return existingLabel.labelDefinition;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"   * Ensures that the repo has the required labels."},{"lineNumber":274,"author":{"gitId":"-"},"content":"   * Compares the actual labels in the repo with the required labels. If an required label is missing,"},{"lineNumber":275,"author":{"gitId":"-"},"content":"   * it is added to the repo. If the required label exists but the label color is not as expected,"},{"lineNumber":276,"author":{"gitId":"-"},"content":"   * the color is updated. Does not delete actual labels that do not match required labels."},{"lineNumber":277,"author":{"gitId":"-"},"content":"   * i.e., the repo might have more labels than the required labels after this operation."},{"lineNumber":278,"author":{"gitId":"-"},"content":"   * @param actualLabels: labels in the repo."},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * @param requiredLabels: required labels."},{"lineNumber":280,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  private ensureRepoHasRequiredLabels(actualLabels: Label[], requiredLabels: Label[]): void {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    requiredLabels.forEach((label) \u003d\u003e {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"      // Finds for a label that has the same name as a required label."},{"lineNumber":284,"author":{"gitId":"-"},"content":"      const nameMatchedLabels: Label[] \u003d actualLabels.filter((remoteLabel) \u003d\u003e remoteLabel.getFormattedName() \u003d\u003d\u003d label.getFormattedName());"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"      if (nameMatchedLabels.length \u003d\u003d\u003d 0) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        // Create new Label (Could not find a label with the same name \u0026 category)"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        this.githubService.createLabel(label.getFormattedName(), label.labelColor);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"      } else if (nameMatchedLabels.length \u003d\u003d\u003d 1) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        if (nameMatchedLabels[0].equals(label)) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"          // the label exists exactly as expected -\u003e do nothing"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"          // the label exists but the color does not match -\u003e update the required label\u0027s color to the one in github"},{"lineNumber":294,"author":{"gitId":"-"},"content":"          LabelService.updateRequiredLabelColor(nameMatchedLabels[0].labelColor, label);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Unexpected error: the repo has multiple labels with the same name \u0027 + label.getFormattedName());"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":303,"author":{"gitId":"-"},"content":"   * Converts a GithubLabel object to Label object."},{"lineNumber":304,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":305,"author":{"gitId":"-"},"content":"  toLabel(githubLabel: GithubLabel) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    let labelCategory: string;"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    let labelValue: string;"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    const containsDotRegex \u003d /\\./g;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    const rawName: string \u003d String(githubLabel.name);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    [labelCategory, labelValue] \u003d containsDotRegex.test(rawName) ? githubLabel.name.split(\u0027.\u0027) : [undefined, rawName];"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    const labelColor \u003d githubLabel.color;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    const labelDefinition: string \u003d String(githubLabel.description);"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    return new Label(labelCategory, labelValue, labelColor, labelDefinition);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":320,"author":{"gitId":"-"},"content":"   * Returns true if the given color is considered \"dark\""},{"lineNumber":321,"author":{"gitId":"-"},"content":"   * The color is considered \"dark\" if its luminance is less than COLOR_DARKNESS_THRESHOLD"},{"lineNumber":322,"author":{"gitId":"-"},"content":"   * @param inputColor: the color"},{"lineNumber":323,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  isDarkColor(inputColor: string): boolean {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    const COLOR \u003d inputColor.charAt(0) \u003d\u003d\u003d \u0027#\u0027 ? inputColor.substring(1, 7) : inputColor;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    const R \u003d parseInt(COLOR.substring(0, 2), 16);"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    const G \u003d parseInt(COLOR.substring(2, 4), 16);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    const B \u003d parseInt(COLOR.substring(4, 6), 16);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    const RGB \u003d [R / 255, G / 255, B / 255];"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    const LINEAR_RGB \u003d RGB.map((col) \u003d\u003e {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"      if (col \u003c\u003d 0.03928) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        return col / 12.92;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":334,"author":{"gitId":"-"},"content":"      return Math.pow((col + 0.055) / 1.055, 2.4);"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    // Calculate the luminance of the color"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    const LUMINANCE \u003d 0.2126 * LINEAR_RGB[0] + 0.7152 * LINEAR_RGB[1] + 0.0722 * LINEAR_RGB[2];"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    // The color is \"dark\" if the luminance is lower than the threshold"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    return LUMINANCE \u003c COLOR_DARKNESS_THRESHOLD;"},{"lineNumber":340,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":343,"author":{"gitId":"-"},"content":"   * Returns a css style for the label to use"},{"lineNumber":344,"author":{"gitId":"-"},"content":"   * @param color: the color of the label"},{"lineNumber":345,"author":{"gitId":"-"},"content":"   * @return the style with background-color in rgb"},{"lineNumber":346,"author":{"gitId":"-"},"content":"   * @throws exception if input is an invalid color code"},{"lineNumber":347,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":348,"author":{"gitId":"-"},"content":"  setLabelStyle(color: string, display: string \u003d \u0027inline-flex\u0027) {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    let textColor: string;"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    textColor \u003d this.isDarkColor(color) ? COLOR_WHITE : COLOR_BLACK;"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    const styles \u003d {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      \u0027background-color\u0027: `#${color}`,"},{"lineNumber":355,"author":{"gitId":"-"},"content":"      \u0027border-radius\u0027: \u00273px\u0027,"},{"lineNumber":356,"author":{"gitId":"-"},"content":"      cursor: \u0027default\u0027,"},{"lineNumber":357,"author":{"gitId":"-"},"content":"      padding: \u00273px\u0027,"},{"lineNumber":358,"author":{"gitId":"-"},"content":"      color: `#${textColor}`,"},{"lineNumber":359,"author":{"gitId":"-"},"content":"      \u0027font-weight\u0027: \u0027410\u0027,"},{"lineNumber":360,"author":{"gitId":"-"},"content":"      display: display"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"    return styles;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":365,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":10,"-":355}},{"path":"src/app/core/services/mocks/mock.auth.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgZone } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Title } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Router } from \u0027@angular/router\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { BehaviorSubject } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { uuid } from \u0027../../../shared/lib/uuid\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../githubevent.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../issue.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../logging.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../user.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"export enum AuthState {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u0027NotAuthenticated\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u0027AwaitingAuthentication\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u0027ConfirmOAuthUser\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u0027Authenticated\u0027"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":24,"author":{"gitId":"-"},"content":"})"},{"lineNumber":25,"author":{"gitId":"-"},"content":"export class MockAuthService {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  authStateSource \u003d new BehaviorSubject(AuthState.NotAuthenticated);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  currentAuthState \u003d this.authStateSource.asObservable();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  accessToken \u003d new BehaviorSubject(undefined);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private ngZone: NgZone,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private userService: UserService,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private dataService: DataService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private titleService: Title,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private logger: LoggingService"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   * Will store the OAuth token."},{"lineNumber":45,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  storeOAuthAccessToken(token: string) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.githubService.storeOAuthAccessToken(token);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    this.accessToken.next(token);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  reset(): void {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.accessToken.next(undefined);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.changeAuthState(AuthState.NotAuthenticated);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    this.ngZone.run(() \u003d\u003e this.router.navigate([\u0027\u0027]));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  logOut(): void {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.userService.reset();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    this.issueService.reset(true);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.phaseService.reset();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.dataService.reset();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    this.githubEventService.reset();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.logger.reset();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.setLandingPageTitle();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(\u0027All Teams\u0027);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.reset();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  isAuthenticated(): boolean {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    return this.authStateSource.getValue() \u003d\u003d\u003d AuthState.Authenticated;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  changeAuthState(newAuthState: AuthState) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    if (newAuthState \u003d\u003d\u003d AuthState.Authenticated) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      const sessionId \u003d `${Date.now()}-${uuid()}`;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      this.issueService.setSessionId(sessionId);"},{"lineNumber":78,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      this.logger.info(`MockAuthService: Successfully authenticated with session: ${sessionId}`);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    this.authStateSource.next(newAuthState);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  setTitleWithPhaseDetail(): void {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../../package.json\u0027);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version} - ${this.phaseService.getPhaseDetail()}`;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  setLandingPageTitle(): void {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const appSetting \u003d require(\u0027../../../../../package.json\u0027);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    const title \u003d `${appSetting.name} ${appSetting.version}`;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    this.titleService.setTitle(title);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"   * Will start the Github OAuth web flow process by issuing \u0027FabricatedToken\u0027."},{"lineNumber":97,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  startOAuthProcess() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    this.accessToken.next(\u0027FabricatedToken\u0027);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":100}},{"path":"src/app/core/services/mocks/mock.issue.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { BehaviorSubject, forkJoin, Observable, of, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { catchError, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { generateIssueWithRandomData } from \u0027../../../../../tests/constants/githubissue.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../models/comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../../models/github/github-comment.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../../models/github/github-issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../models/github/github-label.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { HiddenData } from \u0027../../models/hidden-data.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueDispute } from \u0027../../models/issue-dispute.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { Issue, Issues, STATUS } from \u0027../../models/issue.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../models/phase.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { DataService } from \u0027../data.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../github.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../phase.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":19,"author":{"gitId":"-"},"content":"})"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export class MockIssueService {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  static readonly POLL_INTERVAL \u003d 5000; // 5 seconds"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  issues: Issues;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  issues$: BehaviorSubject\u003cIssue[]\u003e;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private sessionId: string;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  private issueTeamFilter \u003d \u0027All Teams\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  private issuesPollSubscription: Subscription;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  /** Whether the IssueService is downloading the data from Github*/"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  public isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private phaseService: PhaseService, private dataService: DataService) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    this.issues$ \u003d new BehaviorSubject(new Array\u003cIssue\u003e());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * Loads Issues and Prevents polling during testing."},{"lineNumber":38,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  startPollIssues() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription \u003d\u003d\u003d undefined) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      if (this.issues$.getValue().length \u003d\u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.isLoading.next(true);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d of(this.reloadAllIssues()).subscribe((result) \u003d\u003e this.isLoading.next(false));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  stopPollIssues() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    if (this.issuesPollSubscription) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription.unsubscribe();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      this.issuesPollSubscription \u003d undefined;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"   * Simply returns the existing issue, to simulate polling."},{"lineNumber":58,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  pollIssue(issueId: number): Observable\u003cIssue\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    return of(this.issues[issueId]);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  reloadAllIssues() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    return this.initializeData();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  getIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    if (this.issues \u003d\u003d\u003d undefined) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      return this.getLatestIssue(id);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      return of(this.issues[id]);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"  getLatestIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    return this.githubService.fetchIssueGraphql(id).pipe("},{"lineNumber":77,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.createAndSaveIssueModel(response);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this.issues[id];"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      catchError((err) \u003d\u003e {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return of(this.issues[id]);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  createIssue(title: string, description: string, severity: string, type: string): Observable\u003cIssue\u003e {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    const labelsArray \u003d [this.createLabel(\u0027severity\u0027, severity), this.createLabel(\u0027type\u0027, type)];"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    const hiddenData \u003d new Map([[\u0027session\u0027, this.sessionId]]);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    const issueDescription \u003d HiddenData.embedDataIntoString(description, hiddenData);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .createIssue(title, issueDescription, labelsArray)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .pipe(map((response: GithubIssue) \u003d\u003e this.createIssueModel(response)));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"  updateIssue(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    const assignees \u003d this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? [] : issue.assignees;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    return this.githubService"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      .updateIssue(issue.id, issue.title, this.createGithubIssueDescription(issue), this.createLabelsForIssue(issue), assignees)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":101,"author":{"gitId":"-"},"content":"        map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"          response.comments \u003d issue.githubComments;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"          return this.createIssueModel(response);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  updateIssueWithComment(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.githubService.updateIssueComment(issueComment).pipe("},{"lineNumber":110,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((updatedComment: GithubComment) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [updatedComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d updatedComment.id)];"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  updateTesterResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    const isTesterResponseExist \u003d this.issues[issue.id].testerResponses;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    const commentApiToCall \u003d isTesterResponseExist"},{"lineNumber":120,"author":{"gitId":"-"},"content":"      ? this.githubService.updateIssueComment(issueComment)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      : this.githubService.createIssueComment(issue.id, issueComment.description);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    const issueClone \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    issueClone.status \u003d STATUS.Done;"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    return forkJoin([commentApiToCall, this.updateIssue(issueClone)]).pipe("},{"lineNumber":127,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        issue.updateTesterResponse(githubComment);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"  updateTutorResponse(issue: Issue, issueComment: IssueComment): Observable\u003cIssue\u003e {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.updateIssueComment(issueComment), this.updateIssue(issue)]).pipe("},{"lineNumber":137,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  createTeamResponse(issue: Issue): Observable\u003cIssue\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    const teamResponse \u003d issue.createGithubTeamResponse();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    return this.githubService.createIssueComment(issue.id, teamResponse).pipe("},{"lineNumber":148,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((githubComment: GithubComment) \u003d\u003e {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        issue.githubComments \u003d [githubComment, ...issue.githubComments.filter((c) \u003d\u003e c.id !\u003d\u003d githubComment.id)];"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return this.updateIssue(issue);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  createTutorResponse(issue: Issue, response: string): Observable\u003cIssue\u003e {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    return forkJoin([this.githubService.createIssueComment(issue.id, response), this.updateIssue(issue)]).pipe("},{"lineNumber":157,"author":{"gitId":"-"},"content":"      map((responses) \u003d\u003e {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        const [githubComment, issue] \u003d responses;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        issue.updateDispute(githubComment);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return issue;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":166,"author":{"gitId":"-"},"content":"   * This function will create a github representation of issue\u0027s description. Given the issue model, it will piece together the different"},{"lineNumber":167,"author":{"gitId":"-"},"content":"   * attributes to create the github\u0027s description."},{"lineNumber":168,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  private createGithubIssueDescription(issue: Issue): string {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return ("},{"lineNumber":174,"author":{"gitId":"-"},"content":"          `# Issue Description\\n${issue.createGithubIssueDescription()}\\n# Team\\\u0027s Response\\n${issue.teamResponse}\\n ` +"},{"lineNumber":175,"author":{"gitId":"-"},"content":"          // `## State the duplicated issue here, if any\\n${issue.duplicateOf ? `Duplicate of #${issue.duplicateOf}` : `--`}\\n` +"},{"lineNumber":176,"author":{"gitId":"-"},"content":"          `# Disputes\\n\\n${this.getIssueDisputeString(issue.issueDisputes)}\\n`"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return issue.createGithubIssueDescription();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"  private getIssueDisputeString(issueDisputes: IssueDispute[]): string {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    let issueDisputeString \u003d \u0027\u0027;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    for (const issueDispute of issueDisputes) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      issueDisputeString +\u003d issueDispute.toString();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    return issueDisputeString;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  deleteIssue(id: number): Observable\u003cIssue\u003e {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    return this.githubService.closeIssue(id).pipe("},{"lineNumber":193,"author":{"gitId":"-"},"content":"      map((response: GithubIssue) \u003d\u003e {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        const deletedIssue \u003d this.createIssueModel(response);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        this.deleteFromLocalStore(deletedIssue);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return deletedIssue;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is deleted."},{"lineNumber":203,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  deleteFromLocalStore(issueToDelete: Issue) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    const { [issueToDelete.id]: issueToRemove, ...withoutIssueToRemove } \u003d this.issues;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    this.issues \u003d withoutIssueToRemove;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":211,"author":{"gitId":"-"},"content":"   * This function will update the issue\u0027s state of the application. This function needs to be called whenever a issue is added/updated."},{"lineNumber":212,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"  updateLocalStore(issueToUpdate: Issue) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    this.issues \u003d {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      ...this.issues,"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      [issueToUpdate.id]: issueToUpdate"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    this.issues$.next(Object.values(this.issues));"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"   * Check whether the issue has been responded in the phase 2/3."},{"lineNumber":223,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  hasTeamResponse(issueId: number): boolean {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    return !!this.issues[issueId].teamResponse;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"   * Obtain an observable containing an array of issues that are duplicates of the parentIssue."},{"lineNumber":230,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  getDuplicateIssuesFor(parentIssue: Issue): Observable\u003cIssue[]\u003e {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    return this.issues$.pipe("},{"lineNumber":233,"author":{"gitId":"-"},"content":"      map((issues) \u003d\u003e {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        return issues.filter((issue) \u003d\u003e {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"          return issue.duplicateOf \u003d\u003d\u003d parentIssue.id;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":237,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    this.issues \u003d undefined;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    this.sessionId \u003d undefined;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    this.issues$.next(new Array\u003cIssue\u003e());"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    this.stopPollIssues();"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    this.isLoading.complete();"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    this.isLoading \u003d new BehaviorSubject\u003cboolean\u003e(false);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   * Populates store with random issues depending on the current test phase."},{"lineNumber":253,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  private initializeData(): Observable\u003cIssue[]\u003e {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    if (this.issues !\u003d null) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      return of(Object.values(this.issues));"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    const NUM_ISSUES \u003d 10;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    const generatedIssues: Array\u003cGithubIssue\u003e \u003d [];"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        for (let i \u003d 0; i \u003c NUM_ISSUES; i++) {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"          generatedIssues.push(generateIssueWithRandomData());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"    for (const issue of generatedIssues) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"      this.createAndSaveIssueModel(issue);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    return of(Object.values(this.issues));"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"  private createAndSaveIssueModel(githubIssue: GithubIssue): boolean {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    const issue \u003d this.createIssueModel(githubIssue);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    this.updateLocalStore(issue);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    return true;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":284,"author":{"gitId":"-"},"content":"   * Given an issue model, create the necessary labels for github."},{"lineNumber":285,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  private createLabelsForIssue(issue: Issue): string[] {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    const result \u003d [];"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase !\u003d\u003d Phase.phaseBugReporting \u0026\u0026 this.phaseService.currentPhase !\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"      const studentTeam \u003d issue.teamAssigned.id.split(\u0027-\u0027);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027tutorial\u0027, `${studentTeam[0]}-${studentTeam[1]}`), this.createLabel(\u0027team\u0027, studentTeam[2]));"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"    if (issue.severity) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027severity\u0027, issue.severity));"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    if (issue.type) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027type\u0027, issue.type));"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    if (issue.response) {"},{"lineNumber":303,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      result.push(this.createLabel(\u0027response\u0027, issue.response));"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    if (issue.duplicated) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"      result.push(\u0027duplicate\u0027);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"    if (issue.status) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"      result.push(this.createLabel(\u0027status\u0027, issue.status));"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    if (issue.pending) {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"      if (+issue.pending \u003e 0) {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        result.push(this.createLabel(\u0027pending\u0027, issue.pending));"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"    if (issue.unsure) {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      result.push(\u0027unsure\u0027);"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"    return result;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"  private createLabel(prepend: string, value: string) {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    return `${prepend}.${value}`;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"  private extractTeamIdFromGithubIssue(githubIssue: GithubIssue): string {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    return githubIssue.findLabel(GithubLabel.LABELS.tutorial).concat(\u0027-\u0027).concat(githubIssue.findLabel(GithubLabel.LABELS.team));"},{"lineNumber":333,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"  private createIssueModel(githubIssue: GithubIssue): Issue {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    switch (this.phaseService.currentPhase) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      case Phase.phaseBugReporting:"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        return Issue.createPhaseBugReportingIssue(githubIssue);"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      case Phase.phaseTeamResponse:"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTeamResponseIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      case Phase.phaseTesterResponse:"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        return Issue.createPhaseTesterResponseIssue(githubIssue);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      case Phase.phaseModeration:"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        return Issue.createPhaseModerationIssue(githubIssue, this.dataService.getTeam(this.extractTeamIdFromGithubIssue(githubIssue)));"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"  setIssueTeamFilter(filterValue: string) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    if (filterValue) {"},{"lineNumber":352,"author":{"gitId":"-"},"content":"      this.issueTeamFilter \u003d filterValue;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"  setSessionId(sessionId: string) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    this.sessionId \u003d sessionId;"},{"lineNumber":358,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"  getIssueTeamFilter(): string {"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    return this.issueTeamFilter;"},{"lineNumber":362,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":363,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":5,"-":358}},{"path":"src/app/core/services/phase.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable, pipe } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { map, mergeMap, retry, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { throwIfFalse } from \u0027../../shared/lib/custom-ops\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { assertSessionDataIntegrity, SessionData } from \u0027../models/session.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027./label.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { RepoCreatorService } from \u0027./repo-creator.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const SESSION_AVALIABILITY_FIX_FAILED \u003d \u0027Session Availability Fix failed.\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const PhaseDescription \u003d {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  [Phase.phaseBugReporting]: \u0027Bug Reporting Phase\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  [Phase.phaseTeamResponse]: \"Team\u0027s Response Phase\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"  [Phase.phaseTesterResponse]: \"Tester\u0027s Response Phase\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"  [Phase.phaseModeration]: \u0027Moderation Phase\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":"};"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":22,"author":{"gitId":"-"},"content":"})"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Responsible for managing the current phase of CATcher as well as the"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * current session data and repository details related to the session."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export class PhaseService {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  public currentPhase: Phase;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  private repoName: string;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  private orgName: string;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  public sessionData: SessionData;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private phaseRepoOwners \u003d {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    phaseBugReporting: \u0027\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    phaseTeamResponse: \u0027\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    phaseTesterResponse: \u0027\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    phaseModeration: \u0027\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private labelService: LabelService, private repoCreatorService: RepoCreatorService) {}"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   * Stores the location of the repositories belonging to"},{"lineNumber":45,"author":{"gitId":"-"},"content":"   * each phase of the application."},{"lineNumber":46,"author":{"gitId":"-"},"content":"   * @param org - name of organization."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   * @param user - name of user."},{"lineNumber":48,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  setPhaseOwners(org: string, user: string): void {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.orgName \u003d org;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseBugReporting \u003d user;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTeamResponse \u003d org;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseTesterResponse \u003d user;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    this.phaseRepoOwners.phaseModeration \u003d org;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * Returns the name of the owner of a given phase."},{"lineNumber":59,"author":{"gitId":"-"},"content":"   * @param phase"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  getPhaseOwner(phase: string): string {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    return this.phaseRepoOwners[phase];"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"  fetchSessionData(): Observable\u003cSessionData\u003e {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    return this.githubService.fetchSettingsFile().pipe(map((data) \u003d\u003e data as SessionData));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"   * Will fetch session data and update phase service with it."},{"lineNumber":71,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  storeSessionData(): Observable\u003cvoid\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":74,"author":{"gitId":"-"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      map((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        localStorage.setItem(\u0027sessionData\u0027, JSON.stringify(sessionData));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * Retrieves session data from local storage and update phase service with it."},{"lineNumber":84,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  setSessionData() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    const sessionData \u003d JSON.parse(localStorage.getItem(\u0027sessionData\u0027));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    this.updateSessionParameters(sessionData);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"   * Determines the github\u0027s level of repo permission required for the phase."},{"lineNumber":92,"author":{"gitId":"-"},"content":"   * Ref: https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes"},{"lineNumber":93,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  githubRepoPermissionLevel(): string {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    if (this.sessionData.openPhases.includes(Phase.phaseModeration)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      return \u0027repo\u0027;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      return \u0027public_repo\u0027;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Checks if the necessary repository is available and creates it if the permissions are available."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  verifySessionAvailability(sessionData: SessionData): Observable\u003cboolean\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    return this.githubService.isRepositoryPresent(this.phaseRepoOwners[this.currentPhase], sessionData[this.currentPhase]);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   * Stores session data and sets current session\u0027s phase."},{"lineNumber":112,"author":{"gitId":"-"},"content":"   * @param sessionData"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  updateSessionParameters(sessionData: SessionData) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.sessionData \u003d sessionData;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d Phase[sessionData.openPhases[0]];"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    this.repoName \u003d sessionData[sessionData.openPhases[0]];"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails(this.phaseRepoOwners[this.currentPhase], this.repoName);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"   * Ensures that the necessary data for the current session is available"},{"lineNumber":123,"author":{"gitId":"-"},"content":"   * and synchronized with the remote server."},{"lineNumber":124,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  sessionSetup(): Observable\u003cany\u003e {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    // Permission Caching Mechanism to prevent repeating permission request."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    let isSessionFixPermissionGranted \u003d false;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    const cacheSessionFixPermission \u003d () \u003d\u003e {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      return pipe("},{"lineNumber":130,"author":{"gitId":"-"},"content":"        tap((sessionFixPermission: boolean | null) \u003d\u003e {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"          isSessionFixPermissionGranted \u003d sessionFixPermission ? sessionFixPermission : false;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return this.fetchSessionData().pipe("},{"lineNumber":137,"author":{"gitId":"-"},"content":"      assertSessionDataIntegrity(),"},{"lineNumber":138,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((sessionData: SessionData) \u003d\u003e {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        this.updateSessionParameters(sessionData);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return this.verifySessionAvailability(sessionData);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":142,"author":{"gitId":"-"},"content":"      this.repoCreatorService.requestRepoCreationPermissions(this.currentPhase, this.sessionData[this.currentPhase]),"},{"lineNumber":143,"author":{"gitId":"-"},"content":"      cacheSessionFixPermission(),"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      this.repoCreatorService.verifyRepoCreationPermissions(this.currentPhase),"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      this.repoCreatorService.attemptRepoCreation(this.sessionData[this.currentPhase]),"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.repoCreatorService.verifyRepoCreation(this.getPhaseOwner(this.currentPhase), this.sessionData[this.currentPhase]),"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      throwIfFalse("},{"lineNumber":148,"author":{"gitId":"-"},"content":"        (isSessionCreated: boolean) \u003d\u003e isSessionCreated,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        () \u003d\u003e new Error(SESSION_AVALIABILITY_FIX_FAILED)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      ),"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      this.labelService.syncLabels(this.isTeamOrModerationPhase()),"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      retry(1) // Retry once, to handle edge case where GitHub API cannot immediately confirm existence of the newly created repo."},{"lineNumber":153,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"  private isTeamOrModerationPhase(): boolean {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    return this.currentPhase \u003d\u003d\u003d Phase.phaseTeamResponse || this.currentPhase \u003d\u003d\u003d Phase.phaseModeration;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"  public getPhaseDetail() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    return this.orgName.concat(\u0027/\u0027).concat(this.repoName);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    this.currentPhase \u003d null;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":165}},{"path":"src/app/core/services/repo-creator.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatDialog, MatDialogRef } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Observable, of, pipe, UnaryFunction } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { mergeMap, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../models/phase.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SessionFixConfirmationComponent } from \u0027./session-fix-confirmation/session-fix-confirmation.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { UserService } from \u0027./user.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const MISSING_REQUIRED_REPO \u003d \u0027You cannot proceed without the required repository.\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export const CURRENT_PHASE_REPO_CLOSED \u003d \"Current Phase\u0027s Repository has not been opened.\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const BUG_REPORTING_INVALID_ROLE \u003d \"\u0027Bug-Reporting Phase\u0027s repository initialisation is only available to Students.\u0027\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"})"},{"lineNumber":18,"author":{"gitId":"-"},"content":"export class RepoCreatorService {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  constructor(private githubService: GithubService, private userService: UserService, private repoCreationConfirmationDialog: MatDialog) {}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   * Prompts user to allow CATcher to create a repo, if repo does not"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   * exist and current phase is the bug reporting phase."},{"lineNumber":24,"author":{"gitId":"-"},"content":"   * @param currentPhase the current phase of the session."},{"lineNumber":25,"author":{"gitId":"-"},"content":"   * @param phaseRepo the name of the specified repository."},{"lineNumber":26,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  public requestRepoCreationPermissions("},{"lineNumber":28,"author":{"gitId":"-"},"content":"    currentPhase: Phase,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    phaseRepo: string"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  ): UnaryFunction\u003cObservable\u003cboolean\u003e, Observable\u003cboolean | null\u003e\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    return pipe("},{"lineNumber":32,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((isRepoPresent: boolean) \u003d\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!isRepoPresent \u0026\u0026 currentPhase \u003d\u003d\u003d Phase.phaseBugReporting) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          return this.openRepoCreationConfirmation(phaseRepo);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          return of(null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   * Launches the SessionFixConfirmation Dialog."},{"lineNumber":44,"author":{"gitId":"-"},"content":"   * @param phaseRepo the name of the specified repository."},{"lineNumber":45,"author":{"gitId":"-"},"content":"   * @return Observable\u003cboolean\u003e - Representing user\u0027s permission grant."},{"lineNumber":46,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  private openRepoCreationConfirmation(phaseRepo: string): Observable\u003cboolean\u003e {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    const dialogRef: MatDialogRef\u003cSessionFixConfirmationComponent\u003e \u003d this.repoCreationConfirmationDialog.open("},{"lineNumber":49,"author":{"gitId":"-"},"content":"      SessionFixConfirmationComponent,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        data: { user: this.userService.currentUser.loginId, repoName: phaseRepo }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    return dialogRef.afterClosed();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"   * Checks if the current phase and current user role match the given permissions"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   * for the user to create the phase repository if deemed necessary"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   * @param currentPhase the current phase of the session."},{"lineNumber":61,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  public verifyRepoCreationPermissions(currentPhase: Phase): UnaryFunction\u003cObservable\u003cboolean | null\u003e, Observable\u003cboolean | null\u003e\u003e {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    return pipe("},{"lineNumber":64,"author":{"gitId":"-"},"content":"      tap((repoCreationPermission: boolean | null) \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (repoCreationPermission \u003d\u003d\u003d null) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"          return;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (repoCreationPermission \u003d\u003d\u003d false) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          throw new Error(MISSING_REQUIRED_REPO);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } else if (currentPhase !\u003d\u003d Phase.phaseBugReporting) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          throw new Error(CURRENT_PHASE_REPO_CLOSED);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } else if (this.userService.currentUser.role !\u003d\u003d UserRole.Student) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          throw new Error(BUG_REPORTING_INVALID_ROLE);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"   * Attempts to create the repository if permissions have been given to do so."},{"lineNumber":82,"author":{"gitId":"-"},"content":"   * @param phaseRepo the name of the specified repository."},{"lineNumber":83,"author":{"gitId":"-"},"content":"   * @return - Dummy Observable to give the API sometime to propagate if the creation of the new"},{"lineNumber":84,"author":{"gitId":"-"},"content":"   *           repository is needed since the API Call used here does not return any response."},{"lineNumber":85,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  public attemptRepoCreation(phaseRepo: string): UnaryFunction\u003cObservable\u003cboolean | null\u003e, Observable\u003cboolean | null\u003e\u003e {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    return pipe("},{"lineNumber":88,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((repoCreationPermission: boolean | null) \u003d\u003e {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (repoCreationPermission \u003d\u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          // No Session Fix Necessary"},{"lineNumber":91,"author":{"gitId":"-"},"content":"          return of(null);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          this.githubService.createRepository(phaseRepo);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          return new Observable\u003cboolean\u003e((subscriber) \u003d\u003e {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            setTimeout(() \u003d\u003e subscriber.next(true), 1000);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * Checks if the specified repository has been created."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @param phaseOwner the user or organization holding the specified repository."},{"lineNumber":105,"author":{"gitId":"-"},"content":"   * @param phaseRepo the name of the specified repository."},{"lineNumber":106,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  public verifyRepoCreation(phaseOwner: string, phaseRepo: string): UnaryFunction\u003cObservable\u003cboolean | null\u003e, Observable\u003cboolean\u003e\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return pipe("},{"lineNumber":109,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      mergeMap((isFixAttempted: boolean | null) \u003d\u003e {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!isFixAttempted) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          // If no fix has been attempted, there is no need to verify fix outcome."},{"lineNumber":112,"author":{"gitId":"-"},"content":"          return of(true);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"          // Verify that Repository has been created if a fix attempt has occurred."},{"lineNumber":115,"author":{"gitId":"-"},"content":"          return this.githubService.isRepositoryPresent(phaseOwner, phaseRepo);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":4,"-":116}},{"path":"src/app/core/services/session-fix-confirmation/session-fix-confirmation.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatDialogRef, MAT_DIALOG_DATA } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"export interface RepositoryData {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  user: string;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  repoName: string;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  selector: \u0027app-session-fix-confirmation\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./session-fix-confirmation.component.html\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./session-fix-confirmation.component.css\u0027]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class SessionFixConfirmationComponent implements OnInit {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(public dialogRef: MatDialogRef\u003cSessionFixConfirmationComponent\u003e, @Inject(MAT_DIALOG_DATA) public data: RepositoryData) {}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":17}},{"path":"src/app/core/services/user.service.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Injectable } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Observable } from \u0027rxjs\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { filter, map, throwIfEmpty } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { GithubUser } from \u0027../models/github-user.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Team } from \u0027../models/team.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../models/user.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DataService } from \u0027./data.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027./github.service\u0027;"},{"lineNumber":9,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { LoggingService } from \u0027./logging.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Injectable({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  providedIn: \u0027root\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Responsible for creation of users and teams within the CATcher application."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"export class UserService {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  public currentUser: User;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  constructor(private githubService: GithubService, private dataService: DataService, private logger: LoggingService) {}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   * Get the authenticated user if it exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  getAuthenticatedUser(): Observable\u003cGithubUser\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    return this.githubService.fetchAuthenticatedUser().pipe("},{"lineNumber":28,"author":{"gitId":"-"},"content":"      map((data: GithubUser) \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return data;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  createUserModel(userLoginId: string): Observable\u003cUser\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    return this.dataService.getDataFile().pipe("},{"lineNumber":36,"author":{"gitId":"-"},"content":"      map((jsonData: {}) \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.currentUser \u003d this.createUser(jsonData, userLoginId);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return this.currentUser;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      filter((user) \u003d\u003e user !\u003d\u003d null),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      throwIfEmpty(() \u003d\u003e new Error(\u0027Unauthorized user.\u0027))"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  reset() {"},{"lineNumber":46,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(\u0027UserService: Clearing current user\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.currentUser \u003d undefined;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  private createUser(data: {}, userLoginId: string): User {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    const lowerCaseUserLoginId \u003d userLoginId.toLowerCase();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    const userRole \u003d this.parseUserRole(data, lowerCaseUserLoginId);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    switch (userRole) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      case UserRole.Student:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        const teamId \u003d data[DataService.STUDENTS_ALLOCATION][lowerCaseUserLoginId][DataService.TEAM_ID];"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        const studentTeam \u003d this.createTeamModel(data[DataService.TEAM_STRUCTURE], teamId);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return \u003cUser\u003e{ loginId: userLoginId, role: userRole, team: studentTeam };"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"      case UserRole.Tutor:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        const tutorTeams: Array\u003cTeam\u003e \u003d Object.keys("},{"lineNumber":62,"author":{"gitId":"-"},"content":"          data[DataService.TUTORS_ALLOCATION][lowerCaseUserLoginId]"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ).map((allocatedTeamId: string) \u003d\u003e this.createTeamModel(data[DataService.TEAM_STRUCTURE], allocatedTeamId));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return \u003cUser\u003e{ loginId: userLoginId, role: userRole, allocatedTeams: tutorTeams };"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"      case UserRole.Admin:"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        const studentTeams: Array\u003cTeam\u003e \u003d Object.keys("},{"lineNumber":69,"author":{"gitId":"-"},"content":"          data[DataService.ADMINS_ALLOCATION][lowerCaseUserLoginId]"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ).map((allocatedTeamId: string) \u003d\u003e this.createTeamModel(data[DataService.TEAM_STRUCTURE], allocatedTeamId));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return \u003cUser\u003e{ loginId: userLoginId, role: userRole, allocatedTeams: studentTeams };"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  private createTeamModel(teamData: {}, teamId: string): Team {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    const teammates: Array\u003cUser\u003e \u003d Object.values(teamData[teamId]).map("},{"lineNumber":80,"author":{"gitId":"-"},"content":"      (teammate: string) \u003d\u003e \u003cUser\u003e{ loginId: teammate, role: UserRole.Student }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    return new Team({ id: teamId, teamMembers: teammates });"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"   * To be used to parse the JSON data containing data pertaining to the user role."},{"lineNumber":88,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":89,"author":{"gitId":"-"},"content":"   * @return NULL if user is unauthorized, meaning that no role is specified for the user."},{"lineNumber":90,"author":{"gitId":"-"},"content":"   *         else the the role with the highest access rights will be returned."},{"lineNumber":91,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  private parseUserRole(data: {}, userLoginId: string): UserRole {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    let userRole: UserRole;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    if (data[DataService.ROLES][DataService.STUDENTS] \u0026\u0026 data[DataService.ROLES][DataService.STUDENTS][[userLoginId]]) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      userRole \u003d UserRole.Student;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    if (data[DataService.ROLES][DataService.TUTORS] \u0026\u0026 data[DataService.ROLES][DataService.TUTORS][[userLoginId]]) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      userRole \u003d UserRole.Tutor;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    if (data[DataService.ROLES][DataService.ADMINS] \u0026\u0026 data[DataService.ROLES][DataService.ADMINS][[userLoginId]]) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      userRole \u003d UserRole.Admin;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    return userRole;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":3,"-":102}},{"path":"src/app/shared/action-toasters/action-toasters.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { CommonModule } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MaterialModule } from \u0027../material.module\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { UndoActionComponent } from \u0027./undo-action/undo-action.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  imports: [CommonModule, MaterialModule],"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  declarations: [UndoActionComponent],"},{"lineNumber":9,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  exports: [UndoActionComponent]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"})"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class ActionToasterModule {}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":10}},{"path":"src/app/shared/action-toasters/undo-action/undo-action.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatSnackBarRef, MAT_SNACK_BAR_DATA } from \u0027@angular/material/snack-bar\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  selector: \u0027app-undo-action\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./undo-action.component.html\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"})"},{"lineNumber":8,"author":{"gitId":"-"},"content":"export class UndoActionComponent {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  constructor(public snackBarRef: MatSnackBarRef\u003cUndoActionComponent\u003e, @Inject(MAT_SNACK_BAR_DATA) public data: any) {}"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":9}},{"path":"src/app/shared/comment-editor/comment-editor.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { HttpErrorResponse } from \u0027@angular/common/http\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { AbstractControl, FormGroup, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import * as DOMPurify from \u0027dompurify\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { FILE_TYPE_SUPPORT_ERROR, getSizeExceedErrorMsg, SUPPORTED_FILE_TYPES, UploadService } from \u0027../../core/services/upload.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { insertUploadingText, insertUploadUrl, insertUploadUrlVideo } from \u0027./upload-text-insertor\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"const BYTES_PER_MB \u003d 1024 * 1024;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"const SHOWN_MAX_UPLOAD_SIZE_MB \u003d 10;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"const SHOWN_MAX_VIDEO_UPLOAD_SIZE_MB \u003d 5;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"const TIME_BETWEEN_UPLOADS_MS \u003d 250;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"const MAX_UPLOAD_SIZE \u003d (SHOWN_MAX_UPLOAD_SIZE_MB + 1) * BYTES_PER_MB; // 11MB to allow 10.x MB"},{"lineNumber":16,"author":{"gitId":"-"},"content":"const MAX_VIDEO_UPLOAD_SIZE \u003d (SHOWN_MAX_VIDEO_UPLOAD_SIZE_MB + 1) * BYTES_PER_MB; // 6MB to allow 5.x MB"},{"lineNumber":17,"author":{"gitId":"-"},"content":"const ISSUE_BODY_SIZE_LIMIT \u003d 40000;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"const SPACE \u003d \u0027 \u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  selector: \u0027app-comment-editor\u0027,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./comment-editor.component.html\u0027,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./comment-editor.component.css\u0027]"},{"lineNumber":25,"author":{"gitId":"-"},"content":"})"},{"lineNumber":26,"author":{"gitId":"-"},"content":"export class CommentEditorComponent implements OnInit {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  readonly SUPPORTED_FILE_TYPES \u003d SUPPORTED_FILE_TYPES;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  constructor(private uploadService: UploadService, private errorHandlingService: ErrorHandlingService, private logger: LoggingService) {}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Input() commentField: AbstractControl; // Compulsory Input"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Input() commentForm: FormGroup; // Compulsory Input"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  @Input() id: string; // Compulsory Input"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  @Input() initialDescription?: string;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  placeholderText \u003d \u0027No details provided.\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  // Allows the comment editor to control the overall form\u0027s completeness."},{"lineNumber":39,"author":{"gitId":"-"},"content":"  @Input() isFormPending?: boolean;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  @Output() isFormPendingChange: EventEmitter\u003cboolean\u003e \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  // Allow the comment editor to control the text of the submit button to prompt the user."},{"lineNumber":43,"author":{"gitId":"-"},"content":"  @Input() submitButtonText?: string;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  @Output() submitButtonTextChange: EventEmitter\u003cstring\u003e \u003d new EventEmitter\u003cstring\u003e();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  initialSubmitButtonText: string;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  lastUploadingTime: string;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027dropArea\u0027, { static: true }) dropArea;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027commentTextArea\u0027, { static: true }) commentTextArea;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027markdownArea\u0027) markdownArea;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  dragActiveCounter \u003d 0;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  uploadErrorMessage: string;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  maxLength \u003d ISSUE_BODY_SIZE_LIMIT;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  formatFileUploadingButtonText(currentButtonText: string) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    return currentButtonText + \u0027 (Waiting for File Upload to finish...)\u0027;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    if (this.initialDescription !\u003d\u003d undefined) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      this.commentField.setValue(this.initialDescription);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    if (this.commentField \u003d\u003d\u003d undefined || this.commentForm \u003d\u003d\u003d undefined || this.id \u003d\u003d\u003d undefined) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      throw new Error(\"Comment Editor\u0027s compulsory properties are not defined.\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    this.initialSubmitButtonText \u003d this.submitButtonText;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    this.commentField.setValidators([Validators.maxLength(this.maxLength)]);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  onKeyPress(event) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    if (this.isControlKeyPressed(event)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      switch (event.key) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case \u0027b\u0027:"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          event.preventDefault();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"          this.insertOrRemoveCharsFromHighlightedText(\u0027**\u0027);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"          break;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case \u0027i\u0027:"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          event.preventDefault();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"          this.insertOrRemoveCharsFromHighlightedText(\u0027_\u0027);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"          break;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"-"},"content":"          return;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"  onDragEnter(event) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    this.dragActiveCounter++;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    if (this.commentField.disabled) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.add(\u0027highlight-drag-box-disabled\u0027);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.add(\u0027highlight-drag-box\u0027);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  // Prevent cursor in textarea from moving when file is dragged over it."},{"lineNumber":104,"author":{"gitId":"-"},"content":"  disableCaretMovement(event) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"  // Sanitize markdown"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  sanitize(commentFieldValue) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    return DOMPurify.sanitize(commentFieldValue);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"  // To enable file drop in non-input elements, the dragOver event must be cancelled."},{"lineNumber":114,"author":{"gitId":"-"},"content":"  enableFileDrop(event) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  onDrop(event) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    this.removeHighlightBorderStyle();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    if (this.commentField.disabled) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    const files \u003d event.dataTransfer.files;"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    if (files \u003d\u003d\u003d undefined || files.length \u003c\u003d 0) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    this.commentTextArea.nativeElement.focus();"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    for (let i \u003d 0; i \u003c files.length; i++) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      setTimeout(() \u003d\u003e {"},{"lineNumber":137,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        this.logger.info(`CommentEditorComponent: File ${i + 1} of ${files.length}. Begin uploading ${files[i].name}.`);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        this.readAndUploadFile(files[i]);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      }, TIME_BETWEEN_UPLOADS_MS * i);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"  onDragExit(event) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    this.removeHighlightBorderStyle();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"  onFileInputUpload(event, fileInput) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    event.preventDefault();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    const files \u003d fileInput.files;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    if (files.length \u003e 0) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(files[0]);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      fileInput.value \u003d \u0027\u0027;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"  updateParentFormsSubmittability(isFormPending: boolean, submitButtonText: string) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    this.isFormPendingChange.emit(isFormPending);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    this.submitButtonTextChange.emit(submitButtonText);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"  readAndUploadFile(file: File): void {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    this.uploadErrorMessage \u003d null;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    const reader \u003d new FileReader();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    const filename \u003d file.name;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    const insertedText \u003d insertUploadingText(filename, this.commentField, this.commentTextArea);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    if (file.size \u003e\u003d MAX_UPLOAD_SIZE) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      this.handleUploadError(getSizeExceedErrorMsg(\u0027file\u0027, SHOWN_MAX_UPLOAD_SIZE_MB), insertedText);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    if (this.uploadService.isVideoFile(filename) \u0026\u0026 file.size \u003e\u003d MAX_VIDEO_UPLOAD_SIZE) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      this.handleUploadError(getSizeExceedErrorMsg(\u0027video\u0027, SHOWN_MAX_VIDEO_UPLOAD_SIZE_MB), insertedText);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    if (!this.uploadService.isSupportedFileType(filename)) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      this.handleUploadError(FILE_TYPE_SUPPORT_ERROR, insertedText);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    // Log the most recent upload."},{"lineNumber":188,"author":{"gitId":"-"},"content":"    this.lastUploadingTime \u003d new Date().getTime().toString();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    const currentFileUploadTime \u003d this.lastUploadingTime;"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    // Prevents Form Submission during Upload"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    this.updateParentFormsSubmittability(true, this.formatFileUploadingButtonText(this.initialSubmitButtonText));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    reader.onload \u003d () \u003d\u003e {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      this.uploadService.uploadFile(reader.result, filename).subscribe("},{"lineNumber":196,"author":{"gitId":"-"},"content":"        (response) \u003d\u003e {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"          if (this.uploadService.isVideoFile(filename)) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            insertUploadUrlVideo(filename, response.data.content.download_url, this.commentField, this.commentTextArea);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            insertUploadUrl(filename, response.data.content.download_url, this.commentField, this.commentTextArea);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"          this.handleUploadError(error, insertedText);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"          // Allow button enabling if this is the last file that was uploaded."},{"lineNumber":206,"author":{"gitId":"-"},"content":"          if (currentFileUploadTime \u003d\u003d\u003d this.lastUploadingTime) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            this.updateParentFormsSubmittability(false, this.initialSubmitButtonText);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        () \u003d\u003e {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"          // Allow button enabling if this is the last file that was uploaded."},{"lineNumber":212,"author":{"gitId":"-"},"content":"          if (currentFileUploadTime \u003d\u003d\u003d this.lastUploadingTime) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            this.updateParentFormsSubmittability(false, this.initialSubmitButtonText);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    reader.readAsDataURL(file);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"  onPaste(event) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    const items \u003d event.clipboardData.items;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    let blob \u003d null;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    for (const item of items) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      if (item.type.indexOf(\u0027image\u0027) \u003d\u003d\u003d 0) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        blob \u003d item.getAsFile();"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    if (blob) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      this.readAndUploadFile(blob);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"  get isInErrorState(): boolean {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    return !!this.uploadErrorMessage;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"  private handleUploadError(error, insertedText: string) {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    if (error instanceof HttpErrorResponse) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      this.errorHandlingService.handleError(error);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      this.uploadErrorMessage \u003d \u0027Something went wrong while uploading your file. Please try again.\u0027;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      this.uploadErrorMessage \u003d error;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    this.commentField.setValue(this.commentField.value.replace(insertedText, \u0027\u0027));"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"  private removeHighlightBorderStyle() {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    this.dragActiveCounter--;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    if (this.dragActiveCounter \u003d\u003d\u003d 0) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      // To make sure when dragging over a child element, drop area is still highlight."},{"lineNumber":253,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.remove(\u0027highlight-drag-box\u0027);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"      this.dropArea.nativeElement.classList.remove(\u0027highlight-drag-box-disabled\u0027);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"  private isControlKeyPressed(event) {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    if (navigator.platform.indexOf(\u0027Mac\u0027) \u003d\u003d\u003d 0) {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      return event.metaKey;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    return event.ctrlKey;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"  private insertOrRemoveCharsFromHighlightedText(char) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    const selectionStart \u003d this.commentTextArea.nativeElement.selectionStart;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    const selectionEnd \u003d this.commentTextArea.nativeElement.selectionEnd;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    const currentText \u003d this.commentField.value;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    const highlightedText \u003d currentText.slice(selectionStart, selectionEnd);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    const highlightedTextTrimmed \u003d highlightedText.trim();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    const spacesRemovedLeft \u003d highlightedText.trimRight().length - highlightedTextTrimmed.length;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    const spacesRemovedRight \u003d highlightedText.trimLeft().length - highlightedTextTrimmed.length;"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"    if (this.hasCharsBeforeAndAfterHighlight(selectionStart, selectionEnd, currentText, char)) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"      this.removeCharsBeforeAndAfterHighlightedText(selectionStart, selectionEnd, currentText, highlightedText, char);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    } else if (this.hasCharsInTrimmedHighlight(highlightedText, char)) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"      this.removeCharsFromHighlightedText("},{"lineNumber":278,"author":{"gitId":"-"},"content":"        selectionStart,"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        selectionEnd,"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        currentText,"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        highlightedTextTrimmed,"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        char,"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        spacesRemovedLeft,"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        spacesRemovedRight"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      this.insertCharsToHighlightedText("},{"lineNumber":288,"author":{"gitId":"-"},"content":"        selectionStart,"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        selectionEnd,"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        currentText,"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        highlightedTextTrimmed,"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        char,"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        spacesRemovedLeft,"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        spacesRemovedRight"},{"lineNumber":295,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"  private hasCharsBeforeAndAfterHighlight(selectionStart, selectionEnd, currentText, char) {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    const hasInsertedCharBefore \u003d currentText.slice(selectionStart - char.length, selectionStart) \u003d\u003d\u003d char;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    const hasInsertedCharAfter \u003d currentText.slice(selectionEnd, selectionEnd + char.length) \u003d\u003d\u003d char;"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    return hasInsertedCharBefore \u0026\u0026 hasInsertedCharAfter;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"  private hasCharsInTrimmedHighlight(highlightedText, char) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    const highlightedTextTrimmed \u003d highlightedText.trim();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    const hasCharAtFront \u003d highlightedTextTrimmed.slice(0, char.length) \u003d\u003d\u003d char;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    const hasCharAtEnd \u003d highlightedTextTrimmed.slice(-char.length) \u003d\u003d\u003d char;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    return hasCharAtFront \u0026\u0026 hasCharAtEnd;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"  private removeCharsBeforeAndAfterHighlightedText(selectionStart, selectionEnd, currentText, highlightedText, char) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    this.commentField.setValue("},{"lineNumber":314,"author":{"gitId":"-"},"content":"      currentText.slice(0, selectionStart - char.length) + highlightedText + currentText.slice(selectionEnd + char.length)"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    this.commentTextArea.nativeElement.setSelectionRange(selectionStart - char.length, selectionEnd - char.length);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"  private removeCharsFromHighlightedText("},{"lineNumber":320,"author":{"gitId":"-"},"content":"    selectionStart,"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    selectionEnd,"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    currentText,"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    highlightedTextTrimmed,"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    char,"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    spacesRemovedLeft,"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    spacesRemovedRight"},{"lineNumber":327,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    this.commentField.setValue("},{"lineNumber":329,"author":{"gitId":"-"},"content":"      currentText.slice(0, selectionStart) +"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        SPACE.repeat(spacesRemovedLeft) +"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        highlightedTextTrimmed.slice(char.length, -char.length) +"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        SPACE.repeat(spacesRemovedRight) +"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        currentText.slice(selectionEnd)"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    this.commentTextArea.nativeElement.setSelectionRange("},{"lineNumber":336,"author":{"gitId":"-"},"content":"      selectionStart + spacesRemovedLeft,"},{"lineNumber":337,"author":{"gitId":"-"},"content":"      selectionEnd - 2 * char.length - spacesRemovedRight"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":339,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"  private insertCharsToHighlightedText("},{"lineNumber":342,"author":{"gitId":"-"},"content":"    selectionStart,"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    selectionEnd,"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    currentText,"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    highlightedTextTrimmed,"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    char,"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    spacesRemovedLeft,"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    spacesRemovedRight"},{"lineNumber":349,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    this.commentField.setValue("},{"lineNumber":351,"author":{"gitId":"-"},"content":"      currentText.slice(0, selectionStart) +"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        SPACE.repeat(spacesRemovedLeft) +"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        char +"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        highlightedTextTrimmed +"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        char +"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        SPACE.repeat(spacesRemovedRight) +"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        currentText.slice(selectionEnd)"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    this.commentTextArea.nativeElement.setSelectionRange("},{"lineNumber":360,"author":{"gitId":"-"},"content":"      selectionStart + char.length + spacesRemovedLeft,"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      selectionEnd + char.length - spacesRemovedRight"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":363,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":364,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":363}},{"path":"src/app/shared/error-toasters/error-toaster.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { CommonModule } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MaterialModule } from \u0027../material.module\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { FormErrorComponent } from \u0027./form-error/form-error.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { GeneralMessageErrorComponent } from \u0027./general-message-error/general-message-error.component\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { InvalidCredentialsErrorComponent } from \u0027./invalid-credentials-error/invalid-credentials-error.component\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ToasterComponent } from \u0027./toaster/toaster.component\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  imports: [CommonModule, MaterialModule],"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  declarations: [GeneralMessageErrorComponent, FormErrorComponent, InvalidCredentialsErrorComponent, ToasterComponent],"},{"lineNumber":12,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  exports: [GeneralMessageErrorComponent, FormErrorComponent, InvalidCredentialsErrorComponent]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export class ErrorToasterModule {}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":13}},{"path":"src/app/shared/error-toasters/invalid-credentials-error/invalid-credentials-error.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatSnackBarRef, MAT_SNACK_BAR_DATA } from \u0027@angular/material/snack-bar\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  selector: \u0027app-form-error\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./invalid-credentials-error.component.html\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"})"},{"lineNumber":8,"author":{"gitId":"-"},"content":"export class InvalidCredentialsErrorComponent {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  constructor(public snackBarRef: MatSnackBarRef\u003cInvalidCredentialsErrorComponent\u003e, @Inject(MAT_SNACK_BAR_DATA) public data: any) {}"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":9}},{"path":"src/app/shared/issue-tables/IssuesDataTable.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { DataSource } from \u0027@angular/cdk/table\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatPaginator } from \u0027@angular/material/paginator\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatSort } from \u0027@angular/material/sort\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { BehaviorSubject, merge, Observable, Subscription } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { paginateData } from \u0027./issue-paginator\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { getSortedData } from \u0027./issue-sorter\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { applySearchFilter } from \u0027./search-filter\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"export class IssuesDataTable extends DataSource\u003cIssue\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  private filterChange \u003d new BehaviorSubject(\u0027\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  private teamFilterChange \u003d new BehaviorSubject(\u0027\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  private issuesSubject \u003d new BehaviorSubject\u003cIssue[]\u003e([]);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  private issueSubscription: Subscription;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  public isLoading$ \u003d this.issueService.isLoading.asObservable();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private sort: MatSort,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private paginator: MatPaginator,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private displayedColumn: string[],"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private defaultFilter?: (issue: Issue) \u003d\u003e boolean"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    super();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  connect(): Observable\u003cIssue[]\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    return this.issuesSubject.asObservable();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  disconnect() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    this.filterChange.complete();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    this.teamFilterChange.complete();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    this.issuesSubject.complete();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    this.issueSubscription.unsubscribe();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    this.issueService.stopPollIssues();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  loadIssues() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    const displayDataChanges \u003d ["},{"lineNumber":44,"author":{"gitId":"-"},"content":"      this.issueService.issues$,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      this.paginator.page,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      this.sort.sortChange,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      this.filterChange,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      this.teamFilterChange"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    ];"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.issueService.startPollIssues();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.issueSubscription \u003d this.issueService.issues$"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":54,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap(() \u003d\u003e {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"          return merge(...displayDataChanges).pipe("},{"lineNumber":56,"author":{"gitId":"-"},"content":"            map(() \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"              let data \u003d \u003cIssue[]\u003eObject.values(this.issueService.issues$.getValue()).reverse();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"              if (this.defaultFilter) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                data \u003d data.filter(this.defaultFilter);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"              }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"              data \u003d getSortedData(this.sort, data);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"              data \u003d this.getFilteredTeamData(data);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"              data \u003d applySearchFilter(this.filter, this.displayedColumn, this.issueService, data);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"              data \u003d paginateData(this.paginator, data);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"              return data;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            })"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          );"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      .subscribe((issues) \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.issuesSubject.next(issues);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  get filter(): string {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    return this.filterChange.value;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  set filter(filter: string) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    this.filterChange.next(filter);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  get teamFilter(): string {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    return this.teamFilterChange.value;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  set teamFilter(teamFilter: string) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    this.teamFilterChange.next(teamFilter);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    this.issueService.setIssueTeamFilter(this.teamFilterChange.value);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  private getFilteredTeamData(data: Issue[]): Issue[] {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return data.filter((issue) \u003d\u003e {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      if (!this.teamFilter || this.teamFilter \u003d\u003d\u003d \u0027All Teams\u0027) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      return issue.teamAssigned.id \u003d\u003d\u003d this.teamFilter;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":99}},{"path":"src/app/shared/issue-tables/issue-tables-columns.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"export enum TABLE_COLUMNS {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  ID \u003d \u0027id\u0027,"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  TITLE \u003d \u0027title\u0027,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  TEAM_ASSIGNED \u003d \u0027teamAssigned\u0027,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  TYPE \u003d \u0027type\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  SEVERITY \u003d \u0027severity\u0027,"},{"lineNumber":7,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  RESPONSE \u003d \u0027response\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  TESTER_DISAGREE \u003d \u0027testerDisagree\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  ASSIGNEE \u003d \u0027assignees\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  DUPLICATED_ISSUES \u003d \u0027duplicatedIssues\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  TODO \u003d \u0027Todo Remaining\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  ACTIONS \u003d \u0027actions\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":12}},{"path":"src/app/shared/issue-tables/issue-tables.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cmat-table [dataSource]\u003d\"this.issues\" matSort class\u003d\"mat-elevation-z8\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003c!-- ID Column --\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"id\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e ID \u003c/mat-header-cell\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \u003cspan (click)\u003d\"$event.stopPropagation()\" style\u003d\"cursor: default\"\u003e{{ issue.id }}\u003c/span\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003c!-- Title Column --\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"title\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Title \u003c/mat-header-cell\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003ca class\u003d\"no-underline link-grey-dark\" [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\"\u003e {{ this.fitTitleText(issue.title) }} \u003c/a\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c!-- Team Assigned Column --\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cng-container *ngIf\u003d\"userService.currentUser.role !\u003d\u003d \u0027Student\u0027\" matColumnDef\u003d\"teamAssigned\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Team \u003c/mat-header-cell\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e {{ (issue.teamAssigned \u0026\u0026 issue.teamAssigned.id) || \u0027-\u0027 }} \u003c/mat-cell\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  \u003c!-- Type Column --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"type\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Type \u003c/mat-header-cell\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027type\u0027, issue.type))\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        {{ issue.type || \u0027-\u0027 }}"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenType \u0026\u0026 issue.teamChosenType !\u003d issue.type\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline; padding: 1px 2px\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cmat-icon class\u003d\"arrow-right\"\u003earrow_right_alt\u003c/mat-icon\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenType \u0026\u0026 issue.teamChosenType !\u003d issue.type\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027type\u0027, issue.teamChosenType))\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        {{ issue.teamChosenType }}"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u003c!-- Severity Column --\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"severity\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Severity \u003c/mat-header-cell\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027severity\u0027, issue.severity))\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        {{ issue.severity || \u0027-\u0027 }}"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenSeverity \u0026\u0026 issue.teamChosenSeverity !\u003d issue.severity\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline; margin: 3px\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003cmat-icon class\u003d\"arrow-right\"\u003earrow_right_alt\u003c/mat-icon\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.teamChosenSeverity \u0026\u0026 issue.teamChosenSeverity !\u003d issue.severity\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027severity\u0027, issue.teamChosenSeverity))\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        {{ issue.teamChosenSeverity }}"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  \u003c!--Response Tag Column--\u003e"},{"lineNumber":79,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u003cng-container matColumnDef\u003d\"response\"\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Response \u003c/mat-header-cell\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":84,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        *ngIf\u003d\"issue.response\""},{"lineNumber":85,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027response\u0027, issue.response))\""},{"lineNumber":86,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":87,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        {{ issue.response }}"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":89,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      \u003cspan *ngIf\u003d\"!issue.response\" style\u003d\"margin-left: 10%\"\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        \u003cmat-icon matTooltip\u003d\"Should not be empty\" matTooltipPosition\u003d\"above\" color\u003d\"warn\"\u003ewarning\u003c/mat-icon\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003c!--Assignee Column--\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"assignees\"\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell mat-header-cell *matHeaderCellDef mat-sort-header\u003e Assignees \u003c/mat-header-cell\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      \u003cspan (click)\u003d\"$event.stopPropagation()\" style\u003d\"cursor: default\" *ngIf\u003d\"issue.assignees.length !\u003d\u003d 0\"\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        {{ issue.assignees.join(\u0027, \u0027) }}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"issue.assignees.length \u003d\u003d\u003d 0\" style\u003d\"margin-left: 5%\"\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        \u003cmat-icon matTooltip\u003d\"We strongly recommend assigning all issues to someone\" matTooltipPosition\u003d\"above\" style\u003d\"color: #ffab40\"\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"          warning"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        \u003c/mat-icon\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  \u003c!-- Duplicated Issues Column --\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"duplicatedIssues\"\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef\u003e Duplicates \u003c/mat-header-cell\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"(issueService.getDuplicateIssuesFor(issue) | async).length \u003d\u003d\u003d 0\"\u003e-\u003c/div\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      \u003cmat-chip-list"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        *ngFor\u003d\"let duplicateIssue of issueService.getDuplicateIssuesFor(issue) | async\""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline-block; margin-left: 5px\""},{"lineNumber":118,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        \u003cmat-chip"},{"lineNumber":120,"author":{"gitId":"-"},"content":"          [routerLink]\u003d\"[\u0027issues/\u0027 + duplicateIssue.id]\""},{"lineNumber":121,"author":{"gitId":"-"},"content":"          [matTooltip]\u003d\"duplicateIssue.title\""},{"lineNumber":122,"author":{"gitId":"-"},"content":"          matTooltipPosition\u003d\"above\""},{"lineNumber":123,"author":{"gitId":"-"},"content":"          style\u003d\"font-size: 12px; cursor: pointer\""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"          #{{ duplicateIssue.id }}"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        \u003c/mat-chip\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      \u003c/mat-chip-list\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  \u003c!-- To do Column --\u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"Todo Remaining\"\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef mat-sort-header\u003e Todo Remaining \u003c/mat-header-cell\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"isTodoListChecked(issue) \u0026\u0026 issue.issueDisputes.length \u003e 0\"\u003e \u003cfont color\u003d\"green\"\u003eAll tasks are completed\u003c/font\u003e \u003c/span\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"!isTodoListChecked(issue)\"\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        \u003cfont color\u003d\"red\""},{"lineNumber":138,"author":{"gitId":"-"},"content":"          \u003e{{ issue.issueDisputes.length - todoFinished(issue) }}/{{ issue.issueDisputes.length }} tasks pending.\u003c/font"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        \u003e\u003c/span"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      \u003cprogress"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.issueDisputes.length \u003e 0\""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        value\u003d\"{{ todoFinished(issue) }}\""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        max\u003d\"{{ issue.issueDisputes.length }}\""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        role\u003d\"progressbar\""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        style\u003d\"width: 100%\""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        aria-valuenow\u003d\"100\""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        aria-valuemin\u003d\"0\""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        aria-valuemax\u003d\"100\""},{"lineNumber":150,"author":{"gitId":"-"},"content":"      \u003e\u003c/progress\u003e"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"issue.issueDisputes.length \u003d\u003d\u003d 0\"\u003e No Todo List for this issue \u003c/span\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"  \u003c!--Tester Disagree Column--\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"testerDisagree\"\u003e"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell mat-header-cell *matHeaderCellDef mat-sort-header\u003eResponse\u003c/mat-header-cell\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      \u003c!-- Response Agree/Disagree colours are the same as Response Agree/Rejected label colours for uniformity in the app --\u003e"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issue.testerDisagree\""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027response\u0027, \u0027Rejected\u0027))\""},{"lineNumber":164,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        Disagree"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      \u003cspan"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        (click)\u003d\"$event.stopPropagation()\""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"!issue.testerDisagree\""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        [ngStyle]\u003d\"this.labelService.setLabelStyle(this.labelService.getColorOfLabel(\u0027response\u0027, \u0027Accepted\u0027))\""},{"lineNumber":171,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Agree"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      \u003c/span\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  \u003c!-- Action Buttons Column --\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003cng-container matColumnDef\u003d\"actions\"\u003e"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    \u003cmat-header-cell *matHeaderCellDef\u003e Actions \u003c/mat-header-cell\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    \u003cmat-cell *matCellDef\u003d\"let issue\"\u003e"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"View this issue on GitHub\""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isActionVisible(action_buttons.VIEW_IN_WEB)\""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        (click)\u003d\"this.viewIssueInBrowser(issue.id, $event)\""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":187,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003eopen_in_new\u003c/mat-icon\u003e"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isResponseEditable() \u0026\u0026 !issue.status \u0026\u0026 this.isActionVisible(action_buttons.RESPOND_TO_ISSUE); else tryEditIssue\""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        color\u003d\"accent\""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Respond to this issue\""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        (click)\u003d\"this.logIssueRespondRouting(issue.id)\""},{"lineNumber":198,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003efeedback\u003c/mat-icon\u003e"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \u003cng-template #tryEditIssue\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":203,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"permissions.isIssueEditable() \u0026\u0026 this.isActionVisible(action_buttons.FIX_ISSUE)\""},{"lineNumber":204,"author":{"gitId":"-"},"content":"          mat-button"},{"lineNumber":205,"author":{"gitId":"-"},"content":"          color\u003d\"accent\""},{"lineNumber":206,"author":{"gitId":"-"},"content":"          style\u003d\"transform: scale(0.8)\""},{"lineNumber":207,"author":{"gitId":"-"},"content":"          matTooltip\u003d\"Edit this issue\""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":209,"author":{"gitId":"-"},"content":"          \u003cmat-icon\u003eedit\u003c/mat-icon\u003e"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      \u003c/ng-template\u003e"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isResponseEditable() \u0026\u0026 issue.status \u0026\u0026 this.isActionVisible(action_buttons.MARK_AS_RESPONDED)\""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        color\u003d\"primary\""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        (click)\u003d\"markAsResponded(issue, $event)\""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Mark this issue as Responded\""},{"lineNumber":219,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003echeck_circle\u003c/mat-icon\u003e"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":222,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        color\u003d\"primary\""},{"lineNumber":224,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Mark this issue as Pending\""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        (click)\u003d\"markAsPending(issue, $event)\""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        *ngIf\u003d\""},{"lineNumber":229,"author":{"gitId":"-"},"content":"          (userService.currentUser.role \u003d\u003d\u003d \u0027Student\u0027 || userService.currentUser.role \u003d\u003d\u003d \u0027Admin\u0027) \u0026\u0026"},{"lineNumber":230,"author":{"gitId":"-"},"content":"          this.isActionVisible(action_buttons.MARK_AS_PENDING)"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        \""},{"lineNumber":232,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003ecancel\u003c/mat-icon\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      \u003cbutton"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        mat-button"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        color\u003d\"warn\""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"permissions.isIssueDeletable() \u0026\u0026 !issuesPendingDeletion[issue.id] \u0026\u0026 this.isActionVisible(action_buttons.DELETE_ISSUE)\""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        (click)\u003d\"openDeleteDialog(issue.id, $event); $event.stopPropagation()\""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        matTooltip\u003d\"Delete this issue\""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        style\u003d\"transform: scale(0.8)\""},{"lineNumber":242,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003cmat-icon\u003edelete_outline\u003c/mat-icon\u003e"},{"lineNumber":244,"author":{"gitId":"-"},"content":"      \u003c/button\u003e"},{"lineNumber":245,"author":{"gitId":"-"},"content":"      \u003cmat-spinner"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        color\u003d\"warn\""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        [diameter]\u003d\"25\""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        style\u003d\"display: inline; padding-right: 30px; margin-left: 5px\""},{"lineNumber":249,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"issuesPendingDeletion[issue.id] \u0026\u0026 this.isActionVisible(action_buttons.DELETE_ISSUE)\""},{"lineNumber":250,"author":{"gitId":"-"},"content":"      \u003e\u003c/mat-spinner\u003e"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u003c/mat-cell\u003e"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  \u003c/ng-container\u003e"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"  \u003cmat-header-row *matHeaderRowDef\u003d\"this.headers\"\u003e\u003c/mat-header-row\u003e\u003e"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  \u003cmat-row"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    *matRowDef\u003d\"let issue; columns: this.headers\""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    (click)\u003d\"this.logIssueEditRouting(issue.id)\""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    [routerLink]\u003d\"\u0027issues/\u0027 + issue.id\""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    style\u003d\"cursor: pointer\""},{"lineNumber":260,"author":{"gitId":"-"},"content":"  \u003e\u003c/mat-row\u003e"},{"lineNumber":261,"author":{"gitId":"-"},"content":"\u003c/mat-table\u003e"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cmat-card *ngIf\u003d\"this.issues.isLoading$ | async\" style\u003d\"display: flex; justify-content: center; align-items: center\"\u003e"},{"lineNumber":263,"author":{"gitId":"-"},"content":"  \u003cmat-progress-spinner color\u003d\"primary\" mode\u003d\"indeterminate\" diameter\u003d\"50\" strokeWidth\u003d\"5\"\u003e\u003c/mat-progress-spinner\u003e"},{"lineNumber":264,"author":{"gitId":"-"},"content":"\u003c/mat-card\u003e"},{"lineNumber":265,"author":{"gitId":"-"},"content":"\u003cmat-paginator [pageSize]\u003d\"20\" [pageSizeOptions]\u003d\"[10, 20, 50]\"\u003e\u003c/mat-paginator\u003e"}],"authorContributionMap":{"vigneshsankariyer1234567890":5,"-":260}},{"path":"src/app/shared/issue-tables/issue-tables.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { AfterViewInit, Component, Input, OnInit, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatPaginator } from \u0027@angular/material/paginator\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatSnackBar } from \u0027@angular/material/snack-bar\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { MatSort } from \u0027@angular/material/sort\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../core/models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../core/services/dialog.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../core/services/label.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../core/services/permission.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { UndoActionComponent } from \u0027../../shared/action-toasters/undo-action/undo-action.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { IssuesDataTable } from \u0027./IssuesDataTable\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"export enum ACTION_BUTTONS {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  VIEW_IN_WEB,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  MARK_AS_RESPONDED,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  MARK_AS_PENDING,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  RESPOND_TO_ISSUE,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  FIX_ISSUE,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  DELETE_ISSUE"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-tables\u0027,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-tables.component.html\u0027,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-tables.component.css\u0027]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"})"},{"lineNumber":33,"author":{"gitId":"-"},"content":"export class IssueTablesComponent implements OnInit, AfterViewInit {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  snackBarAutoCloseTime \u003d 3000;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  @Input() headers: string[];"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  @Input() actions: ACTION_BUTTONS[];"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  @Input() filters?: any \u003d undefined;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  @ViewChild(MatSort, { static: true }) sort: MatSort;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  issues: IssuesDataTable;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  issuesPendingDeletion: { [id: number]: boolean };"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  public readonly action_buttons \u003d ACTION_BUTTONS;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon deleting an issue"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  private readonly deleteIssueModalMessages \u003d [\u0027Do you wish to delete this issue?\u0027, \u0027This action is irreversible!\u0027];"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Yes, I wish to delete this issue\u0027;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \"No, I don\u0027t wish to delete this issue\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":61,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    private logger: LoggingService,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private dialogService: DialogService,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private snackBar: MatSnackBar \u003d null"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.issues \u003d new IssuesDataTable(this.issueService, this.sort, this.paginator, this.headers, this.filters);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {};"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  ngAfterViewInit(): void {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      this.issues.loadIssues();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   * Formats the title text to account for those that contain long words."},{"lineNumber":79,"author":{"gitId":"-"},"content":"   * @param title - Title of Issue that is to be displayed in the Table Row."},{"lineNumber":80,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  fitTitleText(title: string): string {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    // Arbitrary Length of Characters beyond which an overflow occurs."},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const MAX_WORD_LENGTH \u003d 43;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const SPLITTER_TEXT \u003d \u0027 \u0027;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const ELLIPSES \u003d \u0027...\u0027;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    return title"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      .split(SPLITTER_TEXT)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      .map((word) \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (word.length \u003e MAX_WORD_LENGTH) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"          return word.substring(0, MAX_WORD_LENGTH - 5).concat(ELLIPSES);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return word;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      .join(SPLITTER_TEXT);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  isActionVisible(action: ACTION_BUTTONS): boolean {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    return this.actions.includes(action);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  markAsResponded(issue: Issue, event: Event) {"},{"lineNumber":103,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Marking Issue ${issue.id} as Responded`);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Done;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe("},{"lineNumber":107,"author":{"gitId":"-"},"content":"      (updatedIssue) \u003d\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  isResponseEditable() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable() || this.permissions.isTesterResponseEditable();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  markAsPending(issue: Issue, event: Event) {"},{"lineNumber":122,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Marking Issue ${issue.id} as Pending`);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    const newIssue \u003d issue.clone(this.phaseService.currentPhase);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    newIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    this.issueService.updateIssue(newIssue).subscribe("},{"lineNumber":126,"author":{"gitId":"-"},"content":"      (updatedIssue) \u003d\u003e {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        this.issueService.updateLocalStore(updatedIssue);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  logIssueRespondRouting(id: number) {"},{"lineNumber":137,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Proceeding to Respond to Issue ${id}`);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"  logIssueEditRouting(id: number) {"},{"lineNumber":141,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Proceeding to Edit Issue ${id}`);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   * Gets the number of resolved disputes."},{"lineNumber":146,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  todoFinished(issue: Issue): number {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    return issue.issueDisputes.length - issue.numOfUnresolvedDisputes();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   * Checks if all the disputes are resolved."},{"lineNumber":153,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  isTodoListChecked(issue: Issue): boolean {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    return issue.issueDisputes \u0026\u0026 issue.numOfUnresolvedDisputes() \u003d\u003d\u003d 0;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"  viewIssueInBrowser(id: number, event: Event) {"},{"lineNumber":159,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Opening Issue ${id} on Github`);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    this.githubService.viewIssueInBrowser(id, event);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"  deleteIssue(id: number, event: Event) {"},{"lineNumber":164,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Deleting Issue ${id}`);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    this.issuesPendingDeletion \u003d {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      ...this.issuesPendingDeletion,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      [id]: true"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    this.issueService"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      .deleteIssue(id)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":172,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"          const { [id]: issueRemoved, ...theRest } \u003d this.issuesPendingDeletion;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"          this.issuesPendingDeletion \u003d theRest;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":178,"author":{"gitId":"-"},"content":"        (removedIssue) \u003d\u003e {},"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    let snackBarRef \u003d null;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    snackBarRef \u003d this.snackBar.openFromComponent(UndoActionComponent, {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      data: { message: `Deleted issue ${id}` },"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      duration: this.snackBarAutoCloseTime"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    snackBarRef.onAction().subscribe(() \u003d\u003e {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      this.undeleteIssue(id, event);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"  undeleteIssue(id: number, event: Event) {"},{"lineNumber":196,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.info(`IssueTablesComponent: Undeleting Issue ${id}`);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    this.issueService.undeleteIssue(id).subscribe("},{"lineNumber":198,"author":{"gitId":"-"},"content":"      (reopenedIssue) \u003d\u003e {},"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    event.stopPropagation();"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    this.snackBar.open(`Restored issue ${id}`, \u0027\u0027, { duration: this.snackBarAutoCloseTime });"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"  openDeleteDialog(id: number, event: Event) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":210,"author":{"gitId":"-"},"content":"      this.deleteIssueModalMessages,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":217,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        this.logger.info(`IssueTablesComponent: Deleting issue ${id}`);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        this.deleteIssue(id, event);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":9,"-":213}},{"path":"src/app/shared/issue/conflict-dialog/conflict-dialog.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatDialogRef, MAT_DIALOG_DATA } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatTabChangeEvent } from \u0027@angular/material/tabs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { DomSanitizer, SafeHtml } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../core/services/label.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A Component that is in a form of a dialog modal and its purpose is to"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * display the difference between 2 pieces of text."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  selector: \u0027app-conflict-dialog\u0027,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  templateUrl: \u0027conflict-dialog.component.html\u0027,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./conflict-dialog.component.css\u0027]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"})"},{"lineNumber":18,"author":{"gitId":"-"},"content":"export class ConflictDialogComponent {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  isOnPreview \u003d false;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  isReady \u003d false;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  showDiff \u003d true;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  diffHtml: SafeHtml;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  updatedHtml: SafeHtml;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public dialogRef: MatDialogRef\u003cConflictDialogComponent\u003e,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Inject(MAT_DIALOG_DATA) public data: Conflict,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private sanitizer: DomSanitizer,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public issueService: IssueService"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    this.diffHtml \u003d this.sanitizer.bypassSecurityTrustHtml(data.getHtmlDiffString());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    this.updatedHtml \u003d this.sanitizer.bypassSecurityTrustHtml(data.getHtmlUpdatedString());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    this.isReady \u003d true;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  close(): void {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    this.dialogRef.close();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  handleChangeShowDiff() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    this.showDiff \u003d !this.showDiff;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  handleTabChange(event: MatTabChangeEvent): void {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.isOnPreview \u003d event.index \u003d\u003d\u003d 1;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":48}},{"path":"src/app/shared/issue/description/description.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../../view-issue/view-issue.component\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027../conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-description\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./description.component.html\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./description.component.css\u0027]"},{"lineNumber":20,"author":{"gitId":"-"},"content":"})"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export class DescriptionComponent implements OnInit {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  issueDescriptionForm: FormGroup;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  @Input() title: string;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Output() changeEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    this.issueDescriptionForm \u003d this.formBuilder.group({"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027]"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.changeEditState.emit(true);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.issueDescriptionForm.setValue({"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      description: this.issue[\u0027description\u0027] || \u0027\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  updateDescription(form: NgForm) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    if (this.issueDescriptionForm.invalid) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.issueService"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      .getLatestIssue(this.issue.id)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":71,"author":{"gitId":"-"},"content":"        map((issue: Issue) \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          return issue.description \u003d\u003d\u003d this.issue.description;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":74,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap((isSaveToUpdate: boolean) \u003d\u003e {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          if (isSaveToUpdate || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return this.issueService.updateIssue(this.getUpdatedIssue());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            this.conflict \u003d new Conflict(this.issue.description, this.issueService.issues[this.issue.id].description);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            this.viewChanges();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isSavePending \u003d false))"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":87,"author":{"gitId":"-"},"content":"        (editedIssue: Issue) \u003d\u003e {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(editedIssue);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      data: this.conflict,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    this.conflict \u003d undefined;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    this.changeEditState.emit(false);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"   * When user exits exit mode, we will need to sync the issue in IssueService with this component."},{"lineNumber":113,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  cancelEditMode(): void {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":122,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const isModified \u003d this.dialogService.checkIfFieldIsModified(this.issueDescriptionForm, \u0027description\u0027, \u0027description\u0027, this.issue);"},{"lineNumber":123,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":124,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      isModified,"},{"lineNumber":125,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":126,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":127,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    );"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":132,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  private getUpdatedIssue(): Issue {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    const newIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    newIssue.description \u003d Issue.updateDescription(this.issueDescriptionForm.get(\u0027description\u0027).value);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    return newIssue;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":8,"-":141}},{"path":"src/app/shared/issue/duplicateOf/duplicate-of.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild, ViewEncapsulation } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormControl } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatCheckbox } from \u0027@angular/material/checkbox\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { MatSelect, MatSelectChange } from \u0027@angular/material/select\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Observable, ReplaySubject, Subject } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { first, map, takeUntil } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { TABLE_COLUMNS } from \u0027../../issue-tables/issue-tables-columns\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { applySearchFilter } from \u0027../../issue-tables/search-filter\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  selector: \u0027app-duplicate-of-component\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./duplicate-of.component.html\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./duplicate-of.component.css\u0027],"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  encapsulation: ViewEncapsulation.None"},{"lineNumber":20,"author":{"gitId":"-"},"content":"})"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export class DuplicateOfComponent implements OnInit, OnDestroy {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  isEditing \u003d false;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  duplicatedIssueList: Observable\u003cIssue[]\u003e;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  searchFilterCtrl: FormControl \u003d new FormControl();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  filteredDuplicateIssueList: ReplaySubject\u003cIssue[]\u003e \u003d new ReplaySubject\u003cIssue[]\u003e(1);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @ViewChild(MatSelect, { static: true }) duplicateOfSelection: MatSelect;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @ViewChild(MatCheckbox, { static: true }) duplicatedCheckbox: MatCheckbox;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  // A subject that will emit a signal when this component is being destroyed"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private _onDestroy \u003d new Subject\u003cvoid\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"  // Max chars visible for a duplicate entry in duplicates dropdown list."},{"lineNumber":38,"author":{"gitId":"-"},"content":"  readonly MAX_TITLE_LENGTH_FOR_DUPLICATE_ISSUE \u003d 17;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  // Max chars visible for a non-duplicate entry in duplicates dropdown list."},{"lineNumber":40,"author":{"gitId":"-"},"content":"  readonly MAX_TITLE_LENGTH_FOR_NON_DUPLICATE_ISSUE \u003d 37;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"   * Checks if the supplied issue requires a tooltip"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * in the UI as some information may be hidden due to truncation."},{"lineNumber":52,"author":{"gitId":"-"},"content":"   * @param issue - Displayed issue that may need a tooltip."},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * @return - true (to enable tooltip) / false (to disable tooltip)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  isTooltipNecessary(issue: Issue): boolean {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Maximum Possible Title length varies based on whether the issue"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    // is a duplicate. (Whether the Duplicate Issue Tag is visible)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    let maxTitleLength: number;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    maxTitleLength \u003d issue.duplicated ? this.MAX_TITLE_LENGTH_FOR_DUPLICATE_ISSUE : this.MAX_TITLE_LENGTH_FOR_NON_DUPLICATE_ISSUE;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    return issue.title.length \u003e maxTitleLength;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  ngOnDestroy(): void {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this._onDestroy.next(); // Emits the destroy signal"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this._onDestroy.complete();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList \u003d this.getDupIssueList();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    // Populate the filtered list with all the issues first"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList.pipe(first()).subscribe((issues) \u003d\u003e this.filteredDuplicateIssueList.next(issues));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.searchFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe((_) \u003d\u003e this.filterIssues());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  private filterIssues(): void {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    this.changeFilter(this.duplicatedIssueList, this.searchFilterCtrl.value).subscribe((issues) \u003d\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      this.filteredDuplicateIssueList.next(issues)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  updateDuplicateStatus(event: MatSelectChange) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const latestIssue \u003d this.getUpdatedIssue(event);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.issueService.updateIssueWithComment(latestIssue, latestIssue.issueComment).subscribe("},{"lineNumber":85,"author":{"gitId":"-"},"content":"      (issue) \u003d\u003e this.issueUpdated.emit(issue),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e this.errorHandlingService.handleError(error)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  dupIssueOptionIsDisabled(issue: Issue): boolean {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    return issue.duplicated || !!issue.duplicateOf;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  getDisabledDupOptionErrorText(issue: Issue): string {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    return this.dupIssueOptionIsDisabled(issue) ? \u0027Duplicate of #\u0027 + issue.duplicateOf : \u0027\u0027;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  handleCheckboxChange(event) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    if (event.checked) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      this.openSelection();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      this.isEditing \u003d false;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.duplicateOfSelection.close();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      this.duplicateOfSelection.value \u003d null;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      this.updateDuplicateStatus(null);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"  openSelection() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    this.isEditing \u003d true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    this.duplicateOfSelection.open();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  handleSelectionOpenChange(isOpen) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    if (!isOpen) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"      this.isEditing \u003d false;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      this.duplicatedCheckbox.checked \u003d this.duplicateOfSelection.value;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  getUpdatedIssue(duplicateCheckboxEvent: MatSelectChange): Issue {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    clone.duplicated \u003d !!duplicateCheckboxEvent;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    clone.duplicateOf \u003d duplicateCheckboxEvent ? duplicateCheckboxEvent.value : null;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    if (duplicateCheckboxEvent) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"      const duplicatedIssue \u003d this.issueService.issues[clone.duplicateOf];"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      clone.severity \u003d duplicatedIssue.severity;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      clone.type \u003d duplicatedIssue.type;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      clone.assignees \u003d duplicatedIssue.assignees;"},{"lineNumber":130,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      clone.response \u003d duplicatedIssue.response;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    clone.issueComment.description \u003d clone.createGithubTeamResponse();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  private changeFilter(issuesObservable: Observable\u003cIssue[]\u003e, searchInputString): Observable\u003cIssue[]\u003e {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    return issuesObservable.pipe("},{"lineNumber":138,"author":{"gitId":"-"},"content":"      first(),"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      map((issues) \u003d\u003e {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return applySearchFilter(searchInputString, [TABLE_COLUMNS.ID, TABLE_COLUMNS.TITLE], this.issueService, issues);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  private getDupIssueList(): Observable\u003cIssue[]\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    return this.issueService.issues$.pipe("},{"lineNumber":147,"author":{"gitId":"-"},"content":"      map((issues) \u003d\u003e {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return issues.filter((issue) \u003d\u003e {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"          return this.issue.id !\u003d\u003d issue.id \u0026\u0026 this.issue.teamAssigned.id \u003d\u003d\u003d issue.teamAssigned.id;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":153}},{"path":"src/app/shared/issue/issue-components.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MatProgressBarModule } from \u0027@angular/material/progress-bar\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MarkdownModule } from \u0027ngx-markdown\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { NgxMatSelectSearchModule } from \u0027ngx-mat-select-search\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { CommentEditorModule } from \u0027../comment-editor/comment-editor.module\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027../shared.module\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { AssigneeComponent } from \u0027./assignee/assignee.component\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DescriptionComponent } from \u0027./description/description.component\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { DuplicatedIssuesComponent } from \u0027./duplicatedIssues/duplicated-issues.component\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { DuplicateOfComponent } from \u0027./duplicateOf/duplicate-of.component\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { LabelComponent } from \u0027./label/label.component\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { TitleComponent } from \u0027./title/title.component\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { UnsureCheckboxComponent } from \u0027./unsure-checkbox/unsure-checkbox.component\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  imports: [SharedModule, CommentEditorModule, MatProgressBarModule, NgxMatSelectSearchModule, MarkdownModule.forChild()],"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  declarations: ["},{"lineNumber":19,"author":{"gitId":"-"},"content":"    TitleComponent,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    DescriptionComponent,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    LabelComponent,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    AssigneeComponent,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    DuplicateOfComponent,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    DuplicatedIssuesComponent,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    UnsureCheckboxComponent,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ConflictDialogComponent"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  exports: ["},{"lineNumber":29,"author":{"gitId":"-"},"content":"    TitleComponent,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    DescriptionComponent,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    LabelComponent,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    AssigneeComponent,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    DuplicateOfComponent,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    DuplicatedIssuesComponent,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    UnsureCheckboxComponent,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ConflictDialogComponent"},{"lineNumber":37,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  ]"},{"lineNumber":38,"author":{"gitId":"-"},"content":"})"},{"lineNumber":39,"author":{"gitId":"-"},"content":"export class IssueComponentsModule {}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":38}},{"path":"src/app/shared/issue/title/title.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-title\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./title.component.html\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./title.component.css\u0027]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"})"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export class TitleComponent implements OnInit {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  isEditing \u003d false;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  issueTitleForm: FormGroup;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public permissions: PermissionService,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public phaseService: PhaseService,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    this.issueTitleForm \u003d this.formBuilder.group({"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      title: new FormControl(\u0027\u0027, [Validators.required, Validators.maxLength(256)])"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    this.isEditing \u003d true;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.issueTitleForm.setValue({"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      title: this.issue.title || \u0027\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  cancelEditMode() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.isEditing \u003d false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  updateTitle(form: NgForm) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    if (this.issueTitleForm.invalid) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    const newIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    newIssue.title \u003d this.issueTitleForm.get(\u0027title\u0027).value;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.issueService"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      .updateIssue(newIssue)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":67,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          this.isEditing \u003d false;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          this.isSavePending \u003d false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":73,"author":{"gitId":"-"},"content":"        (editedIssue: Issue) \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(editedIssue);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":84,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const isModified \u003d this.dialogService.checkIfFieldIsModified(this.issueTitleForm, \u0027title\u0027, \u0027title\u0027, this.issue);"},{"lineNumber":85,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":86,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      isModified,"},{"lineNumber":87,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":88,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":89,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    );"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":94,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":6,"-":99}},{"path":"src/app/shared/label-definition-popup/label-definition-popup.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatDialogRef, MAT_DIALOG_DATA } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { DomSanitizer } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The LabelDefinitionPopupComponent is responsible for rendering the UserDialog"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * to show the definition of the corresponding label."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  selector: \u0027app-label-definition-popup\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./label-definition-popup.component.html\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./label-definition-popup.component.css\u0027]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class LabelDefinitionPopupComponent {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  labelName: string;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  labelDefinitionHtmlTemplate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  // Injection of a reference to Dialog from the Service that it is to be"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  // displayed in."},{"lineNumber":20,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public dialogRef: MatDialogRef\u003cLabelDefinitionPopupComponent\u003e,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Inject(MAT_DIALOG_DATA) public data,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private _sanitizer: DomSanitizer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    this.labelName \u003d data.header;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // since we only display HTML fetched from our own source, we can safely bypass the sanitization of HTML"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    this.labelDefinitionHtmlTemplate \u003d _sanitizer.bypassSecurityTrustHtml(data.body);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * Closes the dialog."},{"lineNumber":32,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  onNoClick(): void {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    this.dialogRef.close(false);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":35}},{"path":"src/app/shared/layout/header.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Location } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Router, RoutesRecognized } from \u0027@angular/router\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { filter, pairwise } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { AppConfig } from \u0027../../../environments/environment\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../core/models/phase.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../core/models/user.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027../../core/services/auth.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../core/services/dialog.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../core/services/electron.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../core/services/error-handling.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../core/services/github.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { GithubEventService } from \u0027../../core/services/githubevent.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../core/services/issue.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../core/services/logging.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { PhaseDescription, PhaseService } from \u0027../../core/services/phase.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../core/services/user.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"const ISSUE_TRACKER_URL \u003d \u0027https://github.com/CATcher-org/CATcher/issues\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  selector: \u0027app-layout-header\u0027,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./header.component.html\u0027"},{"lineNumber":24,"author":{"gitId":"-"},"content":"})"},{"lineNumber":25,"author":{"gitId":"-"},"content":"export class HeaderComponent implements OnInit {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  private prevUrl;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  isReloadButtonDisabled \u003d false;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  ISSUE_FILTER \u003d \u0027/issues?q\u003dis:issue+is:open\u0027; // the filtered list must be an issue and must be open"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  TUTORIAL_LABEL \u003d \u0027+label:tutorial.\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  TEAM_LABEL \u003d \u0027+label:team.\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  EXCLUDE_DUPLICATE \u003d \u0027+-label:duplicate\u0027; // exclude duplicate issues"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon logging out"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  private readonly logOutDialogMessages \u003d [\u0027Do you wish to log out?\u0027];"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private readonly yesButtonDialogMessage \u003d \u0027Yes, I wish to log out\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private readonly noButtonDialogMessage \u003d \"No, I don\u0027t wish to log out\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private router: Router,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public auth: AuthService,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public phaseService: PhaseService,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":43,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    public logger: LoggingService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private location: Location,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private githubEventService: GithubEventService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private electronService: ElectronService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    router.events"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":54,"author":{"gitId":"-"},"content":"        filter((e: any) \u003d\u003e e instanceof RoutesRecognized),"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        pairwise()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .subscribe((e) \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.prevUrl \u003d e[0].urlAfterRedirects;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  ngOnInit() {}"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   * Replaces and resets the current phase data and routes the app to the"},{"lineNumber":66,"author":{"gitId":"-"},"content":"   * newly selected phase."},{"lineNumber":67,"author":{"gitId":"-"},"content":"   * @param openPhase - Open Phase that is selected by the user."},{"lineNumber":68,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  routeToSelectedPhase(openPhase: string): void {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    // Do nothing if the selected phase is the current phase."},{"lineNumber":71,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase \u003d\u003d\u003d Phase[openPhase]) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    // Replace Current Phase Data."},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.phaseService.currentPhase \u003d Phase[openPhase];"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    this.githubService.storePhaseDetails("},{"lineNumber":77,"author":{"gitId":"-"},"content":"      this.phaseService.getPhaseOwner(this.phaseService.currentPhase),"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      this.phaseService.sessionData[openPhase]"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // Remove current phase issues and load selected phase issues."},{"lineNumber":82,"author":{"gitId":"-"},"content":"    this.githubService.reset();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    this.issueService.reset(false);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    this.reload();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // Route app to new phase."},{"lineNumber":87,"author":{"gitId":"-"},"content":"    this.router.navigateByUrl(this.phaseService.currentPhase);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  isBackButtonShown(): boolean {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    return `/${this.phaseService.currentPhase}` !\u003d\u003d this.router.url \u0026\u0026 this.router.url !\u003d\u003d \u0027/\u0027 \u0026\u0026 !this.router.url.startsWith(\u0027/?code\u0027);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  isReloadButtonShown(): boolean {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    return this.router.url !\u003d\u003d \u0027/phaseBugReporting/issues/new\u0027;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  isOpenUrlButtonShown(): boolean {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    return ("},{"lineNumber":100,"author":{"gitId":"-"},"content":"      this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting ||"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      this.userService.currentUser.role \u003d\u003d\u003d UserRole.Student ||"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      this.issueService.getIssueTeamFilter() !\u003d\u003d \u0027All Teams\u0027 ||"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      this.router.url.includes(\u0027/issues\u0027)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"  getVersion(): string {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return AppConfig.version;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  getPhaseDescription(openPhase: string): string {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    return PhaseDescription[openPhase];"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  goBack() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    if (this.prevUrl \u003d\u003d\u003d `/${this.phaseService.currentPhase}/issues/new`) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      this.router.navigate([\u0027/phaseBugReporting\u0027]);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      this.location.back();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"  viewBrowser() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    const routerUrl \u003d this.router.url.substring(1); // remove the first \u0027/\u0027 from string"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    const issueUrlIndex \u003d routerUrl.indexOf(\u0027/\u0027); // find the index of second \u0027/\u0027"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    let issueUrl: string;"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    // If can\u0027t find the index of second \u0027/\u0027, then router is at the /issues (table list) page"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    if (issueUrlIndex \u003c 0) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      // Apply filters to the issueUrl"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      issueUrl \u003d this.ISSUE_FILTER.concat(this.getTeamFilterString());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      // issueUrl will be from the second \u0027/\u0027"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      issueUrl \u003d routerUrl.substring(issueUrlIndex);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    // Open the url in user\u0027s preferred browser"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    this.electronService.openLink(\u0027https://github.com/\u0027.concat(this.githubService.getRepoURL()).concat(issueUrl));"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"  openIssueTracker() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    this.electronService.openLink(ISSUE_TRACKER_URL);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  private getTeamFilterString() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    // First Phase does not need team filtering"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    if (this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseBugReporting || this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseTesterResponse) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      return \u0027\u0027;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    // Initialise the team filter for Students in other Phases, as they do not have team filter assigned by default"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    if (this.userService.currentUser.team) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      this.issueService.setIssueTeamFilter(this.userService.currentUser.team.id); // e.g W12-3"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    const teamFilter \u003d this.issueService.getIssueTeamFilter().split(\u0027-\u0027); // e.g CS2103T-W12-3 -\u003e CS2103T, W12 and 3"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    // The team filter string E.g \"+label:tutorial.W12+label:team.3\""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    const teamFilterString \u003d this.TUTORIAL_LABEL.concat(`${teamFilter[0]}-${teamFilter[1]}`).concat(this.TEAM_LABEL).concat(teamFilter[2]);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    // Only include duplicate Issues in last Phase"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    return this.phaseService.currentPhase \u003d\u003d\u003d Phase.phaseModeration ? teamFilterString : this.EXCLUDE_DUPLICATE.concat(teamFilterString);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"  reload() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    this.isReloadButtonDisabled \u003d true;"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    this.githubEventService.reloadPage().subscribe("},{"lineNumber":166,"author":{"gitId":"-"},"content":"      (success) \u003d\u003e success,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      (error) \u003d\u003e {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        this.errorHandlingService.handleError(error, () \u003d\u003e this.githubEventService.reloadPage());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    // Prevent user from spamming the reload button"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      this.isReloadButtonDisabled \u003d false;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }, 3000);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"  logOut() {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    this.auth.logOut();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  openLogOutDialog() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":184,"author":{"gitId":"-"},"content":"      this.logOutDialogMessages,"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      this.yesButtonDialogMessage,"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      this.noButtonDialogMessage"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":191,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        this.logger.info(`HeaderComponent: Logging out from ${this.userService.currentUser.loginId}`);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        this.logOut();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"  exportLogFile() {"},{"lineNumber":198,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.logger.exportLogFile();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":3,"-":197}},{"path":"src/app/shared/view-issue/issue-dispute/issue-dispute.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ElectronService } from \u0027../../../core/services/electron.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../../core/services/github.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../../core/services/user.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { CommentEditorComponent } from \u0027../../comment-editor/comment-editor.component\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  selector: \u0027app-issue-dispute\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./issue-dispute.component.html\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./issue-dispute.component.css\u0027]"},{"lineNumber":20,"author":{"gitId":"-"},"content":"})"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export class IssueDisputeComponent implements OnInit, OnChanges {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  tutorResponseForm: FormGroup;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Output() updateEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @ViewChild(CommentEditorComponent) commentEditor: CommentEditorComponent;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private githubService: GithubService,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private electronService: ElectronService"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    this.resetForm();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d this.isNewResponse() ? SUBMIT_BUTTON_TEXT.SUBMIT : SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      this.updateEditState.emit(this.isNewResponse());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    // Whenever there is a change in value of issue, we reset the form so to render the most up to date form."},{"lineNumber":53,"author":{"gitId":"-"},"content":"    if (!this.isEditing \u0026\u0026 changes.issue \u0026\u0026 changes.issue.previousValue !\u003d\u003d changes.issue.currentValue) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      this.resetForm();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  submitTutorResponseForm(form: NgForm) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    if (this.tutorResponseForm.invalid) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.issue.pending \u003d \u0027\u0027 + this.getNumOfPending();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.isSafeToSubmitTutorResponse()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":68,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap((isSave: boolean) \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          if (isSave || this.isUpdatingDeletedResponse()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            if (this.issue.issueComment \u0026\u0026 !this.isUpdatingDeletedResponse()) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"              return this.updateTutorResponse();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"              return this.createTutorResponse();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isFormPending \u003d false))"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":83,"author":{"gitId":"-"},"content":"        (issue: Issue) \u003d\u003e {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(issue);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"  updateTutorResponse(): Observable\u003cIssue\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    return this.issueService.updateTutorResponse(this.issue, \u003cIssueComment\u003e{"},{"lineNumber":95,"author":{"gitId":"-"},"content":"      ...this.issue.issueComment,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      description: this.getTutorResponseFromForm()"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  createTutorResponse(): Observable\u003cIssue\u003e {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    const tutorResponse \u003d this.getTutorResponseFromForm();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    return this.issueService.createTutorResponse(this.issue, tutorResponse);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to submit an issue dispute\u0027s resolution."},{"lineNumber":107,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  isSafeToSubmitTutorResponse(): Observable\u003cboolean\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":110,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (issue.issueComment \u0026\u0026 !!issue.issueComment \u003d\u003d\u003d !!this.issue.issueComment) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          for (let i \u003d 0; i \u003c issue.issueDisputes.length; i++) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            if (issue.issueDisputes[i].compareTo(this.issue.issueDisputes[i]) !\u003d\u003d 0) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"              return false;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"          return true;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"          return !!issue.issueComment \u003d\u003d\u003d !!this.issue.issueComment;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"   * Determines whether the user is updating a response that has already been deleted on Github."},{"lineNumber":127,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  isUpdatingDeletedResponse(): boolean {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    return this.issue.issueComment \u0026\u0026 !this.issueService.issues[this.issue.id].issueComment;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"   * Resets to default form state."},{"lineNumber":134,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(false);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    this.resetForm();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"  viewInGithub(): void {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    this.electronService.openLink("},{"lineNumber":143,"author":{"gitId":"-"},"content":"      `https://github.com/${this.githubService.getRepoURL()}/issues/` + `${this.issue.id}#issuecomment-${this.issue.issueComment.id}`"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(true);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  cancelEditMode() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"  trackDisputeList(index: number, item: string[]): string {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    return item[index];"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"  isNewResponse(): boolean {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    return !this.issue.issueComment;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"   * Will reset the form to the initial values of `this.issue`."},{"lineNumber":168,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"  resetForm(): void {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    this.tutorResponseForm \u003d this.formBuilder.group(this.createFormGroup());"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  getItemTitleText(title: string): string {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return \u0027## \u0027 + title;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  getNumOfPending(): number {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    let pending \u003d this.issue.issueDisputes.length; // Initial pending is number of disputes"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    for (const issueDispute of this.issue.issueDisputes) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      // For each number of Done that is checked, reduce pending by one"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      if (issueDispute.isDone()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        pending--;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    return pending;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   * Will create a form group with initial values in `this.issue`."},{"lineNumber":190,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"  createFormGroup() {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    const group: any \u003d {};"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    // initialize fields for tutor response and the checkboxes for tutor to mark \"Done\""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    for (let i \u003d 0; i \u003c this.issue.issueDisputes.length; i++) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      const dispute \u003d this.issue.issueDisputes[i];"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      group[this.getTutorResponseFormId(i)] \u003d new FormControl(dispute.tutorResponse, Validators.required);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      group[this.getTodoFormId(i)] \u003d new FormControl({ value: dispute.isDone(), disabled: !this.isEditing }, Validators.required);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    return group;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":203,"author":{"gitId":"-"},"content":"   * Obtain the updated Github comment format for the tutor response based on the values in the form and `this.issue`."},{"lineNumber":204,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  getTutorResponseFromForm(): string {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    if (!this.issue.issueDisputes) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      return \u0027\u0027;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    const values \u003d this.tutorResponseForm.getRawValue();"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    const todos \u003d [];"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    const responses \u003d [];"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    let index \u003d 0;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    for (const [key, value] of Object.entries(values)) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      if (key.startsWith(\u0027todo\u0027)) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        todos.push(value);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"      } else if (key.startsWith(\u0027tutor-response\u0027)) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        responses.push(value);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"      index++;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    index \u003d 0;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    for (const dispute of updatedIssue.issueDisputes) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      const isDone \u003d todos[index] \u003d\u003d\u003d undefined ? dispute.isDone() : todos[index];"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      const tutorResponse \u003d responses[index] || dispute.tutorResponse;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      updatedIssue.issueDisputes[index].setTutorResponse(tutorResponse);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"      updatedIssue.issueDisputes[index].setIsDone(isDone);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      index++;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    return updatedIssue.createGithubTutorResponse();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":237,"author":{"gitId":"-"},"content":"   * @param index - index of dispute which the tutor resolve."},{"lineNumber":238,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  getTutorResponseFormId(index: number): string {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    return `tutor-response-${index}`;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":244,"author":{"gitId":"-"},"content":"   * @param index - index of dispute which the tutor resolve."},{"lineNumber":245,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  getTodoFormId(index: number): string {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    return `todo-${index}`;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"  get conflict(): boolean {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    return this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":251}},{"path":"src/app/shared/view-issue/new-team-response/conflict-dialog/conflict-dialog.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv style\u003d\"display: flex; margin-bottom: 20px; align-items: center\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003ch1 mat-dialog-title style\u003d\"margin: 0\"\u003e{{ \u0027A new response was submitted by another user\u0027 }}\u003c/h1\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \u003cbutton mat-icon-button color\u003d\"default\" style\u003d\"margin: 0 0 0 auto\" (click)\u003d\"close()\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003cmat-icon\u003eclose\u003c/mat-icon\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \u003c/button\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cdiv mat-dialog-content style\u003d\"display: flex\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"column left\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cmat-tab-group class\u003d\"mat-elevation-z1\" animationDuration\u003d\"0ms\" (selectedTabChange)\u003d\"handleTabChange($event)\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \u003cmat-tab label\u003d\"Updated Markdown Text\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"tab-content\" *ngIf\u003d\"isReady\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"          \u003cdiv [innerHTML]\u003d\"updatedHtml\"\u003e\u003c/div\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003c/mat-tab\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cmat-tab label\u003d\"Preview\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"tab-content\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"          \u003cmarkdown\u003e{{ data.teamResponse }}\u003c/markdown\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/mat-tab\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003c/mat-tab-group\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"column right\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"data.type\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cspan class\u003d\"mat-title\"\u003e Type \u003c/span\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003c!-- This component isn\u0027t used, but when it is we need to fix this method --\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cp [ngStyle]\u003d\"labelService.setLabelStyle(labelService.getColorOfLabel(data.type))\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        {{ data.type || \u0027-\u0027 }}"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003c/p\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"data.severity\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u003cspan class\u003d\"mat-title\"\u003e Severity \u003c/span\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u003cp [ngStyle]\u003d\"labelService.setLabelStyle(labelService.getColorOfLabel(data.severity))\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        {{ data.severity || \u0027-\u0027 }}"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u003c/p\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    \u003cdiv *ngIf\u003d\"data.response\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      \u003cspan class\u003d\"mat-title\"\u003e Response \u003c/span\u003e"},{"lineNumber":45,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      \u003cp [ngStyle]\u003d\"labelService.setLabelStyle(labelService.getColorOfLabel(data.response))\"\u003e"},{"lineNumber":46,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        {{ data.response || \u0027-\u0027 }}"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/p\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"data.assignees\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \u003capp-assignee-component [issue]\u003d\"data\" [team]\u003d\"data.teamAssigned\" [isEditable]\u003d\"false\"\u003e \u003c/app-assignee-component\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"data.duplicateOf\"\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003cdiv\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003cspan class\u003d\"mat-title\"\u003eA Duplicate Of:\u003c/span\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        \u003cp style\u003d\"margin-top: 5px\"\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"          {{ \u0027#\u0027 + data.duplicateOf + \u0027: \u0027 + (issueService.getIssue(data.duplicateOf) | async).title }}"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        \u003c/p\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"vigneshsankariyer1234567890":3,"-":62}},{"path":"src/app/shared/view-issue/new-team-response/conflict-dialog/conflict-dialog.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatDialogRef, MAT_DIALOG_DATA } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatTabChangeEvent } from \u0027@angular/material/tabs\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { DomSanitizer, SafeHtml } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../core/models/issue.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../core/services/issue.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../../core/services/label.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { escapeHTML, replaceNewlinesWithBreakLines } from \u0027../../../lib/html\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  selector: \u0027app-conflict-dialog\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  templateUrl: \u0027conflict-dialog.component.html\u0027,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./conflict-dialog.component.css\u0027]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"})"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export class ConflictDialogComponent {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  isOnPreview \u003d false;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  isReady \u003d false;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  updatedHtml: SafeHtml;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public dialogRef: MatDialogRef\u003cConflictDialogComponent\u003e,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Inject(MAT_DIALOG_DATA) public data: Issue,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private sanitizer: DomSanitizer,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public issueService: IssueService"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    this.updatedHtml \u003d this.sanitizer.bypassSecurityTrustHtml(replaceNewlinesWithBreakLines(escapeHTML(data.teamResponse)));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    this.isReady \u003d true;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  close(): void {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    this.dialogRef.close();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  handleTabChange(event: MatTabChangeEvent): void {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    this.isOnPreview \u003d event.index \u003d\u003d\u003d 1;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":37}},{"path":"src/app/shared/view-issue/new-team-response/new-team-response.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cform [formGroup]\u003d\"newTeamResponseForm\" #myForm\u003d\"ngForm\" (ngSubmit)\u003d\"submitNewTeamResponse(myForm)\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"timeline-comment\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"timeline-header\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \u003cspan style\u003d\"vertical-align: middle; margin-left: 5px\"\u003e Post your team\u0027s response here. \u003c/span\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003cdiv\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"(issueService.getDuplicateIssuesFor(this.issue) | async).length \u003d\u003d\u003d 0; else displayDuplicates\" class\u003d\"container\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        \u003cdiv\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"          \u003cmat-checkbox"},{"lineNumber":11,"author":{"gitId":"-"},"content":"            style\u003d\"display: inline-block; width: 20%\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"            formControlName\u003d\"duplicated\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            (change)\u003d\"handleChangeOfDuplicateCheckbox($event)\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"          \u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            A Duplicate Of:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"          \u003c/mat-checkbox\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"          \u003cmat-form-field [style.visibility]\u003d\"!duplicated.value ? \u0027hidden\u0027 : \u0027visible\u0027\" style\u003d\"display: inline-block; width: 50%\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003cmat-select formControlName\u003d\"duplicateOf\" placeholder\u003d\"Duplicate of\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"              \u003cmat-option\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cngx-mat-select-search"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                  placeholderLabel\u003d\"Search issues\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"                  noEntriesFoundLabel\u003d\"No issues found\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"                  [formControl]\u003d\"searchFilterCtrl\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \u003e\u003c/ngx-mat-select-search\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"              \u003c/mat-option\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"              \u003cmat-option"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                *ngFor\u003d\"let issue of filteredDuplicateIssueList | async\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"                [disabled]\u003d\"dupIssueOptionIsDisabled(issue)\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"                [value]\u003d\"issue.id\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"              \u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \u003cspan class\u003d\"mat-body-strong\"\u003e #{{ issue.id }}: \u003c/span\u003e \u003cspan class\u003d\"mat-body\"\u003e{{ issue.title }}\u003c/span\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003cspan *ngIf\u003d\"dupIssueOptionIsDisabled(issue)\" class\u003d\"mat-caption\" style\u003d\"color: #f44336\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                  ({{ getDisabledDupOptionErrorText(issue) }})"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                \u003c/span\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"              \u003c/mat-option\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003c/mat-select\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cmat-error *ngIf\u003d\"duplicateOf.errors \u0026\u0026 duplicateOf.errors[\u0027required\u0027] \u0026\u0026 duplicateOf.touched\"\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              Need to specify the duplicated issue."},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \u003c/mat-error\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/mat-form-field\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"      \u003cng-template #displayDuplicates\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"container\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003capp-duplicated-issues-component [issue]\u003d\"this.issue\"\u003e\u003c/app-duplicated-issues-component\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      \u003c/ng-template\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"container\" [style.display]\u003d\"duplicated.value ? \u0027none\u0027 : \u0027grid\u0027\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"left-half\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003capp-label-dropdown"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            [initialValue]\u003d\"this.issue.severity\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            attributeName\u003d\"severity\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"            [dropdownForm]\u003d\"newTeamResponseForm\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"          \u003e\u003c/app-label-dropdown\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"right-half\"\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          \u003capp-label-dropdown"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            [initialValue]\u003d\"this.issue.type\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"            attributeName\u003d\"type\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"            [dropdownForm]\u003d\"newTeamResponseForm\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"          \u003e\u003c/app-label-dropdown\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"container\" [style.display]\u003d\"duplicated.value ? \u0027none\u0027 : \u0027grid\u0027\"\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        \u003cmat-form-field class\u003d\"left-half\"\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"          \u003cmat-select placeholder\u003d\"Assignees\" formControlName\u003d\"assignees\" multiple\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \u003cmat-option *ngFor\u003d\"let member of teamMembers\" [value]\u003d\"member\"\u003e{{ member }}\u003c/mat-option\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"          \u003c/mat-select\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          \u003cmat-error *ngIf\u003d\"assignees.errors \u0026\u0026 assignees.errors[\u0027required\u0027] \u0026\u0026 assignees.touched\"\u003e Assignee(s) required. \u003c/mat-error\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        \u003c/mat-form-field\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"right-half\"\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          \u003capp-label-dropdown"},{"lineNumber":79,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"            [initialValue]\u003d\"this.issue.response\""},{"lineNumber":80,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"            attributeName\u003d\"response\""},{"lineNumber":81,"author":{"gitId":"-"},"content":"            [dropdownForm]\u003d\"newTeamResponseForm\""},{"lineNumber":82,"author":{"gitId":"-"},"content":"          \u003e\u003c/app-label-dropdown\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"      \u003capp-comment-editor"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        [id]\u003d\"\u0027description\u0027\""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        [commentField]\u003d\"this.newTeamResponseForm.get(\u0027description\u0027)\""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        [commentForm]\u003d\"this.newTeamResponseForm\""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        [(isFormPending)]\u003d\"this.isFormPending\""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        [(submitButtonText)]\u003d\"this.submitButtonText\""},{"lineNumber":92,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      \u003c/app-comment-editor\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"editor-actions\"\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":98,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":100,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isFormPending\""},{"lineNumber":101,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":102,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":103,"author":{"gitId":"-"},"content":"          (click)\u003d\"viewUpdatedResponse()\""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"          View Updated Response"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":108,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":109,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":110,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":111,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"newTeamResponseForm.invalid || isFormPending\""},{"lineNumber":112,"author":{"gitId":"-"},"content":"          mat-raised-button"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":118,"author":{"gitId":"-"},"content":"          type\u003d\"submit\""},{"lineNumber":119,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":120,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"!conflict\""},{"lineNumber":121,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"newTeamResponseForm.invalid || isFormPending\""},{"lineNumber":122,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":123,"author":{"gitId":"-"},"content":"          color\u003d\"primary\""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"          {{ submitButtonText }}"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        \u003cbutton"},{"lineNumber":128,"author":{"gitId":"-"},"content":"          class\u003d\"editor-action\""},{"lineNumber":129,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"conflict\""},{"lineNumber":130,"author":{"gitId":"-"},"content":"          type\u003d\"button\""},{"lineNumber":131,"author":{"gitId":"-"},"content":"          [disabled]\u003d\"isFormPending\""},{"lineNumber":132,"author":{"gitId":"-"},"content":"          mat-stroked-button"},{"lineNumber":133,"author":{"gitId":"-"},"content":"          color\u003d\"warn\""},{"lineNumber":134,"author":{"gitId":"-"},"content":"          (click)\u003d\"refresh()\""},{"lineNumber":135,"author":{"gitId":"-"},"content":"          matTooltip\u003d\"Updated response will overwrite your changes\""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"          Cancel"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"\u003c/form\u003e"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":140}},{"path":"src/app/shared/view-issue/new-team-response/new-team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormControl, FormGroup, NgForm, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatCheckboxChange } from \u0027@angular/material/checkbox\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Observable, ReplaySubject, Subject, throwError } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { finalize, first, map, mergeMap, takeUntil } from \u0027rxjs/operators\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../core/services/label.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { TABLE_COLUMNS } from \u0027../../issue-tables/issue-tables-columns\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { applySearchFilter } from \u0027../../issue-tables/search-filter\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  selector: \u0027app-new-team-response\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./new-team-response.component.html\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./new-team-response.component.css\u0027]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"})"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export class NewTeamResponseComponent implements OnInit, OnDestroy {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  newTeamResponseForm: FormGroup;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  teamMembers: string[];"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  duplicatedIssueList: Observable\u003cIssue[]\u003e;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  searchFilterCtrl: FormControl \u003d new FormControl();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  filteredDuplicateIssueList: ReplaySubject\u003cIssue[]\u003e \u003d new ReplaySubject\u003cIssue[]\u003e(1);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  // A subject that will emit a signal when this component is being destroyed"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  private _onDestroy \u003d new Subject\u003cvoid\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public issueService: IssueService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    this.teamMembers \u003d this.issue.teamAssigned.teamMembers.map((member) \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      return member.loginId;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList \u003d this.getDupIssueList();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Populate the filtered list with all the issues first"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.duplicatedIssueList.pipe(first()).subscribe((issues) \u003d\u003e this.filteredDuplicateIssueList.next(issues));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.searchFilterCtrl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe((_) \u003d\u003e this.filterIssues());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    this.newTeamResponseForm \u003d this.formBuilder.group({"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027],"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      severity: [this.issue.severity, Validators.required],"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      type: [this.issue.type, Validators.required],"},{"lineNumber":63,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      response: [this.issue.response, Validators.required],"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      assignees: [this.issue.assignees.map((a) \u003d\u003e a.toLowerCase())],"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      duplicated: [false],"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      duplicateOf: [\u0027\u0027]"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.duplicated.valueChanges.subscribe((checked) \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      if (checked) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.duplicateOf.setValidators(Validators.required);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.responseTag.setValidators(null);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.duplicateOf.setValidators(null);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.responseTag.setValidators(Validators.required);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      this.duplicateOf.updateValueAndValidity();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      this.responseTag.updateValueAndValidity();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SUBMIT;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  private filterIssues(): void {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    this.changeFilter(this.duplicatedIssueList, this.searchFilterCtrl.value).subscribe((issues) \u003d\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      this.filteredDuplicateIssueList.next(issues)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  private changeFilter(issuesObservable: Observable\u003cIssue[]\u003e, searchInputString): Observable\u003cIssue[]\u003e {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    return issuesObservable.pipe("},{"lineNumber":90,"author":{"gitId":"-"},"content":"      first(),"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      map((issues) \u003d\u003e {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return applySearchFilter(searchInputString, [TABLE_COLUMNS.ID, TABLE_COLUMNS.TITLE], this.issueService, issues);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  ngOnDestroy(): void {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    this._onDestroy.next(); // Emits the destroy signal"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    this._onDestroy.complete();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  submitNewTeamResponse(form: NgForm) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    if (this.newTeamResponseForm.invalid) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    const latestIssue \u003d this.getUpdatedIssue();"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    this.isSafeToSubmit()"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":111,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap((isSaveToSubmit: boolean) \u003d\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          const newCommentDescription \u003d latestIssue.createGithubTeamResponse();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"          if (isSaveToSubmit) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return this.issueService.createTeamResponse(latestIssue);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"          } else if (this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            const issueCommentId \u003d this.issueService.issues[this.issue.id].issueComment.id;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return this.issueService.updateIssueWithComment(latestIssue, \u003cIssueComment\u003e{"},{"lineNumber":118,"author":{"gitId":"-"},"content":"              id: issueCommentId,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"              description: newCommentDescription"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":121,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            this.conflict \u003d new Conflict(\u0027 \u0027, this.issueService.issues[this.issue.id].teamResponse);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            this.viewUpdatedResponse();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return throwError(\u0027A response has been submitted. Please verify the changes and try again.\u0027);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isFormPending \u003d false))"},{"lineNumber":129,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":131,"author":{"gitId":"-"},"content":"        (updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"          // updatedIssue.issueComment \u003d updatedComment;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(updatedIssue);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to submit a tester response."},{"lineNumber":144,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  isSafeToSubmit(): Observable\u003cboolean\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":147,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return !issue.teamResponse;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"   * @return - an updated copy of issue with its updated value from the form."},{"lineNumber":155,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  getUpdatedIssue(): Issue {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    clone.duplicated \u003d this.duplicated.value;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    clone.duplicateOf \u003d this.duplicateOf.value;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    if (clone.duplicated) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      const duplicatedIssue \u003d this.issueService.issues[clone.duplicateOf];"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      clone.severity \u003d duplicatedIssue.severity;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      clone.type \u003d duplicatedIssue.type;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      clone.assignees \u003d duplicatedIssue.assignees;"},{"lineNumber":165,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      clone.response \u003d duplicatedIssue.response;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"      clone.severity \u003d this.severity.value;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      clone.type \u003d this.type.value;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"      clone.assignees \u003d this.assignees.value;"},{"lineNumber":170,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      clone.response \u003d this.responseTag.value;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    clone.status \u003d STATUS.Done;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    clone.teamResponse \u003d Issue.updateTeamResponse(this.description.value);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  dupIssueOptionIsDisabled(issue: Issue): boolean {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return issue.duplicated || !!issue.duplicateOf;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"  getDisabledDupOptionErrorText(issue: Issue): string {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    return this.dupIssueOptionIsDisabled(issue) ? \u0027Duplicate of #\u0027 + issue.duplicateOf : \u0027\u0027;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"  handleChangeOfDuplicateCheckbox(event: MatCheckboxChange) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    if (event.checked) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.responseTag.setValue(\u0027\u0027);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"      this.assignees.setValue([]);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      this.responseTag.markAsUntouched();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"      this.duplicateOf.setValue(\u0027\u0027);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      this.duplicateOf.markAsUntouched();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":197,"author":{"gitId":"-"},"content":"   * Pops up a dialog that shows the updated team response that was submitted."},{"lineNumber":198,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  viewUpdatedResponse(): void {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      data: this.issueService.issues[this.issue.id],"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"  refresh(): void {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.issueService.issues[this.issue.id];"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    this.issueUpdated.emit(updatedIssue);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"  private getDupIssueList(): Observable\u003cIssue[]\u003e {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    return this.issueService.issues$.pipe("},{"lineNumber":213,"author":{"gitId":"-"},"content":"      map((issues) \u003d\u003e {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        return issues.filter((issue) \u003d\u003e {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"          return this.issue.id !\u003d\u003d issue.id;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"  get description() {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027description\u0027);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"  get severity() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027severity\u0027);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"  get type() {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027type\u0027);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"  get assignees() {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027assignees\u0027);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"  get responseTag() {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027responseTag\u0027);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"  get duplicated() {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027duplicated\u0027);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"  get duplicateOf() {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    return this.newTeamResponseForm.get(\u0027duplicateOf\u0027);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":5,"-":243}},{"path":"src/app/shared/view-issue/new-team-response/new-team-response.module.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { CommonModule } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgModule } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MarkdownModule } from \u0027ngx-markdown\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { NgxMatSelectSearchModule } from \u0027ngx-mat-select-search\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { CommentEditorModule } from \u0027../../comment-editor/comment-editor.module\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueComponentsModule } from \u0027../../issue/issue-components.module\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LabelDropdownModule } from \u0027../../label-dropdown/label-dropdown.module\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027../../shared.module\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { NewTeamResponseComponent } from \u0027./new-team-response.component\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"@NgModule({"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  exports: [NewTeamResponseComponent, ConflictDialogComponent],"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  declarations: [NewTeamResponseComponent, ConflictDialogComponent],"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  imports: ["},{"lineNumber":16,"author":{"gitId":"-"},"content":"    CommonModule,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    CommentEditorModule,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    SharedModule,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    IssueComponentsModule,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    LabelDropdownModule,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    MarkdownModule.forChild(),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    NgxMatSelectSearchModule"},{"lineNumber":23,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  ]"},{"lineNumber":24,"author":{"gitId":"-"},"content":"})"},{"lineNumber":25,"author":{"gitId":"-"},"content":"export class NewTeamResponseModule {}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":24}},{"path":"src/app/shared/view-issue/team-response/team-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnInit, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormGroup, NgForm } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../core/services/permission.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent } from \u0027../../issue/conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  selector: \u0027app-team-response\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./team-response.component.html\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./team-response.component.css\u0027]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"})"},{"lineNumber":22,"author":{"gitId":"-"},"content":"export class TeamResponseComponent implements OnInit {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  isSavePending \u003d false;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  responseForm: FormGroup;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  conflict: Conflict;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Output() updateEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private permissions: PermissionService,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    this.responseForm \u003d this.formBuilder.group({"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      description: [\u0027\u0027]"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(true);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.responseForm.setValue({"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      description: this.issue.teamResponse || \u0027\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  updateResponse(form: NgForm) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    if (this.responseForm.invalid) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.isSavePending \u003d true;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.getUpdatedIssue();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    const updatedIssueComment \u003d \u003cIssueComment\u003e{"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      ...updatedIssue.issueComment,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      description: updatedIssue.createGithubTeamResponse()"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.isSafeToUpdate()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":77,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap((isSaveToUpdate: boolean) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          if (isSaveToUpdate || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return this.issueService.updateIssueWithComment(updatedIssue, updatedIssueComment);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"          } else if (this.isUpdatingDeletedResponse()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return this.issueService.createTeamResponse(updatedIssue);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            this.conflict \u003d new Conflict(this.issue.teamResponse, this.issueService.issues[this.issue.id].teamResponse);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            this.viewChanges();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isSavePending \u003d false))"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":92,"author":{"gitId":"-"},"content":"        (updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(updatedIssue);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"          form.resetForm();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to updated an existing team response."},{"lineNumber":105,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  isSafeToUpdate(): Observable\u003cboolean\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":108,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return issue.teamResponse \u003d\u003d\u003d this.issue.teamResponse;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   * Determines whether the user is updating a response that has already been deleted on Github."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  isUpdatingDeletedResponse(): boolean {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    return this.issue.teamResponse \u0026\u0026 !this.issueService.issues[this.issue.id].teamResponse;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  canEditIssue(): boolean {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    return this.permissions.isTeamResponseEditable();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"   * Resets to default form state."},{"lineNumber":127,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    this.conflict \u003d undefined;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(false);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      data: this.conflict,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   * When user exits exit mode, we will need to sync the issue in IssueService with this component."},{"lineNumber":143,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  cancelEditMode(): void {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":152,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const isModified \u003d this.dialogService.checkIfFieldIsModified(this.responseForm, \u0027teamResponse\u0027, \u0027description\u0027, this.issue);"},{"lineNumber":153,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":154,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      isModified,"},{"lineNumber":155,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":156,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":157,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    );"},{"lineNumber":158,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":162,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":163,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"  private getUpdatedIssue(): Issue {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    const clone \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    clone.teamResponse \u003d Issue.updateTeamResponse(this.responseForm.get(\u0027description\u0027).value);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    if (!clone.status) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      clone.status \u003d clone.teamResponse \u003d\u003d\u003d \u0027\u0027 ? STATUS.Incomplete : STATUS.Done;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    return clone;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":8,"-":174}},{"path":"src/app/shared/view-issue/tester-response/conflict-dialog/conflict-dialog.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, Inject } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { MatDialogRef, MAT_DIALOG_DATA } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { DomSanitizer, SafeHtml } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Conflict } from \u0027../../../../core/models/conflict/conflict.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027../../../../core/models/tester-response.model\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../core/services/issue.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { LabelService } from \u0027../../../../core/services/label.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"export interface TesterResponseConflictData {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  outdatedResponses: TesterResponse[];"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  updatedResponses: TesterResponse[];"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  selector: \u0027app-conflict-dialog\u0027,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  templateUrl: \u0027conflict-dialog.component.html\u0027,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./conflict-dialog.component.css\u0027]"},{"lineNumber":18,"author":{"gitId":"-"},"content":"})"},{"lineNumber":19,"author":{"gitId":"-"},"content":"export class ConflictDialogComponent {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  isReady \u003d false;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  showDiff \u003d true;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  conflicts: Conflict[] \u003d [];"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  diffHtmls: SafeHtml[] \u003d [];"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  updatedHtmls: SafeHtml[] \u003d [];"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  panelOpenStates: boolean[] \u003d [];"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public dialogRef: MatDialogRef\u003cConflictDialogComponent\u003e,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Inject(MAT_DIALOG_DATA) public data: TesterResponseConflictData,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private sanitizer: DomSanitizer,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public labelService: LabelService,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public issueService: IssueService"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  ) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    for (let i \u003d 0; i \u003c data.updatedResponses.length; i++) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      this.conflicts.push("},{"lineNumber":37,"author":{"gitId":"-"},"content":"        new Conflict("},{"lineNumber":38,"author":{"gitId":"-"},"content":"          data.outdatedResponses[i].getDisagreementWithoutDefaultResponse(),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          data.updatedResponses[i].getDisagreementWithoutDefaultResponse()"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      this.diffHtmls.push(this.sanitizer.bypassSecurityTrustHtml(this.conflicts[i].getHtmlDiffString()));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      this.updatedHtmls.push(this.sanitizer.bypassSecurityTrustHtml(this.conflicts[i].getHtmlUpdatedString()));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      this.panelOpenStates.push(data.outdatedResponses[i].compareTo(data.updatedResponses[i]) !\u003d\u003d 0);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    this.isReady \u003d true;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  close(): void {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    this.dialogRef.close();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  handleChangeShowDiff() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.showDiff \u003d !this.showDiff;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":56}},{"path":"src/app/shared/view-issue/tester-response/tester-response.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormBuilder, FormControl, FormGroup, Validators } from \u0027@angular/forms\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { MatDialog } from \u0027@angular/material/dialog\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { Observable, throwError } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { finalize, map, mergeMap } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { IssueComment } from \u0027../../../core/models/comment.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../core/models/issue.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { TesterResponse } from \u0027../../../core/models/tester-response.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../../core/models/user.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { DialogService } from \u0027../../../core/services/dialog.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../core/services/error-handling.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../core/services/issue.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../../core/services/user.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { CommentEditorComponent } from \u0027../../comment-editor/comment-editor.component\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { SUBMIT_BUTTON_TEXT } from \u0027../view-issue.component\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { ConflictDialogComponent, TesterResponseConflictData } from \u0027./conflict-dialog/conflict-dialog.component\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  selector: \u0027app-tester-response\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./tester-response.component.html\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./tester-response.component.css\u0027]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"})"},{"lineNumber":24,"author":{"gitId":"-"},"content":"export class TesterResponseComponent implements OnInit, OnChanges {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  testerResponseForm: FormGroup;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  isFormPending \u003d false;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  submitButtonText: string;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  @Input() issue: Issue;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  @Input() isEditing: boolean;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  @Output() issueUpdated \u003d new EventEmitter\u003cIssue\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  @Output() updateEditState \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  @ViewChild(CommentEditorComponent) commentEditor: CommentEditorComponent;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  // Messages for the modal popup window upon cancelling edit"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  private readonly cancelEditModalMessages \u003d [\u0027Do you wish to cancel?\u0027, \u0027Your changes will be discarded.\u0027];"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  private readonly yesButtonModalMessage \u003d \u0027Cancel\u0027;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  private readonly noButtonModalMessage \u003d \u0027Continue editing\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  private readonly responseRadioIdentifier \u003d \u0027response-radio\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  private readonly responseTextIdentifier \u003d \u0027tester-response\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  constructor("},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private formBuilder: FormBuilder,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private issueService: IssueService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public userService: UserService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private errorHandlingService: ErrorHandlingService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private dialog: MatDialog,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private phaseService: PhaseService,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private dialogService: DialogService"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  ) {}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"  ngOnInit() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    this.resetForm();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d this.isNewResponse() ? SUBMIT_BUTTON_TEXT.SUBMIT : SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      this.updateEditState.emit(this.isNewResponse());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  ngOnChanges(changes: SimpleChanges) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // Whenever there is a change in value of issue, we reset the form so to render the most up to date form."},{"lineNumber":64,"author":{"gitId":"-"},"content":"    if (!this.isEditing \u0026\u0026 changes.issue \u0026\u0026 changes.issue.previousValue !\u003d\u003d changes.issue.currentValue) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      this.resetForm();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  submitTesterResponseForm() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    if (this.testerResponseForm.invalid) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    this.isFormPending \u003d true;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    this.isSafeToSubmit()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      .pipe("},{"lineNumber":77,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        mergeMap((isSaveToSubmit: boolean) \u003d\u003e {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          if (isSaveToSubmit || this.isUpdatingDeletedResponse() || this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return this.issueService.updateTesterResponse(this.issue, \u003cIssueComment\u003e{"},{"lineNumber":80,"author":{"gitId":"-"},"content":"              ...this.issue.issueComment,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"              description: this.getTesterResponseFromForm()"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":83,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            this.viewChanges();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return throwError(\u0027The content you are editing has changed. Please verify the changes and try again.\u0027);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e (this.isFormPending \u003d false))"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      .subscribe("},{"lineNumber":92,"author":{"gitId":"-"},"content":"        (updatedIssue: Issue) \u003d\u003e {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"          this.issueUpdated.emit(updatedIssue);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"          this.resetToDefault();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          this.errorHandlingService.handleError(error);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   * @return - Determines whether it is safe to submit a tester response."},{"lineNumber":104,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  isSafeToSubmit(): Observable\u003cboolean\u003e {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    return this.issueService.getLatestIssue(this.issue.id).pipe("},{"lineNumber":107,"author":{"gitId":"-"},"content":"      map((issue: Issue) \u003d\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!issue.testerResponses) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          return false;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return issue.testerResponses.reduce((result, response, index) \u003d\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          return result \u0026\u0026 response.compareTo(this.issue.testerResponses[index]) \u003d\u003d\u003d 0;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }, true);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"   * Determines whether the user is updating a response that has already been deleted on Github."},{"lineNumber":120,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  isUpdatingDeletedResponse(): boolean {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    return this.issue.testerResponses \u0026\u0026 !this.issueService.issues[this.issue.id].testerResponses;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"   * Pops up a dialog that shows the difference between the outdated tester\u0027s response and the updated one."},{"lineNumber":127,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  viewChanges(): void {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    this.dialog.open(ConflictDialogComponent, {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      data: \u003cTesterResponseConflictData\u003e{"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        outdatedResponses: this.issue.testerResponses,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        updatedResponses: this.issueService.issues[this.issue.id].testerResponses"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      autoFocus: false"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  changeToEditMode() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(true);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"  openCancelDialogIfModified(): void {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    const reasonForDisagreementIsModified \u003d this.issue.testerResponses"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      .filter((t: TesterResponse, index: number) \u003d\u003e this.isResponseDisagreed(index))"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      .map((t: TesterResponse, index: number) \u003d\u003e {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        const currentValue \u003d this.getTesterResponseText(index);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        const initialValue \u003d t.reasonForDisagreement || \u0027\u0027;"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return currentValue !\u003d\u003d initialValue;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      .reduce((a, b) \u003d\u003e a || b, false);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    const disagreementIsModified \u003d this.issue.testerResponses"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      .map((t: TesterResponse, index: number) \u003d\u003e {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        const currentValue \u003d this.isResponseDisagreed(index);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        const initialValue \u003d t.isDisagree();"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return currentValue !\u003d\u003d initialValue;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      })"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      .reduce((a, b) \u003d\u003e a || b, false);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    const isModified \u003d reasonForDisagreementIsModified || disagreementIsModified;"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    this.dialogService.performActionIfModified("},{"lineNumber":165,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      isModified,"},{"lineNumber":166,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.openCancelDialog(),"},{"lineNumber":167,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      () \u003d\u003e this.cancelEditMode()"},{"lineNumber":168,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    );"},{"lineNumber":169,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"  openCancelDialog(): void {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    const dialogRef \u003d this.dialogService.openUserConfirmationModal("},{"lineNumber":173,"author":{"gitId":"-"},"content":"      this.cancelEditModalMessages,"},{"lineNumber":174,"author":{"gitId":"-"},"content":"      this.yesButtonModalMessage,"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      this.noButtonModalMessage"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    dialogRef.afterClosed().subscribe((res) \u003d\u003e {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      if (res) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        this.cancelEditMode();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"  cancelEditMode() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    this.issueService.getIssue(this.issue.id).subscribe((issue: Issue) \u003d\u003e {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"      this.issueUpdated.emit(issue);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      this.resetToDefault();"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"   * Resets to default form state."},{"lineNumber":193,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  resetToDefault(): void {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    this.submitButtonText \u003d SUBMIT_BUTTON_TEXT.SAVE;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    this.updateEditState.emit(false);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    this.resetForm();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"  handleChangeOfDisagreeRadioButton(event, index: number) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    const responseFormControl \u003d this.testerResponseForm.get(this.getTesterResponseFormId(index));"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    const isDisagreeChecked \u003d this.isResponseDisagreed(index);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    if (isDisagreeChecked) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      responseFormControl.enable();"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      responseFormControl.disable();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"  trackDisagreeList(index: number, item: string[]): string {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    return item[index];"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"  isNewResponse(): boolean {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    return !this.issue.status \u0026\u0026 this.userService.currentUser.role \u003d\u003d\u003d UserRole.Student;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":219,"author":{"gitId":"-"},"content":"   * Will create a form group with initial values in `this.issue`."},{"lineNumber":220,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  createFormGroup() {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    const group: any \u003d {};"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    // initialize fields for tester response and the radio buttons for tester to choose \"Agree\" / \"Disagree\""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    for (let i \u003d 0; i \u003c this.issue.testerResponses.length; i++) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"      const response \u003d this.issue.testerResponses[i];"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      group[this.getTesterResponseFormId(i)] \u003d new FormControl("},{"lineNumber":227,"author":{"gitId":"-"},"content":"        {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"          value: response.reasonForDisagreement,"},{"lineNumber":229,"author":{"gitId":"-"},"content":"          disabled: !response.isDisagree()"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        Validators.required"},{"lineNumber":232,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      group[this.getDisagreeRadioFormId(i)] \u003d new FormControl("},{"lineNumber":234,"author":{"gitId":"-"},"content":"        {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"          value: response.isDisagree(),"},{"lineNumber":236,"author":{"gitId":"-"},"content":"          disabled: !this.isEditing"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Validators.required"},{"lineNumber":239,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    return group;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"  resetForm(): void {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    this.testerResponseForm \u003d this.formBuilder.group(this.createFormGroup());"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":249,"author":{"gitId":"-"},"content":"   * Based on the updated form and `this.issue` we obtain the updated tester response in Github format."},{"lineNumber":250,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  getTesterResponseFromForm(): string {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    if (!this.issue.testerResponses) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      return \u0027\u0027;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d this.issue.clone(this.phaseService.currentPhase);"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    updatedIssue.testerResponses.map((response: TesterResponse, index: number) \u003d\u003e {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      // Filter Keys based on Response Index"},{"lineNumber":260,"author":{"gitId":"-"},"content":"      const isDisagree \u003d this.isResponseDisagreed(index);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"      const reason \u003d isDisagree ? this.getTesterResponseText(index) || response.reasonForDisagreement : response.INITIAL_RESPONSE;"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"      response.setDisagree(isDisagree);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"      response.setReasonForDisagreement(reason);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"      return response;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    return updatedIssue.createGithubTesterResponse();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":272,"author":{"gitId":"-"},"content":"   * @param index - index of action which the tester disagree."},{"lineNumber":273,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":274,"author":{"gitId":"-"},"content":"  getTesterResponseFormId(index: number): string {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    return `${this.responseTextIdentifier}-${index}`;"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * Gets the Tester\u0027s Response text."},{"lineNumber":280,"author":{"gitId":"-"},"content":"   * @param index Tester Response Index."},{"lineNumber":281,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  getTesterResponseText(index: number): string {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    return this.testerResponseForm.get(this.getTesterResponseFormId(index)).value;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":287,"author":{"gitId":"-"},"content":"   * @param index - index of action which the tester disagree."},{"lineNumber":288,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  getDisagreeRadioFormId(index: number): string {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    return `${this.responseRadioIdentifier}-${index}`;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":294,"author":{"gitId":"-"},"content":"   * Checks if Tester Response was agreed to or disagreed with."},{"lineNumber":295,"author":{"gitId":"-"},"content":"   * @param index Tester Response Index,"},{"lineNumber":296,"author":{"gitId":"-"},"content":"   * @returns true if response was disagreed with, false if response was agreed with."},{"lineNumber":297,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":298,"author":{"gitId":"-"},"content":"  isResponseDisagreed(index: number): boolean {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    return this.testerResponseForm.get(this.getDisagreeRadioFormId(index)).value;"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"  get conflict(): boolean {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    return this.submitButtonText \u003d\u003d\u003d SUBMIT_BUTTON_TEXT.OVERWRITE;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":7,"-":298}},{"path":"src/app/shared/view-issue/view-issue.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv *ngIf\u003d\"isIssueLoading\" class\u003d\"centralize\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cmat-spinner [diameter]\u003d\"47\"\u003e\u003c/mat-spinner\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cdiv *ngIf\u003d\"!isIssueLoading\"\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003capp-issue-title [issue]\u003d\"issue\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e\u003c/app-issue-title\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"column left\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \u003c!-- Tester\u0027s Post --\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u003capp-issue-description"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        [isEditing]\u003d\"isIssueDescriptionEditing\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        (changeEditState)\u003d\"updateDescriptionEditState($event)\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.TESTER_POST)\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        [issue]\u003d\"issue\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        title\u003d\"Description of Issue\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        (issueUpdated)\u003d\"updateIssue($event)\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/app-issue-description\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c!-- Team\u0027s Response --\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003capp-team-response"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.TEAM_RESPONSE) \u0026\u0026 issue.teamResponse\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        [issue]\u003d\"issue\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        [isEditing]\u003d\"isTeamResponseEditing\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        (updateEditState)\u003d\"updateTeamResponseEditState($event)\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        (issueUpdated)\u003d\"updateIssue($event)\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003c/app-team-response\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003c!-- New Team\u0027s Response --\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003capp-new-team-response *ngIf\u003d\"hasNoTeamResponse()\" [issue]\u003d\"issue\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e \u003c/app-new-team-response\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u003c!-- Team Response Parsing Error --\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u003capp-parse-error *ngIf\u003d\"hasTeamResponseParseError()\" [phase]\u003d\"\u0027Team Response\u0027\"\u003e \u003c/app-parse-error\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"      \u003c!-- Tester\u0027s Response --\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003capp-tester-response"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.TESTER_RESPONSE) \u0026\u0026 issue.testerResponses \u0026\u0026 issue.testerResponses.length !\u003d\u003d 0\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        [issue]\u003d\"issue\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        [isEditing]\u003d\"isTesterResponseEditing\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        (updateEditState)\u003d\"updateTesterResponseEditState($event)\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        (issueUpdated)\u003d\"updateIssue($event)\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/app-tester-response\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"      \u003c!-- Tester Response Parsing Error --\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      \u003capp-parse-error"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.TESTER_RESPONSE) \u0026\u0026 issue.testerResponseError\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        [phase]\u003d\"\u0027Tester Response\u0027\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      \u003c/app-parse-error\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003c!-- Team Accepted --\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003capp-team-accepted *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.TESTER_RESPONSE) \u0026\u0026 issue.teamAccepted\"\u003e \u003c/app-team-accepted\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u003c!-- Issue Disputes For Tutor\u0027s Response --\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      \u003capp-issue-dispute"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.ISSUE_DISPUTE)\""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        [issue]\u003d\"issue\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        (issueUpdated)\u003d\"updateIssue($event)\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        [isEditing]\u003d\"isTutorResponseEditing\""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        (updateEditState)\u003d\"updateTutorResponseEditState($event)\""},{"lineNumber":66,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003c/app-issue-dispute\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"column right\"\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u003cdiv"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        *ngIf\u003d\""},{"lineNumber":73,"author":{"gitId":"-"},"content":"          (this.isComponentVisible(issueComponentsEnum.NEW_TEAM_RESPONSE) \u0026\u0026 issue.teamResponse) ||"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          (this.isComponentVisible(issueComponentsEnum.TESTER_RESPONSE) \u0026\u0026 this.userService.currentUser.role \u003d\u003d\u003d userRole.Student) ||"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          this.isComponentVisible(issueComponentsEnum.ISSUE_DISPUTE) ||"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          !this.isComponentVisible(issueComponentsEnum.TEAM_RESPONSE)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \""},{"lineNumber":78,"author":{"gitId":"-"},"content":"      \u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        \u003c!-- Severity Label --\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        \u003capp-issue-label"},{"lineNumber":81,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.SEVERITY_LABEL)\""},{"lineNumber":82,"author":{"gitId":"-"},"content":"          [issue]\u003d\"issue\""},{"lineNumber":83,"author":{"gitId":"-"},"content":"          attributeName\u003d\"severity\""},{"lineNumber":84,"author":{"gitId":"-"},"content":"          (issueUpdated)\u003d\"updateIssue($event)\""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        \u003e\u003c/app-issue-label\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        \u003c!-- Bug Type Label --\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.TYPE_LABEL)\"\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"          \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          \u003capp-issue-label [issue]\u003d\"issue\" attributeName\u003d\"type\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e\u003c/app-issue-label\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        \u003c!-- Response Label --\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.RESPONSE_LABEL)\"\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"          \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":96,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          \u003capp-issue-label [issue]\u003d\"issue\" attributeName\u003d\"response\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e\u003c/app-issue-label\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        \u003c!-- Assignee to this Issue --\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.ASSIGNEE)\"\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"          \u003capp-assignee-component [issue]\u003d\"issue\" [team]\u003d\"issue.teamAssigned\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e\u003c/app-assignee-component\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        \u003c!-- Duplicate information --\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        \u003cdiv"},{"lineNumber":107,"author":{"gitId":"-"},"content":"          *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.DUPLICATE) \u0026\u0026 (issueService.getDuplicateIssuesFor(issue) | async).length !\u003d\u003d 0\""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"          \u003capp-duplicated-issues-component [issue]\u003d\"issue\"\u003e\u003c/app-duplicated-issues-component\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"          \u003cbr /\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        \u003cdiv"},{"lineNumber":114,"author":{"gitId":"-"},"content":"          *ngIf\u003d\""},{"lineNumber":115,"author":{"gitId":"-"},"content":"            this.isComponentVisible(issueComponentsEnum.DUPLICATE) \u0026\u0026"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            (issue.duplicateOf || (issueService.getDuplicateIssuesFor(issue) | async).length \u003d\u003d\u003d 0)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"          \""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"          \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":"          \u003capp-duplicate-of-component [issue]\u003d\"issue\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e\u003c/app-duplicate-of-component\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        \u003c!-- Faulty issue warning --\u003e"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        \u003cdiv"},{"lineNumber":125,"author":{"gitId":"-"},"content":"          style\u003d\"margin-top: 15px; color: red\""},{"lineNumber":126,"author":{"gitId":"-"},"content":"          *ngIf\u003d\""},{"lineNumber":127,"author":{"gitId":"-"},"content":"            this.isComponentVisible(issueComponentsEnum.DUPLICATE) \u0026\u0026"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            (issueService.getDuplicateIssuesFor(issue) | async).length !\u003d\u003d 0 \u0026\u0026"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            (issue.duplicateOf || (issueService.getDuplicateIssuesFor(issue) | async).length \u003d\u003d\u003d 0)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"          \""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        \u003e"},{"lineNumber":132,"author":{"gitId":"-"},"content":"          * Need your resolution. An issue cannot have both duplicated issues and duplicated status."},{"lineNumber":133,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        \u003c!-- Unsure checkbox --\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003cdiv *ngIf\u003d\"this.isComponentVisible(issueComponentsEnum.UNSURE_CHECKBOX)\"\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"          \u003cmat-divider\u003e\u003c/mat-divider\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":"          \u003capp-unsure-checkbox [issue]\u003d\"issue\" (issueUpdated)\u003d\"updateIssue($event)\"\u003e\u003c/app-unsure-checkbox\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":142}},{"path":"src/polyfills.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"/***************************************************************************************************"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":" * Load `$localize` onto the global scope - used if i18n tags appear in Angular templates."},{"lineNumber":3,"author":{"gitId":"vigneshsankariyer1234567890"},"content":" */"},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import \u0027@angular/localize/init\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * This file includes polyfills needed by Angular and is loaded before the app."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * You can add your own extra polyfills to this file."},{"lineNumber":8,"author":{"gitId":"-"},"content":" *"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * This file is divided into 2 sections:"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers."},{"lineNumber":11,"author":{"gitId":"-"},"content":" *   2. Application imports. Files imported after ZoneJS that should be loaded before your main"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *      file."},{"lineNumber":13,"author":{"gitId":"-"},"content":" *"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * automatically update themselves. This includes Safari \u003e\u003d 10, Chrome \u003e\u003d 55 (including Opera),"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Edge \u003e\u003d 13 on the desktop, and iOS 10 and Chrome on mobile."},{"lineNumber":17,"author":{"gitId":"-"},"content":" *"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Learn more in https://angular.io/guide/browser-support"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/***************************************************************************************************"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * BROWSER POLYFILLS"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/** IE10 and IE11 requires the following for NgClass support on SVG elements */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"// import \u0027classlist.js\u0027;  // Run `npm install --save classlist.js`."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Web Animations `@angular/platform-browser/animations`"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari."},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0)."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"// import \u0027web-animations-js\u0027;  // Run `npm install --save web-animations-js`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * By default, zone.js will patch all possible macroTask and DomEvents"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * user can disable parts of macroTask/DomEvents patch by setting following flags"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * because those flags need to be set before `zone.js` being loaded, and webpack"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * will put import in the top of bundle, so user need to create a separate file"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * in this directory (for example: zone-flags.ts), and put the following flags"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * into that file, and then add the following code before importing zone.js."},{"lineNumber":42,"author":{"gitId":"-"},"content":" * import \u0027./zone-flags.ts\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":" *"},{"lineNumber":44,"author":{"gitId":"-"},"content":" * The flags allowed in zone-flags.ts are listed here."},{"lineNumber":45,"author":{"gitId":"-"},"content":" *"},{"lineNumber":46,"author":{"gitId":"-"},"content":" * The following flags will work for all browsers."},{"lineNumber":47,"author":{"gitId":"-"},"content":" *"},{"lineNumber":48,"author":{"gitId":"-"},"content":" * (window as any).__Zone_disable_requestAnimationFrame \u003d true; // disable patch requestAnimationFrame"},{"lineNumber":49,"author":{"gitId":"-"},"content":" * (window as any).__Zone_disable_on_property \u003d true; // disable patch onProperty such as onclick"},{"lineNumber":50,"author":{"gitId":"-"},"content":" * (window as any).__zone_symbol__UNPATCHED_EVENTS \u003d [\u0027scroll\u0027, \u0027mousemove\u0027]; // disable patch specified eventNames"},{"lineNumber":51,"author":{"gitId":"-"},"content":" *"},{"lineNumber":52,"author":{"gitId":"-"},"content":" *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js"},{"lineNumber":53,"author":{"gitId":"-"},"content":" *  with the following flag, it will bypass `zone.js` patch for IE/Edge"},{"lineNumber":54,"author":{"gitId":"-"},"content":" *"},{"lineNumber":55,"author":{"gitId":"-"},"content":" *  (window as any).__Zone_enable_cross_context_check \u003d true;"},{"lineNumber":56,"author":{"gitId":"-"},"content":" *"},{"lineNumber":57,"author":{"gitId":"-"},"content":" */"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"/***************************************************************************************************"},{"lineNumber":60,"author":{"gitId":"-"},"content":" * Zone JS is required by default for Angular itself."},{"lineNumber":61,"author":{"gitId":"-"},"content":" */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"import \u0027zone.js/dist/zone\u0027; // Included with Angular CLI."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"/***************************************************************************************************"},{"lineNumber":65,"author":{"gitId":"-"},"content":" * APPLICATION IMPORTS"},{"lineNumber":66,"author":{"gitId":"-"},"content":" */"},{"lineNumber":67,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"(window as any).global \u003d window;"}],"authorContributionMap":{"vigneshsankariyer1234567890":5,"-":62}},{"path":"tests/app/auth/profiles/profiles.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, DebugElement } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { ComponentFixture, fakeAsync, TestBed, tick, waitForAsync } from \u0027@angular/core/testing\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { ProfilesComponent } from \u0027../../../../src/app/auth/profiles/profiles.component\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Profile } from \u0027../../../../src/app/core/models/profile.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ProfileService } from \u0027../../../../src/app/core/services/profile.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027../../../../src/app/shared/shared.module\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  template: `\u003capp-profiles (selectedProfileEmitter)\u003d\"onSelected($event)\"\u003e \u003c/app-profiles\u003e`"},{"lineNumber":13,"author":{"gitId":"-"},"content":"})"},{"lineNumber":14,"author":{"gitId":"-"},"content":"class TestHostComponent {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  selectedProfile: Profile | undefined;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  onSelected(profile: Profile) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    this.selectedProfile \u003d profile;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"describe(\u0027ProfilesComponent\u0027, () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  let fixture: ComponentFixture\u003cTestHostComponent\u003e;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  let debugElement: DebugElement;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  let nativeElement: HTMLElement;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  let testHost: TestHostComponent;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  let profilesEl: HTMLElement;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  const profileService \u003d jasmine.createSpyObj(\u0027ProfileService\u0027, [\u0027fetchExternalProfiles\u0027]);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  const errorHandlingService \u003d jasmine.createSpyObj(\u0027ErrorHandlingService\u0027, [\u0027handleError\u0027]);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  const testProfiles: Profile[] \u003d ["},{"lineNumber":32,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      profileName: \u0027testProfile1\u0027,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      repoName: \u0027test-org1/pe\u0027"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      profileName: \u0027testProfile2\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      repoName: \u0027test-org2/pe\u0027"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      profileName: \u0027testProfile3\u0027,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      repoName: \u0027test-org3/pe\u0027"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  ];"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  beforeEach(waitForAsync(() \u003d\u003e {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    TestBed.configureTestingModule({"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      imports: [BrowserAnimationsModule, SharedModule],"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      declarations: [ProfilesComponent, TestHostComponent],"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      providers: ["},{"lineNumber":51,"author":{"gitId":"-"},"content":"        { provide: ProfileService, useValue: profileService },"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        { provide: ErrorHandlingService, useValue: errorHandlingService }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      ]"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }).compileComponents();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  }));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  beforeEach(fakeAsync(() \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    profileService.fetchExternalProfiles.and.returnValue(Promise.resolve(testProfiles));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    fixture \u003d TestBed.createComponent(TestHostComponent);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    testHost \u003d fixture.componentInstance;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    debugElement \u003d fixture.debugElement;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    nativeElement \u003d debugElement.nativeElement;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    profilesEl \u003d \u003cHTMLElement\u003enativeElement.querySelector(\u0027app-profiles\u0027);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    fixture.detectChanges(); // onInit()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    tick(); // wait for profiles to be loaded"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  it(\u0027should display the correct profiles from AppConfig\u0027, () \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    openMatSelect();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    const displayedOptions \u003d getOptions();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    displayedOptions.slice(1).forEach((el, i) \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      const optionTextEl \u003d \u003cHTMLElement\u003eel.querySelector(\u0027.mat-option-text\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      if (!optionTextEl) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        fail(\u0027optionTextEl should not be null\u0027);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      const profileName \u003d optionTextEl.innerText;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      expect(profileName).toBe(testProfiles[i].profileName);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"  it(\u0027should emit the correct profile through selectProfile when mat-option is clicked\u0027, () \u003d\u003e {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    openMatSelect();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    const displayedOptions \u003d getOptions();"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    displayedOptions[3].click();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    expect(testHost.selectedProfile).toEqual(testProfiles[2]);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"  function openMatSelect(): void {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    const select \u003d \u003cHTMLElement\u003eprofilesEl.querySelector(\u0027.mat-select\u0027);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    if (!select) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"      fail(\u0027Select should not be null\u0027);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    select.click();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"  function getOptions(): HTMLElement[] {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    return Array.from(document.querySelectorAll(\u0027.mat-option\u0027));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":104}},{"path":"tests/app/auth/session-selection/session-selection.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, DebugElement, EventEmitter, Input, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { ComponentFixture, TestBed, waitForAsync } from \u0027@angular/core/testing\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { By } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ProfilesComponent } from \u0027../../../../src/app/auth/profiles/profiles.component\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { SessionSelectionComponent } from \u0027../../../../src/app/auth/session-selection/session-selection.component\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { Profile } from \u0027../../../../src/app/core/models/profile.model\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027../../../../src/app/core/services/auth.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { GithubService } from \u0027../../../../src/app/core/services/github.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../../../src/app/core/services/logging.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027../../../../src/app/shared/shared.module\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  selector: \u0027app-profiles\u0027,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  template: \u0027\u0027"},{"lineNumber":19,"author":{"gitId":"-"},"content":"})"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class ProfilesStubComponent implements Partial\u003cProfilesComponent\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  @Output() selectedProfileEmitter: EventEmitter\u003cProfile\u003e \u003d new EventEmitter\u003cProfile\u003e();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  @Input() urlEncodedSessionName: string;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  selectProfile(profile: Profile): void {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    this.selectedProfileEmitter.emit(profile);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"describe(\u0027SessionSelectionComponent (unit tests)\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  let fixture: ComponentFixture\u003cSessionSelectionComponent\u003e;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  let component: SessionSelectionComponent;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  let debugElement: DebugElement;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  let nativeElement: HTMLElement;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  let profilesDebugEl: DebugElement;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  let profilesComponent: ProfilesComponent;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  let profileEmitter: EventEmitter\u003cProfile\u003e;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  const logger \u003d jasmine.createSpyObj(\u0027LoggingService\u0027, [\u0027info\u0027]);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  const githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027storeOrganizationDetails\u0027]);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  const phaseService \u003d jasmine.createSpyObj(\u0027PhaseService\u0027, [\u0027storeSessionData\u0027]);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  const authService \u003d jasmine.createSpyObj(\u0027AuthService\u0027, [\u0027startOAuthProcess\u0027, \u0027changeAuthState\u0027]);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  const errorHandlingService \u003d jasmine.createSpyObj(\u0027ErrorHandlingService\u0027, [\u0027handleError\u0027]);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  const testProfile: Profile \u003d {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    profileName: \u0027testProfile\u0027,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    repoName: \u0027testOrg/pe\u0027"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  beforeEach(waitForAsync(() \u003d\u003e {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    TestBed.configureTestingModule({"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      imports: [SharedModule, BrowserAnimationsModule],"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      declarations: [SessionSelectionComponent, ProfilesStubComponent],"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      providers: ["},{"lineNumber":54,"author":{"gitId":"-"},"content":"        { provide: LoggingService, useValue: logger },"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        { provide: GithubService, useValue: githubService },"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        { provide: PhaseService, useValue: phaseService },"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        { provide: AuthService, useValue: authService },"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        { provide: ErrorHandlingService, useValue: errorHandlingService }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      ]"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }).compileComponents();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    fixture \u003d TestBed.createComponent(SessionSelectionComponent);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    fixture.detectChanges(); // onInit()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    component \u003d fixture.componentInstance;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    debugElement \u003d fixture.debugElement;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    nativeElement \u003d debugElement.nativeElement;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    profilesDebugEl \u003d debugElement.query(By.directive(ProfilesStubComponent));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    profilesComponent \u003d profilesDebugEl.componentInstance;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    profileEmitter \u003d profilesComponent.selectedProfileEmitter;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    spyOn(component.sessionEmitter, \u0027emit\u0027);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"  it(\u0027renders without errors\u0027, () \u003d\u003e {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    expect(component).toBeTruthy();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"  it(\u0027renders the profiles component\u0027, () \u003d\u003e {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    expect(profilesComponent).toBeTruthy();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  describe(\u0027when profile is selected\u0027, () \u003d\u003e {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    it(\u0027should emit the correct repo name\u0027, () \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      profileEmitter.emit(testProfile);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      fixture.detectChanges();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      expect(component.sessionEmitter.emit).toHaveBeenCalledWith(testProfile.repoName);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    it(\u0027should update the session input correctly\u0027, () \u003d\u003e {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"      profileEmitter.emit(testProfile);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      fixture.detectChanges();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      const sessionInput \u003d nativeElement.querySelector(\u0027input[formcontrolname\u003d\"session\"]\u0027);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"      if (sessionInput \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        fail(\u0027sessionFieldEl should not be null\u0027);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      expect((\u003cHTMLInputElement\u003esessionInput).value).toBe(testProfile.repoName);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":102,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":100}},{"path":"tests/app/phase-team-response/issues-faulty/issues-faulty.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../../../src/app/core/services/user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssuesFaultyComponent } from \u0027../../../../src/app/phase-team-response/issues-faulty/issues-faulty.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { TEAM_3, TEAM_4, USER_Q } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { generateIssueWithRandomData, ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"describe(\u0027IssuesFaultyComponent\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    const dummyTeam \u003d TEAM_4;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    const dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    let issueService: IssueService;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    let issuesFaultyComponent: IssuesFaultyComponent;"},{"lineNumber":14,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const userService \u003d new UserService(null, null, null);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    userService.currentUser \u003d USER_Q;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    const DUMMY_DUPLICATE_ISSUE_ID \u003d 1;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    const DUMMY_RESPONSE \u003d \u0027dummy response\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      issueService \u003d new IssueService(null, null, null, null, null, null);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(dummyIssue);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      issuesFaultyComponent \u003d new IssuesFaultyComponent(issueService, userService, null);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      issuesFaultyComponent.ngOnInit();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for an issue with no team response\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      const testIssue \u003d { ...dummyIssue, teamResponse: undefined } as Issue;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(testIssue);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"      expect(issuesFaultyComponent.filter(testIssue)).toBeFalse();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with responses\u0027, () \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      const testIssue \u003d { ...dummyIssue, teamResponse: DUMMY_RESPONSE, duplicateOf: undefined } as Issue;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(testIssue);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"      expect(issuesFaultyComponent.filter(testIssue)).toBeFalse();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a duplicate issue with responses that is not duplicated by other issues\u0027, () \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      const testIssue \u003d {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ...dummyIssue,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        teamResponse: DUMMY_RESPONSE,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        duplicateOf: DUMMY_DUPLICATE_ISSUE_ID"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      } as Issue;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(testIssue);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"      expect(issuesFaultyComponent.filter(testIssue)).toBeFalse();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return true for a duplicate issue with responses that is duplicated by other issues\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      const testIssue \u003d {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ...Issue.createPhaseTeamResponseIssue(generateIssueWithRandomData(), TEAM_3),"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        duplicateOf: dummyIssue.id,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        teamResponse: DUMMY_RESPONSE"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      } as Issue;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(testIssue);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"      const duplicateOfTestIssue \u003d {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ...Issue.createPhaseTeamResponseIssue(generateIssueWithRandomData(), TEAM_3),"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        duplicateOf: testIssue.id"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      } as Issue;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(duplicateOfTestIssue);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"      expect(issuesFaultyComponent.filter(testIssue)).toBeTrue();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":68,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":67}},{"path":"tests/app/phase-team-response/issues-pending/issues-pending.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Team } from \u0027../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../../../src/app/core/services/user.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { IssuesPendingComponent } from \u0027../../../../src/app/phase-team-response/issues-pending/issues-pending.component\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { TEAM_4, USER_Q } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"describe(\u0027IssuesPendingComponent\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    const dummyTeam: Team \u003d TEAM_4;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    let dummyIssue: Issue;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    let issuesPendingComponent: IssuesPendingComponent;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    const issueService: IssueService \u003d new IssueService(null, null, null, null, null, null);"},{"lineNumber":15,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const userService: UserService \u003d new UserService(null, null, null);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    userService.currentUser \u003d USER_Q;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    const DUMMY_DUPLICATE_ISSUE_ID \u003d 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    const DUMMY_RESPONSE \u003d \u0027dummy response\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(dummyIssue);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      issuesPendingComponent \u003d new IssuesPendingComponent(issueService, null, userService);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      issuesPendingComponent.ngOnInit();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a duplicate issue with no team response\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d undefined;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with responses\u0027, () \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a duplicate issue with responses\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return true for a non-duplicate issue with no responses\u0027, () \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      issueService.issues[dummyIssue.id].teamResponse \u003d undefined;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"      expect(issuesPendingComponent.filter(dummyIssue)).toBeTrue();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":57,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":56}},{"path":"tests/app/phase-team-response/issues-responded/issues-responded.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Issue, STATUS } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../../../src/app/core/services/user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { IssuesRespondedComponent } from \u0027../../../../src/app/phase-team-response/issues-responded/issues-responded.component\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { TEAM_4, USER_Q } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"describe(\u0027IssuesRespondedComponent\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  describe(\u0027.ngOnInit()\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    const DUMMY_TEAM \u003d TEAM_4;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    const DUMMY_DUPLICATE_ISSUE_ID \u003d 1;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    const DUMMY_RESPONSE \u003d \u0027dummy response\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    let dummyIssue: Issue;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    const issueService \u003d new IssueService(null, null, null, null, null, null);"},{"lineNumber":16,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    const userService \u003d new UserService(null, null, null);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    userService.currentUser \u003d USER_Q;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    const issuesRespondedComponent \u003d new IssuesRespondedComponent(issueService, userService);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    issuesRespondedComponent.ngOnInit();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, DUMMY_TEAM);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(dummyIssue);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with no team response and not marked done\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d undefined;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      dummyIssue.teamResponse \u003d undefined;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a non-duplicate issue with responses and not marked done\u0027, () \u003d\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d undefined;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      dummyIssue.teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return false for a duplicate issue with no team response and not marked done\u0027, () \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d undefined;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      dummyIssue.teamResponse \u003d undefined;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d DUMMY_DUPLICATE_ISSUE_ID;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d STATUS.Incomplete;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      dummyIssue.teamResponse \u003d undefined;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeFalse();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    it(\u0027should set filter to return true for a non-duplicate issue that is marked done with a team response\u0027, () \u003d\u003e {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      dummyIssue.duplicateOf \u003d undefined;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      dummyIssue.status \u003d STATUS.Done;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      dummyIssue.teamResponse \u003d DUMMY_RESPONSE;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"      expect(issuesRespondedComponent.filter(dummyIssue)).toBeTrue();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":64,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":63}},{"path":"tests/app/shared/comment-editor/upload-text-insertor.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { DebugElement, ElementRef } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { ComponentFixture, TestBed, waitForAsync } from \u0027@angular/core/testing\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { FormControl, FormGroup } from \u0027@angular/forms\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { MarkdownModule } from \u0027ngx-markdown\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../../../src/app/core/services/logging.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { UploadService } from \u0027../../../../src/app/core/services/upload.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { CommentEditorComponent } from \u0027../../../../src/app/shared/comment-editor/comment-editor.component\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  DISPLAYABLE_CONTENT,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  insertUploadingText,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  insertUploadUrl,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  insertUploadUrlVideo"},{"lineNumber":17,"author":{"gitId":"-"},"content":"} from \u0027../../../../src/app/shared/comment-editor/upload-text-insertor\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { SharedModule } from \u0027../../../../src/app/shared/shared.module\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"function isDisplayable(filename) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  return DISPLAYABLE_CONTENT.includes(filename.split(\u0027.\u0027).pop().toLowerCase());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"describe(\u0027UploadTextInsertor\u0027, () \u003d\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  let fixture: ComponentFixture\u003cCommentEditorComponent\u003e;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  let commentEditorComponent: CommentEditorComponent;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  let form: FormGroup;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  let commentField;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  let commentTextArea: ElementRef\u003cHTMLTextAreaElement\u003e;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  let textAreaEl: HTMLTextAreaElement;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  const uploadService \u003d jasmine.createSpyObj([\u0027isVideoFile\u0027, \u0027isSupportedFileType\u0027, \u0027uploadFile\u0027]);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  const errorHandlingService \u003d jasmine.createSpyObj([\u0027handleError\u0027]);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  const logger \u003d jasmine.createSpyObj([\u0027info\u0027]);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"  const uploadTextTemplate \u003d (filename) \u003d\u003e `${isDisplayable(filename) ? \u0027!\u0027 : \u0027\u0027}[Uploading ${filename}...]\\n`;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  const uploadUrlTemplate \u003d (filename, uploadUrl) \u003d\u003e `${isDisplayable(filename) ? \u0027!\u0027 : \u0027\u0027}[${filename}](${uploadUrl})\\n`;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  const uploadVideoTemplate \u003d (uploadUrl) \u003d\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    `\u003ci\u003e\u003cvideo controls\u003e\u003csource src\u003d\"${uploadUrl}\" type\u003d\"video/mp4\"\u003eYour browser does not support the video tag.\u003c/video\u003e\u003cbr\u003evideo:${uploadUrl}\u003c/i\u003e\\n`;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  const testDisplayableFilename \u003d \u0027test_file.jpg\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  const testFilename \u003d \u0027test_file.pdf\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  const testVideo \u003d \u0027test_vid.mp4\u0027;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  const testUrl \u003d \u0027testurl.com/test\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  const dummyText \u003d \u0027dummyText\u0027;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  beforeEach(waitForAsync(() \u003d\u003e {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    TestBed.configureTestingModule({"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      imports: [SharedModule, MarkdownModule.forChild(), BrowserAnimationsModule],"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      declarations: [CommentEditorComponent],"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      providers: ["},{"lineNumber":52,"author":{"gitId":"-"},"content":"        { provide: UploadService, useValue: uploadService },"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        { provide: ErrorHandlingService, useValue: errorHandlingService },"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        { provide: LoggingService, useValue: logger }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      ]"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }).compileComponents();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    fixture \u003d TestBed.createComponent(CommentEditorComponent);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    form \u003d new FormGroup({"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      description: new FormControl(\u0027\u0027)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    commentField \u003d form.get(\u0027description\u0027);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    commentEditorComponent \u003d fixture.componentInstance;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // Set up compulsory input fields"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    commentEditorComponent.commentField \u003d commentField;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    commentEditorComponent.commentForm \u003d form;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    commentEditorComponent.id \u003d \u0027description\u0027;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    commentTextArea \u003d commentEditorComponent.commentTextArea;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    textAreaEl \u003d commentTextArea.nativeElement;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  it(\u0027should set up correctly\u0027, () \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    expect(fixture).toBeDefined();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    expect(commentTextArea).toBeDefined();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    expect(commentField).toBeDefined();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  describe(\u0027insertUploadingText\u0027, () \u003d\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    describe(\u0027should set the correct value in the commentField\u0027, () \u003d\u003e {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      it(\u0027should insert a ! for displayable files\u0027, () \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        const expected \u003d uploadTextTemplate(testDisplayableFilename);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        insertUploadingText(testDisplayableFilename, commentField, commentTextArea);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expect(commentField.value).toBe(expected);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"      it(\u0027should not insert a ! for non-displayable files\u0027, () \u003d\u003e {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        const expected \u003d uploadTextTemplate(testFilename);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        insertUploadingText(testFilename, commentField, commentTextArea);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expect(commentField.value).toBe(expected);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    it(\"should reposition the cursor by the uploading text\u0027s length\", () \u003d\u003e {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      const initialPosition \u003d textAreaEl.selectionEnd;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"      const expected \u003d uploadTextTemplate(testDisplayableFilename);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      insertUploadingText(testDisplayableFilename, commentField, commentTextArea);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"      expect(textAreaEl.selectionEnd).toBe(expected.length + initialPosition);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  describe(\u0027replacePlaceholderString\u0027, () \u003d\u003e {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"      insertUploadingText(testDisplayableFilename, commentField, commentTextArea);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    describe(\u0027should position the cursor\u0027, () \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"      it(\u0027should reposition to the end of the upload url if cursor is within the uploading text\u0027, () \u003d\u003e {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        insertUploadUrl(testDisplayableFilename, testUrl, commentField, commentTextArea);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        const expected \u003d uploadUrlTemplate(testDisplayableFilename, testUrl);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        expect(textAreaEl.selectionEnd).toBe(expected.length);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"      it(\u0027should not reposition if the cursor is before the uploading text\u0027, () \u003d\u003e {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // Insert text before the upload text and position cursor at the start"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        const startOfField \u003d 0;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        commentField.setValue(`${dummyText}${commentField.value}`);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        textAreaEl.setSelectionRange(startOfField, startOfField);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        insertUploadUrl(testDisplayableFilename, testUrl, commentField, commentTextArea);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        expect(textAreaEl.selectionEnd).toBe(startOfField);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"      it(\u0027should reposition the cursor by the difference in length if cursor is after the uploading text\u0027, () \u003d\u003e {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // Insert text after the upload text and position cursor at the end"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        commentField.setValue(`${commentField.value}${dummyText}`);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        const endOfField \u003d commentField.value.length;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        textAreaEl.setSelectionRange(endOfField, endOfField);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        insertUploadUrl(testDisplayableFilename, testUrl, commentField, commentTextArea);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        const updatedEndOfField \u003d commentField.value.length;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        expect(textAreaEl.selectionEnd).toBe(updatedEndOfField);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"  describe(\u0027insertUploadUrl\u0027, () \u003d\u003e {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      insertUploadingText(testDisplayableFilename, commentField, commentTextArea);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    it(\u0027should replace the uploading text with the filename and link\u0027, () \u003d\u003e {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      insertUploadUrl(testDisplayableFilename, testUrl, commentField, commentTextArea);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      const expected \u003d uploadUrlTemplate(testDisplayableFilename, testUrl);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      expect(commentField.value).toBe(expected);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    it(\u0027should replace only the uploading text, leaving the rest of the field unchanged\u0027, () \u003d\u003e {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      // insert dummy text before and after, should remain unchanged"},{"lineNumber":151,"author":{"gitId":"-"},"content":"      commentField.setValue(`${dummyText}${commentField.value}${dummyText}`);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      insertUploadUrl(testDisplayableFilename, testUrl, commentField, commentTextArea);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      const expected \u003d `${dummyText}${uploadUrlTemplate(testDisplayableFilename, testUrl)}${dummyText}`;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      expect(commentField.value).toBe(expected);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"  describe(\u0027insertUploadUrlVideo\u0027, () \u003d\u003e {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      insertUploadingText(testVideo, commentField, commentTextArea);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    it(\u0027should replace the uploading text with the correct HTML text\u0027, () \u003d\u003e {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      insertUploadUrlVideo(testVideo, testUrl, commentField, commentTextArea);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"      const expected \u003d uploadVideoTemplate(testUrl);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      expect(commentField.value).toBe(expected);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":169,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":167}},{"path":"tests/app/shared/issue-tables/search-filter.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Team } from \u0027../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { TABLE_COLUMNS } from \u0027../../../../src/app/shared/issue-tables/issue-tables-columns\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { applySearchFilter } from \u0027../../../../src/app/shared/issue-tables/search-filter\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { USER_SHUMING } from \u0027../../../constants/data.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  DUPLICATED_ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  ISSUE_WITH_ASSIGNEES,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  ISSUE_WITH_EMPTY_DESCRIPTION,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  ISSUE_WITH_EMPTY_DESCRIPTION_LOW_SEVERITY"},{"lineNumber":13,"author":{"gitId":"-"},"content":"} from \u0027../../../constants/githubissue.constants\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"describe(\u0027search-filter\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  describe(\u0027applySearchFilter()\u0027, () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    const dummyTeam: Team \u003d new Team({"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      id: \u0027dummyId\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      teamMembers: []"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    let searchKey: string;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    const mediumSeverityIssueWithResponse: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":23,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    mediumSeverityIssueWithResponse.response \u003d \u0027Accepted\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    const mediumSeverityIssueWithAssigneee: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_ASSIGNEES, dummyTeam);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    const lowSeverityFeatureFlawIssue: Issue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION_LOW_SEVERITY, dummyTeam);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    const highSeverityDocumentationBugIssue: Issue \u003d Issue.createPhaseTeamResponseIssue("},{"lineNumber":27,"author":{"gitId":"-"},"content":"      ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      dummyTeam"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    const duplicatedIssue: Issue \u003d Issue.createPhaseTeamResponseIssue(DUPLICATED_ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY, dummyTeam);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    duplicatedIssue.duplicateOf \u003d highSeverityDocumentationBugIssue.id;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    const issuesList: Issue[] \u003d ["},{"lineNumber":34,"author":{"gitId":"-"},"content":"      mediumSeverityIssueWithResponse,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      mediumSeverityIssueWithAssigneee,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      lowSeverityFeatureFlawIssue,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      highSeverityDocumentationBugIssue"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    ];"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    const displayedColumns: string[] \u003d ["},{"lineNumber":40,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.ID,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.TITLE,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.TYPE,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.SEVERITY,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.RESPONSE,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.ASSIGNEE,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      TABLE_COLUMNS.DUPLICATED_ISSUES"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    ];"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    const issueService: IssueService \u003d new IssueService(null, null, null, null, null, null);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    beforeEach(() \u003d\u003e {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(mediumSeverityIssueWithResponse);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(mediumSeverityIssueWithAssigneee);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(lowSeverityFeatureFlawIssue);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(highSeverityDocumentationBugIssue);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      issueService.updateLocalStore(duplicatedIssue);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    it(\u0027can filter for issues which are assigned to a specific user\u0027, () \u003d\u003e {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      searchKey \u003d USER_SHUMING.loginId;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithAssigneee]);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    it(\u0027can filter for an issue by the id of its duplicate issues\u0027, () \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      searchKey \u003d duplicatedIssue.id.toString();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([highSeverityDocumentationBugIssue]);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    it(\u0027can filter for issues that contain the search key in any other column\u0027, () \u003d\u003e {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      // Search by id of issue"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      searchKey \u003d mediumSeverityIssueWithResponse.id.toString();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithResponse]);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"      // Search by title of issue"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      searchKey \u003d mediumSeverityIssueWithAssigneee.title;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithAssigneee]);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"      // Search by type of issue"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      searchKey \u003d highSeverityDocumentationBugIssue.type;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([highSeverityDocumentationBugIssue]);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"      // Search by severity of issue"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      searchKey \u003d lowSeverityFeatureFlawIssue.severity;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([lowSeverityFeatureFlawIssue]);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"      // Search by response of issue"},{"lineNumber":86,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      searchKey \u003d mediumSeverityIssueWithResponse.response;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      expect(applySearchFilter(searchKey, displayedColumns, issueService, issuesList)).toEqual([mediumSeverityIssueWithResponse]);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":90,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":88}},{"path":"tests/app/shared/issue/assignee/assignee.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { DebugElement } from \u0027@angular/core\u0027;"},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { ComponentFixture, TestBed, waitForAsync } from \u0027@angular/core/testing\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { FormsModule } from \u0027@angular/forms\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { By } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { BrowserAnimationsModule } from \u0027@angular/platform-browser/animations\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { Team } from \u0027../../../../../src/app/core/models/team.model\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { User, UserRole } from \u0027../../../../../src/app/core/models/user.model\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../../../src/app/core/services/permission.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { AssigneeComponent } from \u0027../../../../../src/app/shared/issue/assignee/assignee.component\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { MaterialModule } from \u0027../../../../../src/app/shared/material.module\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { ISSUE_WITH_EMPTY_DESCRIPTION } from \u0027../../../../constants/githubissue.constants\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"describe(\u0027AssigneeComponent\u0027, () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  let component: AssigneeComponent;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  let debugElement: DebugElement;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  let nativeElement: HTMLElement;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  let fixture: ComponentFixture\u003cAssigneeComponent\u003e;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  let dummyIssue: Issue;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"  const testStudent: User \u003d {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    loginId: \u0027testStudent\u0027,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    role: UserRole.Student"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  const testStudent2: User \u003d {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    loginId: \u0027testStudent2\u0027,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    role: UserRole.Student"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  const testStudent3: User \u003d {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    loginId: \u0027testStudent3\u0027,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    role: UserRole.Student"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  const testStudent4: User \u003d {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    loginId: \u0027testStudent4\u0027,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    role: UserRole.Student"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  const dummyTeam: Team \u003d new Team({"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    id: \u0027F09-2\u0027,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    teamMembers: [testStudent, testStudent2, testStudent3, testStudent4]"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  const phaseService: any \u003d jasmine.createSpyObj(\u0027PhaseService\u0027, [], { currentPhase: Phase.phaseTeamResponse });"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  const issueService: any \u003d jasmine.createSpyObj(\u0027IssueService\u0027, [\u0027getDuplicateIssuesFor\u0027, \u0027getLatestIssue\u0027, \u0027updateIssue\u0027]);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  const permissionsService: any \u003d jasmine.createSpyObj(\u0027PermissionService\u0027, [\u0027isIssueLabelsEditable\u0027]);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  beforeEach(waitForAsync(() \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    TestBed.configureTestingModule({"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      declarations: [AssigneeComponent],"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      providers: [IssueService, ErrorHandlingService, PhaseService, PermissionService],"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      imports: [FormsModule, MaterialModule, BrowserAnimationsModule]"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      .overrideProvider(IssueService, { useValue: issueService })"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      .overrideProvider(PhaseService, { useValue: phaseService })"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      .overrideProvider(PermissionService, { useValue: permissionsService })"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      .compileComponents();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  }));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    permissionsService.isIssueLabelsEditable.and.callFake(() \u003d\u003e true);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    issueService.getDuplicateIssuesFor.and.returnValue(of([]));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    fixture \u003d TestBed.createComponent(AssigneeComponent);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    component \u003d fixture.componentInstance;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    dummyIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    component.team \u003d dummyTeam;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    component.issue \u003d dummyIssue;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    debugElement \u003d fixture.debugElement;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    nativeElement \u003d fixture.nativeElement;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  it(\u0027should have a placeholder value of - given no assignees\u0027, () \u003d\u003e {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    const matPlaceholderValue: HTMLElement \u003d debugElement.query(By.css(\u0027p\u0027)).nativeElement;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    expect(matPlaceholderValue.innerText).toEqual(\u0027-\u0027); // Placeholder Value"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  it(\u0027should be able to open the assignee selector\u0027, () \u003d\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    openMatSelect();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    const matOption: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-option\u0027)).nativeElement;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    const inputElement: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-select-panel\u0027)).nativeElement;"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    expect(inputElement.children.length).toBe(dummyTeam.teamMembers.length);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    expect(matOption.attributes.getNamedItem(\u0027aria-selected\u0027).value).toEqual(\u0027false\u0027);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  it(\u0027should emit an event containing the issue with updated assignees, upon closing the MatSelect\u0027, () \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    spyOn(component.issueUpdated, \u0027emit\u0027);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    openMatSelect();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    addAssignee();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    dispatchClosedEvent();"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    expect(component.issueUpdated.emit).toHaveBeenCalledWith(jasmine.objectContaining({ assignees: [testStudent.loginId] }));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"  it(\u0027should show the updated assignees upon receiving an updated issue\u0027, () \u003d\u003e {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    component.issue.assignees \u003d [testStudent.loginId];"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    const matListText: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-list-item-content\u0027)).nativeElement;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    expect(matListText.innerText).toEqual(testStudent.loginId);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  it(\u0027should update assignees of duplicate issues\u0027, () \u003d\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    const duplicateIssue \u003d Issue.createPhaseTeamResponseIssue(ISSUE_WITH_EMPTY_DESCRIPTION, dummyTeam);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    issueService.updateIssue.and.callFake((x: Issue) \u003d\u003e of(x));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    issueService.getDuplicateIssuesFor.and.returnValue(of([duplicateIssue]));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    openMatSelect();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    addAssignee();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    dispatchClosedEvent();"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    const updatedIssue \u003d dummyIssue.clone(phaseService.currentPhase);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    updatedIssue.assignees \u003d [testStudent.loginId];"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    const updatedDuplicateIssue \u003d duplicateIssue.clone(phaseService.currentPhase);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    updatedDuplicateIssue.assignees \u003d [testStudent.loginId];"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    expect(issueService.updateIssue).toHaveBeenCalledWith(updatedIssue);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    expect(issueService.updateIssue).toHaveBeenCalledWith(updatedDuplicateIssue);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  function openMatSelect(): void {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    const matSelectButton: HTMLElement \u003d nativeElement.querySelector(\u0027button\u0027);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    matSelectButton.click();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  function addAssignee(): void {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    const matOption: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-option\u0027)).nativeElement;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    matOption.click();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  function dispatchClosedEvent() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    const matSelectElement: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-select\u0027)).nativeElement;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    issueService.updateIssue.and.callFake((updatedIssue: Issue) \u003d\u003e of(updatedIssue));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    matSelectElement.dispatchEvent(new Event(\u0027closed\u0027));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":149}},{"path":"tests/app/shared/issue/duplicatedIssues/duplicated-issues.component.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { DebugElement } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { ComponentFixture, TestBed, waitForAsync } from \u0027@angular/core/testing\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { By, HAMMER_LOADER } from \u0027@angular/platform-browser\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { RouterTestingModule } from \u0027@angular/router/testing\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { Issue } from \u0027../../../../../src/app/core/models/issue.model\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../../../../src/app/core/models/phase.model\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../../../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { IssueService } from \u0027../../../../../src/app/core/services/issue.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../../../../src/app/core/services/permission.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../../../../src/app/core/services/phase.service\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { DuplicatedIssuesComponent } from \u0027../../../../../src/app/shared/issue/duplicatedIssues/duplicated-issues.component\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { MaterialModule } from \u0027../../../../../src/app/shared/material.module\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { TEAM_4 } from \u0027../../../../constants/data.constants\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  ISSUE_PENDING_MODERATION,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  ISSUE_PENDING_MODERATION_HIGH_SEVERITY_FEATURE_FLAW,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  ISSUE_PENDING_MODERATION_LOW_SEVERITY_DOCUMENTATION_BUG"},{"lineNumber":19,"author":{"gitId":"-"},"content":"} from \u0027../../../../constants/githubissue.constants\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"describe(\u0027DuplicatedIssuesComponent\u0027, () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  let component: DuplicatedIssuesComponent;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  let debugElement: DebugElement;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  let nativeElement: HTMLElement;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  let fixture: ComponentFixture\u003cDuplicatedIssuesComponent\u003e;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  let dummyDuplicatedIssues: Observable\u003cIssue[]\u003e;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  let thisIssue: Issue;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  const dummyTeam \u003d TEAM_4;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  const firstDummyIssue \u003d Issue.createPhaseModerationIssue(ISSUE_PENDING_MODERATION_HIGH_SEVERITY_FEATURE_FLAW, dummyTeam);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  const secondDummyIssue \u003d Issue.createPhaseModerationIssue(ISSUE_PENDING_MODERATION_LOW_SEVERITY_DOCUMENTATION_BUG, dummyTeam);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  const permissionService: any \u003d jasmine.createSpyObj(\u0027PermissionService\u0027, [\u0027isTeamResponseEditable\u0027, \u0027isTutorResponseEditable\u0027]);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  const issueService: any \u003d jasmine.createSpyObj(\u0027IssueService\u0027, ["},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u0027getDuplicateIssuesFor\u0027,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u0027updateIssueWithComment\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u0027updateIssue\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u0027updateLocalStore\u0027"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  ]);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  const phaseService: any \u003d jasmine.createSpyObj(\u0027PhaseService\u0027, [], { currentPhase: Phase.phaseModeration });"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  beforeEach(waitForAsync(() \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    TestBed.configureTestingModule({"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      declarations: [DuplicatedIssuesComponent],"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      providers: ["},{"lineNumber":46,"author":{"gitId":"-"},"content":"        IssueService,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        ErrorHandlingService,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        PhaseService,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        PermissionService,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          provide: HAMMER_LOADER,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          useValue: () \u003d\u003e new Promise(() \u003d\u003e {})"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      ],"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      imports: [MaterialModule, RouterTestingModule]"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .overrideProvider(PermissionService, { useValue: permissionService })"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      .overrideProvider(IssueService, { useValue: issueService })"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      .overrideProvider(PhaseService, { useValue: phaseService })"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .compileComponents();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    dummyDuplicatedIssues \u003d of([firstDummyIssue, secondDummyIssue]);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    issueService.getDuplicateIssuesFor.and.callFake(() \u003d\u003e dummyDuplicatedIssues);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    thisIssue \u003d Issue.createPhaseModerationIssue(ISSUE_PENDING_MODERATION, dummyTeam);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    firstDummyIssue.duplicateOf \u003d thisIssue.id;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    secondDummyIssue.duplicateOf \u003d thisIssue.id;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    fixture \u003d TestBed.createComponent(DuplicatedIssuesComponent);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    component \u003d fixture.componentInstance;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    component.issue \u003d thisIssue;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    debugElement \u003d fixture.debugElement;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    nativeElement \u003d fixture.nativeElement;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  it(\u0027should create a chip for each duplicated issue\u0027, () \u003d\u003e {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // Check that the number of chips is the same as the number of duplicate issues"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    const matChipListLength: number \u003d debugElement.queryAll(By.css(\u0027.mat-chip\u0027)).length;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    const duplicateIssueslength: number \u003d getDuplicateIssuesLength();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    expect(matChipListLength).toEqual(duplicateIssueslength);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    // Check that first chip contains information on first issue in the duplicate issues array"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    const matChipAnchor: HTMLElement \u003d nativeElement.querySelector(\u0027a\u0027);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    expect(matChipAnchor.innerText).toEqual(`#${firstDummyIssue.id}`);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"  it(\u0027should only allow cancellation of duplicate status if team/tutor response is editable\u0027, () \u003d\u003e {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    // Team/tutor response is not editable"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    mockTeamResponseEditPermission(permissionService, false);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    mockTutorResponseEditPermission(permissionService, false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    const cancelIconQuery \u003d debugElement.query(By.css(\u0027.mat-icon\u0027));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    expect(cancelIconQuery).toBeNull();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    // Team response is editable"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    mockTeamResponseEditPermission(permissionService, true);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    mockTutorResponseEditPermission(permissionService, false);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    let cancelIcon: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-icon\u0027)).nativeElement;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    expect(cancelIcon).toBeDefined();"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    // Tutor response is editable"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    mockTeamResponseEditPermission(permissionService, false);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    mockTutorResponseEditPermission(permissionService, true);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    cancelIcon \u003d debugElement.query(By.css(\u0027.mat-icon\u0027)).nativeElement;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    expect(cancelIcon).toBeDefined();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  it(\u0027should remove duplicate status of an duplicated issue once cancel icon is clicked\u0027, () \u003d\u003e {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    let updatedFirstDummyIssue: Issue;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    issueService.updateIssueWithComment.and.callFake((duplicatedIssue: Issue) \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      updatedFirstDummyIssue \u003d duplicatedIssue;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      return of(duplicatedIssue);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    mockTeamResponseEditPermission(permissionService, true);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    expect(firstDummyIssue.duplicateOf).toEqual(component.issue.id);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    cancelDuplicateStatus();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    expect(updatedFirstDummyIssue.duplicateOf).toBeNull();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    expect(issueService.updateLocalStore).toHaveBeenCalledWith(updatedFirstDummyIssue);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"  function getDuplicateIssuesLength(): number {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    let length: number;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    component.duplicatedIssues.subscribe((x) \u003d\u003e (length \u003d x.length));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    return length;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"  function cancelDuplicateStatus(): void {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    const cancelIcon: HTMLElement \u003d debugElement.query(By.css(\u0027.mat-icon\u0027)).nativeElement;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    cancelIcon.click();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    fixture.detectChanges();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"  function mockTeamResponseEditPermission(permissionService: any, editable: boolean): void {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    permissionService.isTeamResponseEditable.and.callFake(() \u003d\u003e editable);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  function mockTutorResponseEditPermission(permissionService: any, editable: boolean): void {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    permissionService.isTutorResponseEditable.and.callFake(() \u003d\u003e editable);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":146}},{"path":"tests/constants/githubcomment.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { GithubComment } from \u0027../../src/app/core/models/github/github-comment.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export const EMPTY_TEAM_RESPONSE: GithubComment \u003d {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  body: \"# Team\u0027s Response\\n\" + \u0027\\n\u0027 + \u0027 ## Duplicate status (if any):\\n\u0027 + \u0027--\u0027,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  created_at: \u00272020-02-16T18:31:38Z\u0027,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  id: 586737495,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  issue_url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/91\u0027,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-02T12:50:02Z\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/comments/586737495\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    login: \u0027testathorStudent\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    id: 46639862,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars3.githubusercontent.com/u/46639862?v\u003d4\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    url: \u0027https://api.github.com/users/testathorStudent\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":16,"author":{"gitId":"-"},"content":"};"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"// Type and severity disagreeement"},{"lineNumber":19,"author":{"gitId":"-"},"content":"export const TEAM_RESPONSE_MULTIPLE_DISAGREEMENT \u003d {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  body:"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u0027[IMPORTANT!: Please do not edit or reply to this comment using the GitHub UI. You can respond to it using CATcher during the next phase of the PE]\\n\\n\u0027 +"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"# Team\u0027s Response\\n\" +"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u0027This is a dummy team response comment: \u0027 +"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u0027Thanks for the feedback\\n\\n\u0027 +"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u0027# Items for the Tester to Verify\\n\\n\u0027 +"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u0027## :question: Issue severity\\n\\n\u0027 +"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u0027Team chose [`severity.Low`]\\n\u0027 +"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u0027Originally [`severity.High`]\\n\\n\u0027 +"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u0027- [ ] I disagree\\n\\n\u0027 +"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u0027**Reason for disagreement:** [replace this with your reason]\\n\\n\u0027 +"},{"lineNumber":31,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n\\n\u0027 +"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u0027## :question: Issue type\\n\\n\u0027 +"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u0027Team chose [`type.DocumentationBug`]\\n\u0027 +"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u0027Originally [`type.FunctionalityBug`]\\n\\n\u0027 +"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u0027- [ ] I disagree\\n\\n\u0027 +"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u0027**Reason for disagreement:** [replace this with your reason]\\n\\n\u0027 +"},{"lineNumber":37,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  created_at: \u00272021-06-29T17:15:11Z\u0027,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  id: 870774171,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  updated_at: \u00272021-06-29T17:15:11Z\u0027"},{"lineNumber":41,"author":{"gitId":"-"},"content":"} as GithubComment;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"export const PENDING_TUTOR_MODERATION: GithubComment \u003d {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  body:"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u0027# Tutor Moderation\\n\\n\u0027 +"},{"lineNumber":46,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    \u0027## :question: Issue Type\\n\\n- [x] Done\\n\\ntest\\n\\n\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n\u0027 +"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u0027## :question: Issue Severity\\n\\n- [ ] Done\\n\\n\u0027 +"},{"lineNumber":48,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    \u0027[replace this with your explanation]\\n\\n\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n\u0027 +"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \u0027## :question: Not Related Question\\n\\n- [ ] Done\\n\\n\u0027 +"},{"lineNumber":50,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    \u0027[replace this with your explanation]\\n\\n\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n\u0027,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  created_at: \u00272020-08-15T06:39:24Z\u0027,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  id: 674357972,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  issue_url: \u0027https://api.github.com/repos/CATcher-org/pe-evaluation/issues/26\u0027,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-08-15T06:39:40Z\u0027,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-evaluation/issues/comments/674357972\u0027,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  user: {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    login: \u0027testathorTutor\u0027,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    id: 46640218,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    avatar_url: \u0027https://avatars2.githubusercontent.com/u/46640218?v\u003d4\u0027,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    url: \u0027https://api.github.com/users/testathorTutor\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"vigneshsankariyer1234567890":5,"-":57}},{"path":"tests/constants/githubissue.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueState } from \u0027../../graphql/graphql-types\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubIssue } from \u0027../../src/app/core/models/github/github-issue.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../src/app/core/models/github/github-label.model\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { USER_ANUBHAV, USER_SHUMING } from \u0027./data.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { EMPTY_TEAM_RESPONSE, PENDING_TUTOR_MODERATION } from \u0027./githubcomment.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_DOCUMENTATION_BUG,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_FEATURE_FLAW,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_FUNCTIONALITY_BUG,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_HIGH_SEVERITY,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_LOW_SEVERITY,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_MEDIUM_SEVERITY,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_TEAM_LABEL,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  GITHUB_LABEL_TUTORIAL_LABEL"},{"lineNumber":15,"author":{"gitId":"-"},"content":"} from \u0027./githublabel.constants\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"const randomId: () \u003d\u003e string \u003d () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  return Math.floor(Math.random() * 1000000000).toString();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"};"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"const randomIssueNumber: () \u003d\u003e number \u003d () \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  return Math.round(Math.random() * 1000);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"};"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"const randomISODate: (startDate?: Date, endDate?: Date) \u003d\u003e string \u003d ("},{"lineNumber":26,"author":{"gitId":"-"},"content":"  startDate: Date \u003d new Date(2020, 1, 1),"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  endDate: Date \u003d new Date()"},{"lineNumber":28,"author":{"gitId":"-"},"content":") \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  return new Date(startDate.getTime() + Math.random() * (startDate.getTime() - endDate.getTime())).toISOString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"};"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"const USER_ANUBHAV_DETAILS \u003d {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  login: USER_ANUBHAV.loginId,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  avatar_url: \u0027https://avatars1.githubusercontent.com/u/35621759?v\u003d4\u0027,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":36,"author":{"gitId":"-"},"content":"};"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"const USER_ANUBHAV_ASSIGNEE_DETAILS \u003d {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  login: USER_ANUBHAV.loginId,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  id: 35621759,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/users/anubh-v\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"};"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"const USER_SHUMING_DETAILS \u003d {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  login: USER_SHUMING.loginId,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  avatar_url: \u0027https://avatars0.githubusercontent.com/u/43642522?v\u003d4\u0027,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/users/geshuming\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"};"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"const USER_SHUMING_ASSIGNEE_DETAILS \u003d {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  login: \u0027geshuming\u0027,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  id: 43642522,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/users/geshuming\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"};"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"const ISSUE_BODY \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  \u0027# Issue Description\\n{original issue description}\\n\u0027 +"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \"# Team\u0027s Response\\n{team\u0027s response}\\n # Disputes\\n\\n\" +"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \"## :question: Issue Type\\n\\n### Team says:\\r\\n{the team\u0027s action that is being disputed}\\r\\n\\r\\n\" +"},{"lineNumber":60,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \"### Tester says:\\r\\n{tester\u0027s objection}\\n\\n\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n## :question: Issue Severity\\n\\n\" +"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \"### Team says:\\r\\n{the team\u0027s action that is being disputed}\\r\\n\\r\\n\" +"},{"lineNumber":62,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \"### Tester says:\\r\\n{tester\u0027s objection}\\n\\n\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n## :question: Not Related Question\\n\\n\" +"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \"### Team says:\\r\\n{the team\u0027s action that is being disputed}\\r\\n\\r\\n\" +"},{"lineNumber":64,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \"### Tester says:\\r\\n{tester\u0027s objection}\\n\\n\u003ccatcher-end-of-segment\u003e\u003chr\u003e\\n\\n\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION \u003d new GithubIssue({"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  id: \u0027574085971\u0027,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  number: 92,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  assignees: [],"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  comments: [],"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  body: \u0027\u0027,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  created_at: \u00272020-03-02T16:19:02Z\u0027,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  title: \u0027App starts to lag when given large amount of input\u0027,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-13T13:37:32Z\u0027,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/92\u0027,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  user: USER_ANUBHAV_DETAILS"},{"lineNumber":79,"author":{"gitId":"-"},"content":"});"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION_LOW_SEVERITY \u003d new GithubIssue({"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  id: \u0027384830567\u0027,"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  number: 130,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  assignees: [],"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  comments: [],"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  body: \u0027\u0027,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  created_at: \u00272020-03-02T16:19:02Z\u0027,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FEATURE_FLAW, GITHUB_LABEL_LOW_SEVERITY],"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  title: \u0027App is sometimes slow\u0027,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-13T13:37:32Z\u0027,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/130\u0027,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  user: USER_ANUBHAV_DETAILS"},{"lineNumber":94,"author":{"gitId":"-"},"content":"});"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"export const ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY \u003d new GithubIssue({"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  id: \u0027573957398\u0027,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  number: 32,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  assignees: [],"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  comments: [],"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  body: \u0027\u0027,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  created_at: \u00272010-03-12T19:12:02Z\u0027,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_DOCUMENTATION_BUG, GITHUB_LABEL_HIGH_SEVERITY],"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  title: \u0027Too many typos\u0027,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  updated_at: \u00272012-03-12T19:12:02Z\u0027,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/130\u0027,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  user: USER_ANUBHAV_DETAILS"},{"lineNumber":109,"author":{"gitId":"-"},"content":"});"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"export const DUPLICATED_ISSUE_WITH_EMPTY_DESCRIPTION_HIGH_SEVERITY \u003d new GithubIssue({"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  id: \u0027573957399\u0027,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  number: 33,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  assignees: [],"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  comments: [],"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  body: \u0027\u0027,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  created_at: \u00272010-04-12T19:12:02Z\u0027,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_DOCUMENTATION_BUG, GITHUB_LABEL_HIGH_SEVERITY],"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  title: \u0027Too many typos 2\u0027,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  updated_at: \u00272012-04-12T19:12:02Z\u0027,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/130\u0027,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  user: USER_ANUBHAV_DETAILS"},{"lineNumber":124,"author":{"gitId":"-"},"content":"});"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"export const ISSUE_WITH_ASSIGNEES \u003d new GithubIssue({"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  id: \u0027551732011\u0027,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  number: 91,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  assignees: [USER_ANUBHAV_ASSIGNEE_DETAILS, USER_SHUMING_ASSIGNEE_DETAILS],"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  body: \u0027Screen freezes every few minutes\u0027,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  created_at: \u00272020-01-18T07:01:45Z\u0027,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  title: \u0027Screen freezes\u0027,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-03-02T12:50:02Z\u0027,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/91\u0027,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  user: USER_ANUBHAV_DETAILS,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  comments: [EMPTY_TEAM_RESPONSE]"},{"lineNumber":139,"author":{"gitId":"-"},"content":"});"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"export const generateIssueWithRandomData: () \u003d\u003e GithubIssue \u003d () \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  const created_and_updated_date: string \u003d randomISODate();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  const issueNumber: number \u003d randomIssueNumber();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  const severityLabels: GithubLabel[] \u003d [GITHUB_LABEL_LOW_SEVERITY, GITHUB_LABEL_MEDIUM_SEVERITY, GITHUB_LABEL_HIGH_SEVERITY];"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  const typeLabels: GithubLabel[] \u003d [GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_FEATURE_FLAW, GITHUB_LABEL_DOCUMENTATION_BUG];"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  return new GithubIssue({"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    id: randomId(),"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    number: issueNumber,"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    assignees: [],"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    comments: [],"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    body: `Issue No.: ${issueNumber}\\nSample Content.`,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    created_at: created_and_updated_date,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, typeLabels[issueNumber % 3], severityLabels[issueNumber % 3]],"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    state: IssueState.Open,"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    title: `Random Issue: ${issueNumber}`,"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    updated_at: created_and_updated_date,"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    url: `https://api.github.com/repos/CATcher-org/pe-results/issues/${issueNumber}`,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    user: USER_ANUBHAV_DETAILS"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":160,"author":{"gitId":"-"},"content":"};"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"export const ISSUE_PENDING_MODERATION \u003d new GithubIssue({"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  id: \u0027574674360\u0027,"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  number: 26,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  assignees: [USER_SHUMING_ASSIGNEE_DETAILS],"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  body: ISSUE_BODY,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  created_at: \u00272020-03-03T13:38:32Z\u0027,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FUNCTIONALITY_BUG, GITHUB_LABEL_MEDIUM_SEVERITY],"},{"lineNumber":169,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  title: \u0027Basic Issue, Three Disputes, Unsure\u0027,"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-08-15T06:39:40Z\u0027,"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/26\u0027,"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  user: USER_SHUMING_DETAILS,"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  comments: [PENDING_TUTOR_MODERATION]"},{"lineNumber":175,"author":{"gitId":"-"},"content":"});"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"export const ISSUE_PENDING_MODERATION_HIGH_SEVERITY_FEATURE_FLAW \u003d new GithubIssue({"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  id: \u0027239538360\u0027,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"  number: 93,"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  assignees: [USER_SHUMING_ASSIGNEE_DETAILS],"},{"lineNumber":181,"author":{"gitId":"-"},"content":"  body: ISSUE_BODY,"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  created_at: \u00272020-10-14T10:28:32Z\u0027,"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_FEATURE_FLAW, GITHUB_LABEL_HIGH_SEVERITY],"},{"lineNumber":184,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  title: \u0027Redundant buggy feature\u0027,"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-11-25T13:19:40Z\u0027,"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/26\u0027,"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  user: USER_SHUMING_DETAILS,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  comments: [PENDING_TUTOR_MODERATION]"},{"lineNumber":190,"author":{"gitId":"-"},"content":"});"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"export const ISSUE_PENDING_MODERATION_LOW_SEVERITY_DOCUMENTATION_BUG \u003d new GithubIssue({"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  id: \u0027384756360\u0027,"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  number: 6,"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  assignees: [USER_SHUMING_ASSIGNEE_DETAILS],"},{"lineNumber":196,"author":{"gitId":"-"},"content":"  body: ISSUE_BODY,"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  created_at: \u00272020-03-26T09:08:12Z\u0027,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  labels: [GITHUB_LABEL_TEAM_LABEL, GITHUB_LABEL_TUTORIAL_LABEL, GITHUB_LABEL_DOCUMENTATION_BUG, GITHUB_LABEL_LOW_SEVERITY],"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  state: IssueState.Open,"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  title: \u0027Documentation bug, too many typos\u0027,"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  updated_at: \u00272020-11-10T16:59:40Z\u0027,"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  url: \u0027https://api.github.com/repos/CATcher-org/pe-results/issues/26\u0027,"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  user: USER_SHUMING_DETAILS,"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  comments: [PENDING_TUTOR_MODERATION]"},{"lineNumber":205,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":3,"-":202}},{"path":"tests/constants/label.constants.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Label } from \u0027../../src/app/core/models/label.model\u0027;"},{"lineNumber":2,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { LabelService, LABEL_DEFINITIONS } from \u0027../../src/app/core/services/label.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"// Label name constants"},{"lineNumber":5,"author":{"gitId":"-"},"content":"export const SEVERITY_VERY_LOW \u003d \u0027Very Low\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"export const SEVERITY_LOW \u003d \u0027Low\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"export const SEVERITY_MEDIUM \u003d \u0027Medium\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"export const SEVERITY_HIGH \u003d \u0027High\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"export const TYPE_DOCUMENTATION_BUG \u003d \u0027DocumentationBug\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"export const TYPE_FUNCTIONALITY_BUG \u003d \u0027FunctionalityBug\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export const TYPE_FEATURE_FLAW \u003d \u0027FeatureFlaw\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"export const RESPONSE_ACCEPTED \u003d \u0027Accepted\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"export const RESPONSE_REJECTED \u003d \u0027Rejected\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"export const RESPONSE_ISSUE_UNCLEAR \u003d \u0027IssueUnclear\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"export const RESPONSE_CANNOT_REPRODUCE \u003d \u0027CannotReproduce\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"export const STATUS_DONE \u003d \u0027Done\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"export const STATUS_INCOMPLETE \u003d \u0027Incomplete\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"// Label category constants"},{"lineNumber":20,"author":{"gitId":"-"},"content":"export const SEVERITY \u003d \u0027severity\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"export const TYPE \u003d \u0027type\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"export const RESPONSE \u003d \u0027response\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"export const STATUS \u003d \u0027status\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"// Label color constants"},{"lineNumber":26,"author":{"gitId":"-"},"content":"export const COLOR_BLACK \u003d \u0027000000\u0027;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"export const COLOR_WHITE \u003d \u0027ffffff\u0027;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_VERY_LOW \u003d \u0027ffe0e0\u0027;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_LOW \u003d \u0027ffcccc\u0027;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_MEDIUM \u003d \u0027ff9999\u0027;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"export const COLOR_SEVERITY_HIGH \u003d \u0027ff6666\u0027;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"export const COLOR_TYPE_DOCUMENTATION_BUG \u003d \u0027d966ff\u0027;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"export const COLOR_TYPE_FUNCTIONALITY_BUG \u003d \u00279900cc\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_ACCEPTED \u003d \u002700802b\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_REJECTED \u003d \u0027ff9900\u0027;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_ISSUE_UNCLEAR \u003d \u0027ffcc80\u0027;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"export const COLOR_RESPONSE_CANNOT_REPRODUCE \u003d \u0027ffebcc\u0027;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"export const COLOR_STATUS_DONE \u003d \u0027a6a6a6\u0027;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"export const COLOR_STATUS_INCOMPLETE \u003d \u0027000000\u0027;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"export const CSS_BORDER_RADIUS_3PX \u003d \u00273px\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"export const CSS_CURSOR_DEFAULT \u003d \u0027default\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"export const CSS_PADDING_3PX \u003d \u00273px\u0027;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"export const CSS_FONT_WEIGHT_410 \u003d \u0027410\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"export const CSS_DISPLAY_INLINE_FLEX \u003d \u0027inline-flex\u0027;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"export const CSS_DISPLAY_INLINE_BLOCK \u003d \u0027inline-block\u0027;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"// CSS style constants"},{"lineNumber":49,"author":{"gitId":"-"},"content":"export const DARK_BG_LIGHT_TEXT \u003d {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u0027background-color\u0027: `#${COLOR_BLACK}`,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  \u0027border-radius\u0027: CSS_BORDER_RADIUS_3PX,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  cursor: CSS_CURSOR_DEFAULT,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  padding: CSS_PADDING_3PX,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  color: `#${COLOR_WHITE}`,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  \u0027font-weight\u0027: CSS_FONT_WEIGHT_410,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  display: CSS_DISPLAY_INLINE_FLEX"},{"lineNumber":57,"author":{"gitId":"-"},"content":"};"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"export const LIGHT_BG_DARK_TEXT \u003d {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u0027background-color\u0027: `#${COLOR_WHITE}`,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \u0027border-radius\u0027: CSS_BORDER_RADIUS_3PX,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  cursor: CSS_CURSOR_DEFAULT,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  padding: CSS_PADDING_3PX,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  color: `#${COLOR_BLACK}`,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u0027font-weight\u0027: CSS_FONT_WEIGHT_410,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  display: CSS_DISPLAY_INLINE_FLEX"},{"lineNumber":67,"author":{"gitId":"-"},"content":"};"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"export const INLINE_BLOCK_TEXT \u003d {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  \u0027background-color\u0027: `#${COLOR_WHITE}`,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  \u0027border-radius\u0027: CSS_BORDER_RADIUS_3PX,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  cursor: CSS_CURSOR_DEFAULT,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  padding: CSS_PADDING_3PX,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  color: `#${COLOR_BLACK}`,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  \u0027font-weight\u0027: CSS_FONT_WEIGHT_410,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  display: CSS_DISPLAY_INLINE_BLOCK"},{"lineNumber":77,"author":{"gitId":"-"},"content":"};"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"export const RESPONSE_REJECTED_LABEL \u003d new Label(RESPONSE, RESPONSE_REJECTED, COLOR_RESPONSE_REJECTED, LABEL_DEFINITIONS.responseRejected);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"export const STATUS_DONE_LABEL \u003d new Label(STATUS, STATUS_DONE, COLOR_STATUS_DONE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"export const TYPE_DOCUMENTATION_BUG_LABEL \u003d new Label("},{"lineNumber":83,"author":{"gitId":"-"},"content":"  TYPE,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  TYPE_DOCUMENTATION_BUG,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  COLOR_TYPE_DOCUMENTATION_BUG,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  LABEL_DEFINITIONS.typeDocumentationBug"},{"lineNumber":87,"author":{"gitId":"-"},"content":");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"export const TYPE_FUNCTIONALITY_BUG_LABEL \u003d new Label("},{"lineNumber":89,"author":{"gitId":"-"},"content":"  TYPE,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  TYPE_FUNCTIONALITY_BUG,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  COLOR_TYPE_FUNCTIONALITY_BUG,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  LABEL_DEFINITIONS.typeFunctionalityBug"},{"lineNumber":93,"author":{"gitId":"-"},"content":");"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"export const SEVERITY_HIGH_LABEL \u003d new Label(SEVERITY, SEVERITY_HIGH, COLOR_SEVERITY_HIGH, LABEL_DEFINITIONS.severityHigh);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"export const SEVERITY_MEDIUM_LABEL \u003d new Label(SEVERITY, SEVERITY_MEDIUM, COLOR_SEVERITY_MEDIUM, LABEL_DEFINITIONS.severityMedium);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"export const SEVERITY_LOW_LABEL \u003d new Label(SEVERITY, SEVERITY_LOW, COLOR_SEVERITY_LOW, LABEL_DEFINITIONS.severityLow);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"// Constant array of labels for team response phase and moderation phase to simulate Github response"},{"lineNumber":100,"author":{"gitId":"-"},"content":"export const SOME_TEAM_RESPONSE_PHASE_LABELS \u003d ["},{"lineNumber":101,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    color: COLOR_RESPONSE_ACCEPTED,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    name: RESPONSE + \u0027.\u0027 + RESPONSE_ACCEPTED,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    definition: LABEL_DEFINITIONS.responseAccepted"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    color: COLOR_SEVERITY_LOW,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    name: SEVERITY + \u0027.\u0027 + SEVERITY_LOW,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    definition: LABEL_DEFINITIONS.severityLow"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    color: COLOR_TYPE_FUNCTIONALITY_BUG,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    name: TYPE + \u0027.\u0027 + TYPE_FUNCTIONALITY_BUG,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    definition: LABEL_DEFINITIONS.typeFunctionalityBug"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"];"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"// Constant array of labels for tester phase to simulate Github response"},{"lineNumber":119,"author":{"gitId":"-"},"content":"export const SOME_TESTER_PHASE_LABELS \u003d ["},{"lineNumber":120,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    color: COLOR_SEVERITY_HIGH,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    name: SEVERITY + \u0027.\u0027 + SEVERITY_HIGH"},{"lineNumber":123,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    color: COLOR_TYPE_DOCUMENTATION_BUG,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    name: TYPE + \u0027.\u0027 + TYPE_DOCUMENTATION_BUG"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"];"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"export const ALL_REQUIRED_LABELS_ARRAY: {}[] \u003d LabelService.getRequiredLabelsAsArray(true).map((label: Label) \u003d\u003e {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  return {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    color: label.labelColor,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    name: label.getFormattedName()"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":135,"author":{"gitId":"-"},"content":"});"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"// List of labels"},{"lineNumber":138,"author":{"gitId":"-"},"content":"export const SEVERITY_LABELS \u003d ["},{"lineNumber":139,"author":{"gitId":"-"},"content":"  new Label(SEVERITY, SEVERITY_LOW, COLOR_SEVERITY_LOW, LABEL_DEFINITIONS.severityLow),"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  new Label(SEVERITY, SEVERITY_MEDIUM, COLOR_SEVERITY_MEDIUM, LABEL_DEFINITIONS.severityMedium),"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  new Label(SEVERITY, SEVERITY_HIGH, COLOR_SEVERITY_HIGH, LABEL_DEFINITIONS.undefined)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"];"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":141}},{"path":"tests/model/templates/sections/issue-dispute-section-parser.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { IssueDisputeSectionParser } from \u0027../../../../src/app/core/models/templates/section-parsers/issue-dispute-section-parser.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"const TYPE_DISPUTE \u003d"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \u0027## :question: Issue Type\\n\\n\u0027 +"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \u0027### Team says:\\n\\n\u0027 +"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \"{the team\u0027s action that is being disputed}\\n\\n\" +"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u0027### Tester says:\\n\\n\u0027 +"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \"{tester\u0027s objection}\\n\\n\" +"},{"lineNumber":9,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"const EXPECTED_TITLE \u003d \u0027Issue Type\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"const EXPECTED_DESCRIPTION \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u0027### Team says:\\n\\n\u0027 + \"{the team\u0027s action that is being disputed}\\n\\n\" + \u0027### Tester says:\\n\\n\u0027 + \"{tester\u0027s objection}\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"describe(\u0027IssueDisputeSectionParser\u0027, () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  it(\u0027parses type dispute correctly\u0027, () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    const result \u003d IssueDisputeSectionParser.run(TYPE_DISPUTE).result;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    expect(result.title).toBe(EXPECTED_TITLE);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    expect(result.description).toBe(EXPECTED_DESCRIPTION);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":22,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":21}},{"path":"tests/model/templates/sections/moderation-section-parser.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  DoneCheckboxParser,"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  ModerationSectionParser"},{"lineNumber":4,"author":{"gitId":"-"},"content":"} from \u0027../../../../src/app/core/models/templates/section-parsers/moderation-section-parser.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"const TYPE_DISPUTE \u003d"},{"lineNumber":7,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u0027## :question: Issue Type\\n\\n\u0027 + \u0027- [ ] Done\\n\\n\u0027 + \u0027[replace this with your explanation]\\n\\n\u0027 + \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"const EMPTY_DONE_CHECKBOX \u003d \u0027- [ ] Done\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"const FILLED_DONE_CHECKBOX \u003d \u0027- [x] Done\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"const EXPECTED_TITLE \u003d \u0027Issue Type\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"const EXPECTED_DESCRIPTION \u003d \u0027- [ ] Done\\n\\n[replace this with your explanation]\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"const EXPECTED_TUTOR_RESPONSE \u003d \u0027[replace this with your explanation]\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"describe(\u0027DoneCheckboxParser\u0027, () \u003d\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  it(\u0027parses empty checkbox correctly\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    const result \u003d DoneCheckboxParser.run(EMPTY_DONE_CHECKBOX).result;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    expect(result).toBe(false);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  it(\u0027parses filled checkbox correctly\u0027, () \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    const result \u003d DoneCheckboxParser.run(FILLED_DONE_CHECKBOX).result;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    expect(result).toBe(true);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":27,"author":{"gitId":"-"},"content":"});"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"describe(\u0027ModerationSectionParser\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  it(\u0027parses type dispute correctly\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    const result \u003d ModerationSectionParser.run(TYPE_DISPUTE).result;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    expect(result.title).toBe(EXPECTED_TITLE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    expect(result.description).toBe(EXPECTED_DESCRIPTION);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    expect(result.todo.isChecked).toBe(false);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    expect(result.tutorResponse).toBe(EXPECTED_TUTOR_RESPONSE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":38,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":2,"-":36}},{"path":"tests/model/templates/sections/tester-response-section-parser.model.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  DisagreeCheckboxParser,"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  TesterResponseSectionParser"},{"lineNumber":4,"author":{"gitId":"-"},"content":"} from \u0027../../../../src/app/core/models/templates/section-parsers/tester-response-section-parser.model\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"const EMPTY_DISAGREE_CHECKBOX \u003d \u0027- [ ] I disagree\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"const FILLED_DISAGREE_CHECKBOX \u003d \u0027- [x] I disagree\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"const DEFAULT_DISAGREEMENT_REASON \u003d \u0027[replace this with your reason]\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"const USER_DISAGREEMENT_REASON \u003d \u0027I disagree!\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"const RESPONSE_TITLE \u003d \u0027response\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"const RESPONSE_DESCRIPTION \u003d \u0027Team chose [`response.Rejected`]\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"const RESPONSE_TEAM_CHOSE \u003d \u0027Rejected\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"const SEVERITY_TITLE \u003d \u0027severity\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"const SEVERITY_DESCRIPTION \u003d \u0027Team chose [`severity.Low`]\\nOriginally [`severity.High`]\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"const SEVERITY_TEAM_CHOSE \u003d \u0027Low\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"const SEVERITY_TESTER_CHOSE \u003d \u0027High\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"const TYPE_TITLE \u003d \u0027type\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"const TYPE_DESCRIPTION \u003d \u0027Team chose [`type.DocumentationBug`]\\nOriginally [`type.FunctionalityBug`]\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"const TYPE_TEAM_CHOSE \u003d \u0027DocumentationBug\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"const TYPE_TESTER_CHOSE \u003d \u0027FunctionalityBug\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"const DUPLICATE_TITLE \u003d \u0027duplicate status\u0027;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"const DUPLICATE_DESCRIPTION \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  \"Team chose to mark this issue as a duplicate of another issue (as explained in the _**Team\u0027s response**_ above)\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"export const RESPONSE_DISAGREEMENT \u003d"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u0027## :question: Issue response\\n\\n\u0027 +"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  \u0027Team chose [`response.Rejected`]\\n\\n\u0027 +"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  \u0027- [ ] I disagree\\n\\n\u0027 +"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u0027**Reason for disagreement:** [replace this with your reason]\\n\\n\u0027 +"},{"lineNumber":34,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"export const SEVERITY_DISAGREEMENT \u003d"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u0027## :question: Issue severity\\n\\n\u0027 +"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u0027Team chose [`severity.Low`]\\n\u0027 +"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  \u0027Originally [`severity.High`]\\n\\n\u0027 +"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  \u0027- [x] I disagree\\n\\n\u0027 +"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  \u0027**Reason for disagreement:** I disagree!\\n\\n\u0027 +"},{"lineNumber":42,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"export const TYPE_DISAGREEMENT \u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u0027## :question: Issue type\\n\\n\u0027 +"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  \u0027Team chose [`type.DocumentationBug`]\\n\u0027 +"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  \u0027Originally [`type.FunctionalityBug`]\\n\\n\u0027 +"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  \u0027- [ ] I disagree\\n\\n\u0027 +"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u0027**Reason for disagreement:** [replace this with your reason]\\n\\n\u0027 +"},{"lineNumber":50,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"export const DUPLICATE_DISAGREEMENT \u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u0027## :question: Issue duplicate status\\n\\n\u0027 +"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  \"Team chose to mark this issue as a duplicate of another issue (as explained in the _**Team\u0027s response**_ above)\\n\\n\" +"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  \u0027- [ ] I disagree\\n\\n\u0027 +"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  \u0027**Reason for disagreement:** [replace this with your reason]\\n\\n\u0027 +"},{"lineNumber":57,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  \u0027\u003ccatcher-end-of-segment\u003e\u003chr\u003e\u0027;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"describe(\u0027DisagreeCheckboxParser\u0027, () \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  it(\u0027parses empty checkbox correctly\u0027, () \u003d\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    const result \u003d DisagreeCheckboxParser.run(EMPTY_DISAGREE_CHECKBOX).result;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    expect(result).toBe(false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  it(\u0027parses filled checkbox correctly\u0027, () \u003d\u003e {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    const result \u003d DisagreeCheckboxParser.run(FILLED_DISAGREE_CHECKBOX).result;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    expect(result).toBe(true);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":70,"author":{"gitId":"-"},"content":"});"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"describe(\u0027TesterResponseSectionParser\u0027, () \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  it(\u0027parses response disagreement correctly\u0027, () \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    const result \u003d TesterResponseSectionParser.run(RESPONSE_DISAGREEMENT).result;"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    expect(result.title).toBe(RESPONSE_TITLE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    expect(result.description).toBe(RESPONSE_DESCRIPTION);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    expect(result.teamChose).toBe(RESPONSE_TEAM_CHOSE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    expect(result.testerChose).toBe(null);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    expect(result.disagreeCheckboxValue).toBe(false);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    expect(result.reasonForDisagreement).toBe(DEFAULT_DISAGREEMENT_REASON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  it(\u0027parses severity disagreement correctly\u0027, () \u003d\u003e {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    const result \u003d TesterResponseSectionParser.run(SEVERITY_DISAGREEMENT).result;"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    expect(result.title).toBe(SEVERITY_TITLE);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    expect(result.description).toBe(SEVERITY_DESCRIPTION);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    expect(result.teamChose).toBe(SEVERITY_TEAM_CHOSE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    expect(result.testerChose).toBe(SEVERITY_TESTER_CHOSE);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    expect(result.disagreeCheckboxValue).toBe(true);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    expect(result.reasonForDisagreement).toBe(USER_DISAGREEMENT_REASON);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  it(\u0027parses type disagreement correctly\u0027, () \u003d\u003e {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    const result \u003d TesterResponseSectionParser.run(TYPE_DISAGREEMENT).result;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    expect(result.title).toBe(TYPE_TITLE);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    expect(result.description).toBe(TYPE_DESCRIPTION);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    expect(result.teamChose).toBe(TYPE_TEAM_CHOSE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    expect(result.testerChose).toBe(TYPE_TESTER_CHOSE);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    expect(result.disagreeCheckboxValue).toBe(false);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    expect(result.reasonForDisagreement).toBe(DEFAULT_DISAGREEMENT_REASON);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  it(\u0027parses duplicate status disagreement correctly\u0027, () \u003d\u003e {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    const result \u003d TesterResponseSectionParser.run(DUPLICATE_DISAGREEMENT).result;"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    expect(result.title).toBe(DUPLICATE_TITLE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    expect(result.description).toBe(DUPLICATE_DESCRIPTION);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    expect(result.teamChose).toBe(null);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    expect(result.testerChose).toBe(null);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    expect(result.disagreeCheckboxValue).toBe(false);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    expect(result.reasonForDisagreement).toBe(DEFAULT_DISAGREEMENT_REASON);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":113,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":4,"-":109}},{"path":"tests/services/error-handling.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ErrorHandlingService } from \u0027../../src/app/core/services/error-handling.service\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FormErrorComponent } from \u0027../../src/app/shared/error-toasters/form-error/form-error.component\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { GeneralMessageErrorComponent } from \u0027../../src/app/shared/error-toasters/general-message-error/general-message-error.component\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  ERROR_WITH_NO_MESSAGE,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  HTTP_304_ERROR,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  HTTP_400_ERROR,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  HTTP_401_ERROR,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  HTTP_404_ERROR,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  HTTP_422_ERROR,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  HTTP_500_ERROR,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  OCTOKIT_REQUEST_ERROR,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  STANDARD_ERROR"},{"lineNumber":14,"author":{"gitId":"-"},"content":"} from \u0027../constants/error.constants\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"let errorHandlingService: ErrorHandlingService;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"let mockLoggingService;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"let mockSnackBar;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"describe(\u0027ErrorHandlingService\u0027, () \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    mockLoggingService \u003d jasmine.createSpyObj(\u0027LoggingService\u0027, [\u0027error\u0027, \u0027debug\u0027]);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    mockSnackBar \u003d jasmine.createSpyObj(\u0027MatSnackBar\u0027, [\u0027openFromComponent\u0027]);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    errorHandlingService \u003d new ErrorHandlingService(mockSnackBar, mockLoggingService);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  describe(\u0027ErrorHandlingService: handleError()\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    it(\u0027should log errors when handling errors\u0027, () \u003d\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(STANDARD_ERROR);"},{"lineNumber":30,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      expect(mockLoggingService.error).toHaveBeenCalledWith(\u0027ErrorHandlingService: \u0027 + STANDARD_ERROR);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    it(\u0027should use the GeneralMessageErrorComponent when handling Errors\u0027, () \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(STANDARD_ERROR);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        data: { message: STANDARD_ERROR.message }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    it(\u0027should stringify Errors if there is no message before displaying\u0027, () \u003d\u003e {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(ERROR_WITH_NO_MESSAGE);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        data: { message: JSON.stringify(ERROR_WITH_NO_MESSAGE) }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    it(\u0027should not open the snackbar when handling http status 304 errors\u0027, () \u003d\u003e {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(HTTP_304_ERROR);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).not.toHaveBeenCalled();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    it(\u0027should use the FormErrorComponent when handling http status 422 errors\u0027, () \u003d\u003e {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(HTTP_422_ERROR);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(FormErrorComponent, { data: HTTP_422_ERROR });"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    it(\u0027should use the GeneralMessageErrorComponent when handling other http errors\u0027, () \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(HTTP_500_ERROR);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, { data: HTTP_500_ERROR });"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(HTTP_400_ERROR);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, { data: HTTP_400_ERROR });"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(HTTP_401_ERROR);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, { data: HTTP_401_ERROR });"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(HTTP_404_ERROR);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, { data: HTTP_404_ERROR });"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledTimes(4);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    it(\u0027should treat octokit request errors as http errors\u0027, () \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      errorHandlingService.handleError(OCTOKIT_REQUEST_ERROR);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      expect(mockSnackBar.openFromComponent).toHaveBeenCalledWith(GeneralMessageErrorComponent, { data: OCTOKIT_REQUEST_ERROR });"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":74,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":73}},{"path":"tests/services/label.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { GithubLabel } from \u0027../../src/app/core/models/github/github-label.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { Label } from \u0027../../src/app/core/models/label.model\u0027;"},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"import { LabelService, LABEL_DEFINITIONS } from \u0027../../src/app/core/services/label.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import * as GithubLabelConstant from \u0027../constants/githublabel.constants\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import * as LabelConstant from \u0027../constants/label.constants\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"let labelService: LabelService;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"let githubService: any;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"describe(\u0027LabelService\u0027, () \u003d\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027fetchAllLabels\u0027, \u0027createLabel\u0027]);"},{"lineNumber":14,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    labelService \u003d new LabelService(githubService, null);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  describe(\u0027.syncLabels()\u0027, () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    it(\u0027should create all required labels for team response phase if no required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of([]));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      of(true).pipe(labelService.syncLabels(true)).subscribe();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.SEVERITY_LOW_LABEL);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.RESPONSE_REJECTED_LABEL);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.STATUS_DONE_LABEL);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.TYPE_DOCUMENTATION_BUG_LABEL);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes(LabelService.getRequiredLabelsAsArray(true).length);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    it(\u0027should create all required labels for tester phase if no required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of([]));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      of(true).pipe(labelService.syncLabels(false)).subscribe();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.SEVERITY_LOW_LABEL);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.TYPE_DOCUMENTATION_BUG_LABEL);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes(LabelService.getRequiredLabelsAsArray(false).length);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    it(\u0027should create missing required labels for team response phase if some required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of(LabelConstant.SOME_TEAM_RESPONSE_PHASE_LABELS));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      of(true).pipe(labelService.syncLabels(true)).subscribe();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"      assertLabelNotCreated(githubService, LabelConstant.SEVERITY_LOW_LABEL);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.RESPONSE_REJECTED_LABEL);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.STATUS_DONE_LABEL);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.TYPE_DOCUMENTATION_BUG_LABEL);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes("},{"lineNumber":47,"author":{"gitId":"-"},"content":"        LabelService.getRequiredLabelsAsArray(true).length - LabelConstant.SOME_TEAM_RESPONSE_PHASE_LABELS.length"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    it(\u0027should create missing required labels for tester phase if some required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of(LabelConstant.SOME_TESTER_PHASE_LABELS));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      of(true).pipe(labelService.syncLabels(false)).subscribe();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"      assertLabelNotCreated(githubService, LabelConstant.SEVERITY_HIGH_LABEL);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      assertLabelCreated(githubService, LabelConstant.TYPE_FUNCTIONALITY_BUG_LABEL);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes("},{"lineNumber":58,"author":{"gitId":"-"},"content":"        LabelService.getRequiredLabelsAsArray(false).length - LabelConstant.SOME_TESTER_PHASE_LABELS.length"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    it(\u0027should not need to create any required labels if all required labels are fetched\u0027, () \u003d\u003e {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      githubService.fetchAllLabels.and.callFake(() \u003d\u003e of(LabelConstant.ALL_REQUIRED_LABELS_ARRAY));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      of(true).pipe(labelService.syncLabels(true)).subscribe();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"      expect(githubService.createLabel).toHaveBeenCalledTimes(0);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":69,"author":{"gitId":"-"},"content":"});"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: toLabel()\u0027, () \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    labelService \u003d new LabelService(null, null);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  afterAll(() \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  it(\u0027should convert a GithubLabel object to a corresponding Label object\u0027, () \u003d\u003e {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    const lowSeverityLabel \u003d labelService.toLabel(GithubLabelConstant.GITHUB_LABEL_LOW_SEVERITY);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    expect(lowSeverityLabel.labelCategory).toBe(LabelConstant.SEVERITY);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    expect(lowSeverityLabel.labelValue).toBe(LabelConstant.SEVERITY_LOW);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    expect(lowSeverityLabel.labelColor).toBe(LabelConstant.COLOR_SEVERITY_LOW);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    const functionalityBugLabel \u003d labelService.toLabel(GithubLabelConstant.GITHUB_LABEL_FUNCTIONALITY_BUG);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    expect(functionalityBugLabel.labelCategory).toBe(LabelConstant.TYPE);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    expect(functionalityBugLabel.labelValue).toBe(LabelConstant.TYPE_FUNCTIONALITY_BUG);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    expect(functionalityBugLabel.labelColor).toBe(LabelConstant.COLOR_TYPE_FUNCTIONALITY_BUG);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    const tutoriallabel \u003d labelService.toLabel(GithubLabelConstant.GITHUB_LABEL_TUTORIAL_LABEL);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    expect(tutoriallabel.labelCategory).toBe(\u0027tutorial\u0027);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    expect(tutoriallabel.labelValue).toBe(\u0027CS2103T-W12\u0027);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    expect(tutoriallabel.labelColor).toBe(\u0027c2e0c6\u0027);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":99,"author":{"gitId":"-"},"content":"});"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: isDarkColor()\u0027, () \u003d\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":103,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    labelService \u003d new LabelService(null, null);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  it(\u0027should be true for dark color\u0027, () \u003d\u003e {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    expect(labelService.isDarkColor(LabelConstant.COLOR_BLACK)).toBeTruthy();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  it(\u0027should be false for light color\u0027, () \u003d\u003e {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    expect(labelService.isDarkColor(LabelConstant.COLOR_WHITE)).toBeFalsy();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":117,"author":{"gitId":"-"},"content":"});"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: setLabelStyle()\u0027, () \u003d\u003e {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":121,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    labelService \u003d new LabelService(null, null);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"  it(\u0027should be dark color background with light color text\u0027, () \u003d\u003e {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    expect(labelService.setLabelStyle(LabelConstant.COLOR_BLACK)).toEqual(LabelConstant.DARK_BG_LIGHT_TEXT);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"  it(\u0027should be light color background with dark color text\u0027, () \u003d\u003e {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    expect(labelService.setLabelStyle(LabelConstant.COLOR_WHITE)).toEqual(LabelConstant.LIGHT_BG_DARK_TEXT);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  it(\u0027should be light color background with dark color text\u0027, () \u003d\u003e {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    expect(labelService.setLabelStyle(LabelConstant.COLOR_WHITE, \u0027inline-block\u0027)).toEqual(LabelConstant.INLINE_BLOCK_TEXT);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":139,"author":{"gitId":"-"},"content":"});"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: getColorOfLabel()\u0027, () \u003d\u003e {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":143,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    labelService \u003d new LabelService(null, null);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"  it(\u0027should be correct label color for Severity.Low\u0027, () \u003d\u003e {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    expect(labelService.getColorOfLabel(\u0027severity\u0027, LabelConstant.SEVERITY_LOW)).toEqual(LabelConstant.COLOR_SEVERITY_LOW);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"  it(\u0027should be white color for invalid inputs\u0027, () \u003d\u003e {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    expect(labelService.getColorOfLabel(\u0027others\u0027, null)).toEqual(LabelConstant.COLOR_WHITE.toLowerCase());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":157,"author":{"gitId":"-"},"content":"});"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"describe(\u0027LabelService: getLabelDefinition()\u0027, () \u003d\u003e {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":161,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    labelService \u003d new LabelService(null, null);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  afterEach(() \u003d\u003e {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    labelService \u003d null;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"  it(\u0027should return the correct label definition for type.FunctionalityBug\u0027, () \u003d\u003e {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(LabelConstant.TYPE_FUNCTIONALITY_BUG, LabelConstant.TYPE)).toEqual("},{"lineNumber":170,"author":{"gitId":"-"},"content":"      LABEL_DEFINITIONS.typeFunctionalityBug"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"  it(\u0027should return the correct label definition for severity.Medium\u0027, () \u003d\u003e {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(LabelConstant.SEVERITY_MEDIUM, LabelConstant.SEVERITY)).toEqual("},{"lineNumber":176,"author":{"gitId":"-"},"content":"      LABEL_DEFINITIONS.severityMedium"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"  it(\u0027should return the correct label definition for response.Rejected\u0027, () \u003d\u003e {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(LabelConstant.RESPONSE_REJECTED, LabelConstant.RESPONSE)).toEqual("},{"lineNumber":182,"author":{"gitId":"-"},"content":"      LABEL_DEFINITIONS.responseRejected"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":184,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"  it(\u0027should return null for label with no definition\u0027, () \u003d\u003e {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(LabelConstant.STATUS_DONE, LabelConstant.STATUS)).toEqual(LABEL_DEFINITIONS.undefined);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  it(\u0027should return null for invalid inputs\u0027, () \u003d\u003e {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(null, null)).toEqual(LABEL_DEFINITIONS.undefined);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(null, LabelConstant.SEVERITY)).toEqual(LABEL_DEFINITIONS.undefined);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    expect(labelService.getLabelDefinition(LabelConstant.SEVERITY_MEDIUM, null)).toEqual(LABEL_DEFINITIONS.undefined);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":195,"author":{"gitId":"-"},"content":"});"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"function assertLabelCreated(githubService: any, label: Label) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  expect(githubService.createLabel).toHaveBeenCalledWith(label.getFormattedName(), label.labelColor);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"function assertLabelNotCreated(githubService: any, label: Label) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  expect(githubService.createLabel).not.toHaveBeenCalledWith(label.getFormattedName(), label.labelColor);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":7,"-":196}},{"path":"tests/services/logging.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { LoggingService } from \u0027../../src/app/core/services/logging.service\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { MockLocalStorage } from \u0027../helper/mock.local.storage\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"let logger: LoggingService;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"let headerLog: string;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"let sessionSeparator: string;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"const mockDate \u003d new Date(2021, 6, 27);"},{"lineNumber":8,"author":{"gitId":"-"},"content":"const infoLogMessage \u003d \u0027Info log message\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"const mockLocalStorageFunctionCalls \u003d (mockLocalStorage: MockLocalStorage) \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  spyOn(localStorage, \u0027getItem\u0027).and.callFake(mockLocalStorage.getItem.bind(mockLocalStorage));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  spyOn(localStorage, \u0027setItem\u0027).and.callFake(mockLocalStorage.setItem.bind(mockLocalStorage));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  spyOn(localStorage, \u0027removeItem\u0027).and.callFake(mockLocalStorage.removeItem.bind(mockLocalStorage));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  spyOn(localStorage, \u0027clear\u0027).and.callFake(mockLocalStorage.clear.bind(mockLocalStorage));"},{"lineNumber":15,"author":{"gitId":"-"},"content":"};"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"const mockDates \u003d () \u003d\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  jasmine.clock().install();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  jasmine.clock().mockDate(mockDate);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"};"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"const initializeLoggingService \u003d () \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  const electronService \u003d jasmine.createSpyObj(\u0027ElectronService\u0027, [\u0027isElectron\u0027]);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  electronService.isElectron \u003d jasmine.createSpy(\u0027isElectron\u0027, () \u003d\u003e false);"},{"lineNumber":25,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  logger \u003d new LoggingService(electronService);"},{"lineNumber":26,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  headerLog \u003d `${logger.LOG_START_HEADER}\\n${mockDate.toLocaleString()}`;"},{"lineNumber":27,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  sessionSeparator \u003d logger.SESSION_LOG_SEPARATOR;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"};"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"describe(\u0027LoggingService\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  beforeAll(() \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    const mockLocalStorage \u003d new MockLocalStorage();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    mockLocalStorageFunctionCalls(mockLocalStorage);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    mockDates();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    initializeLoggingService();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":39,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    logger.reset();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    localStorage.clear();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  afterAll(() \u003d\u003e {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    jasmine.clock().uninstall();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"  describe(\u0027.startSession()\u0027, () \u003d\u003e {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    it(\u0027should successfully initialize logging session\u0027, () \u003d\u003e {"},{"lineNumber":49,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.startSession();"},{"lineNumber":50,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const actualLog \u003d logger.getCachedLog();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      const expectedLog \u003d headerLog;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      expect(actualLog).toEqual(expectedLog);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    it(\u0027should successfully reinitialize logging session\u0027, () \u003d\u003e {"},{"lineNumber":56,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.startSession();"},{"lineNumber":57,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.reset();"},{"lineNumber":58,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.startSession();"},{"lineNumber":59,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const actualLog \u003d logger.getCachedLog();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      const expectedLog \u003d `${headerLog}${sessionSeparator}${headerLog}`;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      expect(actualLog).toEqual(expectedLog);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    it(\u0027should successfully reinitialize logging session when limit reached\u0027, () \u003d\u003e {"},{"lineNumber":65,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      Array(logger.LOG_COUNT_LIMIT)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        .fill(0)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        .forEach(() \u003d\u003e {"},{"lineNumber":68,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          logger.startSession();"},{"lineNumber":69,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          logger.reset();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":71,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.startSession();"},{"lineNumber":72,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const actualLog \u003d logger.getCachedLog();"},{"lineNumber":73,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const expectedLog \u003d Array(logger.LOG_COUNT_LIMIT)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        .fill(\u0027\u0027)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        .map((_) \u003d\u003e headerLog)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        .join(sessionSeparator);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"      expect(actualLog).toEqual(expectedLog);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"  describe(\u0027.reset()\u0027, () \u003d\u003e {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    it(\u0027should do nothing if no session is ongoing\u0027, () \u003d\u003e {"},{"lineNumber":83,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.reset();"},{"lineNumber":84,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const actualLog \u003d logger.getCachedLog();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      expect(actualLog).toBeNull();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    it(\u0027should not tamper with existing log histories\u0027, () \u003d\u003e {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      let expectedLog \u003d headerLog;"},{"lineNumber":90,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      for (let i \u003d 0; i \u003c logger.LOG_COUNT_LIMIT + 1; i +\u003d 1) {"},{"lineNumber":91,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        logger.startSession();"},{"lineNumber":92,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        logger.reset();"},{"lineNumber":93,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        const actualLog \u003d logger.getCachedLog();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        expect(actualLog).toEqual(expectedLog);"},{"lineNumber":95,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"        if (i \u003c logger.LOG_COUNT_LIMIT - 1) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"          expectedLog +\u003d `${sessionSeparator}${headerLog}`;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  describe(\u0027adding logs\u0027, () \u003d\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    it(\u0027should successfully add info logs\u0027, () \u003d\u003e {"},{"lineNumber":104,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.startSession();"},{"lineNumber":105,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const initialLog \u003d logger.getCachedLog();"},{"lineNumber":106,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.info(infoLogMessage);"},{"lineNumber":107,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const actualLog \u003d logger.getCachedLog();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      const expectedLog \u003d `${initialLog}\\n${infoLogMessage}`;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"      expect(actualLog).toEqual(expectedLog);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"  describe(\u0027updating and trimming logs from sessions\u0027, () \u003d\u003e {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    it(\u0027should trim oldest log if number of sessions exceed session limit\u0027, () \u003d\u003e {"},{"lineNumber":115,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      Array(logger.LOG_COUNT_LIMIT + 1)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        .fill(0)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        .forEach(() \u003d\u003e {"},{"lineNumber":118,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          logger.startSession();"},{"lineNumber":119,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          logger.info(infoLogMessage);"},{"lineNumber":120,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"          logger.reset();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":122,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      logger.startSession();"},{"lineNumber":123,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const actualLog \u003d logger.getCachedLog();"},{"lineNumber":124,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const expectedLog \u003d Array(logger.LOG_COUNT_LIMIT)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        .fill(\u0027\u0027)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        .map((_) \u003d\u003e headerLog)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        .join(`\\n${infoLogMessage}${sessionSeparator}`);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"      expect(actualLog).toEqual(expectedLog);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":131,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":35,"-":96}},{"path":"tests/services/permissions.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { UserRole } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { PermissionService } from \u0027../../src/app/core/services/permission.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { PhaseService } from \u0027../../src/app/core/services/phase.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"const testStudent \u003d {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  loginId: \u0027testStudent\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  role: UserRole.Student"},{"lineNumber":10,"author":{"gitId":"-"},"content":"};"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"const testTutor \u003d {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  loginId: \u0027testTutor\u0027,"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  role: UserRole.Tutor"},{"lineNumber":15,"author":{"gitId":"-"},"content":"};"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"const testAdmin \u003d {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  loginId: \u0027testAdmin\u0027,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  role: UserRole.Admin"},{"lineNumber":20,"author":{"gitId":"-"},"content":"};"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"const mockUserService \u003d new UserService(null, null, null);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"const mockPhaseService \u003d new PhaseService(null, null, null);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"const permissionService \u003d new PermissionService(mockUserService, mockPhaseService);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"describe(\u0027Test a few permissions for each role in each phase\u0027, () \u003d\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  it(\u0027Test a few permissions for UserRole.Student\u0027, () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    mockUserService.currentUser \u003d testStudent;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueCreatable()).toBe(true);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    expect(permissionService.isTutorResponseEditable()).toBe(false);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueLabelsEditable()).toBe(true);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    expect(permissionService.isTeamResponseEditable()).toBe(true);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueEditable()).toBe(true);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDescriptionEditable()).toBe(false);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  it(\u0027Test a few permissions for UserRole.Tutor\u0027, () \u003d\u003e {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    mockUserService.currentUser \u003d testTutor;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueCreatable()).toBe(false);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueLabelsEditable()).toBe(false);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    expect(permissionService.isTeamResponseEditable()).toBe(false);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueEditable()).toBe(false);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDescriptionEditable()).toBe(false);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    expect(permissionService.isTutorResponseEditable()).toBe(true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  it(\u0027Test a few permissions for UserRole.Admin\u0027, () \u003d\u003e {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseBugReporting;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    mockUserService.currentUser \u003d testAdmin;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueCreatable()).toBe(true);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    expect(permissionService.isTutorResponseEditable()).toBe(false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTeamResponse;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueLabelsEditable()).toBe(true);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    expect(permissionService.isTeamResponseEditable()).toBe(true);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseTesterResponse;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueEditable()).toBe(true);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDescriptionEditable()).toBe(true);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    mockPhaseService.currentPhase \u003d Phase.phaseModeration;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueDeletable()).toBe(false);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    expect(permissionService.isIssueTitleEditable()).toBe(false);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":74,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":73}},{"path":"tests/services/repo-creator.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { Phase } from \u0027../../src/app/core/models/phase.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  BUG_REPORTING_INVALID_ROLE,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  CURRENT_PHASE_REPO_CLOSED,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  MISSING_REQUIRED_REPO,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  RepoCreatorService"},{"lineNumber":8,"author":{"gitId":"-"},"content":"} from \u0027../../src/app/core/services/repo-creator.service\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { USER_JUNWEI, USER_Q } from \u0027../constants/data.constants\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"const PHASE_OWNER \u003d \u0027CATcher-org\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"const PHASE_REPO \u003d \u0027bugreporting\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"let repoCreatorService: RepoCreatorService;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"let matDialogRef: any;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"let matDialog: any;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"let githubService: any;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"let userService: UserService;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"describe(\u0027RepoCreatorService\u0027, () \u003d\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  beforeEach(() \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"    userService \u003d new UserService(null, null, null);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    githubService \u003d jasmine.createSpyObj(\u0027GithubService\u0027, [\u0027isRepositoryPresent\u0027, \u0027createRepository\u0027]);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    matDialog \u003d jasmine.createSpyObj(\u0027MatDialog\u0027, [\u0027open\u0027]);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    matDialogRef \u003d jasmine.createSpyObj(\u0027MatDialogRef\u003cSessionFixConfirmationComponent\u003e\u0027, [\u0027afterClosed\u0027]);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    repoCreatorService \u003d new RepoCreatorService(githubService, userService, matDialog);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  describe(\u0027.verifyRepoCreation()\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    it(\u0027should not need to check the presence of the repository if no fix was done\u0027, () \u003d\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      of(null).pipe(repoCreatorService.verifyRepoCreation(PHASE_OWNER, PHASE_REPO)).subscribe();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"      expect(githubService.isRepositoryPresent).not.toHaveBeenCalled();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    it(\u0027should check the presence of the repository if a fix was done\u0027, () \u003d\u003e {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      githubService.isRepositoryPresent.and.callFake(() \u003d\u003e of(true));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      of(true).pipe(repoCreatorService.verifyRepoCreation(PHASE_OWNER, PHASE_REPO)).subscribe();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"      expect(githubService.isRepositoryPresent).toHaveBeenCalledWith(PHASE_OWNER, PHASE_REPO);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  describe(\u0027.requestRepoCreationPermissions()\u0027, () \u003d\u003e {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    it(\u0027should not return any permissions if the repo was already created\u0027, () \u003d\u003e {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"      of(true)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.requestRepoCreationPermissions(Phase.phaseBugReporting, PHASE_REPO))"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(null));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    it(\u0027should not return any permissions if the repo was not created and the current phase is not bugReporting\u0027, () \u003d\u003e {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      of(false)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.requestRepoCreationPermissions(Phase.phaseModeration, PHASE_REPO))"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    it(\u0027should return permissions from matDialog if the repo was not created and current phase is bugReporting\u0027, () \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      matDialog.open.and.callFake(() \u003d\u003e matDialogRef);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      const permissionFromDialog \u003d false;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      matDialogRef.afterClosed.and.callFake(() \u003d\u003e of(permissionFromDialog));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      of(false)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.requestRepoCreationPermissions(Phase.phaseBugReporting, PHASE_REPO))"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(permissionFromDialog));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"      expect(matDialog.open).toHaveBeenCalledTimes(1);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      expect(matDialogRef.afterClosed).toHaveBeenCalledTimes(1);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  describe(\u0027verifyRepoCreationPermissions()\u0027, () \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    it(\u0027should return the original permissions if repo creation was not needed\u0027, () \u003d\u003e {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      of(null)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(null));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    it(\u0027should return the original permissions if permissions were given\u0027, () \u003d\u003e {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      of(true)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        .subscribe((repoCreationPermission: boolean | null) \u003d\u003e expect(repoCreationPermission).toBe(true));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    it(\u0027should throw an error if no permissions were given\u0027, () \u003d\u003e {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      of(false)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":90,"author":{"gitId":"-"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":91,"author":{"gitId":"-"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(MISSING_REQUIRED_REPO))"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    it(\u0027should throw an error if the wrong phase were given\u0027, () \u003d\u003e {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      of(true)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseModeration))"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":99,"author":{"gitId":"-"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":100,"author":{"gitId":"-"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(CURRENT_PHASE_REPO_CLOSED))"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    it(\u0027should throw an error if permissions, correct phase, but wrong user role were given\u0027, () \u003d\u003e {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"      userService.currentUser \u003d USER_Q;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      of(true)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        .pipe(repoCreatorService.verifyRepoCreationPermissions(Phase.phaseBugReporting))"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":109,"author":{"gitId":"-"},"content":"          next: () \u003d\u003e fail(),"},{"lineNumber":110,"author":{"gitId":"-"},"content":"          error: (err) \u003d\u003e expect(err).toEqual(new Error(BUG_REPORTING_INVALID_ROLE))"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  describe(\u0027.attemptRepoCreation()\u0027, () \u003d\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    it(\u0027should not create the repository if repo creation is not needed\u0027, () \u003d\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      of(null).pipe(repoCreatorService.attemptRepoCreation(PHASE_REPO)).subscribe();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"      expect(githubService.createRepository).not.toHaveBeenCalled();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    it(\u0027should create the repository if permissions, correct phase and correct user role were given\u0027, () \u003d\u003e {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      userService.currentUser \u003d USER_JUNWEI;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      githubService.createRepository.and.callFake(() \u003d\u003e of(true));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"      of(true).pipe(repoCreatorService.attemptRepoCreation(PHASE_REPO)).subscribe();"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"      expect(githubService.createRepository).toHaveBeenCalledWith(PHASE_REPO);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":130,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vigneshsankariyer1234567890":1,"-":129}},{"path":"tests/services/user.service.spec.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { of } from \u0027rxjs\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { User } from \u0027../../src/app/core/models/user.model\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { UserService } from \u0027../../src/app/core/services/user.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { jsonData, USER_JUNWEI, USER_Q, USER_SHUMING, USER_WITH_TWO_ROLES } from \u0027../constants/data.constants\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"let dataService: any;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"describe(\u0027UserService\u0027, () \u003d\u003e {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  describe(\u0027.createUserModel(loginId)\u0027, () \u003d\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    beforeAll(() \u003d\u003e {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      dataService \u003d jasmine.createSpyObj(\u0027DataService\u0027, [\u0027getDataFile\u0027]);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      dataService.getDataFile.and.returnValue(of(jsonData));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    it(\u0027creates a Student user correctly\u0027, async () \u003d\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_JUNWEI.loginId, USER_JUNWEI);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    it(\u0027creates a Tutor user correctly when loginId is very short\u0027, async () \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_Q.loginId, USER_Q);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    it(\u0027creates an Admin user correctly\u0027, async () \u003d\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_SHUMING.loginId, USER_SHUMING);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    it(\u0027assigns highest possible role to a user who has multiple roles in data.csv\u0027, async () \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      await createAndVerifyUser(USER_WITH_TWO_ROLES.loginId, USER_WITH_TWO_ROLES);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    it(\u0027should authorize User despite loginId being of different casing\u0027, () \u003d\u003e {"},{"lineNumber":32,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const userService \u003d new UserService(null, dataService, null);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      userService.createUserModel(USER_JUNWEI.loginId).subscribe((user) \u003d\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expect(user).toBeDefined();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"      userService.createUserModel(\u0027JUNWEi96\u0027).subscribe((user) \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expect(user).toBeDefined();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    it(\u0027throws an error if the user is unauthorized\u0027, (done) \u003d\u003e {"},{"lineNumber":43,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"      const userService \u003d new UserService(null, dataService, null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      userService.createUserModel(\u0027RandomUser\u0027).subscribe("},{"lineNumber":45,"author":{"gitId":"-"},"content":"        (user) \u003d\u003e {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          fail(\u0027This test case should have failed.\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          done();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        (error) \u003d\u003e {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          expect(error).toEqual(new Error(\u0027Unauthorized user.\u0027));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          done();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":56,"author":{"gitId":"-"},"content":"});"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"async function createAndVerifyUser(loginId: string, expectedUser: User) {"},{"lineNumber":59,"author":{"gitId":"vigneshsankariyer1234567890"},"content":"  const userService \u003d new UserService(null, dataService, null);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  const actualUser \u003d await userService.createUserModel(loginId).toPromise();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  expect(actualUser).toEqual(expectedUser);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"vigneshsankariyer1234567890":3,"-":59}}]
