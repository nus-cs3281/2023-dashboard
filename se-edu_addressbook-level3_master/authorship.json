[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"Eclipse-Dominator"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":71}},{"path":"src/main/java/seedu/address/AppParameters.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParameters {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path configPath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return configPath;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return appParameters;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;"},{"lineNumber":59,"author":{"gitId":"Eclipse-Dominator"},"content":"        return Objects.equals(configPath, otherAppParameters.configPath);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return configPath.hashCode();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .add(\"configPath\", configPath)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":2,"-":71}},{"path":"src/main/java/seedu/address/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * entry point of the application:"},{"lineNumber":13,"author":{"gitId":"-"},"content":" *"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted."},{"lineNumber":20,"author":{"gitId":"-"},"content":" *"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class Main {"},{"lineNumber":25,"author":{"gitId":"Eclipse-Dominator"},"content":"    private static Logger logger \u003d LogsCenter.getLogger(Main.class);"},{"lineNumber":26,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":28,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"        // As per https://github.com/openjdk/jfx/blob/master/doc-files/release-notes-16.md"},{"lineNumber":30,"author":{"gitId":"Eclipse-Dominator"},"content":"        // JavaFX 16 (or later) runtime logs a warning at startup if JavaFX classes are loaded from"},{"lineNumber":31,"author":{"gitId":"Eclipse-Dominator"},"content":"        // the classpath instead of a module."},{"lineNumber":32,"author":{"gitId":"Eclipse-Dominator"},"content":"        // Our application does not use Java modules yet. Even if it did, modules are ignored when"},{"lineNumber":33,"author":{"gitId":"Eclipse-Dominator"},"content":"        // packed into a FAT Jar file (as we do), which means this warning will persist even then."},{"lineNumber":34,"author":{"gitId":"Eclipse-Dominator"},"content":"        // The warning however, can be safely ignored. Thus, the following log informs"},{"lineNumber":35,"author":{"gitId":"Eclipse-Dominator"},"content":"        // the user (if looking at the log output) that the said warning appearing in the log"},{"lineNumber":36,"author":{"gitId":"Eclipse-Dominator"},"content":"        // can be ignored."},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"        logger.warning(\"The warning about Unsupported JavaFX configuration below can be ignored.\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":16,"-":25}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":82,"author":{"gitId":"Eclipse-Dominator"},"content":"                logger.info(\"Creating a new data file \" + storage.getAddressBookFilePath()"},{"lineNumber":83,"author":{"gitId":"Eclipse-Dominator"},"content":"                        + \" populated with a sample AddressBook.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":86,"author":{"gitId":"Eclipse-Dominator"},"content":"        } catch (DataLoadingException e) {"},{"lineNumber":87,"author":{"gitId":"Eclipse-Dominator"},"content":"            logger.warning(\"Data file at \" + storage.getAddressBookFilePath() + \" could not be loaded.\""},{"lineNumber":88,"author":{"gitId":"Eclipse-Dominator"},"content":"                    + \" Will be starting with an empty AddressBook.\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {"},{"lineNumber":120,"author":{"gitId":"Eclipse-Dominator"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":123,"author":{"gitId":"Eclipse-Dominator"},"content":"        } catch (DataLoadingException e) {"},{"lineNumber":124,"author":{"gitId":"Eclipse-Dominator"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\""},{"lineNumber":125,"author":{"gitId":"Eclipse-Dominator"},"content":"                    + \" Using default config properties.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":145,"author":{"gitId":"Eclipse-Dominator"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {"},{"lineNumber":151,"author":{"gitId":"Eclipse-Dominator"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":154,"author":{"gitId":"Eclipse-Dominator"},"content":"        } catch (DataLoadingException e) {"},{"lineNumber":155,"author":{"gitId":"Eclipse-Dominator"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\""},{"lineNumber":156,"author":{"gitId":"Eclipse-Dominator"},"content":"                    + \" Using default preferences.\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":15,"-":170}},{"path":"src/main/java/seedu/address/commons/core/Config.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":43,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Config)) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"Eclipse-Dominator"},"content":"        Config otherConfig \u003d (Config) other;"},{"lineNumber":49,"author":{"gitId":"Eclipse-Dominator"},"content":"        return Objects.equals(logLevel, otherConfig.logLevel)"},{"lineNumber":50,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, otherConfig.userPrefsFilePath);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .add(\"logLevel\", logLevel)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .add(\"userPrefsFilePath\", userPrefsFilePath)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":6,"-":60}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: immutable."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final double windowWidth;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final double windowHeight;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public GuiSettings() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return windowWidth;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return windowHeight;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof GuiSettings)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Eclipse-Dominator"},"content":"        GuiSettings otherGuiSettings \u003d (GuiSettings) other;"},{"lineNumber":64,"author":{"gitId":"Eclipse-Dominator"},"content":"        return windowWidth \u003d\u003d otherGuiSettings.windowWidth"},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 windowHeight \u003d\u003d otherGuiSettings.windowHeight"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, otherGuiSettings.windowCoordinates);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .add(\"windowWidth\", windowWidth)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .add(\"windowHeight\", windowHeight)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .add(\"windowCoordinates\", windowCoordinates)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":7,"-":75}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";"},{"lineNumber":24,"author":{"gitId":"Eclipse-Dominator"},"content":"    private static final Logger logger; // logger for this class"},{"lineNumber":25,"author":{"gitId":"Eclipse-Dominator"},"content":"    private static Logger baseLogger; // to be used as the parent of all other loggers created by this class."},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":28,"author":{"gitId":"Eclipse-Dominator"},"content":"    // This static block ensures essential loggers are created early"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"    static {"},{"lineNumber":30,"author":{"gitId":"Eclipse-Dominator"},"content":"        setBaseLogger();"},{"lineNumber":31,"author":{"gitId":"Eclipse-Dominator"},"content":"        logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":32,"author":{"gitId":"Eclipse-Dominator"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Initializes loggers with the log level specified in the {@code config} object. Applies to all loggers created"},{"lineNumber":36,"author":{"gitId":"Eclipse-Dominator"},"content":"     * using {@link #getLogger(String)} and {@link #getLogger(Class)} methods except for those that are manually set."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":40,"author":{"gitId":"Eclipse-Dominator"},"content":"        logger.info(\"Log level will be set as: \" + currentLogLevel);"},{"lineNumber":41,"author":{"gitId":"Eclipse-Dominator"},"content":"        // set the level of the baseLogger which will be inherited by other loggers"},{"lineNumber":42,"author":{"gitId":"Eclipse-Dominator"},"content":"        baseLogger.setLevel(currentLogLevel);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Creates a logger with the given name prefixed by the {@code baseLogger}\u0027s name so that the created logger"},{"lineNumber":47,"author":{"gitId":"Eclipse-Dominator"},"content":"     * becomes a descendant of the {@code baseLogger}. Furthermore, the returned logger will have the same log handlers"},{"lineNumber":48,"author":{"gitId":"Eclipse-Dominator"},"content":"     * as the {@code baseLogger}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":51,"author":{"gitId":"Eclipse-Dominator"},"content":"        // Java organizes loggers into a hierarchy based on their names (using \u0027.\u0027 as a separator, similar to how Java"},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":"        // packages form a hierarchy). Furthermore, loggers without a level inherit the level of their parent logger."},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"        // By prefixing names of all loggers with baseLogger\u0027s name + \".\", we make the baseLogger the parent of all"},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"        // loggers. This allows us to change the level of all loggers simply by changing the baseLogger level."},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":"        Logger logger \u003d Logger.getLogger(baseLogger.getName() + \".\" + name);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"        logger.setUseParentHandlers(true);"},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":"        return logger;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"        requireNonNull(clazz);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Removes all handlers from the {@code logger}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Creates a logger named \u0027ab3\u0027, containing a {@code ConsoleHandler} and a {@code FileHandler}."},{"lineNumber":79,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Sets it as the {@code baseLogger}, to be used as the parent logger of all other loggers."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Eclipse-Dominator"},"content":"    private static void setBaseLogger() {"},{"lineNumber":82,"author":{"gitId":"Eclipse-Dominator"},"content":"        baseLogger \u003d Logger.getLogger(\"ab3\");"},{"lineNumber":83,"author":{"gitId":"Eclipse-Dominator"},"content":"        baseLogger.setUseParentHandlers(false);"},{"lineNumber":84,"author":{"gitId":"Eclipse-Dominator"},"content":"        removeHandlers(baseLogger);"},{"lineNumber":85,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":86,"author":{"gitId":"Eclipse-Dominator"},"content":"        // Level.ALL is used as the level for the handlers because the baseLogger filters the log messages by level"},{"lineNumber":87,"author":{"gitId":"Eclipse-Dominator"},"content":"        // already; there is no need to control log message level of the handlers."},{"lineNumber":88,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":89,"author":{"gitId":"Eclipse-Dominator"},"content":"        // add a ConsoleHandler to log to the console"},{"lineNumber":90,"author":{"gitId":"Eclipse-Dominator"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":91,"author":{"gitId":"Eclipse-Dominator"},"content":"        consoleHandler.setLevel(Level.ALL);"},{"lineNumber":92,"author":{"gitId":"Eclipse-Dominator"},"content":"        baseLogger.addHandler(consoleHandler);"},{"lineNumber":93,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":94,"author":{"gitId":"Eclipse-Dominator"},"content":"        // add a FileHandler to log to a file"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"Eclipse-Dominator"},"content":"            FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":97,"author":{"gitId":"Eclipse-Dominator"},"content":"            fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":98,"author":{"gitId":"Eclipse-Dominator"},"content":"            fileHandler.setLevel(Level.ALL);"},{"lineNumber":99,"author":{"gitId":"Eclipse-Dominator"},"content":"            baseLogger.addHandler(fileHandler);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":47,"-":59}},{"path":"src/main/java/seedu/address/commons/core/Version.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"Eclipse-Dominator"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":101,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":102,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Version)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"Eclipse-Dominator"},"content":"        Version otherVersion \u003d (Version) other;"},{"lineNumber":107,"author":{"gitId":"Eclipse-Dominator"},"content":"        return major \u003d\u003d otherVersion.major"},{"lineNumber":108,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 minor \u003d\u003d otherVersion.minor"},{"lineNumber":109,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 patch \u003d\u003d otherVersion.patch"},{"lineNumber":110,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 isEarlyAccess \u003d\u003d otherVersion.isEarlyAccess;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":110}},{"path":"src/main/java/seedu/address/commons/core/index/Index.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":7,"author":{"gitId":"-"},"content":" *"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Index {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public int getOneBased() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":56,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Index)) {"},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":59,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":61,"author":{"gitId":"Eclipse-Dominator"},"content":"        Index otherIndex \u003d (Index) other;"},{"lineNumber":62,"author":{"gitId":"Eclipse-Dominator"},"content":"        return zeroBasedIndex \u003d\u003d otherIndex.zeroBasedIndex;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"zeroBasedIndex\", zeroBasedIndex).toString();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":58}},{"path":"src/main/java/seedu/address/commons/exceptions/DataLoadingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eclipse-Dominator"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":" * Represents an error during loading of data from a file."},{"lineNumber":5,"author":{"gitId":"Eclipse-Dominator"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"public class DataLoadingException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"    public DataLoadingException(Exception cause) {"},{"lineNumber":8,"author":{"gitId":"Eclipse-Dominator"},"content":"        super(cause);"},{"lineNumber":9,"author":{"gitId":"Eclipse-Dominator"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":11,"author":{"gitId":"Eclipse-Dominator"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11}},{"path":"src/main/java/seedu/address/commons/util/ConfigUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":8,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Eclipse-Dominator"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataLoadingException {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":2,"-":21}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Returns the JSON object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid JSON file."},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":56,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @param classOfObjectToDeserialize JSON file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @throws DataLoadingException if loading of the JSON file failed."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitId":"Eclipse-Dominator"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataLoadingException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.info(\"JSON file \" + filePath + \" found.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":74,"author":{"gitId":"Eclipse-Dominator"},"content":"            throw new DataLoadingException(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":8,"-":136}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.nio.file.AccessDeniedException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":25,"author":{"gitId":"Eclipse-Dominator"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";"},{"lineNumber":26,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d"},{"lineNumber":28,"author":{"gitId":"Eclipse-Dominator"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":"        } catch (AccessDeniedException e) {"},{"lineNumber":56,"author":{"gitId":"Eclipse-Dominator"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":9,"-":79}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eclipse-Dominator"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":19,"author":{"gitId":"Eclipse-Dominator"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d"},{"lineNumber":20,"author":{"gitId":"Eclipse-Dominator"},"content":"                \"Multiple values specified for the following single-valued field(s): \";"},{"lineNumber":21,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":22,"author":{"gitId":"Eclipse-Dominator"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Returns an error message indicating the duplicate prefixes."},{"lineNumber":24,"author":{"gitId":"Eclipse-Dominator"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Eclipse-Dominator"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {"},{"lineNumber":26,"author":{"gitId":"Eclipse-Dominator"},"content":"        assert duplicatePrefixes.length \u003e 0;"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":28,"author":{"gitId":"Eclipse-Dominator"},"content":"        Set\u003cString\u003e duplicateFields \u003d"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());"},{"lineNumber":30,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":31,"author":{"gitId":"Eclipse-Dominator"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);"},{"lineNumber":32,"author":{"gitId":"Eclipse-Dominator"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static String format(Person person) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        builder.append(person.getName())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .append(person.getPhone())"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .append(person.getEmail())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .append(person.getAddress())"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":20,"-":31}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":11,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":67,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":69,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof AddCommand)) {"},{"lineNumber":71,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":74,"author":{"gitId":"Eclipse-Dominator"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;"},{"lineNumber":75,"author":{"gitId":"Eclipse-Dominator"},"content":"        return toAdd.equals(otherAddCommand.toAdd);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":12,"-":72}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":9,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, Messages.format(personToDelete)));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof DeleteCommand)) {"},{"lineNumber":56,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":59,"author":{"gitId":"Eclipse-Dominator"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;"},{"lineNumber":60,"author":{"gitId":"Eclipse-Dominator"},"content":"        return targetIndex.equals(otherDeleteCommand.targetIndex);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":12,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":21,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"Eclipse-Dominator"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;"},{"lineNumber":119,"author":{"gitId":"Eclipse-Dominator"},"content":"        return index.equals(otherEditCommand.index)"},{"lineNumber":120,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .add(\"index\", index)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":146,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":147,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":158,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":198,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":206,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":207,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"Eclipse-Dominator"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;"},{"lineNumber":224,"author":{"gitId":"Eclipse-Dominator"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)"},{"lineNumber":225,"author":{"gitId":"Eclipse-Dominator"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)"},{"lineNumber":226,"author":{"gitId":"Eclipse-Dominator"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)"},{"lineNumber":227,"author":{"gitId":"Eclipse-Dominator"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)"},{"lineNumber":228,"author":{"gitId":"Eclipse-Dominator"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        public String toString() {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    .toString();"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":231}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":34,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":40,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":41,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":43,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof FindCommand)) {"},{"lineNumber":45,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":46,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":48,"author":{"gitId":"Eclipse-Dominator"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;"},{"lineNumber":49,"author":{"gitId":"Eclipse-Dominator"},"content":"        return predicate.equals(otherFindCommand.predicate);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":12,"-":46}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Eclipse-Dominator"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":2,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":2,"-":74}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":10,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":11,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in {@code prefixes} appeared more than"},{"lineNumber":67,"author":{"gitId":"Eclipse-Dominator"},"content":"     * once among the arguments."},{"lineNumber":68,"author":{"gitId":"Eclipse-Dominator"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {"},{"lineNumber":70,"author":{"gitId":"Eclipse-Dominator"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()"},{"lineNumber":71,"author":{"gitId":"Eclipse-Dominator"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)"},{"lineNumber":72,"author":{"gitId":"Eclipse-Dominator"},"content":"                .toArray(Prefix[]::new);"},{"lineNumber":73,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":74,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (duplicatedPrefixes.length \u003e 0) {"},{"lineNumber":75,"author":{"gitId":"Eclipse-Dominator"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));"},{"lineNumber":76,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Eclipse-Dominator"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":18,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":28}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"Eclipse-Dominator"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"},{"lineNumber":46,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":48,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":4,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/Prefix.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":35,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Prefix)) {"},{"lineNumber":36,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":39,"author":{"gitId":"Eclipse-Dominator"},"content":"        Prefix otherPrefix \u003d (Prefix) other;"},{"lineNumber":40,"author":{"gitId":"Eclipse-Dominator"},"content":"        return prefix.equals(otherPrefix.prefix);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":9,"-":33}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":115,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":117,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof AddressBook)) {"},{"lineNumber":119,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":122,"author":{"gitId":"Eclipse-Dominator"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;"},{"lineNumber":123,"author":{"gitId":"Eclipse-Dominator"},"content":"        return persons.equals(otherAddressBook.persons);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":119}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":132,"author":{"gitId":"Eclipse-Dominator"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":138,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof ModelManager)) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"Eclipse-Dominator"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;"},{"lineNumber":143,"author":{"gitId":"Eclipse-Dominator"},"content":"        return addressBook.equals(otherModelManager.addressBook)"},{"lineNumber":144,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)"},{"lineNumber":145,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":7,"-":141}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof UserPrefs)) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"Eclipse-Dominator"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;"},{"lineNumber":71,"author":{"gitId":"Eclipse-Dominator"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)"},{"lineNumber":72,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":6,"-":82}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":48,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":49,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":51,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Address)) {"},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":56,"author":{"gitId":"Eclipse-Dominator"},"content":"        Address otherAddress \u003d (Address) other;"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"        return value.equals(otherAddress.value);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":54}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Email)) {"},{"lineNumber":67,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":70,"author":{"gitId":"Eclipse-Dominator"},"content":"        Email otherEmail \u003d (Email) other;"},{"lineNumber":71,"author":{"gitId":"Eclipse-Dominator"},"content":"        return value.equals(otherEmail.value);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":68}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Name)) {"},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":"        Name otherName \u003d (Name) other;"},{"lineNumber":59,"author":{"gitId":"Eclipse-Dominator"},"content":"        return fullName.equals(otherName.fullName);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":56}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":28,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":31,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {"},{"lineNumber":33,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":34,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":36,"author":{"gitId":"Eclipse-Dominator"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;"},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":33}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":93,"author":{"gitId":"Eclipse-Dominator"},"content":"        return name.equals(otherPerson.name)"},{"lineNumber":94,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)"},{"lineNumber":95,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 email.equals(otherPerson.email)"},{"lineNumber":96,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 address.equals(otherPerson.address)"},{"lineNumber":97,"author":{"gitId":"Eclipse-Dominator"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .add(\"name\", name)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .add(\"email\", email)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .add(\"address\", address)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .toString();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":6,"-":111}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":44,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":45,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":47,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Phone)) {"},{"lineNumber":49,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":50,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":52,"author":{"gitId":"Eclipse-Dominator"},"content":"        Phone otherPhone \u003d (Phone) other;"},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"        return value.equals(otherPhone.value);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":50}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"-"},"content":" *"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"-"},"content":" *"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":116,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":118,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":119,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof UniquePersonList)) {"},{"lineNumber":120,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":121,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":123,"author":{"gitId":"Eclipse-Dominator"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;"},{"lineNumber":124,"author":{"gitId":"Eclipse-Dominator"},"content":"        return internalList.equals(otherUniquePersonList.internalList);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.toString();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":139}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":39,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":41,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof Tag)) {"},{"lineNumber":43,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":44,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":46,"author":{"gitId":"Eclipse-Dominator"},"content":"        Tag otherTag \u003d (Tag) other;"},{"lineNumber":47,"author":{"gitId":"Eclipse-Dominator"},"content":"        return tagName.equals(otherTag.tagName);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":11,"-":51}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"Eclipse-Dominator"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @throws DataLoadingException if loading the data from storage failed."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eclipse-Dominator"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Eclipse-Dominator"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":5,"-":40}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":39,"author":{"gitId":"Eclipse-Dominator"},"content":"            @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":108}},{"path":"src/main/java/seedu/address/storage/JsonAddressBookStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @throws DataLoadingException if loading the data from storage failed."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"Eclipse-Dominator"},"content":"            throw new DataLoadingException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":5,"-":75}},{"path":"src/main/java/seedu/address/storage/JsonUserPrefsStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":36,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @throws DataLoadingException if the file format is not as expected."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataLoadingException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":4,"-":43}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Eclipse-Dominator"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":3,"-":29}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"Eclipse-Dominator"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":4,"-":74}},{"path":"src/main/java/seedu/address/storage/UserPrefsStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.UserPrefs}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"Eclipse-Dominator"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @throws DataLoadingException if the loading of data from preference file failed."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":4,"-":32}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"Eclipse-Dominator"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":195}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"Eclipse-Dominator":1,"-":8}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cHBox alignment\u003d\"CENTER\" fx:id\u003d\"helpMessageContainer\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cchildren\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"              \u003cInsets right\u003d\"5.0\" /\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003c/Label\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"              \u003cInsets left\u003d\"5.0\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Button\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/children\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003copaqueInsets\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/opaqueInsets\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003cpadding\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/padding\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":43}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":59}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":35}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":7}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/17\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":8}},{"path":"src/main/resources/view/StatusBarFooter.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003ccolumnConstraints\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003c/columnConstraints\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/GridPane\u003e"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":11}},{"path":"src/test/java/seedu/address/commons/util/ConfigUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void read_missingFile_emptyResult() throws DataLoadingException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertThrows(DataLoadingException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void read_fileInOrder_successfullyRead() throws DataLoadingException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"Eclipse-Dominator"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataLoadingException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void saveConfig_allInOrder_success() throws DataLoadingException, IOException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":8,"-":108}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.nio.file.AccessDeniedException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":75,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format("},{"lineNumber":76,"author":{"gitId":"Eclipse-Dominator"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));"},{"lineNumber":77,"author":{"gitId":"Eclipse-Dominator"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"Eclipse-Dominator"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {"},{"lineNumber":81,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format("},{"lineNumber":82,"author":{"gitId":"Eclipse-Dominator"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"Eclipse-Dominator"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component."},{"lineNumber":145,"author":{"gitId":"Eclipse-Dominator"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @param e the exception to be thrown by the Storage component"},{"lineNumber":147,"author":{"gitId":"Eclipse-Dominator"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"Eclipse-Dominator"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {"},{"lineNumber":150,"author":{"gitId":"Eclipse-Dominator"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"Eclipse-Dominator"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving"},{"lineNumber":153,"author":{"gitId":"Eclipse-Dominator"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            @Override"},{"lineNumber":155,"author":{"gitId":"Eclipse-Dominator"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)"},{"lineNumber":156,"author":{"gitId":"Eclipse-Dominator"},"content":"                    throws IOException {"},{"lineNumber":157,"author":{"gitId":"Eclipse-Dominator"},"content":"                throw e;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":159,"author":{"gitId":"Eclipse-Dominator"},"content":"        };"},{"lineNumber":160,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":161,"author":{"gitId":"Eclipse-Dominator"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":162,"author":{"gitId":"Eclipse-Dominator"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));"},{"lineNumber":163,"author":{"gitId":"Eclipse-Dominator"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":164,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":165,"author":{"gitId":"Eclipse-Dominator"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":166,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":167,"author":{"gitId":"Eclipse-Dominator"},"content":"        // Triggers the saveAddressBook method by executing an add command"},{"lineNumber":168,"author":{"gitId":"Eclipse-Dominator"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":169,"author":{"gitId":"Eclipse-Dominator"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitId":"Eclipse-Dominator"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":171,"author":{"gitId":"Eclipse-Dominator"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":172,"author":{"gitId":"Eclipse-Dominator"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":173,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":38,"-":137}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toStringMethod() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":203}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toStringMethod() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":119}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void toStringMethod() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\""},{"lineNumber":180,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":183}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"keyword\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":90}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":28,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":29,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":30,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":63,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseSuccess(parser,"},{"lineNumber":64,"author":{"gitId":"Eclipse-Dominator"},"content":"                NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":65,"author":{"gitId":"Eclipse-Dominator"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":68,"author":{"gitId":"Eclipse-Dominator"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void parse_repeatedNonTagValue_failure() {"},{"lineNumber":70,"author":{"gitId":"Eclipse-Dominator"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":71,"author":{"gitId":"Eclipse-Dominator"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":72,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":73,"author":{"gitId":"Eclipse-Dominator"},"content":"        // multiple names"},{"lineNumber":74,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,"},{"lineNumber":75,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));"},{"lineNumber":76,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":77,"author":{"gitId":"Eclipse-Dominator"},"content":"        // multiple phones"},{"lineNumber":78,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,"},{"lineNumber":79,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));"},{"lineNumber":80,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":81,"author":{"gitId":"Eclipse-Dominator"},"content":"        // multiple emails"},{"lineNumber":82,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,"},{"lineNumber":83,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));"},{"lineNumber":84,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":85,"author":{"gitId":"Eclipse-Dominator"},"content":"        // multiple addresses"},{"lineNumber":86,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPersonString,"},{"lineNumber":87,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));"},{"lineNumber":88,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":89,"author":{"gitId":"Eclipse-Dominator"},"content":"        // multiple fields repeated"},{"lineNumber":90,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser,"},{"lineNumber":91,"author":{"gitId":"Eclipse-Dominator"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":92,"author":{"gitId":"Eclipse-Dominator"},"content":"                        + validExpectedPersonString,"},{"lineNumber":93,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE));"},{"lineNumber":94,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":95,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid value followed by valid value"},{"lineNumber":96,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":97,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid name"},{"lineNumber":98,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,"},{"lineNumber":99,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));"},{"lineNumber":100,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":101,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid email"},{"lineNumber":102,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,"},{"lineNumber":103,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));"},{"lineNumber":104,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":105,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid phone"},{"lineNumber":106,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,"},{"lineNumber":107,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));"},{"lineNumber":108,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":109,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid address"},{"lineNumber":110,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPersonString,"},{"lineNumber":111,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));"},{"lineNumber":112,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":113,"author":{"gitId":"Eclipse-Dominator"},"content":"        // valid value followed by invalid value"},{"lineNumber":114,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":115,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid name"},{"lineNumber":116,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,"},{"lineNumber":117,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));"},{"lineNumber":118,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":119,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid email"},{"lineNumber":120,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,"},{"lineNumber":121,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));"},{"lineNumber":122,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":123,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid phone"},{"lineNumber":124,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,"},{"lineNumber":125,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));"},{"lineNumber":126,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":127,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid address"},{"lineNumber":128,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ADDRESS_DESC,"},{"lineNumber":129,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":73,"-":123}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":2,"-":99}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":31}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":25,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":26,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":27,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.logic.Messages;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void parse_multipleRepeatedFields_failure() {"},{"lineNumber":168,"author":{"gitId":"Eclipse-Dominator"},"content":"        // More extensive testing of duplicate parameter detections is done in"},{"lineNumber":169,"author":{"gitId":"Eclipse-Dominator"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()"},{"lineNumber":170,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":171,"author":{"gitId":"Eclipse-Dominator"},"content":"        // valid followed by invalid"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":173,"author":{"gitId":"Eclipse-Dominator"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":174,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":175,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));"},{"lineNumber":176,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":177,"author":{"gitId":"Eclipse-Dominator"},"content":"        // invalid followed by valid"},{"lineNumber":178,"author":{"gitId":"Eclipse-Dominator"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;"},{"lineNumber":179,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":180,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));"},{"lineNumber":181,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":182,"author":{"gitId":"Eclipse-Dominator"},"content":"        // mulltiple valid fields repeated"},{"lineNumber":183,"author":{"gitId":"Eclipse-Dominator"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, userInput,"},{"lineNumber":188,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"Eclipse-Dominator"},"content":"        // multiple invalid values"},{"lineNumber":191,"author":{"gitId":"Eclipse-Dominator"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC"},{"lineNumber":192,"author":{"gitId":"Eclipse-Dominator"},"content":"                + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC;"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertParseFailure(parser, userInput,"},{"lineNumber":195,"author":{"gitId":"Eclipse-Dominator"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":28,"-":180}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":1,"-":33}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataLoadingException() {"},{"lineNumber":55,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataLoadingException() {"},{"lineNumber":60,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":6,"-":104}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"Eclipse-Dominator"},"content":"import seedu.address.commons.exceptions.DataLoadingException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"Eclipse-Dominator"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataLoadingException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataLoadingException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"Eclipse-Dominator"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataLoadingException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"Eclipse-Dominator"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataLoadingException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":8,"-":115}},{"path":"src/test/java/seedu/address/ui/TestFxmlObject.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private String text;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        setText(text);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public String getText() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return text;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setText(String text) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.text \u003d text;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"Eclipse-Dominator"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":36,"author":{"gitId":"Eclipse-Dominator"},"content":"        // instanceof handles nulls"},{"lineNumber":37,"author":{"gitId":"Eclipse-Dominator"},"content":"        if (!(other instanceof TestFxmlObject)) {"},{"lineNumber":38,"author":{"gitId":"Eclipse-Dominator"},"content":"            return false;"},{"lineNumber":39,"author":{"gitId":"Eclipse-Dominator"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Eclipse-Dominator"},"content":""},{"lineNumber":41,"author":{"gitId":"Eclipse-Dominator"},"content":"        TestFxmlObject otherTestFxmlObject \u003d (TestFxmlObject) other;"},{"lineNumber":42,"author":{"gitId":"Eclipse-Dominator"},"content":"        return Objects.equals(text, otherTestFxmlObject.text);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eclipse-Dominator":13,"-":32}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Eclipse-Dominator"},"content":"\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx/17\""},{"lineNumber":4,"author":{"gitId":"Eclipse-Dominator"},"content":"        xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Eclipse-Dominator":2,"-":4}}]
