[{"path":"src/it/java/teammates/it/sqllogic/core/AccountRequestsLogicIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package teammates.it.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import org.testng.annotations.Test;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import teammates.sqllogic.core.AccountRequestsLogic;"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":" * SUT: {@link AccountRequestsLogic}."},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":" */"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"public class AccountRequestsLogicIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    private AccountRequestsLogic accountRequestsLogic \u003d AccountRequestsLogic.inst();"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    public void testResetAccountRequest()"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"success: create account request and update registeredAt field\");"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        String name \u003d \"name lee\";"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        String email \u003d \"email@gmail.com\";"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"        String institute \u003d \"institute\";"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest toReset \u003d accountRequestsLogic.createAccountRequest(name, email, institute);"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        AccountRequestsDb accountRequestsDb \u003d AccountRequestsDb.inst();"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        toReset.setRegisteredAt(Instant.now());"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        toReset \u003d accountRequestsDb.getAccountRequest(email, institute);"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        assertNotNull(toReset);"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"        assertNotNull(toReset.getRegisteredAt());"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"success: reset account request that already exists\");"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest resetted \u003d accountRequestsLogic.resetAccountRequest(email, institute);"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"        assertNull(resetted.getRegisteredAt());"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"success: test delete account request\");"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"        accountRequestsLogic.deleteAccountRequest(email, institute);"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"        assertNull(accountRequestsLogic.getAccountRequest(email, institute));"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"failure: reset account request that does not exist\");"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"                () -\u003e accountRequestsLogic.resetAccountRequest(name, institute));"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"}"}],"authorContributionMap":{"kevin9foong":58}},{"path":"src/it/java/teammates/it/sqllogic/core/AccountsLogicIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.it.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"import teammates.sqllogic.core.AccountsLogic;"},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"import teammates.sqllogic.core.NotificationsLogic;"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":" * SUT: {@link AccountsLogic}."},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"public class AccountsLogicIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"    private AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"    private AccountsDb accountsDb \u003d AccountsDb.inst();"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateReadNotifications()"},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"success: mark notification as read\");"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d new Account(\"google-id\", \"name\", \"email@teammates.com\");"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"        accountsDb.createAccount(account);"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"        notificationsLogic.createNotification(notification);"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"        accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime());"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"        Account actualAccount \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"        List\u003cReadNotification\u003e accountReadNotifications \u003d actualAccount.getReadNotifications();"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(1, accountReadNotifications.size());"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"        assertSame(actualAccount, accountReadNotifications.get(0).getAccount());"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":"        assertSame(notification, accountReadNotifications.get(0).getNotification());"},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":53}},{"path":"src/it/java/teammates/it/sqllogic/core/NotificationsLogicIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.it.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.sqllogic.core.NotificationsLogic;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":" * SUT: {@link NotificationsLogic}."},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"public class NotificationsLogicIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateNotification()"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"        Instant newStartTime \u003d Instant.parse(\"2012-01-01T00:00:00Z\");"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"        Instant newEndTime \u003d Instant.parse(\"2098-01-01T00:00:00Z\");"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"        NotificationStyle newStyle \u003d NotificationStyle.DARK;"},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"        NotificationTargetUser newTargetUser \u003d NotificationTargetUser.INSTRUCTOR;"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"        String newTitle \u003d \"An updated deprecation note\";"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"        String newMessage \u003d \"\u003cp\u003eDeprecation happens in three seconds\u003c/p\u003e\";"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"success: update notification that already exists\");"},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"        notificationsLogic.createNotification(notification);"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"        Notification expectedNotification \u003d notificationsLogic.updateNotification(notificationId, newStartTime, newEndTime,"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"                newStyle, newTargetUser, newTitle, newMessage);"},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(notificationId, expectedNotification.getId());"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newStartTime, expectedNotification.getStartTime());"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newEndTime, expectedNotification.getEndTime());"},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newStyle, expectedNotification.getStyle());"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newTargetUser, expectedNotification.getTargetUser());"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newTitle, expectedNotification.getTitle());"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newMessage, expectedNotification.getMessage());"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"        Notification actualNotification \u003d notificationsLogic.getNotification(notificationId);"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"        verifyEquals(expectedNotification, actualNotification);"},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"failure: update notification that does not exist\");"},{"lineNumber":56,"author":{"gitId":"hhdqirui"},"content":"        UUID nonExistentId \u003d generateDifferentUuid(notificationId);"},{"lineNumber":57,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":"        assertThrows(EntityDoesNotExistException.class, () -\u003e notificationsLogic.updateNotification(nonExistentId,"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"                newStartTime, newEndTime, newStyle, newTargetUser, newTitle, newMessage));"},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":60,"-":2}},{"path":"src/it/java/teammates/it/sqllogic/core/package-info.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":" * Contains test cases for {@link teammates.storage.sqlapi} package."},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"package teammates.it.sqllogic.core;"}],"authorContributionMap":{"hhdqirui":4}},{"path":"src/it/java/teammates/it/storage/sqlapi/AccountRequestsDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import org.testng.annotations.Test;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" * SUT: {@link CoursesDb}."},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"public class AccountRequestsDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"    private final AccountRequestsDb accountRequestDb \u003d AccountRequestsDb.inst();"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    public void testCreateReadDeleteAccountRequest() throws Exception {"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Create account request, does not exists, succeeds\");"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Read account request using the given email and institute\");"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest actualAccReqEmalAndInstitute \u003d"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"                accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        verifyEquals(accountRequest, actualAccReqEmalAndInstitute);"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Read account request using the given registration key\");"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest actualAccReqRegistrationKey \u003d"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"                accountRequestDb.getAccountRequest(accountRequest.getRegistrationKey());"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        verifyEquals(accountRequest, actualAccReqRegistrationKey);"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Read account request using the given start and end timing\");"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        List\u003cAccountRequest\u003e actualAccReqCreatedAt \u003d"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"                accountRequestDb.getAccountRequests(accountRequest.getCreatedAt(), accountRequest.getCreatedAt());"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(1, actualAccReqCreatedAt.size());"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"        verifyEquals(accountRequest, actualAccReqCreatedAt.get(0));"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Read account request not found using the outside start and end timing\");"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"        List\u003cAccountRequest\u003e actualAccReqCreatedAtOutside \u003d"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"                accountRequestDb.getAccountRequests("},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"                        accountRequest.getCreatedAt().minusMillis(3000),"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"                        accountRequest.getCreatedAt().minusMillis(2000));"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(0, actualAccReqCreatedAtOutside.size());"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Create acccount request, already exists, execption thrown\");"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest identicalAccountRequest \u003d"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"                new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"        assertNotSame(accountRequest, identicalAccountRequest);"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"        assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"                () -\u003e accountRequestDb.createAccountRequest(identicalAccountRequest));"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Delete account request that was created\");"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        accountRequestDb.deleteAccountRequest(accountRequest);"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest actualAccountRequest \u003d"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"                accountRequestDb.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNull(actualAccountRequest);"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"    public void testUpdateAccountRequest() throws Exception {"},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Update account request, does not exists, exception thrown\");"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":"                () -\u003e accountRequestDb.updateAccountRequest(accountRequest));"},{"lineNumber":80,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":"        ______TS(\"Update account request, already exists, update successful\");"},{"lineNumber":82,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":83,"author":{"gitId":"kevin9foong"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":84,"author":{"gitId":"kevin9foong"},"content":"        accountRequest.setName(\"new account request name\");"},{"lineNumber":85,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":86,"author":{"gitId":"kevin9foong"},"content":"        accountRequestDb.updateAccountRequest(accountRequest);"},{"lineNumber":87,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest actual \u003d accountRequestDb.getAccountRequest("},{"lineNumber":88,"author":{"gitId":"kevin9foong"},"content":"                accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":89,"author":{"gitId":"kevin9foong"},"content":"        verifyEquals(accountRequest, actual);"},{"lineNumber":90,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"kevin9foong"},"content":"}"}],"authorContributionMap":{"kevin9foong":89,"-":2}},{"path":"src/it/java/teammates/it/storage/sqlapi/NotificationDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.NotificationsDb;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":" * SUT: {@link NotificationsDb}."},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"public class NotificationDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"    private final NotificationsDb notificationsDb \u003d NotificationsDb.inst();"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":"    public void testCreateNotification() throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"success: create notification that does not exist\");"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"        Notification newNotification \u003d generateTypicalNotification();"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.createNotification(newNotification);"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d newNotification.getId();"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"        Notification actualNotification \u003d notificationsDb.getNotification(notificationId);"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"        verifyEquals(newNotification, actualNotification);"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"    public void testGetNotification() throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"success: get a notification that already exists\");"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"        Notification newNotification \u003d generateTypicalNotification();"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.createNotification(newNotification);"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d newNotification.getId();"},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"        Notification actualNotification \u003d notificationsDb.getNotification(notificationId);"},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"        verifyEquals(newNotification, actualNotification);"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"success: get a notification that does not exist\");"},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"        UUID nonExistentId \u003d generateDifferentUuid(notificationId);"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"        Notification nonExistentNotification \u003d notificationsDb.getNotification(nonExistentId);"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        assertNull(nonExistentNotification);"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"    public void testDeleteNotification() throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":"        ______TS(\"success: delete a notification that already exists\");"},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotification();"},{"lineNumber":56,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":57,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.createNotification(notification);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"        assertNotNull(notificationsDb.getNotification(notificationId));"},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.deleteNotification(notification);"},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":"        assertNull(notificationsDb.getNotification(notificationId));"},{"lineNumber":63,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":65,"author":{"gitId":"hhdqirui"},"content":"    private Notification generateTypicalNotification() {"},{"lineNumber":66,"author":{"gitId":"hhdqirui"},"content":"        return new Notification("},{"lineNumber":67,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":68,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"),"},{"lineNumber":69,"author":{"gitId":"hhdqirui"},"content":"                NotificationStyle.DANGER,"},{"lineNumber":70,"author":{"gitId":"hhdqirui"},"content":"                NotificationTargetUser.GENERAL,"},{"lineNumber":71,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\","},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":"                \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":71,"-":3}},{"path":"src/it/java/teammates/it/storage/sqlapi/UsersDbIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.it.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":5,"author":{"gitId":"domlimm"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":6,"author":{"gitId":"domlimm"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":8,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPermissionRole;"},{"lineNumber":9,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPrivileges;"},{"lineNumber":10,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"domlimm"},"content":"import teammates.it.test.BaseTestCaseWithSqlDatabaseAccess;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlapi.CoursesDb;"},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":" * SUT: {@link UsersDb}."},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":"public class UsersDbIT extends BaseTestCaseWithSqlDatabaseAccess {"},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":"    private final UsersDb usersDb \u003d UsersDb.inst();"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":"    private final CoursesDb coursesDb \u003d CoursesDb.inst();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AccountsDb accountsDb \u003d AccountsDb.inst();"},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":"    private Course course;"},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":"    private Instructor instructor;"},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":"    private Student student;"},{"lineNumber":33,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":"    @BeforeMethod"},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"domlimm"},"content":"    public void setUp() throws Exception {"},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":"        super.setUp();"},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"        course \u003d new Course(\"course-id\", \"course-name\", Const.DEFAULT_TIME_ZONE, \"institute\");"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"        coursesDb.createCourse(course);"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Account instructorAccount \u003d new Account(\"instructor-account\", \"instructor-name\", \"valid-instructor@email.tmt\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        accountsDb.createAccount(instructorAccount);"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":"        instructor \u003d getTypicalInstructor();"},{"lineNumber":45,"author":{"gitId":"domlimm"},"content":"        usersDb.createInstructor(instructor);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        instructor.setAccount(instructorAccount);"},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Account studentAccount \u003d new Account(\"student-account\", \"student-name\", \"valid-student@email.tmt\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        accountsDb.createAccount(studentAccount);"},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":"        student \u003d getTypicalStudent();"},{"lineNumber":51,"author":{"gitId":"domlimm"},"content":"        usersDb.createStudent(student);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        student.setAccount(studentAccount);"},{"lineNumber":53,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":54,"author":{"gitId":"domlimm"},"content":"        HibernateUtil.flushSession();"},{"lineNumber":55,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":57,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"domlimm"},"content":"    public void testGetInstructor() {"},{"lineNumber":59,"author":{"gitId":"domlimm"},"content":"        ______TS(\"success: gets an instructor that already exists\");"},{"lineNumber":60,"author":{"gitId":"domlimm"},"content":"        Instructor actualInstructor \u003d usersDb.getInstructor(instructor.getId());"},{"lineNumber":61,"author":{"gitId":"domlimm"},"content":"        verifyEquals(instructor, actualInstructor);"},{"lineNumber":62,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":63,"author":{"gitId":"domlimm"},"content":"        ______TS(\"success: gets an instructor that does not exist\");"},{"lineNumber":64,"author":{"gitId":"domlimm"},"content":"        UUID nonExistentId \u003d generateDifferentUuid(actualInstructor.getId());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructor(nonExistentId);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertNull(actualInstructor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets an instructor by courseId and email\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructor(instructor.getCourseId(), instructor.getEmail());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        verifyEquals(instructor, actualInstructor);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets an instructor by courseId and email that does not exist\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructor(instructor.getCourseId(), \"does-not-exist@teammates.tmt\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertNull(actualInstructor);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets an instructor by regKey\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructorByRegKey(instructor.getRegKey());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        verifyEquals(instructor, actualInstructor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets an instructor by regKey that does not exist\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructorByRegKey(\"invalid-reg-key\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertNull(actualInstructor);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets an instructor by googleId\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructorByGoogleId(instructor.getCourseId(), instructor.getAccount().getGoogleId());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        verifyEquals(instructor, actualInstructor);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets an instructor by googleId that does not exist\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        actualInstructor \u003d usersDb.getInstructorByGoogleId(instructor.getCourseId(), \"invalid-google id\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertNull(actualInstructor);"},{"lineNumber":91,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":93,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"domlimm"},"content":"    public void testGetStudent() {"},{"lineNumber":95,"author":{"gitId":"domlimm"},"content":"        ______TS(\"success: gets a student that already exists\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Student actualStudent \u003d usersDb.getStudent(student.getId());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        verifyEquals(student, actualStudent);"},{"lineNumber":98,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":99,"author":{"gitId":"domlimm"},"content":"        ______TS(\"success: gets a student that does not exist\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UUID nonExistentId \u003d generateDifferentUuid(actualStudent.getId());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudent(nonExistentId);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertNull(actualStudent);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets a student by courseId and email\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudent(student.getCourseId(), student.getEmail());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        verifyEquals(student, actualStudent);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets a student by courseId and email that does not exist\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudent(student.getCourseId(), \"does-not-exist@teammates.tmt\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertNull(actualStudent);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets a student by regKey\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudentByRegKey(student.getRegKey());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        verifyEquals(student, actualStudent);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets a student by regKey that does not exist\");"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudentByRegKey(\"invalid-reg-key\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertNull(actualStudent);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets a student by googleId\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudentByGoogleId(student.getCourseId(), student.getAccount().getGoogleId());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        verifyEquals(student, actualStudent);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        ______TS(\"success: gets a student by googleId that does not exist\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        actualStudent \u003d usersDb.getStudentByGoogleId(student.getCourseId(), \"invalid-google id\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertNull(actualStudent);"},{"lineNumber":127,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":129,"author":{"gitId":"domlimm"},"content":"    private Student getTypicalStudent() {"},{"lineNumber":130,"author":{"gitId":"domlimm"},"content":"        return new Student(course, \"student-name\", \"valid-student@email.tmt\", \"comments\");"},{"lineNumber":131,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":133,"author":{"gitId":"domlimm"},"content":"    private Instructor getTypicalInstructor() {"},{"lineNumber":134,"author":{"gitId":"domlimm"},"content":"        InstructorPrivileges instructorPrivileges \u003d"},{"lineNumber":135,"author":{"gitId":"domlimm"},"content":"                new InstructorPrivileges(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER);"},{"lineNumber":136,"author":{"gitId":"domlimm"},"content":"        InstructorPermissionRole role \u003d InstructorPermissionRole"},{"lineNumber":137,"author":{"gitId":"domlimm"},"content":"                .getEnum(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER);"},{"lineNumber":138,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":139,"author":{"gitId":"domlimm"},"content":"        return new Instructor(course, \"instructor-name\", \"valid-instructor@email.tmt\","},{"lineNumber":140,"author":{"gitId":"domlimm"},"content":"                true, Const.DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR, role, instructorPrivileges);"},{"lineNumber":141,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":78,"-":64}},{"path":"src/it/java/teammates/it/storage/sqlapi/package-info.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":" * Contains test cases for {@link teammates.storage.sqlapi} package."},{"lineNumber":3,"author":{"gitId":"-"},"content":" */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"package teammates.it.storage.sqlapi;"}],"authorContributionMap":{"hhdqirui":1,"-":3}},{"path":"src/it/java/teammates/it/test/BaseTestCaseWithSqlDatabaseAccess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.it.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testcontainers.containers.PostgreSQLContainer;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterSuite;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeSuite;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.sqllogic.api.Logic;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.LogicStarter;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.BaseEntity;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Base test case for tests that access the database."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"@Test(singleThreaded \u003d true)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class BaseTestCaseWithSqlDatabaseAccess extends BaseTestCase {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Test container."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    protected static final PostgreSQLContainer\u003c?\u003e PGSQL \u003d new PostgreSQLContainer\u003c\u003e(\"postgres:15.1-alpine\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Logic logic \u003d Logic.inst();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @BeforeSuite"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected static void setUpClass() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        PGSQL.start();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // Temporarily disable migration utility"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // DbMigrationUtil.resetDb(PGSQL.getJdbcUrl(), PGSQL.getUsername(),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // PGSQL.getPassword());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        HibernateUtil.buildSessionFactory(PGSQL.getJdbcUrl(), PGSQL.getUsername(), PGSQL.getPassword());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        LogicStarter.initializeDependencies();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @AfterSuite"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected static void tearDownClass() throws Exception {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        PGSQL.close();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    protected void setUp() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        HibernateUtil.beginTransaction();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @AfterMethod"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    protected void tearDown() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        HibernateUtil.rollbackTransaction();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    protected String getTestDataFolder() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return TestProperties.TEST_DATA_FOLDER;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Verifies that two entities are equal."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    protected void verifyEquals(BaseEntity expected, BaseEntity actual) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (expected instanceof Course) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            Course expectedCourse \u003d (Course) expected;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Course actualCourse \u003d (Course) actual;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedCourse, actualCourse);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedCourse), JsonUtils.toJson(actualCourse));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        } else if (expected instanceof DeadlineExtension) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            DeadlineExtension expectedDeadlineExtension \u003d (DeadlineExtension) expected;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            DeadlineExtension actualDeadlineExtension \u003d (DeadlineExtension) actual;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedDeadlineExtension, actualDeadlineExtension);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedDeadlineExtension), JsonUtils.toJson(actualDeadlineExtension));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        } else if (expected instanceof FeedbackSession) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            FeedbackSession expectedSession \u003d (FeedbackSession) expected;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            FeedbackSession actualSession \u003d (FeedbackSession) actual;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedSession, actualSession);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedSession), JsonUtils.toJson(actualSession));"},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":"        } else if (expected instanceof Notification) {"},{"lineNumber":92,"author":{"gitId":"hhdqirui"},"content":"            Notification expectedNotification \u003d (Notification) expected;"},{"lineNumber":93,"author":{"gitId":"hhdqirui"},"content":"            Notification actualNotification \u003d (Notification) actual;"},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":"            equalizeIrrelevantData(expectedNotification, actualNotification);"},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":"            assertEquals(JsonUtils.toJson(expectedNotification), JsonUtils.toJson(actualNotification));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Account) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Account expectedAccount \u003d (Account) expected;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Account actualAccount \u003d (Account) actual;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedAccount, actualAccount);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedAccount), JsonUtils.toJson(actualAccount));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } else if (expected instanceof AccountRequest) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            AccountRequest expectedAccountRequest \u003d (AccountRequest) expected;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            AccountRequest actualAccountRequest \u003d (AccountRequest) actual;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedAccountRequest, actualAccountRequest);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedAccountRequest), JsonUtils.toJson(actualAccountRequest));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } else if (expected instanceof UsageStatistics) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            UsageStatistics expectedUsageStatistics \u003d (UsageStatistics) expected;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            UsageStatistics actualUsageStatistics \u003d (UsageStatistics) actual;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedUsageStatistics, actualUsageStatistics);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedUsageStatistics), JsonUtils.toJson(actualUsageStatistics));"},{"lineNumber":111,"author":{"gitId":"domlimm"},"content":"        } else if (expected instanceof Instructor) {"},{"lineNumber":112,"author":{"gitId":"domlimm"},"content":"            Instructor expectedInstructor \u003d (Instructor) expected;"},{"lineNumber":113,"author":{"gitId":"domlimm"},"content":"            Instructor actualInstructor \u003d (Instructor) actual;"},{"lineNumber":114,"author":{"gitId":"domlimm"},"content":"            equalizeIrrelevantData(expectedInstructor, actualInstructor);"},{"lineNumber":115,"author":{"gitId":"domlimm"},"content":"            assertEquals(JsonUtils.toJson(expectedInstructor), JsonUtils.toJson(actualInstructor));"},{"lineNumber":116,"author":{"gitId":"domlimm"},"content":"        } else if (expected instanceof Student) {"},{"lineNumber":117,"author":{"gitId":"domlimm"},"content":"            Student expectedStudent \u003d (Student) expected;"},{"lineNumber":118,"author":{"gitId":"domlimm"},"content":"            Student actualStudent \u003d (Student) actual;"},{"lineNumber":119,"author":{"gitId":"domlimm"},"content":"            equalizeIrrelevantData(expectedStudent, actualStudent);"},{"lineNumber":120,"author":{"gitId":"domlimm"},"content":"            assertEquals(JsonUtils.toJson(expectedStudent), JsonUtils.toJson(actualStudent));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } else if (expected instanceof Section) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Section expectedSection \u003d (Section) expected;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Section actualSection \u003d (Section) actual;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            equalizeIrrelevantData(expectedSection, actualSection);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            assertEquals(JsonUtils.toJson(expectedSection), JsonUtils.toJson(actualSection));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            fail(\"Unknown entity\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Verifies that the given entity is present in the database."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    protected void verifyPresentInDatabase(BaseEntity expected) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertNotNull(expected);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        BaseEntity actual \u003d getEntity(expected);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        verifyEquals(expected, actual);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private BaseEntity getEntity(BaseEntity entity) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (entity instanceof Course) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return logic.getCourse(((Course) entity).getId());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        } else if (entity instanceof FeedbackSession) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return logic.getFeedbackSession(((FeedbackSession) entity).getId());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else if (entity instanceof Account) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return logic.getAccount(((Account) entity).getId());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } else if (entity instanceof Notification) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return logic.getNotification(((Notification) entity).getId());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Unknown entity type\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Course expected, Course actual) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(DeadlineExtension expected, DeadlineExtension actual) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(FeedbackSession expected, FeedbackSession actual) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"hhdqirui"},"content":"    private void equalizeIrrelevantData(Notification expected, Notification actual) {"},{"lineNumber":173,"author":{"gitId":"hhdqirui"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":174,"author":{"gitId":"hhdqirui"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":175,"author":{"gitId":"hhdqirui"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":176,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Account expected, Account actual) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(AccountRequest expected, AccountRequest actual) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(UsageStatistics expected, UsageStatistics actual) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"domlimm"},"content":"    private void equalizeIrrelevantData(Instructor expected, Instructor actual) {"},{"lineNumber":196,"author":{"gitId":"domlimm"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":197,"author":{"gitId":"domlimm"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":198,"author":{"gitId":"domlimm"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":199,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":201,"author":{"gitId":"domlimm"},"content":"    private void equalizeIrrelevantData(Student expected, Student actual) {"},{"lineNumber":202,"author":{"gitId":"domlimm"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":203,"author":{"gitId":"domlimm"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":204,"author":{"gitId":"domlimm"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":205,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    private void equalizeIrrelevantData(Section expected, Section actual) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // Ignore time field as it is stamped at the time of creation in testing"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        expected.setCreatedAt(actual.getCreatedAt());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        expected.setUpdatedAt(actual.getUpdatedAt());"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"hhdqirui"},"content":"     * Generates a UUID that is different from the given {@code uuid}."},{"lineNumber":215,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"hhdqirui"},"content":"    protected UUID generateDifferentUuid(UUID uuid) {"},{"lineNumber":217,"author":{"gitId":"hhdqirui"},"content":"        UUID ret \u003d UUID.randomUUID();"},{"lineNumber":218,"author":{"gitId":"hhdqirui"},"content":"        while (ret.equals(uuid)) {"},{"lineNumber":219,"author":{"gitId":"hhdqirui"},"content":"            ret \u003d UUID.randomUUID();"},{"lineNumber":220,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"hhdqirui"},"content":"        return ret;"},{"lineNumber":222,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":24,"hhdqirui":24,"-":175}},{"path":"src/main/java/teammates/common/datatransfer/InstructorPermissionRole.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.common.datatransfer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Instructor Permission Role."},{"lineNumber":7,"author":{"gitId":"-"},"content":" *"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * {@link Const.InstructorPermissionRoleNames}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public enum InstructorPermissionRole {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Co-owner."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    INSTRUCTOR_PERMISSION_ROLE_COOWNER(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER),"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Manager."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    INSTRUCTOR_PERMISSION_ROLE_MANAGER(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_MANAGER),"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Observer."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    INSTRUCTOR_PERMISSION_ROLE_OBSERVER(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_OBSERVER),"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Tutor."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    INSTRUCTOR_PERMISSION_ROLE_TUTOR(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_TUTOR),"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Custom."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    INSTRUCTOR_PERMISSION_ROLE_CUSTOM(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_CUSTOM);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private String roleName;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    InstructorPermissionRole(String roleName) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.roleName \u003d roleName;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String getRoleName() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return roleName;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Get enum from string."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static InstructorPermissionRole getEnum(String role) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        switch (role) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return INSTRUCTOR_PERMISSION_ROLE_COOWNER;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_MANAGER:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return INSTRUCTOR_PERMISSION_ROLE_MANAGER;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_OBSERVER:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return INSTRUCTOR_PERMISSION_ROLE_OBSERVER;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_TUTOR:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return INSTRUCTOR_PERMISSION_ROLE_TUTOR;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_CUSTOM:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return INSTRUCTOR_PERMISSION_ROLE_CUSTOM;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return INSTRUCTOR_PERMISSION_ROLE_CUSTOM;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":1,"-":64}},{"path":"src/main/java/teammates/common/util/Const.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.common.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.charset.Charset;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Stores constants that are widely used across classes."},{"lineNumber":10,"author":{"gitId":"-"},"content":" * this class contains several nested classes, each containing a specific"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * category of constants."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public final class Const {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // This section holds constants that are defined as constants primarily because they are repeated in many places."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String USER_NOBODY_TEXT \u003d \"-\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String USER_TEAM_FOR_INSTRUCTOR \u003d \"Instructors\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR \u003d \"Instructor\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DISPLAYED_NAME_FOR_ANONYMOUS_PARTICIPANT \u003d \"Anonymous\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final int SECTION_SIZE_LIMIT \u003d 100;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_SECTION \u003d \"None\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String UNKNOWN_INSTITUTION \u003d \"Unknown Institution\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_TIME_ZONE \u003d \"UTC\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Charset ENCODING \u003d StandardCharsets.UTF_8;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Duration FEEDBACK_SESSIONS_SEARCH_WINDOW \u003d Duration.ofDays(30);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Duration LOGS_RETENTION_PERIOD \u003d Duration.ofDays(30);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Duration COOKIE_VALIDITY_PERIOD \u003d Duration.ofDays(7);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final int SEARCH_QUERY_SIZE_LIMIT \u003d 50;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    public static final String ERROR_CREATE_ENTITY_ALREADY_EXISTS \u003d \"Trying to create an entity that exists: %s\";"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"    public static final String ERROR_UPDATE_NON_EXISTENT \u003d \"Trying to update non-existent Entity: \";"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    // These constants are used as variable values to mean that the variable is in a \u0027special\u0027 state."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final int INT_UNINITIALIZED \u003d -9999;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final int MAX_POSSIBLE_RECIPIENTS \u003d -100;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final int POINTS_EQUAL_SHARE \u003d 100;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final int POINTS_NOT_SURE \u003d -101;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final int POINTS_NOT_SUBMITTED \u003d -999;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final int POINTS_NO_VALUE \u003d Integer.MIN_VALUE;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String GENERAL_QUESTION \u003d \"%GENERAL%\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_FOLLOW_OPENING;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_FOLLOW_VISIBLE;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_LATER;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_NOW;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final Instant TIME_REPRESENTS_DEFAULT_TIMESTAMP;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_FOLLOW_OPENING \u003d TimeHelper.parseInstant(\"1970-12-31T00:00:00Z\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_FOLLOW_VISIBLE \u003d TimeHelper.parseInstant(\"1970-06-22T00:00:00Z\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_LATER \u003d TimeHelper.parseInstant(\"1970-01-01T00:00:00Z\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_NOW \u003d TimeHelper.parseInstant(\"1970-02-14T00:00:00Z\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        TIME_REPRESENTS_DEFAULT_TIMESTAMP \u003d TimeHelper.parseInstant(\"2011-01-01T00:00:00Z\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String TEST_EMAIL_DOMAIN \u003d \"@gmail.tmt\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    // Other Constants"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private Const() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Utility class containing constants"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Represents role names for instructors based on their permission settings."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static class InstructorPermissionRoleNames {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_COOWNER \u003d \"Co-owner\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_MANAGER \u003d \"Manager\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_OBSERVER \u003d \"Observer\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_TUTOR \u003d \"Tutor\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PERMISSION_ROLE_CUSTOM \u003d \"Custom\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Represents atomic permission for instructors."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static class InstructorPermissions {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_COURSE \u003d \"canmodifycourse\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_INSTRUCTOR \u003d \"canmodifyinstructor\";"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_SESSION \u003d \"canmodifysession\";"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_STUDENT \u003d \"canmodifystudent\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public static final String CAN_VIEW_STUDENT_IN_SECTIONS \u003d \"canviewstudentinsection\";"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public static final String CAN_VIEW_SESSION_IN_SECTIONS \u003d \"canviewsessioninsection\";"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public static final String CAN_SUBMIT_SESSION_IN_SECTIONS \u003d \"cansubmitsessioninsection\";"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public static final String CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS \u003d \"canmodifysessioncommentinsection\";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Represents keys for HTTP requests to the API layer."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static class ParamsNames {"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public static final String IS_IN_RECYCLE_BIN \u003d \"isinrecyclebin\";"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public static final String IS_STUDENT_REJOINING \u003d \"isstudentrejoining\";"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public static final String IS_INSTRUCTOR_REJOINING \u003d \"isinstructorrejoining\";"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public static final String COURSE_ID \u003d \"courseid\";"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public static final String COURSE_STATUS \u003d \"coursestatus\";"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_ID \u003d \"instructorid\";"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_EMAIL \u003d \"instructoremail\";"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_INSTITUTION \u003d \"instructorinstitution\";"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public static final String IS_CREATING_ACCOUNT \u003d \"iscreatingaccount\";"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public static final String IS_INSTRUCTOR \u003d \"isinstructor\";"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_NAME \u003d \"fsname\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_STARTTIME \u003d \"starttime\";"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_ENDTIME \u003d \"endtime\";"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_MODERATED_PERSON \u003d \"moderatedperson\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_LOG_TYPE \u003d \"fsltype\";"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_LOG_STARTTIME \u003d \"fslstarttime\";"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_LOG_ENDTIME \u003d \"fslendtime\";"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_QUESTION_ID \u003d \"questionid\";"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESPONSE_ID \u003d \"responseid\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESPONSE_COMMENT_ID \u003d \"responsecommentid\";"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESULTS_GROUPBYSECTION \u003d \"frgroupbysection\";"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_RESULTS_SECTION_BY_GIVER_RECEIVER \u003d \"frsessionbygiverreceiver\";"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public static final String PREVIEWAS \u003d \"previewas\";"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public static final String STUDENT_ID \u003d \"googleid\";"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public static final String INVITER_ID \u003d \"invitergoogleid\";"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public static final String REGKEY \u003d \"key\";"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public static final String STUDENT_EMAIL \u003d \"studentemail\";"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public static final String SECTION_NAME \u003d \"sectionname\";"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public static final String TEAM_NAME \u003d \"teamname\";"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public static final String ERROR \u003d \"error\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public static final String USER_ID \u003d \"user\";"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public static final String SEARCH_KEY \u003d \"searchkey\";"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public static final String USER_CAPTCHA_RESPONSE \u003d \"captcharesponse\";"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public static final String EMAIL_TYPE \u003d \"emailtype\";"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public static final String USER_EMAIL \u003d \"useremail\";"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public static final String ENTITY_TYPE \u003d \"entitytype\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public static final String INTENT \u003d \"intent\";"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public static final String TIMEZONE \u003d \"timezone\";"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public static final String NOTIFY_ABOUT_DEADLINES \u003d \"notifydeadlines\";"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_STARTTIME \u003d \"starttime\";"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_ENDTIME \u003d \"endtime\";"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_SEVERITY \u003d \"severity\";"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_MIN_SEVERITY \u003d \"minseverity\";"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_TRACE \u003d \"traceid\";"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_ACTION_CLASS \u003d \"actionclass\";"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EMAIL \u003d \"email\";"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EVENT \u003d \"logevent\";"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_SOURCE_LOCATION_FILE \u003d \"sourcelocationfile\";"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_SOURCE_LOCATION_FUNCTION \u003d \"sourcelocationfunction\";"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EXCEPTION_CLASS \u003d \"exceptionclass\";"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_LATENCY \u003d \"latency\";"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_STATUS \u003d \"status\";"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_VERSION \u003d \"version\";"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_EXTRA_FILTERS \u003d \"extrafilters\";"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public static final String QUERY_LOGS_ORDER \u003d \"order\";"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public static final String LIMIT \u003d \"limit\";"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_ID \u003d \"notificationid\";"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_TARGET_USER \u003d \"usertype\";"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_IS_FETCHING_ALL \u003d \"isfetchingall\";"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public static final String NOTFICATION_END_TIME \u003d \"endtime\";"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Represents custom header names used by the system."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public static class HeaderNames {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public static final String BACKDOOR_KEY \u003d \"Backdoor-Key\";"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public static final String CSRF_KEY \u003d \"CSRF-Key\";"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public static final String WEB_VERSION \u003d \"X-WEB-VERSION\";"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public static final String CSRF_TOKEN \u003d \"X-CSRF-TOKEN\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * The course status respect to the instructor\u0027s point of view."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * This parameter is used to get a course list for instructor."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public static class CourseStatus {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        public static final String ACTIVE \u003d \"active\";"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public static final String ARCHIVED \u003d \"archived\";"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public static final String SOFT_DELETED \u003d \"softDeleted\";"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Represents user types."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public static class EntityType {"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public static final String STUDENT \u003d \"student\";"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR \u003d \"instructor\";"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public static final String ADMIN \u003d \"admin\";"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public static final String MAINTAINER \u003d \"maintainer\";"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * Represents security-related configuration."},{"lineNumber":228,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public static class SecurityConfig {"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        public static final String CSRF_COOKIE_NAME \u003d \"CSRF-TOKEN\";"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        public static final String AUTH_COOKIE_NAME \u003d \"AUTH-TOKEN\";"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * Represents URIs of accessible pages in the front-end in past versions (V6 and before)."},{"lineNumber":238,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Deprecated"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public static class LegacyURIs {"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_JOIN \u003d \"/page/instructorCourseJoin\";"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN \u003d \"/page/studentCourseJoin\";"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN_NEW \u003d \"/page/studentCourseJoinAuthentication\";"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_HOME_PAGE \u003d \"/page/instructorHomePage\";"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        public static final String STUDENT_HOME_PAGE \u003d \"/page/studentHomePage\";"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        public static final String STUDENT_FEEDBACK_SUBMISSION_EDIT_PAGE \u003d \"/page/studentFeedbackSubmissionEditPage\";"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        public static final String STUDENT_FEEDBACK_RESULTS_PAGE \u003d \"/page/studentFeedbackResultsPage\";"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_FEEDBACK_SUBMISSION_EDIT_PAGE \u003d \"/page/instructorFeedbackSubmissionEditPage\";"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_FEEDBACK_RESULTS_PAGE \u003d \"/page/instructorFeedbackResultsPage\";"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * Represents URIs of accessible pages in the front-end."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public static class WebPageURIs {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public static final String LOGIN \u003d \"/login\";"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        public static final String LOGOUT \u003d \"/logout\";"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        private static final String URI_PREFIX \u003d \"/web\";"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"        private static final String STUDENT_PAGE \u003d URI_PREFIX + \"/\" + EntityType.STUDENT;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        private static final String INSTRUCTOR_PAGE \u003d URI_PREFIX + \"/\" + EntityType.INSTRUCTOR;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        private static final String ADMIN_PAGE \u003d URI_PREFIX + \"/\" + EntityType.ADMIN;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        private static final String MAINTAINER_PAGE \u003d URI_PREFIX + \"/\" + EntityType.MAINTAINER;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        private static final String FRONT_PAGE \u003d URI_PREFIX + \"/front\";"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        public static final String JOIN_PAGE \u003d URI_PREFIX + \"/join\";"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"        public static final String ADMIN_HOME_PAGE \u003d ADMIN_PAGE + \"/home\";"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        public static final String ADMIN_ACCOUNTS_PAGE \u003d ADMIN_PAGE + \"/accounts\";"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        public static final String ADMIN_SEARCH_PAGE \u003d ADMIN_PAGE + \"/search\";"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        public static final String ADMIN_SESSIONS_PAGE \u003d ADMIN_PAGE + \"/sessions\";"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        public static final String ADMIN_TIMEZONE_PAGE \u003d ADMIN_PAGE + \"/timezone\";"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        public static final String ADMIN_LOGS_PAGE \u003d ADMIN_PAGE + \"/logs\";"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        public static final String ADMIN_NOTIFICATIONS_PAGE \u003d ADMIN_PAGE + \"/notifications\";"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"        public static final String MAINTAINER_HOME_PAGE \u003d MAINTAINER_PAGE + \"/home\";"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_HOME_PAGE \u003d INSTRUCTOR_PAGE + \"/home\";"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SEARCH_PAGE \u003d INSTRUCTOR_PAGE + \"/search\";"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSIONS_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions\";"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_SUBMISSION_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/submission\";"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_EDIT_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/edit\";"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_INDIVIDUAL_EXTENSION_PAGE \u003d INSTRUCTOR_PAGE"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                + \"/sessions/individual-extension\";"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_RESULTS_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/result\";"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SESSION_REPORT_PAGE \u003d INSTRUCTOR_PAGE + \"/sessions/report\";"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSES_PAGE \u003d INSTRUCTOR_PAGE + \"/courses\";"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_DETAILS_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/details\";"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_EDIT_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/edit\";"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_ENROLL_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/enroll\";"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_STUDENT_DETAILS_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/student/details\";"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_STUDENT_DETAILS_EDIT_PAGE \u003d INSTRUCTOR_PAGE + \"/courses/student/edit\";"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_STUDENT_LIST_PAGE \u003d INSTRUCTOR_PAGE + \"/students\";"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_STUDENT_RECORDS_PAGE \u003d INSTRUCTOR_PAGE + \"/students/records\";"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_STUDENT_ACTIVITY_LOGS_PAGE \u003d INSTRUCTOR_PAGE"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                + \"/courses/student-activity-logs\";"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_NOTIFICATIONS_PAGE \u003d INSTRUCTOR_PAGE + \"/notifications\";"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"        public static final String STUDENT_HOME_PAGE \u003d STUDENT_PAGE + \"/home\";"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_DETAILS_PAGE \u003d STUDENT_PAGE + \"/course\";"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        public static final String STUDENT_SESSION_SUBMISSION_PAGE \u003d STUDENT_PAGE + \"/sessions/submission\";"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        public static final String STUDENT_SESSION_RESULTS_PAGE \u003d STUDENT_PAGE + \"/sessions/result\";"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        public static final String STUDENT_NOTIFICATIONS_PAGE \u003d STUDENT_PAGE + \"/notifications\";"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"        public static final String SESSION_RESULTS_PAGE \u003d URI_PREFIX + \"/sessions/result\";"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        public static final String SESSION_SUBMISSION_PAGE \u003d URI_PREFIX + \"/sessions/submission\";"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        public static final String SESSIONS_LINK_RECOVERY_PAGE \u003d FRONT_PAGE + \"/help/session-links-recovery\";"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * Represents URIs of resource endpoints."},{"lineNumber":313,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    public static class ResourceURIs {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        private static final String URI_PREFIX \u003d \"/webapi\";"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"        public static final String DATABUNDLE \u003d URI_PREFIX + \"/databundle\";"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        public static final String DATABUNDLE_DOCUMENTS \u003d URI_PREFIX + \"/databundle/documents\";"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        public static final String DEADLINE_EXTENSION \u003d URI_PREFIX + \"/deadlineextension\";"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        public static final String EXCEPTION \u003d URI_PREFIX + \"/exception\";"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        public static final String ERROR_REPORT \u003d URI_PREFIX + \"/errorreport\";"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        public static final String AUTH \u003d URI_PREFIX + \"/auth\";"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        public static final String AUTH_REGKEY \u003d URI_PREFIX + \"/auth/regkey\";"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT \u003d URI_PREFIX + \"/account\";"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_RESET \u003d URI_PREFIX + \"/account/reset\";"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_REQUEST \u003d URI_PREFIX + \"/account/request\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_REQUEST_RESET \u003d ACCOUNT_REQUEST + \"/reset\";"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        public static final String ACCOUNTS \u003d URI_PREFIX + \"/accounts\";"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        public static final String RESPONSE_COMMENT \u003d URI_PREFIX + \"/responsecomment\";"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        public static final String COURSE \u003d URI_PREFIX + \"/course\";"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        public static final String COURSE_ARCHIVE \u003d URI_PREFIX + \"/course/archive\";"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        public static final String BIN_COURSE \u003d URI_PREFIX + \"/bin/course\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        public static final String COURSE_SECTIONS \u003d URI_PREFIX + \"/course/sections\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        public static final String COURSES \u003d URI_PREFIX + \"/courses\";"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTORS \u003d URI_PREFIX + \"/instructors\";"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR \u003d URI_PREFIX + \"/instructor\";"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_PRIVILEGE \u003d URI_PREFIX + \"/instructor/privilege\";"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_KEY \u003d URI_PREFIX + \"/instructor/key\";"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        public static final String RESULT \u003d URI_PREFIX + \"/result\";"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        public static final String STUDENTS \u003d URI_PREFIX + \"/students\";"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        public static final String STUDENT \u003d URI_PREFIX + \"/student\";"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        public static final String STUDENT_KEY \u003d URI_PREFIX + \"/student/key\";"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION \u003d URI_PREFIX + \"/notification\";"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATIONS \u003d URI_PREFIX + \"/notifications\";"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        public static final String NOTIFICATION_READ \u003d URI_PREFIX + \"/notification/read\";"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        public static final String SESSIONS_ONGOING \u003d URI_PREFIX + \"/sessions/ongoing\";"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        public static final String SESSION \u003d URI_PREFIX + \"/session\";"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        public static final String SESSION_PUBLISH \u003d URI_PREFIX + \"/session/publish\";"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        public static final String SESSION_REMIND_SUBMISSION \u003d URI_PREFIX + \"/session/remind/submission\";"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        public static final String SESSION_REMIND_RESULT \u003d URI_PREFIX + \"/session/remind/result\";"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        public static final String SESSION_STATS \u003d URI_PREFIX + \"/session/stats\";"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        public static final String SESSION_SUBMITTED_GIVER_SET \u003d URI_PREFIX + \"/session/submitted/giverset\";"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        public static final String SESSIONS \u003d URI_PREFIX + \"/sessions\";"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        public static final String SEARCH_ACCOUNT_REQUESTS \u003d URI_PREFIX + \"/search/accountrequests\";"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        public static final String SEARCH_INSTRUCTORS \u003d URI_PREFIX + \"/search/instructors\";"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        public static final String SEARCH_STUDENTS \u003d URI_PREFIX + \"/search/students\";"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        public static final String BIN_SESSION \u003d URI_PREFIX + \"/bin/session\";"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        public static final String QUESTIONS \u003d URI_PREFIX + \"/questions\";"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        public static final String QUESTION \u003d URI_PREFIX + \"/question\";"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        public static final String QUESTION_RECIPIENTS \u003d URI_PREFIX + \"/question/recipients\";"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        public static final String RESPONSES \u003d URI_PREFIX + \"/responses\";"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        public static final String USAGE_STATISTICS \u003d URI_PREFIX + \"/usagestats\";"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        public static final String HAS_RESPONSES \u003d URI_PREFIX + \"/hasResponses\";"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        public static final String JOIN \u003d URI_PREFIX + \"/join\";"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        public static final String JOIN_REMIND \u003d URI_PREFIX + \"/join/remind\";"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        public static final String TIMEZONE \u003d URI_PREFIX + \"/timezone\";"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        public static final String SESSION_LINKS_RECOVERY \u003d URI_PREFIX + \"/sessionlinksrecovery\";"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        public static final String EMAIL \u003d URI_PREFIX + \"/email\";"},{"lineNumber":369,"author":{"gitId":"-"},"content":"        public static final String SESSION_LOGS \u003d URI_PREFIX + \"/logs/session\";"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        public static final String LOGS \u003d URI_PREFIX + \"/logs/query\";"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        public static final String ACTION_CLASS \u003d URI_PREFIX + \"/actionclass\";"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        public static final String USER_COOKIE \u003d URI_PREFIX + \"/cookie\";"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":376,"author":{"gitId":"-"},"content":"     * Represents URIs of endpoints used by cron jobs."},{"lineNumber":377,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    public static class CronJobURIs {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        private static final String URI_PREFIX \u003d \"/auto\";"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_LOG_COMPILATION \u003d URI_PREFIX + \"/compileLogs\";"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_DATASTORE_BACKUP \u003d URI_PREFIX + \"/datastoreBackup\";"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_OPENING_SOON_REMINDERS \u003d"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionOpeningSoonReminders\";"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_OPENING_REMINDERS \u003d"},{"lineNumber":386,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionOpeningReminders\";"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_CLOSED_REMINDERS \u003d"},{"lineNumber":388,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionClosedReminders\";"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_CLOSING_REMINDERS \u003d"},{"lineNumber":390,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionClosingReminders\";"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_FEEDBACK_PUBLISHED_REMINDERS \u003d"},{"lineNumber":392,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionPublishedReminders\";"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        public static final String AUTOMATED_USAGE_STATISTICS_COLLECTION \u003d"},{"lineNumber":394,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/calculateUsageStatistics\";"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":398,"author":{"gitId":"-"},"content":"     * Configurations for task queue."},{"lineNumber":399,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    public static class TaskQueue {"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        public static final String URI_PREFIX \u003d \"/worker\";"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_PUBLISHED_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":404,"author":{"gitId":"-"},"content":"                \"feedback-session-published-email-queue\";"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_PUBLISHED_EMAIL_WORKER_URL \u003d"},{"lineNumber":406,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionPublishedEmail\";"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_RESEND_PUBLISHED_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":409,"author":{"gitId":"-"},"content":"                \"feedback-session-resend-published-email-queue\";"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_RESEND_PUBLISHED_EMAIL_WORKER_URL \u003d"},{"lineNumber":411,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionResendPublishedEmail\";"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_EMAIL_QUEUE_NAME \u003d \"feedback-session-remind-email-queue\";"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/feedbackSessionRemindEmail\";"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_PARTICULAR_USERS_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":417,"author":{"gitId":"-"},"content":"                \"feedback-session-remind-particular-users-email-queue\";"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_REMIND_PARTICULAR_USERS_EMAIL_WORKER_URL \u003d"},{"lineNumber":419,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionRemindParticularUsersEmail\";"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_UNPUBLISHED_EMAIL_QUEUE_NAME \u003d"},{"lineNumber":422,"author":{"gitId":"-"},"content":"                \"feedback-session-unpublished-email-queue\";"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        public static final String FEEDBACK_SESSION_UNPUBLISHED_EMAIL_WORKER_URL \u003d"},{"lineNumber":424,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/feedbackSessionUnpublishedEmail\";"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_JOIN_EMAIL_QUEUE_NAME \u003d \"instructor-course-join-email-queue\";"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_COURSE_JOIN_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/instructorCourseJoinEmail\";"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"        public static final String SEND_EMAIL_QUEUE_NAME \u003d \"send-email-queue\";"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        public static final String SEND_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/sendEmail\";"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN_EMAIL_QUEUE_NAME \u003d \"student-course-join-email-queue\";"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        public static final String STUDENT_COURSE_JOIN_EMAIL_WORKER_URL \u003d URI_PREFIX + \"/studentCourseJoinEmail\";"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"        public static final String SEARCH_INDEXING_QUEUE_NAME \u003d \"search-indexing-queue\";"},{"lineNumber":436,"author":{"gitId":"-"},"content":"        public static final String INSTRUCTOR_SEARCH_INDEXING_WORKER_URL \u003d URI_PREFIX + \"/instructorSearchIndexing\";"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        public static final String ACCOUNT_REQUEST_SEARCH_INDEXING_WORKER_URL \u003d"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                URI_PREFIX + \"/accountRequestSearchIndexing\";"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        public static final String STUDENT_SEARCH_INDEXING_WORKER_URL \u003d URI_PREFIX + \"/studentSearchIndexing\";"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":3,"-":439}},{"path":"src/main/java/teammates/common/util/FieldValidator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.common.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.function.BiPredicate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":21,"author":{"gitId":"EuniceSim142"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Used to handle the data validation aspect e.g. validate emails, names, etc."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public final class FieldValidator {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /////////////////"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // FIELD TYPES //"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /////////////////"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // name-related"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String PERSON_NAME_FIELD_NAME \u003d \"person name\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final int PERSON_NAME_MAX_LENGTH \u003d 100;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COURSE_NAME_FIELD_NAME \u003d \"course name\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final int COURSE_NAME_MAX_LENGTH \u003d 80;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String FEEDBACK_SESSION_NAME_FIELD_NAME \u003d \"feedback session name\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final int FEEDBACK_SESSION_NAME_MAX_LENGTH \u003d 64;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String TEAM_NAME_FIELD_NAME \u003d \"team name\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final int TEAM_NAME_MAX_LENGTH \u003d 60;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String SECTION_NAME_FIELD_NAME \u003d \"section name\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final int SECTION_NAME_MAX_LENGTH \u003d 60;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String INSTITUTE_NAME_FIELD_NAME \u003d \"institute name\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final int INSTITUTE_NAME_MAX_LENGTH \u003d 64;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // email-related"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_FIELD_NAME \u003d \"email\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final int EMAIL_MAX_LENGTH \u003d 254;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // notification-related"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_TITLE_FIELD_NAME \u003d \"notification title\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_MESSAGE_FIELD_NAME \u003d \"notification message\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_NAME \u003d \"notification\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_VISIBLE_TIME_FIELD_NAME \u003d \"time when the notification will be visible\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_EXPIRY_TIME_FIELD_NAME \u003d \"time when the notification will expire\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_STYLE_FIELD_NAME \u003d \"notification style\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_TARGET_USER_FIELD_NAME \u003d \"notification target user\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final int NOTIFICATION_TITLE_MAX_LENGTH \u003d 80;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final List\u003cString\u003e NOTIFICATION_STYLE_ACCEPTED_VALUES \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Collections.unmodifiableList("},{"lineNumber":67,"author":{"gitId":"-"},"content":"                    Arrays.stream("},{"lineNumber":68,"author":{"gitId":"-"},"content":"                            NotificationStyle.values())"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                            .map(NotificationStyle::toString)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                            .collect(Collectors.toList())"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final List\u003cString\u003e NOTIFICATION_TARGET_USER_ACCEPTED_VALUES \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            Collections.unmodifiableList("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    Arrays.stream("},{"lineNumber":76,"author":{"gitId":"-"},"content":"                            NotificationTargetUser.values())"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                            .map(NotificationTargetUser::toString)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                            .collect(Collectors.toList())"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // others"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String STUDENT_ROLE_COMMENTS_FIELD_NAME \u003d \"comments about a student enrolled in a course\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final int STUDENT_ROLE_COMMENTS_MAX_LENGTH \u003d 500;"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Field: Course ID"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Unique: system-wide, not just among the course of that instructor."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Technically, we can get rid of CourseID field and enforce users to use"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * CourseName as a unique ID. In that case, we have to enforce CourseName"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * must be unique across the full system. However, users expect names to be"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * non-unique and more tolerant of enforcing uniqueness on an ID. Whenever"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * possible, must be displayed in the same case as user entered. This is"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * because the case of the letters can mean something. Furthermore,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * converting to same case can reduce readability."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Course ID is necessary because the course name is not unique enough to"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * distinguish between courses because the same course can be offered"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * multiple times and courses can be shared between instructors and many"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * students. Allowing same Course ID among different instructors could be"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * problematic if we allow multiple instructors for a single course."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * TODO: make case insensitive"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static final String COURSE_ID_FIELD_NAME \u003d \"course ID\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static final int COURSE_ID_MAX_LENGTH \u003d 64;"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static final String SESSION_NAME \u003d \"feedback session\";"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static final String SESSION_START_TIME_FIELD_NAME \u003d \"start time\";"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static final String SESSION_END_TIME_FIELD_NAME \u003d \"end time\";"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static final String TIME_ZONE_FIELD_NAME \u003d \"time zone\";"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_ID_FIELD_NAME \u003d \"Google ID\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static final int GOOGLE_ID_MAX_LENGTH \u003d 254;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static final String ROLE_FIELD_NAME \u003d \"access-level\";"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static final List\u003cString\u003e ROLE_ACCEPTED_VALUES \u003d"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            Collections.unmodifiableList("},{"lineNumber":118,"author":{"gitId":"-"},"content":"                    Arrays.asList(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_MANAGER,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_OBSERVER,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_TUTOR,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_CUSTOM));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static final String GIVER_TYPE_NAME \u003d \"feedback giver\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public static final String RECIPIENT_TYPE_NAME \u003d \"feedback recipient\";"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static final String VIEWER_TYPE_NAME \u003d \"feedback viewer\";"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static final String EXTENDED_DEADLINES_FIELD_NAME \u003d \"extended deadlines\";"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ////////////////////"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    // ERROR MESSAGES //"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    ////////////////////"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static final String REASON_TOO_LONG \u003d \"is too long\";"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static final String REASON_INCORRECT_FORMAT \u003d \"is not in the correct format\";"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static final String REASON_CONTAINS_INVALID_CHAR \u003d \"contains invalid characters\";"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static final String REASON_START_WITH_NON_ALPHANUMERIC_CHAR \u003d \"starts with a non-alphanumeric character\";"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static final String REASON_UNAVAILABLE_AS_CHOICE \u003d \"is not available as a choice\";"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    // error message components"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static final String EMPTY_STRING_ERROR_INFO \u003d"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            \"The field \u0027${fieldName}\u0027 is empty.\";"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public static final String ERROR_INFO \u003d"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            \"\\\"${userInput}\\\" is not acceptable to TEAMMATES as a/an ${fieldName} because it ${reason}.\";"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_POSSIBLY_EMPTY \u003d"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            \"The value of a/an ${fieldName} should be no longer than ${maxLength} characters.\";"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY \u003d"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_POSSIBLY_EMPTY + \" It should not be empty.\";"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY_NO_SPACES \u003d"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            \"It cannot be longer than ${maxLength} characters, cannot be empty and cannot contain spaces.\";"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_FORMAT_FOR_INVALID_NAME \u003d"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            \"A/An ${fieldName} must start with an alphanumeric character, and cannot contain any vertical bar \""},{"lineNumber":153,"author":{"gitId":"-"},"content":"            + \"(|) or percent sign (%).\";"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    // generic (i.e., not specific to any field) error messages"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public static final String SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE \u003d"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public static final String SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE_EMPTY_STRING \u003d"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            EMPTY_STRING_ERROR_INFO + \" \" + HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public static final String SIZE_CAPPED_POSSIBLY_EMPTY_STRING_ERROR_MESSAGE \u003d"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_POSSIBLY_EMPTY;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static final String SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE_EMPTY_STRING_FOR_SESSION_NAME \u003d"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \"The field \u0027${fieldName}\u0027 should not be empty.\" + \" \""},{"lineNumber":164,"author":{"gitId":"-"},"content":"            + \"The value of \u0027${fieldName}\u0027 field should be no longer than ${maxLength} characters.\";"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_ERROR_MESSAGE \u003d"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_FORMAT_FOR_INVALID_NAME;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public static final String TEAM_NAME_IS_VALID_EMAIL_ERROR_MESSAGE \u003d"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \"The field \" + TEAM_NAME_FIELD_NAME + \" is not acceptable to TEAMMATES as the suggested value for \""},{"lineNumber":169,"author":{"gitId":"-"},"content":"                    + TEAM_NAME_FIELD_NAME + \" can be mis-interpreted as an email.\";"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public static final String WHITESPACE_ONLY_OR_EXTRA_WHITESPACE_ERROR_MESSAGE \u003d"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            \"The provided ${fieldName} is not acceptable to TEAMMATES as it contains only whitespace \""},{"lineNumber":173,"author":{"gitId":"-"},"content":"            + \"or contains extra spaces at the beginning or at the end of the text.\";"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public static final String NON_HTML_FIELD_ERROR_MESSAGE \u003d"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            \"The provided ${fieldName} is not acceptable to TEAMMATES \""},{"lineNumber":176,"author":{"gitId":"-"},"content":"                    + \"as it cannot contain the following special html characters\""},{"lineNumber":177,"author":{"gitId":"-"},"content":"                    + \" in brackets: (\u003c \u003e \\\" / \u0027 \u0026)\";"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public static final String NON_NULL_FIELD_ERROR_MESSAGE \u003d"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            \"The provided ${fieldName} is not acceptable to TEAMMATES as it cannot be empty.\";"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    // field-specific error messages"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_EMAIL \u003d"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            \"An email address contains some text followed by one \u0027@\u0027 sign followed by some more text, and should end \""},{"lineNumber":184,"author":{"gitId":"-"},"content":"                    + \"with a top level domain address like .com. \""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            + HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY_NO_SPACES;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public static final String EMAIL_ERROR_MESSAGE \u003d"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_EMAIL;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public static final String EMAIL_ERROR_MESSAGE_EMPTY_STRING \u003d"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            EMPTY_STRING_ERROR_INFO + \" \" + HINT_FOR_CORRECT_EMAIL;"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_COURSE_ID \u003d"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            \"A course ID can contain letters, numbers, fullstops, hyphens, underscores, and dollar signs. \""},{"lineNumber":193,"author":{"gitId":"-"},"content":"            + HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY_NO_SPACES;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public static final String COURSE_ID_ERROR_MESSAGE \u003d"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_COURSE_ID;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public static final String COURSE_ID_ERROR_MESSAGE_EMPTY_STRING \u003d"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            EMPTY_STRING_ERROR_INFO + \" \" + HINT_FOR_CORRECT_COURSE_ID;"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_FORMAT_OF_GOOGLE_ID \u003d"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            \"A Google ID must be a valid id already registered with Google. \""},{"lineNumber":201,"author":{"gitId":"-"},"content":"            + HINT_FOR_CORRECT_FORMAT_FOR_SIZE_CAPPED_NON_EMPTY_NO_SPACES;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_ID_ERROR_MESSAGE \u003d"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_FORMAT_OF_GOOGLE_ID;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public static final String GOOGLE_ID_ERROR_MESSAGE_EMPTY_STRING \u003d"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            EMPTY_STRING_ERROR_INFO + \" \" + HINT_FOR_CORRECT_FORMAT_OF_GOOGLE_ID;"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_TIME_ZONE \u003d"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            \"The value must be one of the values from the time zone dropdown selector.\";"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public static final String TIME_ZONE_ERROR_MESSAGE \u003d"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            ERROR_INFO + \" \" + HINT_FOR_CORRECT_TIME_ZONE;"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public static final String HINT_FOR_CORRECT_GRACE_PERIOD \u003d"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            \"The value must be one of the options in the grace period dropdown selector.\";"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    public static final String GRACE_PERIOD_NEGATIVE_ERROR_MESSAGE \u003d \"Grace period should not be negative.\" + \" \""},{"lineNumber":215,"author":{"gitId":"-"},"content":"            + HINT_FOR_CORRECT_GRACE_PERIOD;"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public static final String ROLE_ERROR_MESSAGE \u003d"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            \"\\\"%s\\\" is not an accepted \" + ROLE_FIELD_NAME + \" to TEAMMATES. \";"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_STYLE_ERROR_MESSAGE \u003d"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            \"\\\"%s\\\" is not an accepted \" + NOTIFICATION_STYLE_FIELD_NAME + \" to TEAMMATES. \";"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public static final String NOTIFICATION_TARGET_USER_ERROR_MESSAGE \u003d"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            \"\\\"%s\\\" is not an accepted \" + NOTIFICATION_TARGET_USER_FIELD_NAME + \" to TEAMMATES. \";"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public static final String SESSION_VISIBLE_TIME_FIELD_NAME \u003d \"time when the session will be visible\";"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public static final String RESULTS_VISIBLE_TIME_FIELD_NAME \u003d \"time when the results will be visible\";"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public static final String TIME_BEFORE_ERROR_MESSAGE \u003d"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            \"The %s for this %s cannot be earlier than the %s.\";"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    public static final String TIME_BEFORE_OR_EQUAL_ERROR_MESSAGE \u003d"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            \"The %s for this %s cannot be earlier than or at the same time as the %s.\";"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public static final String PARTICIPANT_TYPE_ERROR_MESSAGE \u003d \"%s is not a valid %s.\";"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public static final String PARTICIPANT_TYPE_TEAM_ERROR_MESSAGE \u003d"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            \"The feedback recipients cannot be \\\"%s\\\" when the feedback giver is \\\"%s\\\". \""},{"lineNumber":237,"author":{"gitId":"-"},"content":"            + \"Did you mean to use \\\"Self\\\" instead?\";"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public static final String NOT_EXACT_HOUR_ERROR_MESSAGE \u003d \"The %s for this feedback session must be at exact hour mark.\";"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    ///////////////////////////////////////"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    // VALIDATION REGEX FOR INTERNAL USE //"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    ///////////////////////////////////////"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * Must start with alphanumeric character, cannot contain vertical bar(|) or percent sign(%)."},{"lineNumber":247,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public static final String REGEX_NAME \u003d \"^[\\\\p{IsL}\\\\p{IsN}][^|%]*+$\";"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * Allows English alphabet, numbers, underscore,  dot, dollar sign and hyphen."},{"lineNumber":252,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public static final String REGEX_COURSE_ID \u003d \"[a-zA-Z0-9_.$-]+\";"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * Local part:"},{"lineNumber":257,"author":{"gitId":"-"},"content":"     * \u003cli\u003eCan only start with letters, digits, hyphen or plus sign;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"     * \u003cli\u003eSpecial characters allowed are ! # $ % \u0026 \u0027 * + - / \u003d ? ^ _ ` { } ~"},{"lineNumber":259,"author":{"gitId":"-"},"content":"     * \u003cli\u003eDot can only appear between any 2 characters and cannot appear continuously\u003cbr\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * Domain part:"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * \u003cli\u003eOnly allow letters, digits, hyphen and dot; Must end with letters; Must have TLD"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public static final String REGEX_EMAIL \u003d \"^[\\\\w+-][\\\\w+!#$%\u0026\u0027*/\u003d?^_`{}~-]*+(\\\\.[\\\\w+!#$%\u0026\u0027*/\u003d?^_`{}~-]+)*+\""},{"lineNumber":264,"author":{"gitId":"-"},"content":"                                            + \"@([A-Za-z0-9-]+\\\\.)+[A-Za-z]+$\";"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * Allows English alphabet, numbers, underscore,  dot and hyphen."},{"lineNumber":268,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public static final String REGEX_GOOGLE_ID_NON_EMAIL \u003d \"[a-zA-Z0-9_.-]+\";"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"    private FieldValidator() {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        // utility class"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        // Intentional private constructor to prevent instantiation."},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    /////////////////////////////////////////"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    // VALIDATION METHODS FOR EXTERNAL USE //"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    /////////////////////////////////////////"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitId":"-"},"content":"     * Checks if {@code email} is not null, not empty, not longer than {@code EMAIL_MAX_LENGTH}, and is a"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * valid email address according to {@code REGEX_EMAIL}."},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code email} is not acceptable."},{"lineNumber":284,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code email} is acceptable."},{"lineNumber":285,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForEmail(String email) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"        if (email.isEmpty()) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            return getPopulatedEmptyStringErrorMessage(EMAIL_ERROR_MESSAGE_EMPTY_STRING, EMAIL_FIELD_NAME,"},{"lineNumber":292,"author":{"gitId":"-"},"content":"                                            EMAIL_MAX_LENGTH);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        } else if (isUntrimmed(email)) {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            return WHITESPACE_ONLY_OR_EXTRA_WHITESPACE_ERROR_MESSAGE.replace(\"${fieldName}\", EMAIL_FIELD_NAME);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        } else if (email.length() \u003e EMAIL_MAX_LENGTH) {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(EMAIL_ERROR_MESSAGE, email, EMAIL_FIELD_NAME,"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                                            REASON_TOO_LONG, EMAIL_MAX_LENGTH);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        } else if (!isValidEmailAddress(email)) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(EMAIL_ERROR_MESSAGE, email, EMAIL_FIELD_NAME,"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                                            REASON_INCORRECT_FORMAT, EMAIL_MAX_LENGTH);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":306,"author":{"gitId":"-"},"content":"     * Checks if {@code gracePeriod} is not negative."},{"lineNumber":307,"author":{"gitId":"-"},"content":"     * @return An explanation why the {@code gracePeriod} is not acceptable."},{"lineNumber":308,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code gracePeriod} is acceptable."},{"lineNumber":309,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForGracePeriod(Duration gracePeriod) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        if (gracePeriod.isNegative()) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            return GRACE_PERIOD_NEGATIVE_ERROR_MESSAGE;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":318,"author":{"gitId":"-"},"content":"     * Checks if {@code googleId} is not null, not empty, not longer than {@code GOOGLE_ID_MAX_LENGTH}, does"},{"lineNumber":319,"author":{"gitId":"-"},"content":"     * not contain any invalid characters (| or %), AND is either a Google username (without the \"@gmail.com\")"},{"lineNumber":320,"author":{"gitId":"-"},"content":"     * or a valid email address."},{"lineNumber":321,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code googleId} is not acceptable."},{"lineNumber":322,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code googleId} is acceptable."},{"lineNumber":323,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForGoogleId(String googleId) {"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"        boolean isValidFullEmail \u003d isValidEmailAddress(googleId);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        boolean isValidEmailWithoutDomain \u003d StringHelper.isMatching(googleId, REGEX_GOOGLE_ID_NON_EMAIL);"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"        if (googleId.isEmpty()) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            return getPopulatedEmptyStringErrorMessage(GOOGLE_ID_ERROR_MESSAGE_EMPTY_STRING,"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                                            GOOGLE_ID_FIELD_NAME, GOOGLE_ID_MAX_LENGTH);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        } else if (isUntrimmed(googleId)) {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"            return WHITESPACE_ONLY_OR_EXTRA_WHITESPACE_ERROR_MESSAGE.replace(\"${fieldName}\", GOOGLE_ID_FIELD_NAME);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        } else if (googleId.length() \u003e GOOGLE_ID_MAX_LENGTH) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(GOOGLE_ID_ERROR_MESSAGE, googleId, GOOGLE_ID_FIELD_NAME,"},{"lineNumber":338,"author":{"gitId":"-"},"content":"                                            REASON_TOO_LONG, GOOGLE_ID_MAX_LENGTH);"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        } else if (!(isValidFullEmail || isValidEmailWithoutDomain)) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(GOOGLE_ID_ERROR_MESSAGE, googleId, GOOGLE_ID_FIELD_NAME,"},{"lineNumber":341,"author":{"gitId":"-"},"content":"                                            REASON_INCORRECT_FORMAT, GOOGLE_ID_MAX_LENGTH);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":347,"author":{"gitId":"-"},"content":"     * Checks if {@code courseId} is not null, not empty, has no surrounding whitespaces, not longer than"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * {@code COURSE_ID_MAX_LENGTH}, is sanitized for HTML, and match the REGEX {@code REGEX_COURSE_ID}."},{"lineNumber":349,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code courseId} is not acceptable."},{"lineNumber":350,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code courseId} is acceptable."},{"lineNumber":351,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForCourseId(String courseId) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"        if (courseId.isEmpty()) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            return getPopulatedEmptyStringErrorMessage(COURSE_ID_ERROR_MESSAGE_EMPTY_STRING,"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                                            COURSE_ID_FIELD_NAME, COURSE_ID_MAX_LENGTH);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        if (isUntrimmed(courseId)) {"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            return WHITESPACE_ONLY_OR_EXTRA_WHITESPACE_ERROR_MESSAGE.replace(\"${fieldName}\","},{"lineNumber":362,"author":{"gitId":"-"},"content":"                    COURSE_ID_FIELD_NAME);"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        if (courseId.length() \u003e COURSE_ID_MAX_LENGTH) {"},{"lineNumber":365,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(COURSE_ID_ERROR_MESSAGE, courseId, COURSE_ID_FIELD_NAME,"},{"lineNumber":366,"author":{"gitId":"-"},"content":"                                            REASON_TOO_LONG, COURSE_ID_MAX_LENGTH);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        if (!StringHelper.isMatching(courseId, REGEX_COURSE_ID)) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(COURSE_ID_ERROR_MESSAGE, courseId, COURSE_ID_FIELD_NAME,"},{"lineNumber":370,"author":{"gitId":"-"},"content":"                                            REASON_INCORRECT_FORMAT, COURSE_ID_MAX_LENGTH);"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":376,"author":{"gitId":"-"},"content":"     * Checks if {@code sectionName} is a non-null non-empty string no longer than the specified length"},{"lineNumber":377,"author":{"gitId":"-"},"content":"     * {@code SECTION_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %)."},{"lineNumber":378,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code sectionName} is not acceptable."},{"lineNumber":379,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code sectionName} is acceptable."},{"lineNumber":380,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForSectionName(String sectionName) {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        return getValidityInfoForAllowedName(SECTION_NAME_FIELD_NAME, SECTION_NAME_MAX_LENGTH, sectionName);"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":386,"author":{"gitId":"-"},"content":"     * Checks if {@code teamName} is a non-null non-empty string no longer than the specified length"},{"lineNumber":387,"author":{"gitId":"-"},"content":"     * {@code TEAM_NAME_MAX_LENGTH}, does not contain any invalid characters (| or %) and is not a valid email."},{"lineNumber":388,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code teamName} is not acceptable."},{"lineNumber":389,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code teamName} is acceptable."},{"lineNumber":390,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTeamName(String teamName) {"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        boolean isValidEmail \u003d isValidEmailAddress(teamName);"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        if (isValidEmail) {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            return TEAM_NAME_IS_VALID_EMAIL_ERROR_MESSAGE;"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        return getValidityInfoForAllowedName(TEAM_NAME_FIELD_NAME, TEAM_NAME_MAX_LENGTH, teamName);"},{"lineNumber":397,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":400,"author":{"gitId":"-"},"content":"     * Checks if the given studentRoleComments is a non-null string no longer than"},{"lineNumber":401,"author":{"gitId":"-"},"content":"     * the specified length {@code STUDENT_ROLE_COMMENTS_MAX_LENGTH}. However, this string can be empty."},{"lineNumber":402,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code studentRoleComments} is not acceptable."},{"lineNumber":403,"author":{"gitId":"-"},"content":"     *         Returns an empty string \"\" if the {@code studentRoleComments} is acceptable."},{"lineNumber":404,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForStudentRoleComments(String studentRoleComments) {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        return getValidityInfoForSizeCappedPossiblyEmptyString(STUDENT_ROLE_COMMENTS_FIELD_NAME,"},{"lineNumber":407,"author":{"gitId":"-"},"content":"                                                               STUDENT_ROLE_COMMENTS_MAX_LENGTH,"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                                                               studentRoleComments);"},{"lineNumber":409,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":412,"author":{"gitId":"-"},"content":"     * Checks if {@code feedbackSessionName} is a non-null non-empty string no longer than the specified length"},{"lineNumber":413,"author":{"gitId":"-"},"content":"     * {@code FEEDBACK_SESSION_NAME_MAX_LENGTH}, does not contain any invalid characters (| or %), and has no"},{"lineNumber":414,"author":{"gitId":"-"},"content":"     * unsanitized HTML characters."},{"lineNumber":415,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code feedbackSessionName} is not acceptable."},{"lineNumber":416,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code feedbackSessionName} is acceptable."},{"lineNumber":417,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForFeedbackSessionName(String feedbackSessionName) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        String errorsFromAllowedNameValidation \u003d getValidityInfoForAllowedName("},{"lineNumber":420,"author":{"gitId":"-"},"content":"                FEEDBACK_SESSION_NAME_FIELD_NAME, FEEDBACK_SESSION_NAME_MAX_LENGTH, feedbackSessionName);"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"        // return early if error already exists because session name is too long etc."},{"lineNumber":423,"author":{"gitId":"-"},"content":"        if (!errorsFromAllowedNameValidation.isEmpty()) {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            return errorsFromAllowedNameValidation;"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"        // checks for unsanitized HTML characters"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        return getValidityInfoForNonHtmlField(FEEDBACK_SESSION_NAME_FIELD_NAME, feedbackSessionName);"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":432,"author":{"gitId":"-"},"content":"     * Checks if {@code courseName} is a non-null non-empty string no longer than the specified length"},{"lineNumber":433,"author":{"gitId":"-"},"content":"     * {@code COURSE_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %)."},{"lineNumber":434,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code courseName} is not acceptable."},{"lineNumber":435,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code courseName} is acceptable."},{"lineNumber":436,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":437,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForCourseName(String courseName) {"},{"lineNumber":438,"author":{"gitId":"-"},"content":"        return getValidityInfoForAllowedName(COURSE_NAME_FIELD_NAME, COURSE_NAME_MAX_LENGTH, courseName);"},{"lineNumber":439,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":442,"author":{"gitId":"-"},"content":"     * Checks if {@code instituteName} is a non-null non-empty string no longer than the specified length"},{"lineNumber":443,"author":{"gitId":"-"},"content":"     * {@code INSTITUTE_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %)."},{"lineNumber":444,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code instituteName} is not acceptable."},{"lineNumber":445,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code instituteName} is acceptable."},{"lineNumber":446,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForInstituteName(String instituteName) {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        return getValidityInfoForAllowedName(INSTITUTE_NAME_FIELD_NAME, INSTITUTE_NAME_MAX_LENGTH,"},{"lineNumber":449,"author":{"gitId":"-"},"content":"                                             instituteName);"},{"lineNumber":450,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":451,"author":{"gitId":"-"},"content":""},{"lineNumber":452,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":453,"author":{"gitId":"-"},"content":"     * Checks if {@code personName} is a non-null non-empty string no longer than the specified length"},{"lineNumber":454,"author":{"gitId":"-"},"content":"     * {@code PERSON_NAME_MAX_LENGTH}, and also does not contain any invalid characters (| or %)."},{"lineNumber":455,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code personName} is not acceptable."},{"lineNumber":456,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code personName} is acceptable."},{"lineNumber":457,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":458,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForPersonName(String personName) {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        return getValidityInfoForAllowedName(PERSON_NAME_FIELD_NAME, PERSON_NAME_MAX_LENGTH, personName);"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":463,"author":{"gitId":"-"},"content":"     * Checks if the given string is a non-null string contained in Java\u0027s list of"},{"lineNumber":464,"author":{"gitId":"-"},"content":"     * regional time zone IDs."},{"lineNumber":465,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code timeZoneValue} is not acceptable."},{"lineNumber":466,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code timeZoneValue} is acceptable."},{"lineNumber":467,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeZone(String timeZoneValue) {"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        assert timeZoneValue !\u003d null;"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        if (!ZoneId.getAvailableZoneIds().contains(timeZoneValue)) {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(TIME_ZONE_ERROR_MESSAGE,"},{"lineNumber":472,"author":{"gitId":"-"},"content":"                    timeZoneValue, TIME_ZONE_FIELD_NAME, REASON_UNAVAILABLE_AS_CHOICE);"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":476,"author":{"gitId":"-"},"content":""},{"lineNumber":477,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":478,"author":{"gitId":"-"},"content":"     * Checks if {@code role} is one of the recognized roles {@link #ROLE_ACCEPTED_VALUES}."},{"lineNumber":479,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":480,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code role} is not acceptable."},{"lineNumber":481,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code role} is acceptable."},{"lineNumber":482,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":483,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForRole(String role) {"},{"lineNumber":484,"author":{"gitId":"-"},"content":"        assert role !\u003d null;"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"        if (!ROLE_ACCEPTED_VALUES.contains(role)) {"},{"lineNumber":487,"author":{"gitId":"-"},"content":"            return String.format(ROLE_ERROR_MESSAGE, role);"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":489,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":493,"author":{"gitId":"-"},"content":"     * Checks if the given name (including person name, institute name, course name, feedback session and team name)"},{"lineNumber":494,"author":{"gitId":"-"},"content":"     * is a non-null non-empty string no longer than the specified length {@code maxLength},"},{"lineNumber":495,"author":{"gitId":"-"},"content":"     * and also does not contain any invalid characters (| or %)."},{"lineNumber":496,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":497,"author":{"gitId":"-"},"content":"     * @param fieldName"},{"lineNumber":498,"author":{"gitId":"-"},"content":"     *            A descriptive name of the field e.g., \"student name\", to be"},{"lineNumber":499,"author":{"gitId":"-"},"content":"     *            used in the return value to make the explanation more"},{"lineNumber":500,"author":{"gitId":"-"},"content":"     *            descriptive."},{"lineNumber":501,"author":{"gitId":"-"},"content":"     * @param value"},{"lineNumber":502,"author":{"gitId":"-"},"content":"     *            The string to be checked."},{"lineNumber":503,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code value} is not acceptable."},{"lineNumber":504,"author":{"gitId":"-"},"content":"     *         Returns an empty string \"\" if the {@code value} is acceptable."},{"lineNumber":505,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":506,"author":{"gitId":"-"},"content":"    static String getValidityInfoForAllowedName(String fieldName, int maxLength, String value) {"},{"lineNumber":507,"author":{"gitId":"-"},"content":""},{"lineNumber":508,"author":{"gitId":"-"},"content":"        assert value !\u003d null : \"Non-null value expected for \" + fieldName;"},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"-"},"content":"        if (value.isEmpty()) {"},{"lineNumber":511,"author":{"gitId":"-"},"content":"            if (FEEDBACK_SESSION_NAME_FIELD_NAME.equals(fieldName)) {"},{"lineNumber":512,"author":{"gitId":"-"},"content":"                return getPopulatedEmptyStringErrorMessage("},{"lineNumber":513,"author":{"gitId":"-"},"content":"                        SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE_EMPTY_STRING_FOR_SESSION_NAME,"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                        fieldName, maxLength);"},{"lineNumber":515,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":516,"author":{"gitId":"-"},"content":"                return getPopulatedEmptyStringErrorMessage(SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE_EMPTY_STRING,"},{"lineNumber":517,"author":{"gitId":"-"},"content":"                        fieldName, maxLength);"},{"lineNumber":518,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        if (isUntrimmed(value)) {"},{"lineNumber":521,"author":{"gitId":"-"},"content":"            return WHITESPACE_ONLY_OR_EXTRA_WHITESPACE_ERROR_MESSAGE.replace(\"${fieldName}\", fieldName);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        if (value.length() \u003e maxLength) {"},{"lineNumber":524,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE, value,"},{"lineNumber":525,"author":{"gitId":"-"},"content":"                                            fieldName, REASON_TOO_LONG, maxLength);"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        if (!Character.isLetterOrDigit(value.codePointAt(0))) {"},{"lineNumber":528,"author":{"gitId":"-"},"content":"            boolean hasStartingBrace \u003d value.charAt(0) \u003d\u003d \u0027{\u0027 \u0026\u0026 value.contains(\"}\");"},{"lineNumber":529,"author":{"gitId":"-"},"content":"            if (!hasStartingBrace) {"},{"lineNumber":530,"author":{"gitId":"-"},"content":"                return getPopulatedErrorMessage(INVALID_NAME_ERROR_MESSAGE, value,"},{"lineNumber":531,"author":{"gitId":"-"},"content":"                                                fieldName, REASON_START_WITH_NON_ALPHANUMERIC_CHAR);"},{"lineNumber":532,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":533,"author":{"gitId":"-"},"content":"            if (!StringHelper.isMatching(value.substring(1), REGEX_NAME)) {"},{"lineNumber":534,"author":{"gitId":"-"},"content":"                return getPopulatedErrorMessage(INVALID_NAME_ERROR_MESSAGE, value, fieldName,"},{"lineNumber":535,"author":{"gitId":"-"},"content":"                                                REASON_CONTAINS_INVALID_CHAR);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":537,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        if (!StringHelper.isMatching(value, REGEX_NAME)) {"},{"lineNumber":540,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(INVALID_NAME_ERROR_MESSAGE, value, fieldName,"},{"lineNumber":541,"author":{"gitId":"-"},"content":"                                            REASON_CONTAINS_INVALID_CHAR);"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":544,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":545,"author":{"gitId":"-"},"content":""},{"lineNumber":546,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":547,"author":{"gitId":"-"},"content":"     * Checks if the notification title is a non-null non-empty string."},{"lineNumber":548,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":549,"author":{"gitId":"-"},"content":"     * @param notificationTitle The title of the notification."},{"lineNumber":550,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code notificationTitle} is not acceptable."},{"lineNumber":551,"author":{"gitId":"-"},"content":"     *         Returns an empty string \"\" if the {@code notificationTitle} is acceptable."},{"lineNumber":552,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":553,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForNotificationTitle(String notificationTitle) {"},{"lineNumber":554,"author":{"gitId":"-"},"content":""},{"lineNumber":555,"author":{"gitId":"-"},"content":"        assert notificationTitle !\u003d null : \"Non-null value expected for notification title\";"},{"lineNumber":556,"author":{"gitId":"-"},"content":""},{"lineNumber":557,"author":{"gitId":"-"},"content":"        if (notificationTitle.isEmpty()) {"},{"lineNumber":558,"author":{"gitId":"-"},"content":"            return getPopulatedEmptyStringErrorMessage(EMPTY_STRING_ERROR_INFO,"},{"lineNumber":559,"author":{"gitId":"-"},"content":"                NOTIFICATION_TITLE_FIELD_NAME, NOTIFICATION_TITLE_MAX_LENGTH);"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        } else if (notificationTitle.length() \u003e NOTIFICATION_TITLE_MAX_LENGTH) {"},{"lineNumber":561,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE, notificationTitle,"},{"lineNumber":562,"author":{"gitId":"-"},"content":"                NOTIFICATION_TITLE_FIELD_NAME, REASON_TOO_LONG, NOTIFICATION_TITLE_MAX_LENGTH);"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":564,"author":{"gitId":"-"},"content":""},{"lineNumber":565,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":566,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":569,"author":{"gitId":"-"},"content":"     * Checks if the notification message is a non-null non-empty string."},{"lineNumber":570,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":571,"author":{"gitId":"-"},"content":"     * @param notificationMessage The notification message."},{"lineNumber":572,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code notificationMessage} is not acceptable."},{"lineNumber":573,"author":{"gitId":"-"},"content":"     *         Returns an empty string \"\" if the {@code notificationMessage} is acceptable."},{"lineNumber":574,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":575,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForNotificationBody(String notificationMessage) {"},{"lineNumber":576,"author":{"gitId":"-"},"content":""},{"lineNumber":577,"author":{"gitId":"-"},"content":"        assert notificationMessage !\u003d null : \"Non-null value expected for notification message\";"},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":"        if (notificationMessage.isEmpty()) {"},{"lineNumber":580,"author":{"gitId":"-"},"content":"            return getPopulatedEmptyStringErrorMessage(EMPTY_STRING_ERROR_INFO, NOTIFICATION_MESSAGE_FIELD_NAME, 0);"},{"lineNumber":581,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":584,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":585,"author":{"gitId":"-"},"content":""},{"lineNumber":586,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":587,"author":{"gitId":"-"},"content":"     * Checks if {@code style} is one of the recognized notification style {@link #NOTIFICATION_STYLE_ACCEPTED_VALUES}."},{"lineNumber":588,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":589,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code style} is not acceptable."},{"lineNumber":590,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code style} is acceptable."},{"lineNumber":591,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":592,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForNotificationStyle(String style) {"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        assert style !\u003d null;"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":595,"author":{"gitId":"-"},"content":"            NotificationStyle.valueOf(style);"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":597,"author":{"gitId":"-"},"content":"            return String.format(NOTIFICATION_STYLE_ERROR_MESSAGE, style);"},{"lineNumber":598,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":600,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":601,"author":{"gitId":"-"},"content":""},{"lineNumber":602,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":603,"author":{"gitId":"-"},"content":"     * Checks if {@code targetUser} is one of the"},{"lineNumber":604,"author":{"gitId":"-"},"content":"     * recognized notification target user groups {@link #NOTIFICATION_TARGET_USER_ACCEPTED_VALUES}."},{"lineNumber":605,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":606,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code targetUser} is not acceptable."},{"lineNumber":607,"author":{"gitId":"-"},"content":"     *         Returns an empty string if the {@code targetUser} is acceptable."},{"lineNumber":608,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":609,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForNotificationTargetUser(String targetUser) {"},{"lineNumber":610,"author":{"gitId":"-"},"content":"        assert targetUser !\u003d null;"},{"lineNumber":611,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":612,"author":{"gitId":"-"},"content":"            NotificationTargetUser.valueOf(targetUser);"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":614,"author":{"gitId":"-"},"content":"            return String.format(NOTIFICATION_TARGET_USER_ERROR_MESSAGE, targetUser);"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":616,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":617,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":620,"author":{"gitId":"-"},"content":"     * Checks if the given string is a non-null string no longer than"},{"lineNumber":621,"author":{"gitId":"-"},"content":"     * the specified length {@code maxLength}. However, this string can be empty."},{"lineNumber":622,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":623,"author":{"gitId":"-"},"content":"     * @param fieldName"},{"lineNumber":624,"author":{"gitId":"-"},"content":"     *            A descriptive name of the field e.g., \"student name\", to be"},{"lineNumber":625,"author":{"gitId":"-"},"content":"     *            used in the return value to make the explanation more"},{"lineNumber":626,"author":{"gitId":"-"},"content":"     *            descriptive."},{"lineNumber":627,"author":{"gitId":"-"},"content":"     * @param value"},{"lineNumber":628,"author":{"gitId":"-"},"content":"     *            The string to be checked."},{"lineNumber":629,"author":{"gitId":"-"},"content":"     * @return An explanation of why the {@code value} is not acceptable."},{"lineNumber":630,"author":{"gitId":"-"},"content":"     *         Returns an empty string \"\" if the {@code value} is acceptable."},{"lineNumber":631,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":632,"author":{"gitId":"-"},"content":"    static String getValidityInfoForSizeCappedPossiblyEmptyString(String fieldName, int maxLength, String value) {"},{"lineNumber":633,"author":{"gitId":"-"},"content":"        assert value !\u003d null : \"Non-null value expected for \" + fieldName;"},{"lineNumber":634,"author":{"gitId":"-"},"content":""},{"lineNumber":635,"author":{"gitId":"-"},"content":"        if (isUntrimmed(value)) {"},{"lineNumber":636,"author":{"gitId":"-"},"content":"            return WHITESPACE_ONLY_OR_EXTRA_WHITESPACE_ERROR_MESSAGE.replace(\"${fieldName}\", fieldName);"},{"lineNumber":637,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":638,"author":{"gitId":"-"},"content":"        if (value.length() \u003e maxLength) {"},{"lineNumber":639,"author":{"gitId":"-"},"content":"            return getPopulatedErrorMessage(SIZE_CAPPED_POSSIBLY_EMPTY_STRING_ERROR_MESSAGE, value,"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                                            fieldName, REASON_TOO_LONG, maxLength);"},{"lineNumber":641,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":643,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":644,"author":{"gitId":"-"},"content":""},{"lineNumber":645,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":646,"author":{"gitId":"-"},"content":"     * Checks if the {@code startTime} is valid to be used as a session start time."},{"lineNumber":647,"author":{"gitId":"-"},"content":"     * Returns an empty string if it is valid, or an error message otherwise."},{"lineNumber":648,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":649,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThe {@code startTime} is valid if it is after 2 hours before now, before 90 days from now"},{"lineNumber":650,"author":{"gitId":"-"},"content":"     * and at exact hour mark."},{"lineNumber":651,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":652,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForNewStartTime(Instant startTime, String timeZone) {"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        Instant twoHoursBeforeNow \u003d TimeHelper.getInstantHoursOffsetFromNow(-2);"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        String earlierThanThreeHoursBeforeNowError \u003d getInvalidityInfoForFirstTimeComparedToSecondTime("},{"lineNumber":655,"author":{"gitId":"-"},"content":"                twoHoursBeforeNow, startTime, SESSION_NAME,"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                \"2 hours before now\", SESSION_START_TIME_FIELD_NAME,"},{"lineNumber":657,"author":{"gitId":"-"},"content":"                (firstTime, secondTime) -\u003e firstTime.isBefore(secondTime) || firstTime.equals(secondTime),"},{"lineNumber":658,"author":{"gitId":"-"},"content":"                \"The %s for this %s cannot be earlier than %s.\");"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        if (!earlierThanThreeHoursBeforeNowError.isEmpty()) {"},{"lineNumber":660,"author":{"gitId":"-"},"content":"            return earlierThanThreeHoursBeforeNowError;"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":662,"author":{"gitId":"-"},"content":""},{"lineNumber":663,"author":{"gitId":"-"},"content":"        Instant ninetyDaysFromNow \u003d TimeHelper.getInstantDaysOffsetFromNow(90);"},{"lineNumber":664,"author":{"gitId":"-"},"content":"        String laterThanNinetyDaysFromNowError \u003d getInvalidityInfoForFirstTimeComparedToSecondTime("},{"lineNumber":665,"author":{"gitId":"-"},"content":"                ninetyDaysFromNow, startTime, SESSION_NAME,"},{"lineNumber":666,"author":{"gitId":"-"},"content":"                \"90 days from now\", SESSION_START_TIME_FIELD_NAME,"},{"lineNumber":667,"author":{"gitId":"-"},"content":"                (firstTime, secondTime) -\u003e firstTime.isAfter(secondTime) || firstTime.equals(secondTime),"},{"lineNumber":668,"author":{"gitId":"-"},"content":"                \"The %s for this %s cannot be later than %s.\");"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        if (!laterThanNinetyDaysFromNowError.isEmpty()) {"},{"lineNumber":670,"author":{"gitId":"-"},"content":"            return laterThanNinetyDaysFromNowError;"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"-"},"content":"        String notExactHourError \u003d getInvalidityInfoForExactHourTime(startTime, timeZone, \"start time\");"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        if (!notExactHourError.isEmpty()) {"},{"lineNumber":675,"author":{"gitId":"-"},"content":"            return notExactHourError;"},{"lineNumber":676,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":677,"author":{"gitId":"-"},"content":""},{"lineNumber":678,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":679,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":680,"author":{"gitId":"-"},"content":""},{"lineNumber":681,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":682,"author":{"gitId":"-"},"content":"     * Checks if the {@code endTime} is valid to be used as a session end time."},{"lineNumber":683,"author":{"gitId":"-"},"content":"     * Returns an empty string if it is valid, or an error message otherwise."},{"lineNumber":684,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":685,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThe {@code endTime} is valid if it is after 1 hour before now, before 180 days from now"},{"lineNumber":686,"author":{"gitId":"-"},"content":"     * and at exact hour mark."},{"lineNumber":687,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":688,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForNewEndTime(Instant endTime, String timeZone) {"},{"lineNumber":689,"author":{"gitId":"-"},"content":"        Instant oneHourBeforeNow \u003d TimeHelper.getInstantHoursOffsetFromNow(-1);"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        String earlierThanThreeHoursBeforeNowError \u003d getInvalidityInfoForFirstTimeComparedToSecondTime("},{"lineNumber":691,"author":{"gitId":"-"},"content":"                oneHourBeforeNow, endTime, SESSION_NAME,"},{"lineNumber":692,"author":{"gitId":"-"},"content":"                \"1 hour before now\", SESSION_END_TIME_FIELD_NAME,"},{"lineNumber":693,"author":{"gitId":"-"},"content":"                (firstTime, secondTime) -\u003e firstTime.isBefore(secondTime) || firstTime.equals(secondTime),"},{"lineNumber":694,"author":{"gitId":"-"},"content":"                \"The %s for this %s cannot be earlier than %s.\");"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        if (!earlierThanThreeHoursBeforeNowError.isEmpty()) {"},{"lineNumber":696,"author":{"gitId":"-"},"content":"            return earlierThanThreeHoursBeforeNowError;"},{"lineNumber":697,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"        Instant oneHundredEightyDaysFromNow \u003d TimeHelper.getInstantDaysOffsetFromNow(180);"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        String laterThanOneHundredEightyDaysError \u003d getInvalidityInfoForFirstTimeComparedToSecondTime("},{"lineNumber":701,"author":{"gitId":"-"},"content":"                oneHundredEightyDaysFromNow, endTime, SESSION_NAME,"},{"lineNumber":702,"author":{"gitId":"-"},"content":"                \"180 days from now\", SESSION_END_TIME_FIELD_NAME,"},{"lineNumber":703,"author":{"gitId":"-"},"content":"                (firstTime, secondTime) -\u003e firstTime.isAfter(secondTime) || firstTime.equals(secondTime),"},{"lineNumber":704,"author":{"gitId":"-"},"content":"                \"The %s for this %s cannot be later than %s.\");"},{"lineNumber":705,"author":{"gitId":"-"},"content":"        if (!laterThanOneHundredEightyDaysError.isEmpty()) {"},{"lineNumber":706,"author":{"gitId":"-"},"content":"            return laterThanOneHundredEightyDaysError;"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":708,"author":{"gitId":"-"},"content":""},{"lineNumber":709,"author":{"gitId":"-"},"content":"        String notExactHourError \u003d getInvalidityInfoForExactHourTime(endTime, timeZone, \"end time\");"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        if (!notExactHourError.isEmpty()) {"},{"lineNumber":711,"author":{"gitId":"-"},"content":"            return notExactHourError;"},{"lineNumber":712,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":713,"author":{"gitId":"-"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":715,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":716,"author":{"gitId":"-"},"content":""},{"lineNumber":717,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":718,"author":{"gitId":"-"},"content":"     * Checks if Session Start Time is before Session End Time."},{"lineNumber":719,"author":{"gitId":"-"},"content":"     * @return Error string if {@code sessionStart} is before {@code sessionEnd}"},{"lineNumber":720,"author":{"gitId":"-"},"content":"     *         Empty string if {@code sessionStart} is after {@code sessionEnd}"},{"lineNumber":721,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":722,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeForSessionStartAndEnd(Instant sessionStart, Instant sessionEnd) {"},{"lineNumber":723,"author":{"gitId":"-"},"content":"        return getInvalidityInfoForFirstTimeIsBeforeSecondTime("},{"lineNumber":724,"author":{"gitId":"-"},"content":"                sessionStart, sessionEnd, SESSION_NAME, SESSION_START_TIME_FIELD_NAME, SESSION_END_TIME_FIELD_NAME);"},{"lineNumber":725,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":726,"author":{"gitId":"-"},"content":""},{"lineNumber":727,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":728,"author":{"gitId":"-"},"content":"     * Checks if Session Visibility Start Time is before Session Start Time."},{"lineNumber":729,"author":{"gitId":"-"},"content":"     * @return Error string if {@code visibilityStart} is before {@code sessionStart}"},{"lineNumber":730,"author":{"gitId":"-"},"content":"     *         Empty string if {@code visibilityStart} is after {@code sessionStart}"},{"lineNumber":731,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":732,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeForVisibilityStartAndSessionStart("},{"lineNumber":733,"author":{"gitId":"-"},"content":"            Instant visibilityStart, Instant sessionStart) {"},{"lineNumber":734,"author":{"gitId":"-"},"content":"        return getInvalidityInfoForFirstTimeIsBeforeSecondTime(visibilityStart, sessionStart,"},{"lineNumber":735,"author":{"gitId":"-"},"content":"                SESSION_NAME, SESSION_VISIBLE_TIME_FIELD_NAME, SESSION_START_TIME_FIELD_NAME);"},{"lineNumber":736,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":737,"author":{"gitId":"-"},"content":""},{"lineNumber":738,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":739,"author":{"gitId":"-"},"content":"     * Checks if the {@code visibilityStart} is valid to be used as a session visible start time."},{"lineNumber":740,"author":{"gitId":"-"},"content":"     * Returns an empty string if it is valid, or an error message otherwise."},{"lineNumber":741,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":742,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThe {@code visibilityStart} is valid if it is less than 30 days before {@code sessionStart}."},{"lineNumber":743,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":744,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeForNewVisibilityStart(Instant visibilityStart, Instant sessionStart) {"},{"lineNumber":745,"author":{"gitId":"-"},"content":"        Instant visibilityStartThirtyDaysBeforeSessionStart \u003d sessionStart.minus(Duration.ofDays(30));"},{"lineNumber":746,"author":{"gitId":"-"},"content":"        String visibilityStartMoreThanThirtyDaysBeforeSessionStartError \u003d"},{"lineNumber":747,"author":{"gitId":"-"},"content":"                getInvalidityInfoForFirstTimeComparedToSecondTime("},{"lineNumber":748,"author":{"gitId":"-"},"content":"                        visibilityStartThirtyDaysBeforeSessionStart, visibilityStart, SESSION_NAME,"},{"lineNumber":749,"author":{"gitId":"-"},"content":"                        \"30 days before start time\", SESSION_VISIBLE_TIME_FIELD_NAME,"},{"lineNumber":750,"author":{"gitId":"-"},"content":"                        (firstTime, secondTime) -\u003e firstTime.isBefore(secondTime) || firstTime.equals(secondTime),"},{"lineNumber":751,"author":{"gitId":"-"},"content":"                        \"The %s for this %s cannot be earlier than %s.\");"},{"lineNumber":752,"author":{"gitId":"-"},"content":"        if (!visibilityStartMoreThanThirtyDaysBeforeSessionStartError.isEmpty()) {"},{"lineNumber":753,"author":{"gitId":"-"},"content":"            return visibilityStartMoreThanThirtyDaysBeforeSessionStartError;"},{"lineNumber":754,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":755,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":756,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":757,"author":{"gitId":"-"},"content":""},{"lineNumber":758,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":759,"author":{"gitId":"-"},"content":"     * Checks if Visibility Start Time is before Results Publish Time."},{"lineNumber":760,"author":{"gitId":"-"},"content":"     * @return Error string if {@code visibilityStart} is before {@code resultsPublish}"},{"lineNumber":761,"author":{"gitId":"-"},"content":"     *         Empty string if {@code visibilityStart} is after {@code resultsPublish}"},{"lineNumber":762,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":763,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeForVisibilityStartAndResultsPublish("},{"lineNumber":764,"author":{"gitId":"-"},"content":"            Instant visibilityStart, Instant resultsPublish) {"},{"lineNumber":765,"author":{"gitId":"-"},"content":"        return getInvalidityInfoForFirstTimeIsBeforeSecondTime(visibilityStart, resultsPublish,"},{"lineNumber":766,"author":{"gitId":"-"},"content":"                SESSION_NAME, SESSION_VISIBLE_TIME_FIELD_NAME, RESULTS_VISIBLE_TIME_FIELD_NAME);"},{"lineNumber":767,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":768,"author":{"gitId":"-"},"content":""},{"lineNumber":769,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":770,"author":{"gitId":"-"},"content":"     * Checks if the session end time is before all extended deadlines."},{"lineNumber":771,"author":{"gitId":"-"},"content":"     * @return Error string if any deadline in {@code deadlines} is before {@code sessionEnd}, an empty one otherwise."},{"lineNumber":772,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":773,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeForSessionEndAndExtendedDeadlines("},{"lineNumber":774,"author":{"gitId":"-"},"content":"            Instant sessionEnd, Map\u003cString, Instant\u003e deadlines) {"},{"lineNumber":775,"author":{"gitId":"-"},"content":"        return deadlines.entrySet()"},{"lineNumber":776,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":777,"author":{"gitId":"-"},"content":"                .map(entry -\u003e getInvalidityInfoForFirstTimeIsStrictlyBeforeSecondTime(sessionEnd, entry.getValue(),"},{"lineNumber":778,"author":{"gitId":"-"},"content":"                        SESSION_NAME, SESSION_END_TIME_FIELD_NAME, EXTENDED_DEADLINES_FIELD_NAME))"},{"lineNumber":779,"author":{"gitId":"-"},"content":"                .filter(invalidityInfo -\u003e !invalidityInfo.isEmpty())"},{"lineNumber":780,"author":{"gitId":"-"},"content":"                .findFirst()"},{"lineNumber":781,"author":{"gitId":"-"},"content":"                .orElse(\"\");"},{"lineNumber":782,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":783,"author":{"gitId":"-"},"content":""},{"lineNumber":784,"author":{"gitId":"EuniceSim142"},"content":"    /**"},{"lineNumber":785,"author":{"gitId":"EuniceSim142"},"content":"     * Checks if the session end time is before all extended deadlines."},{"lineNumber":786,"author":{"gitId":"EuniceSim142"},"content":"     * @return Error string if any deadline in {@code deadlines} is before {@code sessionEnd}, an empty one otherwise."},{"lineNumber":787,"author":{"gitId":"EuniceSim142"},"content":"     */"},{"lineNumber":788,"author":{"gitId":"EuniceSim142"},"content":"    public static String getInvalidityInfoForTimeForSessionEndAndExtendedDeadlines("},{"lineNumber":789,"author":{"gitId":"EuniceSim142"},"content":"            Instant sessionEnd, List\u003cDeadlineExtension\u003e deadlineExtensions) {"},{"lineNumber":790,"author":{"gitId":"EuniceSim142"},"content":"        for (DeadlineExtension de : deadlineExtensions) {"},{"lineNumber":791,"author":{"gitId":"EuniceSim142"},"content":"            String err \u003d getInvalidityInfoForFirstTimeIsStrictlyBeforeSecondTime(sessionEnd, de.getEndTime(),"},{"lineNumber":792,"author":{"gitId":"EuniceSim142"},"content":"                    SESSION_NAME, SESSION_END_TIME_FIELD_NAME, EXTENDED_DEADLINES_FIELD_NAME);"},{"lineNumber":793,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":794,"author":{"gitId":"EuniceSim142"},"content":"            if (!err.isEmpty()) {"},{"lineNumber":795,"author":{"gitId":"EuniceSim142"},"content":"                return err;"},{"lineNumber":796,"author":{"gitId":"EuniceSim142"},"content":"            }"},{"lineNumber":797,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":798,"author":{"gitId":"EuniceSim142"},"content":"        return \"\";"},{"lineNumber":799,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":800,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":801,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":802,"author":{"gitId":"-"},"content":"     * Checks if Notification Start Time is before Notification End Time."},{"lineNumber":803,"author":{"gitId":"-"},"content":"     * @return Error string if {@code notificationStart} is before {@code notificationEnd}"},{"lineNumber":804,"author":{"gitId":"-"},"content":"     *         Empty string if {@code notificationStart} is after {@code notificationEnd}"},{"lineNumber":805,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":806,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForTimeForNotificationStartAndEnd("},{"lineNumber":807,"author":{"gitId":"-"},"content":"            Instant notificationStart, Instant notificationExpiry) {"},{"lineNumber":808,"author":{"gitId":"-"},"content":"        return getInvalidityInfoForFirstTimeIsBeforeSecondTime(notificationStart, notificationExpiry,"},{"lineNumber":809,"author":{"gitId":"-"},"content":"                NOTIFICATION_NAME, NOTIFICATION_VISIBLE_TIME_FIELD_NAME, NOTIFICATION_EXPIRY_TIME_FIELD_NAME);"},{"lineNumber":810,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":811,"author":{"gitId":"-"},"content":""},{"lineNumber":812,"author":{"gitId":"-"},"content":"    private static String getInvalidityInfoForFirstTimeIsBeforeSecondTime(Instant earlierTime, Instant laterTime,"},{"lineNumber":813,"author":{"gitId":"-"},"content":"            String entityName, String earlierTimeFieldName, String laterTimeFieldName) {"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        return getInvalidityInfoForFirstTimeComparedToSecondTime(earlierTime, laterTime, entityName,"},{"lineNumber":815,"author":{"gitId":"-"},"content":"                earlierTimeFieldName, laterTimeFieldName,"},{"lineNumber":816,"author":{"gitId":"-"},"content":"                (firstTime, secondTime) -\u003e firstTime.isBefore(secondTime) || firstTime.equals(secondTime),"},{"lineNumber":817,"author":{"gitId":"-"},"content":"                TIME_BEFORE_ERROR_MESSAGE);"},{"lineNumber":818,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":819,"author":{"gitId":"-"},"content":""},{"lineNumber":820,"author":{"gitId":"-"},"content":"    private static String getInvalidityInfoForFirstTimeIsStrictlyBeforeSecondTime("},{"lineNumber":821,"author":{"gitId":"-"},"content":"            Instant earlierTime, Instant laterTime, String entityName, String earlierTimeFieldName,"},{"lineNumber":822,"author":{"gitId":"-"},"content":"            String laterTimeFieldName) {"},{"lineNumber":823,"author":{"gitId":"-"},"content":"        return getInvalidityInfoForFirstTimeComparedToSecondTime(earlierTime, laterTime, entityName,"},{"lineNumber":824,"author":{"gitId":"-"},"content":"                earlierTimeFieldName, laterTimeFieldName, Instant::isBefore,"},{"lineNumber":825,"author":{"gitId":"-"},"content":"                TIME_BEFORE_OR_EQUAL_ERROR_MESSAGE);"},{"lineNumber":826,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":827,"author":{"gitId":"-"},"content":""},{"lineNumber":828,"author":{"gitId":"-"},"content":"    private static String getInvalidityInfoForFirstTimeComparedToSecondTime(Instant earlierTime, Instant laterTime,"},{"lineNumber":829,"author":{"gitId":"-"},"content":"            String entityName, String earlierTimeFieldName, String laterTimeFieldName,"},{"lineNumber":830,"author":{"gitId":"-"},"content":"            BiPredicate\u003cInstant, Instant\u003e validityChecker,"},{"lineNumber":831,"author":{"gitId":"-"},"content":"            String invalidityInfoTemplate) {"},{"lineNumber":832,"author":{"gitId":"-"},"content":""},{"lineNumber":833,"author":{"gitId":"-"},"content":"        assert earlierTime !\u003d null;"},{"lineNumber":834,"author":{"gitId":"-"},"content":"        assert laterTime !\u003d null;"},{"lineNumber":835,"author":{"gitId":"-"},"content":""},{"lineNumber":836,"author":{"gitId":"-"},"content":"        if (TimeHelper.isSpecialTime(earlierTime) || TimeHelper.isSpecialTime(laterTime)) {"},{"lineNumber":837,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":838,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"        if (!validityChecker.test(earlierTime, laterTime)) {"},{"lineNumber":841,"author":{"gitId":"-"},"content":"            return String.format(invalidityInfoTemplate, laterTimeFieldName, entityName, earlierTimeFieldName);"},{"lineNumber":842,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":843,"author":{"gitId":"-"},"content":""},{"lineNumber":844,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":845,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":846,"author":{"gitId":"-"},"content":""},{"lineNumber":847,"author":{"gitId":"-"},"content":"    private static String getInvalidityInfoForExactHourTime(Instant time, String timeZone, String timeName) {"},{"lineNumber":848,"author":{"gitId":"-"},"content":"        // Timezone offsets are usually a whole number of hours, but a few zones are offset by"},{"lineNumber":849,"author":{"gitId":"-"},"content":"        // an additional 30 or 45 minutes, such as in India, South Australia and Nepal."},{"lineNumber":850,"author":{"gitId":"-"},"content":"        boolean isExactHour \u003d LocalDateTime.ofInstant(time, ZoneId.of(timeZone)).getMinute() \u003d\u003d 0;"},{"lineNumber":851,"author":{"gitId":"-"},"content":"        if (!isExactHour) {"},{"lineNumber":852,"author":{"gitId":"-"},"content":"            return String.format(NOT_EXACT_HOUR_ERROR_MESSAGE, timeName);"},{"lineNumber":853,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":854,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":855,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":856,"author":{"gitId":"-"},"content":""},{"lineNumber":857,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":858,"author":{"gitId":"-"},"content":"     * Checks if both the giver type and recipient type for the feedback question is valid."},{"lineNumber":859,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":860,"author":{"gitId":"-"},"content":"     * @param giverType feedback question giver type to be checked."},{"lineNumber":861,"author":{"gitId":"-"},"content":"     * @param recipientType feedback question recipient type to be checked."},{"lineNumber":862,"author":{"gitId":"-"},"content":"     * @return Error string if either type is invalid, otherwise empty string."},{"lineNumber":863,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":864,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getValidityInfoForFeedbackParticipantType("},{"lineNumber":865,"author":{"gitId":"-"},"content":"            FeedbackParticipantType giverType, FeedbackParticipantType recipientType) {"},{"lineNumber":866,"author":{"gitId":"-"},"content":""},{"lineNumber":867,"author":{"gitId":"-"},"content":"        assert giverType !\u003d null;"},{"lineNumber":868,"author":{"gitId":"-"},"content":"        assert recipientType !\u003d null;"},{"lineNumber":869,"author":{"gitId":"-"},"content":""},{"lineNumber":870,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new LinkedList\u003c\u003e();"},{"lineNumber":871,"author":{"gitId":"-"},"content":"        if (!giverType.isValidGiver()) {"},{"lineNumber":872,"author":{"gitId":"-"},"content":"            errors.add(String.format(PARTICIPANT_TYPE_ERROR_MESSAGE, giverType.toString(), GIVER_TYPE_NAME));"},{"lineNumber":873,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":874,"author":{"gitId":"-"},"content":"        if (!recipientType.isValidRecipient()) {"},{"lineNumber":875,"author":{"gitId":"-"},"content":"            errors.add(String.format(PARTICIPANT_TYPE_ERROR_MESSAGE, recipientType.toString(), RECIPIENT_TYPE_NAME));"},{"lineNumber":876,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":877,"author":{"gitId":"-"},"content":"        if (giverType \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":878,"author":{"gitId":"-"},"content":"                \u0026\u0026 (recipientType \u003d\u003d FeedbackParticipantType.OWN_TEAM"},{"lineNumber":879,"author":{"gitId":"-"},"content":"                        || recipientType \u003d\u003d FeedbackParticipantType.OWN_TEAM_MEMBERS)) {"},{"lineNumber":880,"author":{"gitId":"-"},"content":"            String displayRecipientName \u003d recipientType \u003d\u003d FeedbackParticipantType.OWN_TEAM"},{"lineNumber":881,"author":{"gitId":"-"},"content":"                    ? \"Giver\u0027s team\" : \"Giver\u0027s team members\";"},{"lineNumber":882,"author":{"gitId":"-"},"content":"            errors.add(String.format(PARTICIPANT_TYPE_TEAM_ERROR_MESSAGE,"},{"lineNumber":883,"author":{"gitId":"-"},"content":"                    displayRecipientName,"},{"lineNumber":884,"author":{"gitId":"-"},"content":"                    \"Teams in this course\"));"},{"lineNumber":885,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":886,"author":{"gitId":"-"},"content":""},{"lineNumber":887,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":888,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":889,"author":{"gitId":"-"},"content":""},{"lineNumber":890,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":891,"author":{"gitId":"-"},"content":"     * Checks if comment giver type is either instructor, student or team."},{"lineNumber":892,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":893,"author":{"gitId":"-"},"content":"     * @param commentGiverType comment giver type to be checked."},{"lineNumber":894,"author":{"gitId":"-"},"content":"     * @return Error string if type is invalid, otherwise empty string."},{"lineNumber":895,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":896,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForCommentGiverType(FeedbackParticipantType commentGiverType) {"},{"lineNumber":897,"author":{"gitId":"-"},"content":"        assert commentGiverType !\u003d null;"},{"lineNumber":898,"author":{"gitId":"-"},"content":"        if (!commentGiverType.equals(FeedbackParticipantType.STUDENTS)"},{"lineNumber":899,"author":{"gitId":"-"},"content":"                   \u0026\u0026 !commentGiverType.equals(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":900,"author":{"gitId":"-"},"content":"                   \u0026\u0026 !commentGiverType.equals(FeedbackParticipantType.TEAMS)) {"},{"lineNumber":901,"author":{"gitId":"-"},"content":"            return \"Invalid comment giver type: \" + commentGiverType;"},{"lineNumber":902,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":903,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":904,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":905,"author":{"gitId":"-"},"content":""},{"lineNumber":906,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":907,"author":{"gitId":"-"},"content":"     * Checks if visibility of comment is following question when comment is from a feedback participant."},{"lineNumber":908,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":909,"author":{"gitId":"-"},"content":"     * @param isCommentFromFeedbackParticipant true if comment is from feedback participant."},{"lineNumber":910,"author":{"gitId":"-"},"content":"     * @param isVisibilityFollowingFeedbackQuestion true if visibility of comment follows question."},{"lineNumber":911,"author":{"gitId":"-"},"content":"     * @return Error string if condition is not met, otherwise empty string."},{"lineNumber":912,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":913,"author":{"gitId":"-"},"content":"    public static String getInvalidityInfoForVisibilityOfFeedbackParticipantComments("},{"lineNumber":914,"author":{"gitId":"-"},"content":"            boolean isCommentFromFeedbackParticipant,"},{"lineNumber":915,"author":{"gitId":"-"},"content":"            boolean isVisibilityFollowingFeedbackQuestion) {"},{"lineNumber":916,"author":{"gitId":"-"},"content":"        if (isCommentFromFeedbackParticipant \u0026\u0026 !isVisibilityFollowingFeedbackQuestion) {"},{"lineNumber":917,"author":{"gitId":"-"},"content":"            return \"Comment by feedback participant not following visibility setting of the question.\";"},{"lineNumber":918,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":919,"author":{"gitId":"-"},"content":"        return \"\";"},{"lineNumber":920,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":921,"author":{"gitId":"-"},"content":""},{"lineNumber":922,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":923,"author":{"gitId":"-"},"content":"     * Checks if all the given participant types are valid for the purpose of"},{"lineNumber":924,"author":{"gitId":"-"},"content":"     * showing different fields of a feedback response."},{"lineNumber":925,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":926,"author":{"gitId":"-"},"content":"     * @param showResponsesTo the list of participant types to whom responses can be shown"},{"lineNumber":927,"author":{"gitId":"-"},"content":"     * @param showGiverNameTo the list of participant types to whom giver name can be shown"},{"lineNumber":928,"author":{"gitId":"-"},"content":"     * @param showRecipientNameTo the list of participant types to whom recipient name can be shown"},{"lineNumber":929,"author":{"gitId":"-"},"content":"     * @return Error string if any type in any list is invalid, otherwise empty string."},{"lineNumber":930,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":931,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getValidityInfoForFeedbackResponseVisibility("},{"lineNumber":932,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":933,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo,"},{"lineNumber":934,"author":{"gitId":"-"},"content":"            List\u003cFeedbackParticipantType\u003e showRecipientNameTo) {"},{"lineNumber":935,"author":{"gitId":"-"},"content":""},{"lineNumber":936,"author":{"gitId":"-"},"content":"        assert showResponsesTo !\u003d null;"},{"lineNumber":937,"author":{"gitId":"-"},"content":"        assert showGiverNameTo !\u003d null;"},{"lineNumber":938,"author":{"gitId":"-"},"content":"        assert showRecipientNameTo !\u003d null;"},{"lineNumber":939,"author":{"gitId":"-"},"content":"        assert !showResponsesTo.contains(null);"},{"lineNumber":940,"author":{"gitId":"-"},"content":"        assert !showGiverNameTo.contains(null);"},{"lineNumber":941,"author":{"gitId":"-"},"content":"        assert !showRecipientNameTo.contains(null);"},{"lineNumber":942,"author":{"gitId":"-"},"content":""},{"lineNumber":943,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new LinkedList\u003c\u003e();"},{"lineNumber":944,"author":{"gitId":"-"},"content":""},{"lineNumber":945,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType type : showGiverNameTo) {"},{"lineNumber":946,"author":{"gitId":"-"},"content":"            if (!type.isValidViewer()) {"},{"lineNumber":947,"author":{"gitId":"-"},"content":"                errors.add(String.format(PARTICIPANT_TYPE_ERROR_MESSAGE,"},{"lineNumber":948,"author":{"gitId":"-"},"content":"                        type.toString(), VIEWER_TYPE_NAME));"},{"lineNumber":949,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":950,"author":{"gitId":"-"},"content":"            if (!showResponsesTo.contains(type)) {"},{"lineNumber":951,"author":{"gitId":"-"},"content":"                errors.add(\"Trying to show giver name to \""},{"lineNumber":952,"author":{"gitId":"-"},"content":"                        + type.toString()"},{"lineNumber":953,"author":{"gitId":"-"},"content":"                        + \" without showing response first.\");"},{"lineNumber":954,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":955,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":956,"author":{"gitId":"-"},"content":""},{"lineNumber":957,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType type : showRecipientNameTo) {"},{"lineNumber":958,"author":{"gitId":"-"},"content":"            if (!type.isValidViewer()) {"},{"lineNumber":959,"author":{"gitId":"-"},"content":"                errors.add(String.format(PARTICIPANT_TYPE_ERROR_MESSAGE,"},{"lineNumber":960,"author":{"gitId":"-"},"content":"                        type.toString(), VIEWER_TYPE_NAME));"},{"lineNumber":961,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":962,"author":{"gitId":"-"},"content":"            if (!showResponsesTo.contains(type)) {"},{"lineNumber":963,"author":{"gitId":"-"},"content":"                errors.add(\"Trying to show recipient name to \""},{"lineNumber":964,"author":{"gitId":"-"},"content":"                        + type.toString()"},{"lineNumber":965,"author":{"gitId":"-"},"content":"                        + \" without showing response first.\");"},{"lineNumber":966,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":967,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":968,"author":{"gitId":"-"},"content":""},{"lineNumber":969,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType type : showResponsesTo) {"},{"lineNumber":970,"author":{"gitId":"-"},"content":"            if (!type.isValidViewer()) {"},{"lineNumber":971,"author":{"gitId":"-"},"content":"                errors.add(String.format(PARTICIPANT_TYPE_ERROR_MESSAGE,"},{"lineNumber":972,"author":{"gitId":"-"},"content":"                        type.toString(), VIEWER_TYPE_NAME));"},{"lineNumber":973,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":974,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":975,"author":{"gitId":"-"},"content":""},{"lineNumber":976,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":977,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":978,"author":{"gitId":"-"},"content":""},{"lineNumber":979,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":980,"author":{"gitId":"-"},"content":"     * Checks if the given {@code value} has no HTML code."},{"lineNumber":981,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":982,"author":{"gitId":"-"},"content":"    static String getValidityInfoForNonHtmlField(String fieldName, String value) {"},{"lineNumber":983,"author":{"gitId":"-"},"content":"        String sanitizedValue \u003d SanitizationHelper.sanitizeForHtml(value);"},{"lineNumber":984,"author":{"gitId":"-"},"content":"        //Fails if sanitized value is not same as value"},{"lineNumber":985,"author":{"gitId":"-"},"content":"        return value.equals(sanitizedValue) ? \"\" : NON_HTML_FIELD_ERROR_MESSAGE.replace(\"${fieldName}\", fieldName);"},{"lineNumber":986,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":987,"author":{"gitId":"-"},"content":""},{"lineNumber":988,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":989,"author":{"gitId":"-"},"content":"     * Checks if the given {@code value} is not null."},{"lineNumber":990,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":991,"author":{"gitId":"-"},"content":"    public static String getValidityInfoForNonNullField(String fieldName, Object value) {"},{"lineNumber":992,"author":{"gitId":"-"},"content":"        return value \u003d\u003d null ? NON_NULL_FIELD_ERROR_MESSAGE.replace(\"${fieldName}\", fieldName) : \"\";"},{"lineNumber":993,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":994,"author":{"gitId":"-"},"content":""},{"lineNumber":995,"author":{"gitId":"-"},"content":"    private static boolean isUntrimmed(String value) {"},{"lineNumber":996,"author":{"gitId":"-"},"content":"        return value.length() !\u003d value.trim().length();"},{"lineNumber":997,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":998,"author":{"gitId":"-"},"content":""},{"lineNumber":999,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1000,"author":{"gitId":"-"},"content":"     * Checks whether a given text input represents a format of a valid email address."},{"lineNumber":1001,"author":{"gitId":"-"},"content":"     * @param email text input which needs the validation"},{"lineNumber":1002,"author":{"gitId":"-"},"content":"     * @return true if it is a valid email address, else false."},{"lineNumber":1003,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"    private static boolean isValidEmailAddress(String email) {"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"        return StringHelper.isMatching(email, REGEX_EMAIL);"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1007,"author":{"gitId":"-"},"content":""},{"lineNumber":1008,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"     * Checks whether all the elements in a Collection are unique."},{"lineNumber":1010,"author":{"gitId":"-"},"content":"     * @param elements The Collection of elements to be checked."},{"lineNumber":1011,"author":{"gitId":"-"},"content":"     * @return true if all elements are unique, else false."},{"lineNumber":1012,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1013,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e boolean areElementsUnique(Collection\u003cT\u003e elements) {"},{"lineNumber":1014,"author":{"gitId":"-"},"content":"        Set\u003cT\u003e uniqueElements \u003d new HashSet\u003c\u003e(elements);"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"        return uniqueElements.size() \u003d\u003d elements.size();"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1017,"author":{"gitId":"-"},"content":""},{"lineNumber":1018,"author":{"gitId":"-"},"content":"    private static String getPopulatedErrorMessage("},{"lineNumber":1019,"author":{"gitId":"-"},"content":"            String messageTemplate, String userInput, String fieldName, String errorReason, int maxLength) {"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"        return getPopulatedErrorMessage(messageTemplate, userInput, fieldName, errorReason)"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"                   .replace(\"${maxLength}\", String.valueOf(maxLength));"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1023,"author":{"gitId":"-"},"content":""},{"lineNumber":1024,"author":{"gitId":"-"},"content":"    private static String getPopulatedErrorMessage("},{"lineNumber":1025,"author":{"gitId":"-"},"content":"            String messageTemplate, String userInput, String fieldName, String errorReason) {"},{"lineNumber":1026,"author":{"gitId":"-"},"content":"        return messageTemplate.replace(\"${userInput}\", userInput)"},{"lineNumber":1027,"author":{"gitId":"-"},"content":"                              .replace(\"${fieldName}\", fieldName)"},{"lineNumber":1028,"author":{"gitId":"-"},"content":"                              .replace(\"${reason}\", errorReason);"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1030,"author":{"gitId":"-"},"content":""},{"lineNumber":1031,"author":{"gitId":"-"},"content":"    private static String getPopulatedEmptyStringErrorMessage(String messageTemplate,"},{"lineNumber":1032,"author":{"gitId":"-"},"content":"            String fieldName, int maxLength) {"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"        return messageTemplate.replace(\"${fieldName}\", fieldName)"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"                              .replace(\"${maxLength}\", String.valueOf(maxLength));"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1036,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"EuniceSim142":18,"-":1018}},{"path":"src/main/java/teammates/common/util/HibernateUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.common.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.hibernate.Session;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.hibernate.SessionFactory;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.hibernate.Transaction;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.hibernate.cfg.Configuration;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.hibernate.resource.transaction.spi.TransactionStatus;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.BaseEntity;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":16,"author":{"gitId":"EuniceSim142"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponseComment;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackConstantSumQuestion;"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackContributionQuestion;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackMcqQuestion;"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackMsqQuestion;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackNumericalScaleQuestion;"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackRankOptionsQuestion;"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackRankRecipientsQuestion;"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackRubricQuestion;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.questions.FeedbackTextQuestion;"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackConstantSumResponse;"},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackContributionResponse;"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackMcqResponse;"},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackMsqResponse;"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackRankOptionsResponse;"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackRankRecipientsResponse;"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackRubricResponse;"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.responses.FeedbackTextResponse;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.TypedQuery;"},{"lineNumber":48,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":49,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":52,"author":{"gitId":"-"},"content":" * Utility class for Hibernate related methods."},{"lineNumber":53,"author":{"gitId":"-"},"content":" */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public final class HibernateUtil {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static SessionFactory sessionFactory;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final List\u003cClass\u003c? extends BaseEntity\u003e\u003e ANNOTATED_CLASSES \u003d List.of("},{"lineNumber":58,"author":{"gitId":"-"},"content":"            AccountRequest.class,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Course.class,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            FeedbackSession.class,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            Account.class,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            Notification.class,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            ReadNotification.class,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            User.class,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            Instructor.class,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Student.class,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            UsageStatistics.class,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            Section.class,"},{"lineNumber":69,"author":{"gitId":"cedricongjh"},"content":"            Team.class,"},{"lineNumber":70,"author":{"gitId":"cedricongjh"},"content":"            FeedbackQuestion.class,"},{"lineNumber":71,"author":{"gitId":"cedricongjh"},"content":"            FeedbackConstantSumQuestion.class,"},{"lineNumber":72,"author":{"gitId":"cedricongjh"},"content":"            FeedbackContributionQuestion.class,"},{"lineNumber":73,"author":{"gitId":"cedricongjh"},"content":"            FeedbackMcqQuestion.class,"},{"lineNumber":74,"author":{"gitId":"cedricongjh"},"content":"            FeedbackMsqQuestion.class,"},{"lineNumber":75,"author":{"gitId":"cedricongjh"},"content":"            FeedbackNumericalScaleQuestion.class,"},{"lineNumber":76,"author":{"gitId":"cedricongjh"},"content":"            FeedbackRankOptionsQuestion.class,"},{"lineNumber":77,"author":{"gitId":"cedricongjh"},"content":"            FeedbackRankRecipientsQuestion.class,"},{"lineNumber":78,"author":{"gitId":"cedricongjh"},"content":"            FeedbackRubricQuestion.class,"},{"lineNumber":79,"author":{"gitId":"EuniceSim142"},"content":"            FeedbackTextQuestion.class,"},{"lineNumber":80,"author":{"gitId":"cedricongjh"},"content":"            DeadlineExtension.class,"},{"lineNumber":81,"author":{"gitId":"cedricongjh"},"content":"            FeedbackResponse.class,"},{"lineNumber":82,"author":{"gitId":"cedricongjh"},"content":"            FeedbackConstantSumResponse.class,"},{"lineNumber":83,"author":{"gitId":"cedricongjh"},"content":"            FeedbackContributionResponse.class,"},{"lineNumber":84,"author":{"gitId":"cedricongjh"},"content":"            FeedbackMcqResponse.class,"},{"lineNumber":85,"author":{"gitId":"cedricongjh"},"content":"            FeedbackMsqResponse.class,"},{"lineNumber":86,"author":{"gitId":"cedricongjh"},"content":"            FeedbackNumericalScaleQuestion.class,"},{"lineNumber":87,"author":{"gitId":"cedricongjh"},"content":"            FeedbackRankOptionsResponse.class,"},{"lineNumber":88,"author":{"gitId":"cedricongjh"},"content":"            FeedbackRankRecipientsResponse.class,"},{"lineNumber":89,"author":{"gitId":"cedricongjh"},"content":"            FeedbackRubricResponse.class,"},{"lineNumber":90,"author":{"gitId":"cedricongjh"},"content":"            FeedbackTextResponse.class,"},{"lineNumber":91,"author":{"gitId":"cedricongjh"},"content":"            FeedbackResponseComment.class);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private HibernateUtil() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // Utility class"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // Intentional private constructor to prevent instantiation."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Builds a session factory if it does not already exist."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static void buildSessionFactory(String dbUrl, String username, String password) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        synchronized (HibernateUtil.class) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            if (sessionFactory !\u003d null) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Configuration config \u003d new Configuration()"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\")"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\")"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.connection.username\", username)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.connection.password\", password)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.connection.url\", dbUrl)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.hbm2ddl.auto\", \"update\")"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .setProperty(\"show_sql\", \"true\")"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .setProperty(\"hibernate.current_session_context_class\", \"thread\")"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .addPackage(\"teammates.storage.sqlentity\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        for (Class\u003c? extends BaseEntity\u003e cls : ANNOTATED_CLASSES) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            config \u003d config.addAnnotatedClass(cls);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        config.setPhysicalNamingStrategy(new CamelCaseToUnderscoresNamingStrategy());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        setSessionFactory(config.buildSessionFactory());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Returns the SessionFactory."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"domlimm"},"content":"    private static SessionFactory getSessionFactory() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assert sessionFactory !\u003d null;"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return sessionFactory;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns the current hibernate session."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @see SessionFactory#getCurrentSession()"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"domlimm"},"content":"    private static Session getCurrentSession() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return HibernateUtil.getSessionFactory().getCurrentSession();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"domlimm"},"content":"     * Returns a CriteriaBuilder object."},{"lineNumber":146,"author":{"gitId":"domlimm"},"content":"     * @see SessionFactory#getCriteriaBuilder()"},{"lineNumber":147,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"domlimm"},"content":"    public static CriteriaBuilder getCriteriaBuilder() {"},{"lineNumber":149,"author":{"gitId":"domlimm"},"content":"        return getCurrentSession().getCriteriaBuilder();"},{"lineNumber":150,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":152,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"domlimm"},"content":"     * Returns a generic typed TypedQuery object."},{"lineNumber":154,"author":{"gitId":"domlimm"},"content":"     * @see Session#createQuery(CriteriaQuery)"},{"lineNumber":155,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"domlimm"},"content":"    public static \u003cT\u003e TypedQuery\u003cT\u003e createQuery(CriteriaQuery\u003cT\u003e cr) {"},{"lineNumber":157,"author":{"gitId":"domlimm"},"content":"        return getCurrentSession().createQuery(cr);"},{"lineNumber":158,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public static void setSessionFactory(SessionFactory sessionFactory) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        HibernateUtil.sessionFactory \u003d sessionFactory;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Start a resource transaction."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @see Transaction#begin()"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public static void beginTransaction() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Transaction transaction \u003d HibernateUtil.getCurrentSession().getTransaction();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        transaction.begin();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Roll back the current resource transaction if needed."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * @see Transaction#rollback()"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public static void rollbackTransaction() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Session session \u003d HibernateUtil.getCurrentSession();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        if (session.getTransaction().getStatus() \u003d\u003d TransactionStatus.ACTIVE"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                || session.getTransaction().getStatus() \u003d\u003d TransactionStatus.MARKED_ROLLBACK) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            session.getTransaction().rollback();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * Commit the current resource transaction, writing any unflushed changes to the database."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * @see Session#commit()"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public static void commitTransaction() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        Transaction transaction \u003d HibernateUtil.getCurrentSession().getTransaction();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        transaction.commit();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Force this session to flush. Must be called at the end of a unit of work, before the transaction is committed."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * @see Session#flush()"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public static void flushSession() {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        HibernateUtil.getCurrentSession().flush();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Return the persistent instance of the given entity class with the given identifier,"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * or null if there is no such persistent instance."},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * @see Session#get(Class, Object)"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public static \u003cT extends BaseEntity\u003e T get(Class\u003cT\u003e entityType, Object id) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        return HibernateUtil.getCurrentSession().get(entityType, id);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Return the persistent instance of the given entity class with the given natural id,"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * or null if there is no such persistent instance."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * @see Session#get(Class, Object)"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public static \u003cT extends BaseEntity\u003e T getBySimpleNaturalId(Class\u003cT\u003e entityType, Object id) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return HibernateUtil.getCurrentSession().bySimpleNaturalId(entityType).load(id);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * Copy the state of the given object onto the persistent object with the same identifier."},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * @see Session#merge(E)"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public static \u003cE\u003e E merge(E object) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        return HibernateUtil.getCurrentSession().merge(object);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Make a transient instance persistent and mark it for later insertion in the database."},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @see Session#persist(Object)"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public static void persist(BaseEntity entity) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        HibernateUtil.getCurrentSession().persist(entity);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * Mark a persistence instance associated with this session for removal from the underlying database."},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * @see Session#remove(Object)"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public static void remove(BaseEntity entity) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        HibernateUtil.getCurrentSession().remove(entity);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":25,"cedricongjh":42,"EuniceSim142":2,"-":174,"kevin9foong":1}},{"path":"src/main/java/teammates/logic/core/FeedbackResponsesLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.logic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javax.annotation.Nullable;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.AttributesDeletionQuery;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.CourseRoster;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SessionResultsBundle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankRecipientsResponseDetails;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.common.util.RequestTracer;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.storage.api.FeedbackResponsesDb;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitId":"-"},"content":" * Handles operations related to feedback responses."},{"lineNumber":37,"author":{"gitId":"-"},"content":" *"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * @see FeedbackResponseAttributes"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * @see FeedbackResponsesDb"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public final class FeedbackResponsesLogic {"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final FeedbackResponsesLogic instance \u003d new FeedbackResponsesLogic();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final FeedbackResponsesDb frDb \u003d FeedbackResponsesDb.inst();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private FeedbackQuestionsLogic fqLogic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private FeedbackResponseCommentsLogic frcLogic;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private InstructorsLogic instructorsLogic;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StudentsLogic studentsLogic;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private FeedbackResponsesLogic() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static FeedbackResponsesLogic inst() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    void initLogicDependencies() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        fqLogic \u003d FeedbackQuestionsLogic.inst();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        frcLogic \u003d FeedbackResponseCommentsLogic.inst();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        instructorsLogic \u003d InstructorsLogic.inst();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        studentsLogic \u003d StudentsLogic.inst();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Gets a set of giver identifiers that has at least one response under a feedback session."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Set\u003cString\u003e getGiverSetThatAnswerFeedbackSession(String courseId, String feedbackSessionName) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return frDb.getGiverSetThatAnswerFeedbackSession(courseId, feedbackSessionName);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Creates a feedback response."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @return created feedback response"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the response is not valid"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the response already exist"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public FeedbackResponseAttributes createFeedbackResponse(FeedbackResponseAttributes fra)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return frDb.createEntity(fra);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Gets a feedback response by its ID."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public FeedbackResponseAttributes getFeedbackResponse("},{"lineNumber":90,"author":{"gitId":"-"},"content":"            String feedbackResponseId) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponse(feedbackResponseId);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Gets a feedback response by its unique key."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public FeedbackResponseAttributes getFeedbackResponse("},{"lineNumber":98,"author":{"gitId":"-"},"content":"            String feedbackQuestionId, String giverEmail, String recipient) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponse(feedbackQuestionId, giverEmail, recipient);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Gets all responses for a session."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForSession("},{"lineNumber":106,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForSession(feedbackSessionName, courseId);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Gets all responses given to/from a section in a feedback session in a course."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @param feedbackSessionName the name if the session"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @param courseId the course ID of the session"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @param section if null, will retrieve all responses in the session"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @param fetchType if not null, will retrieve responses by giver, receiver sections, or both"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @return a list of responses"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForSessionInSection("},{"lineNumber":120,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId, @Nullable String section,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            @Nullable FeedbackResultFetchType fetchType) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (section \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return getFeedbackResponsesForSession(feedbackSessionName, courseId);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForSessionInSection(feedbackSessionName, courseId, section, fetchType);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Gets all responses for a question."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForQuestion(String feedbackQuestionId) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForQuestion(feedbackQuestionId);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a question."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public boolean areThereResponsesForQuestion(String feedbackQuestionId) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return frDb.areThereResponsesForQuestion(feedbackQuestionId);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Gets all responses given to/from a section for a question."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @param feedbackQuestionId the ID of the question"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * @param section if null, will retrieve all responses for the question"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @return a list of responses"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForQuestionInSection("},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String feedbackQuestionId, @Nullable String section, FeedbackResultFetchType fetchType) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (section \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return getFeedbackResponsesForQuestion(feedbackQuestionId);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForQuestionInSection(feedbackQuestionId, section, fetchType);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Gets all responses given by a user for a question."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":161,"author":{"gitId":"-"},"content":"            String feedbackQuestionId, String userEmail) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForQuestion(feedbackQuestionId, userEmail);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Gets all responses received by a user for a question."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForReceiverForQuestion("},{"lineNumber":169,"author":{"gitId":"-"},"content":"            String feedbackQuestionId, String userEmail) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForReceiverForQuestion(feedbackQuestionId, userEmail);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Checks whether a giver has responded a session."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public boolean hasGiverRespondedForSession(String giverIdentifier, String feedbackSessionName, String courseId) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return frDb.hasResponsesFromGiverInSession(giverIdentifier, feedbackSessionName, courseId);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Gets all responses received by an user for a course."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForReceiverForCourse("},{"lineNumber":185,"author":{"gitId":"-"},"content":"            String courseId, String userEmail) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesForReceiverForCourse(courseId, userEmail);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * Gets all responses given by an user for a course."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesFromGiverForCourse("},{"lineNumber":193,"author":{"gitId":"-"},"content":"            String courseId, String userEmail) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForCourse(courseId, userEmail);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Get existing feedback responses from student or his team for the given"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * question."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesFromStudentOrTeamForQuestion("},{"lineNumber":202,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question, StudentAttributes student) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":205,"author":{"gitId":"-"},"content":"                    question.getId(), question.getCourseId(), student.getTeam(), null);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        return frDb.getFeedbackResponsesFromGiverForQuestion(question.getId(), student.getEmail());"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * Checks whether the giver name of a response is visible to an user."},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public boolean isNameVisibleToUser("},{"lineNumber":214,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question,"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            FeedbackResponseAttributes response,"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            String userEmail,"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            boolean isInstructor, boolean isGiverName, CourseRoster roster) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        if (question \u003d\u003d null) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"        // Early return if user is giver"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            // if response is given by team, then anyone in the team can see the response"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (roster.isStudentInTeam(userEmail, response.getGiver())) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            if (response.getGiver().equals(userEmail)) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        return isFeedbackParticipantNameVisibleToUser(question, response,"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                userEmail, isInstructor, isGiverName, roster);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    private boolean isFeedbackParticipantNameVisibleToUser("},{"lineNumber":240,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question, FeedbackResponseAttributes response,"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            String userEmail, boolean isInstructor, boolean isGiverName, CourseRoster roster) {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        List\u003cFeedbackParticipantType\u003e showNameTo \u003d isGiverName"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                                                 ? question.getShowGiverNameTo()"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                                                 : question.getShowRecipientNameTo();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        for (FeedbackParticipantType type : showNameTo) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            switch (type) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            case INSTRUCTORS:"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                if (roster.getInstructorForEmail(userEmail) !\u003d null \u0026\u0026 isInstructor) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                    return true;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            case OWN_TEAM_MEMBERS:"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            case OWN_TEAM_MEMBERS_INCLUDING_SELF:"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                // Refers to Giver\u0027s Team Members"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                if (roster.isStudentsInSameTeam(response.getGiver(), userEmail)) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    return true;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            case RECEIVER:"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                // Response to team"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                if (question.getRecipientType().isTeam()) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                    if (roster.isStudentInTeam(userEmail, response.getRecipient())) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                        // this is a team name"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                        return true;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"                    // Response to individual"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                } else if (response.getRecipient().equals(userEmail)) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                    return true;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            case RECEIVER_TEAM_MEMBERS:"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                // Response to team; recipient \u003d teamName"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                if (question.getRecipientType().isTeam()) {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"                    if (roster.isStudentInTeam(userEmail, response.getRecipient())) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"                        // this is a team name"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                        return true;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                } else if (roster.isStudentsInSameTeam(response.getRecipient(), userEmail)) {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                    // Response to individual"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                    return true;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            case STUDENTS:"},{"lineNumber":287,"author":{"gitId":"-"},"content":"                if (roster.isStudentInCourse(userEmail)) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                    return true;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":292,"author":{"gitId":"-"},"content":"                assert false : \"Invalid FeedbackParticipantType for showNameTo in \""},{"lineNumber":293,"author":{"gitId":"-"},"content":"                        + \"FeedbackResponseLogic.isFeedbackParticipantNameVisibleToUser()\";"},{"lineNumber":294,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"-"},"content":"     * Returns true if the responses of the question are visible to students."},{"lineNumber":302,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    public boolean isResponseOfFeedbackQuestionVisibleToStudent(FeedbackQuestionAttributes question) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        if (question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        boolean isStudentRecipientType \u003d"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                   question.getRecipientType().equals(FeedbackParticipantType.STUDENTS)"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.STUDENTS_EXCLUDING_SELF)"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.STUDENTS_IN_SAME_SECTION)"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.OWN_TEAM_MEMBERS)"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.OWN_TEAM_MEMBERS_INCLUDING_SELF)"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                || question.getRecipientType().equals(FeedbackParticipantType.GIVER)"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                   \u0026\u0026 question.getGiverType().equals(FeedbackParticipantType.STUDENTS);"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"        if ((isStudentRecipientType || question.getRecipientType().isTeam())"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                || question.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)) {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        return question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":328,"author":{"gitId":"-"},"content":"     * Returns true if the responses of the question are visible to instructors."},{"lineNumber":329,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    public boolean isResponseOfFeedbackQuestionVisibleToInstructor(FeedbackQuestionAttributes question) {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        return question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackQuestionAttributes\u003e getQuestionsForSession("},{"lineNumber":335,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId, @Nullable String questionId) {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        if (questionId \u003d\u003d null) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"            return fqLogic.getFeedbackQuestionsForSession(feedbackSessionName, courseId);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fqa \u003d fqLogic.getFeedbackQuestion(questionId);"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        return fqa \u003d\u003d null ? Collections.emptyList() : Collections.singletonList(fqa);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"    private SessionResultsBundle buildResultsBundle("},{"lineNumber":344,"author":{"gitId":"-"},"content":"            boolean isCourseWide, String feedbackSessionName, String courseId, String section, String questionId,"},{"lineNumber":345,"author":{"gitId":"-"},"content":"            boolean isInstructor, String userEmail, InstructorAttributes instructor, StudentAttributes student,"},{"lineNumber":346,"author":{"gitId":"-"},"content":"            CourseRoster roster, List\u003cFeedbackQuestionAttributes\u003e allQuestions,"},{"lineNumber":347,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e allResponses) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        Map\u003cString, FeedbackQuestionAttributes\u003e allQuestionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        for (FeedbackQuestionAttributes qn : allQuestions) {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"            allQuestionsMap.put(qn.getId(), qn);"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"        // load comment(s)"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e allComments;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        if (questionId \u003d\u003d null) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            allComments \u003d frcLogic.getFeedbackResponseCommentForSessionInSection(courseId, feedbackSessionName, section);"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"            allComments \u003d frcLogic.getFeedbackResponseCommentForQuestionInSection(questionId, section);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"        // related questions, responses, and comment"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        Map\u003cString, FeedbackQuestionAttributes\u003e relatedQuestionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        Map\u003cString, FeedbackResponseAttributes\u003e relatedResponsesMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseCommentAttributes\u003e\u003e relatedCommentsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        if (isCourseWide) {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            // all questions are related questions when viewing course-wide result"},{"lineNumber":368,"author":{"gitId":"-"},"content":"            for (FeedbackQuestionAttributes qn : allQuestions) {"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                relatedQuestionsMap.put(qn.getId(), qn);"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e studentsEmailInTeam \u003d new HashSet\u003c\u003e();"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        if (student !\u003d null) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            for (StudentAttributes studentInTeam"},{"lineNumber":376,"author":{"gitId":"-"},"content":"                    : roster.getTeamToMembersTable().getOrDefault(student.getTeam(), Collections.emptyList())) {"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                studentsEmailInTeam.add(studentInTeam.getEmail());"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"        // visibility table for each response and comment"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseGiverVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseRecipientVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        Map\u003cLong, Boolean\u003e commentVisibilityTable \u003d new HashMap\u003c\u003e();"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"        // build response"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : allResponses) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes correspondingQuestion \u003d allQuestionsMap.get(response.getFeedbackQuestionId());"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            if (correspondingQuestion \u003d\u003d null) {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"                // orphan response without corresponding question, ignore it"},{"lineNumber":391,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":392,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":393,"author":{"gitId":"-"},"content":"            // check visibility of response"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            boolean isVisibleResponse \u003d isResponseVisibleForUser("},{"lineNumber":395,"author":{"gitId":"-"},"content":"                    userEmail, isInstructor, student, studentsEmailInTeam, response, correspondingQuestion, instructor);"},{"lineNumber":396,"author":{"gitId":"-"},"content":"            if (!isVisibleResponse) {"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":398,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"            // if there are viewable responses, the corresponding question becomes related"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            relatedQuestionsMap.put(response.getFeedbackQuestionId(), correspondingQuestion);"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            relatedResponsesMap.put(response.getId(), response);"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            // generate giver/recipient name visibility table"},{"lineNumber":404,"author":{"gitId":"-"},"content":"            responseGiverVisibilityTable.put(response.getId(),"},{"lineNumber":405,"author":{"gitId":"-"},"content":"                    isNameVisibleToUser(correspondingQuestion, response, userEmail, isInstructor, true, roster));"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            responseRecipientVisibilityTable.put(response.getId(),"},{"lineNumber":407,"author":{"gitId":"-"},"content":"                    isNameVisibleToUser(correspondingQuestion, response, userEmail, isInstructor, false, roster));"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"        // build comment"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        for (FeedbackResponseCommentAttributes frc : allComments) {"},{"lineNumber":413,"author":{"gitId":"-"},"content":"            FeedbackResponseAttributes relatedResponse \u003d relatedResponsesMap.get(frc.getFeedbackResponseId());"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes relatedQuestion \u003d relatedQuestionsMap.get(frc.getFeedbackQuestionId());"},{"lineNumber":415,"author":{"gitId":"-"},"content":"            // the comment needs to be relevant to the question and response"},{"lineNumber":416,"author":{"gitId":"-"},"content":"            if (relatedQuestion \u003d\u003d null || relatedResponse \u003d\u003d null) {"},{"lineNumber":417,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":418,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            // check visibility of comment"},{"lineNumber":420,"author":{"gitId":"-"},"content":"            boolean isVisibleResponseComment \u003d frcLogic.isResponseCommentVisibleForUser("},{"lineNumber":421,"author":{"gitId":"-"},"content":"                    userEmail, isInstructor, student, studentsEmailInTeam, relatedResponse, relatedQuestion, frc);"},{"lineNumber":422,"author":{"gitId":"-"},"content":"            if (!isVisibleResponseComment) {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"            relatedCommentsMap.computeIfAbsent(relatedResponse.getId(), key -\u003e new ArrayList\u003c\u003e()).add(frc);"},{"lineNumber":427,"author":{"gitId":"-"},"content":"            // generate comment giver name visibility table"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            commentVisibilityTable.put(frc.getId(), frcLogic.isNameVisibleToUser(frc, relatedResponse, userEmail, roster));"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e existingResponses \u003d new ArrayList\u003c\u003e(relatedResponsesMap.values());"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e missingResponses \u003d Collections.emptyList();"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        if (isCourseWide) {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"            missingResponses \u003d buildMissingResponses("},{"lineNumber":436,"author":{"gitId":"-"},"content":"                    courseId, feedbackSessionName, instructor, responseGiverVisibilityTable,"},{"lineNumber":437,"author":{"gitId":"-"},"content":"                    responseRecipientVisibilityTable, relatedQuestionsMap, existingResponses, roster, section);"},{"lineNumber":438,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"        return new SessionResultsBundle(relatedQuestionsMap, existingResponses, missingResponses,"},{"lineNumber":442,"author":{"gitId":"-"},"content":"                responseGiverVisibilityTable, responseRecipientVisibilityTable, relatedCommentsMap,"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                commentVisibilityTable, roster);"},{"lineNumber":444,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":447,"author":{"gitId":"-"},"content":"     * Gets the session result for a feedback session."},{"lineNumber":448,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":449,"author":{"gitId":"-"},"content":"     * @param feedbackSessionName the feedback session name"},{"lineNumber":450,"author":{"gitId":"-"},"content":"     * @param courseId the ID of the course"},{"lineNumber":451,"author":{"gitId":"-"},"content":"     * @param instructorEmail the instructor viewing the feedback session"},{"lineNumber":452,"author":{"gitId":"-"},"content":"     * @param questionId if not null, will only return partial bundle for the question"},{"lineNumber":453,"author":{"gitId":"-"},"content":"     * @param section if not null, will only return partial bundle for the section"},{"lineNumber":454,"author":{"gitId":"-"},"content":"     * @param fetchType if not null, will fetch responses by giver, receiver sections, or both"},{"lineNumber":455,"author":{"gitId":"-"},"content":"     * @return the session result bundle"},{"lineNumber":456,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    public SessionResultsBundle getSessionResultsForCourse("},{"lineNumber":458,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId, String instructorEmail,"},{"lineNumber":459,"author":{"gitId":"-"},"content":"            @Nullable String questionId, @Nullable String section, @Nullable FeedbackResultFetchType fetchType) {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        CourseRoster roster \u003d new CourseRoster("},{"lineNumber":461,"author":{"gitId":"-"},"content":"                studentsLogic.getStudentsForCourse(courseId),"},{"lineNumber":462,"author":{"gitId":"-"},"content":"                instructorsLogic.getInstructorsForCourse(courseId));"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"        // load question(s)"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d getQuestionsForSession(feedbackSessionName, courseId, questionId);"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"        // load response(s)"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e allResponses;"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        // load all response for instructors and passively filter them later"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        if (questionId \u003d\u003d null) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"            allResponses \u003d getFeedbackResponsesForSessionInSection(feedbackSessionName, courseId, section, fetchType);"},{"lineNumber":473,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":474,"author":{"gitId":"-"},"content":"            allResponses \u003d getFeedbackResponsesForQuestionInSection(questionId, section, fetchType);"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"        // consider the current viewing user"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d instructorsLogic.getInstructorForEmail(courseId, instructorEmail);"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"        return buildResultsBundle(true, feedbackSessionName, courseId, section, questionId, true, instructorEmail,"},{"lineNumber":482,"author":{"gitId":"-"},"content":"                instructor, null, roster, allQuestions, allResponses);"},{"lineNumber":483,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":486,"author":{"gitId":"-"},"content":"     * Gets the session result for a feedback session for the given user."},{"lineNumber":487,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":488,"author":{"gitId":"-"},"content":"     * @param feedbackSessionName the feedback session name"},{"lineNumber":489,"author":{"gitId":"-"},"content":"     * @param courseId the ID of the course"},{"lineNumber":490,"author":{"gitId":"-"},"content":"     * @param userEmail the user viewing the feedback session"},{"lineNumber":491,"author":{"gitId":"-"},"content":"     * @param isInstructor true if the user is an instructor"},{"lineNumber":492,"author":{"gitId":"-"},"content":"     * @param questionId if not null, will only return partial bundle for the question"},{"lineNumber":493,"author":{"gitId":"-"},"content":"     * @return the session result bundle"},{"lineNumber":494,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    public SessionResultsBundle getSessionResultsForUser("},{"lineNumber":496,"author":{"gitId":"-"},"content":"            String feedbackSessionName, String courseId, String userEmail, boolean isInstructor,"},{"lineNumber":497,"author":{"gitId":"-"},"content":"            @Nullable String questionId) {"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        CourseRoster roster \u003d new CourseRoster("},{"lineNumber":499,"author":{"gitId":"-"},"content":"                studentsLogic.getStudentsForCourse(courseId),"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                instructorsLogic.getInstructorsForCourse(courseId));"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"        // load question(s)"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestionAttributes\u003e allQuestions \u003d getQuestionsForSession(feedbackSessionName, courseId, questionId);"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"        // load response(s)"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d isInstructor ? null : studentsLogic.getStudentForEmail(courseId, userEmail);"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d isInstructor ? instructorsLogic.getInstructorForEmail(courseId, userEmail) : null;"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e allResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":510,"author":{"gitId":"-"},"content":"        for (FeedbackQuestionAttributes question : allQuestions) {"},{"lineNumber":511,"author":{"gitId":"-"},"content":"            // load viewable responses for students/instructors proactively"},{"lineNumber":512,"author":{"gitId":"-"},"content":"            // this is cost-effective as in most of time responses for the whole session will not be viewable to individuals"},{"lineNumber":513,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e viewableResponses \u003d isInstructor"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                    ? getFeedbackResponsesToOrFromInstructorForQuestion(question, instructor)"},{"lineNumber":515,"author":{"gitId":"-"},"content":"                    : getViewableFeedbackResponsesForStudentForQuestion(question, student, roster);"},{"lineNumber":516,"author":{"gitId":"-"},"content":"            allResponses.addAll(viewableResponses);"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        RequestTracer.checkRemainingTime();"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"-"},"content":"        return buildResultsBundle(false, feedbackSessionName, courseId, null, questionId, isInstructor, userEmail,"},{"lineNumber":521,"author":{"gitId":"-"},"content":"                instructor, student, roster, allQuestions, allResponses);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":525,"author":{"gitId":"-"},"content":"     * Builds viewable missing responses for the session for instructor."},{"lineNumber":526,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":527,"author":{"gitId":"-"},"content":"     * @param instructor the instructor"},{"lineNumber":528,"author":{"gitId":"-"},"content":"     * @param responseGiverVisibilityTable"},{"lineNumber":529,"author":{"gitId":"-"},"content":"     *         the giver visibility table which will be updated with the visibility of missing responses"},{"lineNumber":530,"author":{"gitId":"-"},"content":"     * @param responseRecipientVisibilityTable"},{"lineNumber":531,"author":{"gitId":"-"},"content":"     *         the recipient visibility table which will be updated with the visibility of missing responses"},{"lineNumber":532,"author":{"gitId":"-"},"content":"     * @param relatedQuestionsMap the relevant questions"},{"lineNumber":533,"author":{"gitId":"-"},"content":"     * @param existingResponses existing responses"},{"lineNumber":534,"author":{"gitId":"-"},"content":"     * @param courseRoster the course roster"},{"lineNumber":535,"author":{"gitId":"-"},"content":"     * @param section if not null, will only build missing responses for the section"},{"lineNumber":536,"author":{"gitId":"-"},"content":"     * @return a list of missing responses for the session."},{"lineNumber":537,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseAttributes\u003e buildMissingResponses("},{"lineNumber":539,"author":{"gitId":"-"},"content":"            String courseId, String feedbackSessionName, InstructorAttributes instructor,"},{"lineNumber":540,"author":{"gitId":"-"},"content":"            Map\u003cString, Boolean\u003e responseGiverVisibilityTable, Map\u003cString, Boolean\u003e responseRecipientVisibilityTable,"},{"lineNumber":541,"author":{"gitId":"-"},"content":"            Map\u003cString, FeedbackQuestionAttributes\u003e relatedQuestionsMap,"},{"lineNumber":542,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e existingResponses, CourseRoster courseRoster, @Nullable String section) {"},{"lineNumber":543,"author":{"gitId":"-"},"content":""},{"lineNumber":544,"author":{"gitId":"-"},"content":"        // first get all possible giver recipient pairs"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        Map\u003cString, Map\u003cString, Set\u003cString\u003e\u003e\u003e questionCompleteGiverRecipientMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        for (FeedbackQuestionAttributes feedbackQuestion : relatedQuestionsMap.values()) {"},{"lineNumber":547,"author":{"gitId":"-"},"content":"            if (feedbackQuestion.getQuestionDetailsCopy().shouldGenerateMissingResponses(feedbackQuestion)) {"},{"lineNumber":548,"author":{"gitId":"-"},"content":"                questionCompleteGiverRecipientMap.put(feedbackQuestion.getId(),"},{"lineNumber":549,"author":{"gitId":"-"},"content":"                        fqLogic.buildCompleteGiverRecipientMap(feedbackQuestion, courseRoster));"},{"lineNumber":550,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":551,"author":{"gitId":"-"},"content":"                questionCompleteGiverRecipientMap.put(feedbackQuestion.getId(), new HashMap\u003c\u003e());"},{"lineNumber":552,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":554,"author":{"gitId":"-"},"content":""},{"lineNumber":555,"author":{"gitId":"-"},"content":"        // remove the existing responses in those pairs"},{"lineNumber":556,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes existingResponse : existingResponses) {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"            Map\u003cString, Set\u003cString\u003e\u003e currGiverRecipientMap \u003d"},{"lineNumber":558,"author":{"gitId":"-"},"content":"                    questionCompleteGiverRecipientMap.get(existingResponse.getFeedbackQuestionId());"},{"lineNumber":559,"author":{"gitId":"-"},"content":"            if (!currGiverRecipientMap.containsKey(existingResponse.getGiver())) {"},{"lineNumber":560,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":561,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":562,"author":{"gitId":"-"},"content":"            currGiverRecipientMap.get(existingResponse.getGiver()).remove(existingResponse.getRecipient());"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":564,"author":{"gitId":"-"},"content":""},{"lineNumber":565,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e missingResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        // build dummy responses"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, Map\u003cString, Set\u003cString\u003e\u003e\u003e currGiverRecipientMapEntry"},{"lineNumber":568,"author":{"gitId":"-"},"content":"                : questionCompleteGiverRecipientMap.entrySet()) {"},{"lineNumber":569,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes correspondingQuestion \u003d"},{"lineNumber":570,"author":{"gitId":"-"},"content":"                    relatedQuestionsMap.get(currGiverRecipientMapEntry.getKey());"},{"lineNumber":571,"author":{"gitId":"-"},"content":"            String questionId \u003d correspondingQuestion.getId();"},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"-"},"content":"            for (Map.Entry\u003cString, Set\u003cString\u003e\u003e giverRecipientEntry"},{"lineNumber":574,"author":{"gitId":"-"},"content":"                    : currGiverRecipientMapEntry.getValue().entrySet()) {"},{"lineNumber":575,"author":{"gitId":"-"},"content":"                // giver"},{"lineNumber":576,"author":{"gitId":"-"},"content":"                String giverIdentifier \u003d giverRecipientEntry.getKey();"},{"lineNumber":577,"author":{"gitId":"-"},"content":"                CourseRoster.ParticipantInfo giverInfo \u003d courseRoster.getInfoForIdentifier(giverIdentifier);"},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":"                for (String recipientIdentifier : giverRecipientEntry.getValue()) {"},{"lineNumber":580,"author":{"gitId":"-"},"content":"                    // recipient"},{"lineNumber":581,"author":{"gitId":"-"},"content":"                    CourseRoster.ParticipantInfo recipientInfo \u003d courseRoster.getInfoForIdentifier(recipientIdentifier);"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"                    // skip responses not in current section"},{"lineNumber":584,"author":{"gitId":"-"},"content":"                    if (section !\u003d null"},{"lineNumber":585,"author":{"gitId":"-"},"content":"                            \u0026\u0026 !giverInfo.getSectionName().equals(section)"},{"lineNumber":586,"author":{"gitId":"-"},"content":"                            \u0026\u0026 !recipientInfo.getSectionName().equals(section)) {"},{"lineNumber":587,"author":{"gitId":"-"},"content":"                        continue;"},{"lineNumber":588,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":589,"author":{"gitId":"-"},"content":""},{"lineNumber":590,"author":{"gitId":"-"},"content":"                    FeedbackResponseAttributes missingResponse \u003d"},{"lineNumber":591,"author":{"gitId":"-"},"content":"                            FeedbackResponseAttributes.builder(questionId, giverIdentifier, recipientIdentifier)"},{"lineNumber":592,"author":{"gitId":"-"},"content":"                                    .withCourseId(courseId)"},{"lineNumber":593,"author":{"gitId":"-"},"content":"                                    .withFeedbackSessionName(feedbackSessionName)"},{"lineNumber":594,"author":{"gitId":"-"},"content":"                                    .withGiverSection(giverInfo.getSectionName())"},{"lineNumber":595,"author":{"gitId":"-"},"content":"                                    .withRecipientSection(recipientInfo.getSectionName())"},{"lineNumber":596,"author":{"gitId":"-"},"content":"                                    .withResponseDetails(new FeedbackTextResponseDetails(\"No Response\"))"},{"lineNumber":597,"author":{"gitId":"-"},"content":"                                    .build();"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"                    // check visibility of the missing response"},{"lineNumber":600,"author":{"gitId":"-"},"content":"                    boolean isVisibleResponse \u003d isResponseVisibleForUser("},{"lineNumber":601,"author":{"gitId":"-"},"content":"                            instructor.getEmail(), true, null, Collections.emptySet(),"},{"lineNumber":602,"author":{"gitId":"-"},"content":"                            missingResponse, correspondingQuestion, instructor);"},{"lineNumber":603,"author":{"gitId":"-"},"content":"                    if (!isVisibleResponse) {"},{"lineNumber":604,"author":{"gitId":"-"},"content":"                        continue;"},{"lineNumber":605,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"                    // generate giver/recipient name visibility table"},{"lineNumber":608,"author":{"gitId":"-"},"content":"                    responseGiverVisibilityTable.put(missingResponse.getId(),"},{"lineNumber":609,"author":{"gitId":"-"},"content":"                            isNameVisibleToUser(correspondingQuestion, missingResponse,"},{"lineNumber":610,"author":{"gitId":"-"},"content":"                                    instructor.getEmail(), true, true, courseRoster));"},{"lineNumber":611,"author":{"gitId":"-"},"content":"                    responseRecipientVisibilityTable.put(missingResponse.getId(),"},{"lineNumber":612,"author":{"gitId":"-"},"content":"                            isNameVisibleToUser(correspondingQuestion, missingResponse,"},{"lineNumber":613,"author":{"gitId":"-"},"content":"                                    instructor.getEmail(), true, false, courseRoster));"},{"lineNumber":614,"author":{"gitId":"-"},"content":"                    missingResponses.add(missingResponse);"},{"lineNumber":615,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":616,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":617,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"        return missingResponses;"},{"lineNumber":620,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":621,"author":{"gitId":"-"},"content":""},{"lineNumber":622,"author":{"gitId":"-"},"content":"    boolean isResponseVisibleForUser("},{"lineNumber":623,"author":{"gitId":"-"},"content":"            String userEmail, boolean isInstructor, StudentAttributes student,"},{"lineNumber":624,"author":{"gitId":"-"},"content":"            Set\u003cString\u003e studentsEmailInTeam, FeedbackResponseAttributes response,"},{"lineNumber":625,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes relatedQuestion, InstructorAttributes instructor) {"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":"        boolean isVisibleResponse \u003d false;"},{"lineNumber":628,"author":{"gitId":"-"},"content":"        if (isInstructor \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":629,"author":{"gitId":"-"},"content":"                || response.getRecipient().equals(userEmail)"},{"lineNumber":630,"author":{"gitId":"-"},"content":"                \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"},{"lineNumber":631,"author":{"gitId":"-"},"content":"                || response.getGiver().equals(userEmail)"},{"lineNumber":632,"author":{"gitId":"-"},"content":"                || !isInstructor \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":633,"author":{"gitId":"-"},"content":"            isVisibleResponse \u003d true;"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        } else if (studentsEmailInTeam !\u003d null \u0026\u0026 !isInstructor) {"},{"lineNumber":635,"author":{"gitId":"hhdqirui"},"content":"            if ((relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":636,"author":{"gitId":"hhdqirui"},"content":"                    || relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION"},{"lineNumber":637,"author":{"gitId":"hhdqirui"},"content":"                    || relatedQuestion.getRecipientType() \u003d\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF)"},{"lineNumber":638,"author":{"gitId":"-"},"content":"                    \u0026\u0026 relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"},{"lineNumber":639,"author":{"gitId":"-"},"content":"                    \u0026\u0026 response.getRecipient().equals(student.getTeam())) {"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":641,"author":{"gitId":"-"},"content":"            } else if (relatedQuestion.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":642,"author":{"gitId":"-"},"content":"                    \u0026\u0026 response.getGiver().equals(student.getTeam())) {"},{"lineNumber":643,"author":{"gitId":"-"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":644,"author":{"gitId":"-"},"content":"            } else if (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)"},{"lineNumber":645,"author":{"gitId":"-"},"content":"                    \u0026\u0026 studentsEmailInTeam.contains(response.getGiver())) {"},{"lineNumber":646,"author":{"gitId":"-"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":647,"author":{"gitId":"-"},"content":"            } else if (relatedQuestion.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS)"},{"lineNumber":648,"author":{"gitId":"-"},"content":"                    \u0026\u0026 studentsEmailInTeam.contains(response.getRecipient())) {"},{"lineNumber":649,"author":{"gitId":"-"},"content":"                isVisibleResponse \u003d true;"},{"lineNumber":650,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":651,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":652,"author":{"gitId":"-"},"content":"        if (isVisibleResponse \u0026\u0026 instructor !\u003d null) {"},{"lineNumber":653,"author":{"gitId":"-"},"content":"            boolean isGiverSectionRestricted \u003d"},{"lineNumber":654,"author":{"gitId":"-"},"content":"                    !instructor.isAllowedForPrivilege(response.getGiverSection(),"},{"lineNumber":655,"author":{"gitId":"-"},"content":"                            response.getFeedbackSessionName(),"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);"},{"lineNumber":657,"author":{"gitId":"-"},"content":"            // If instructors are not restricted to view the giver\u0027s section,"},{"lineNumber":658,"author":{"gitId":"-"},"content":"            // they are allowed to view responses to GENERAL, subject to visibility options"},{"lineNumber":659,"author":{"gitId":"-"},"content":"            boolean isRecipientSectionRestricted \u003d"},{"lineNumber":660,"author":{"gitId":"-"},"content":"                    relatedQuestion.getRecipientType() !\u003d FeedbackParticipantType.NONE"},{"lineNumber":661,"author":{"gitId":"-"},"content":"                            \u0026\u0026 !instructor.isAllowedForPrivilege(response.getRecipientSection(),"},{"lineNumber":662,"author":{"gitId":"-"},"content":"                            response.getFeedbackSessionName(),"},{"lineNumber":663,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS);"},{"lineNumber":664,"author":{"gitId":"-"},"content":""},{"lineNumber":665,"author":{"gitId":"-"},"content":"            boolean isNotAllowedForInstructor \u003d isGiverSectionRestricted || isRecipientSectionRestricted;"},{"lineNumber":666,"author":{"gitId":"-"},"content":"            if (isNotAllowedForInstructor) {"},{"lineNumber":667,"author":{"gitId":"-"},"content":"                isVisibleResponse \u003d false;"},{"lineNumber":668,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        return isVisibleResponse;"},{"lineNumber":671,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":674,"author":{"gitId":"-"},"content":"     * Checks whether there are responses for a course."},{"lineNumber":675,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":676,"author":{"gitId":"-"},"content":"    public boolean hasResponsesForCourse(String courseId) {"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        return frDb.hasFeedbackResponseEntitiesForCourse(courseId);"},{"lineNumber":678,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":681,"author":{"gitId":"-"},"content":"     * Updates a feedback response by {@link FeedbackResponseAttributes.UpdateOptions}."},{"lineNumber":682,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":683,"author":{"gitId":"-"},"content":"     * \u003cp\u003eCascade updates its associated feedback response comment"},{"lineNumber":684,"author":{"gitId":"-"},"content":"     * (e.g. associated response ID, giverSection and recipientSection)."},{"lineNumber":685,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":686,"author":{"gitId":"-"},"content":"     * \u003cp\u003eIf the giver/recipient field is changed, the response is updated by recreating the response"},{"lineNumber":687,"author":{"gitId":"-"},"content":"     * as question-giver-recipient is the primary key."},{"lineNumber":688,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":689,"author":{"gitId":"-"},"content":"     * @return updated feedback response"},{"lineNumber":690,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":691,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the comment cannot be found"},{"lineNumber":692,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the response cannot be updated"},{"lineNumber":693,"author":{"gitId":"-"},"content":"     *         by recreation because of an existent response"},{"lineNumber":694,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":695,"author":{"gitId":"-"},"content":"    public FeedbackResponseAttributes updateFeedbackResponseCascade(FeedbackResponseAttributes.UpdateOptions updateOptions)"},{"lineNumber":696,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException, EntityAlreadyExistsException {"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes oldResponse \u003d frDb.getFeedbackResponse(updateOptions.getFeedbackResponseId());"},{"lineNumber":699,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes newResponse \u003d frDb.updateFeedbackResponse(updateOptions);"},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"        boolean isResponseIdChanged \u003d !oldResponse.getId().equals(newResponse.getId());"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        boolean isGiverSectionChanged \u003d !oldResponse.getGiverSection().equals(newResponse.getGiverSection());"},{"lineNumber":703,"author":{"gitId":"-"},"content":"        boolean isRecipientSectionChanged \u003d !oldResponse.getRecipientSection().equals(newResponse.getRecipientSection());"},{"lineNumber":704,"author":{"gitId":"-"},"content":""},{"lineNumber":705,"author":{"gitId":"-"},"content":"        if (isResponseIdChanged || isGiverSectionChanged || isRecipientSectionChanged) {"},{"lineNumber":706,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseCommentAttributes\u003e responseComments \u003d"},{"lineNumber":707,"author":{"gitId":"-"},"content":"                    frcLogic.getFeedbackResponseCommentForResponse(oldResponse.getId());"},{"lineNumber":708,"author":{"gitId":"-"},"content":"            for (FeedbackResponseCommentAttributes responseComment : responseComments) {"},{"lineNumber":709,"author":{"gitId":"-"},"content":"                FeedbackResponseCommentAttributes.UpdateOptions.Builder updateOptionsBuilder \u003d"},{"lineNumber":710,"author":{"gitId":"-"},"content":"                        FeedbackResponseCommentAttributes.updateOptionsBuilder(responseComment.getId());"},{"lineNumber":711,"author":{"gitId":"-"},"content":""},{"lineNumber":712,"author":{"gitId":"-"},"content":"                if (isResponseIdChanged) {"},{"lineNumber":713,"author":{"gitId":"-"},"content":"                    updateOptionsBuilder.withFeedbackResponseId(newResponse.getId());"},{"lineNumber":714,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":715,"author":{"gitId":"-"},"content":""},{"lineNumber":716,"author":{"gitId":"-"},"content":"                if (isGiverSectionChanged) {"},{"lineNumber":717,"author":{"gitId":"-"},"content":"                    updateOptionsBuilder.withGiverSection(newResponse.getGiverSection());"},{"lineNumber":718,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":719,"author":{"gitId":"-"},"content":""},{"lineNumber":720,"author":{"gitId":"-"},"content":"                if (isRecipientSectionChanged) {"},{"lineNumber":721,"author":{"gitId":"-"},"content":"                    updateOptionsBuilder.withReceiverSection(newResponse.getRecipientSection());"},{"lineNumber":722,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":723,"author":{"gitId":"-"},"content":""},{"lineNumber":724,"author":{"gitId":"-"},"content":"                frcLogic.updateFeedbackResponseComment(updateOptionsBuilder.build());"},{"lineNumber":725,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":726,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":727,"author":{"gitId":"-"},"content":""},{"lineNumber":728,"author":{"gitId":"-"},"content":"        return newResponse;"},{"lineNumber":729,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":730,"author":{"gitId":"-"},"content":""},{"lineNumber":731,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":732,"author":{"gitId":"-"},"content":"     * Updates responses for a student when his team changes."},{"lineNumber":733,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":734,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThis is done by deleting responses that are no longer relevant to him in his new team."},{"lineNumber":735,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":736,"author":{"gitId":"-"},"content":"    public void updateFeedbackResponsesForChangingTeam("},{"lineNumber":737,"author":{"gitId":"-"},"content":"            String courseId, String userEmail, String oldTeam, String newTeam) {"},{"lineNumber":738,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes question;"},{"lineNumber":739,"author":{"gitId":"-"},"content":"        // deletes all responses given by the user to team members or given by the user as a representative of a team."},{"lineNumber":740,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesFromUser \u003d"},{"lineNumber":741,"author":{"gitId":"-"},"content":"                getFeedbackResponsesFromGiverForCourse(courseId, userEmail);"},{"lineNumber":742,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesFromUser) {"},{"lineNumber":743,"author":{"gitId":"-"},"content":"            question \u003d fqLogic.getFeedbackQuestion(response.getFeedbackQuestionId());"},{"lineNumber":744,"author":{"gitId":"-"},"content":"            if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":745,"author":{"gitId":"-"},"content":"                    || isRecipientTypeTeamMembers(question)) {"},{"lineNumber":746,"author":{"gitId":"-"},"content":"                deleteFeedbackResponseCascade(response.getId());"},{"lineNumber":747,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":749,"author":{"gitId":"-"},"content":""},{"lineNumber":750,"author":{"gitId":"-"},"content":"        // Deletes all responses given by other team members to the user."},{"lineNumber":751,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesToUser \u003d"},{"lineNumber":752,"author":{"gitId":"-"},"content":"                getFeedbackResponsesForReceiverForCourse(courseId, userEmail);"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesToUser) {"},{"lineNumber":754,"author":{"gitId":"-"},"content":"            question \u003d fqLogic.getFeedbackQuestion(response.getFeedbackQuestionId());"},{"lineNumber":755,"author":{"gitId":"-"},"content":"            if (isRecipientTypeTeamMembers(question)) {"},{"lineNumber":756,"author":{"gitId":"-"},"content":"                deleteFeedbackResponseCascade(response.getId());"},{"lineNumber":757,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":758,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":759,"author":{"gitId":"-"},"content":""},{"lineNumber":760,"author":{"gitId":"-"},"content":"        boolean isOldTeamEmpty \u003d studentsLogic.getStudentsForTeam(oldTeam, courseId).isEmpty();"},{"lineNumber":761,"author":{"gitId":"-"},"content":"        if (isOldTeamEmpty) {"},{"lineNumber":762,"author":{"gitId":"-"},"content":"            deleteFeedbackResponsesInvolvedEntityOfCourseCascade(courseId, oldTeam);"},{"lineNumber":763,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":764,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":765,"author":{"gitId":"-"},"content":""},{"lineNumber":766,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":767,"author":{"gitId":"-"},"content":"     * Updates responses for a student when his section changes."},{"lineNumber":768,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":769,"author":{"gitId":"-"},"content":"    public void updateFeedbackResponsesForChangingSection("},{"lineNumber":770,"author":{"gitId":"-"},"content":"            String courseId, String userEmail, String oldSection, String newSection)"},{"lineNumber":771,"author":{"gitId":"-"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":772,"author":{"gitId":"-"},"content":"        updateSectionOfResponsesFromUser(courseId, userEmail, newSection);"},{"lineNumber":773,"author":{"gitId":"-"},"content":"        updateSectionOfResponsesToUser(courseId, userEmail, newSection);"},{"lineNumber":774,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":775,"author":{"gitId":"-"},"content":""},{"lineNumber":776,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":777,"author":{"gitId":"-"},"content":"     * Updates the relevant responses before the deletion of a student."},{"lineNumber":778,"author":{"gitId":"-"},"content":"     * This method takes care of the following:"},{"lineNumber":779,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":780,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":781,"author":{"gitId":"-"},"content":"     *         Making existing responses of \u0027rank recipient question\u0027 consistent."},{"lineNumber":782,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":783,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":784,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":785,"author":{"gitId":"-"},"content":"    public void updateFeedbackResponsesForDeletingStudent(String courseId) {"},{"lineNumber":786,"author":{"gitId":"-"},"content":"        updateRankRecipientQuestionResponsesAfterDeletingStudent(courseId);"},{"lineNumber":787,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":788,"author":{"gitId":"-"},"content":""},{"lineNumber":789,"author":{"gitId":"-"},"content":"    private void updateRankRecipientQuestionResponsesAfterDeletingStudent(String courseId) {"},{"lineNumber":790,"author":{"gitId":"-"},"content":"        List\u003cFeedbackQuestionAttributes\u003e filteredQuestions \u003d"},{"lineNumber":791,"author":{"gitId":"-"},"content":"                fqLogic.getFeedbackQuestionForCourseWithType(courseId, FeedbackQuestionType.RANK_RECIPIENTS);"},{"lineNumber":792,"author":{"gitId":"-"},"content":"        CourseRoster roster \u003d new CourseRoster("},{"lineNumber":793,"author":{"gitId":"-"},"content":"                studentsLogic.getStudentsForCourse(courseId),"},{"lineNumber":794,"author":{"gitId":"-"},"content":"                instructorsLogic.getInstructorsForCourse(courseId));"},{"lineNumber":795,"author":{"gitId":"-"},"content":"        for (FeedbackQuestionAttributes question : filteredQuestions) {"},{"lineNumber":796,"author":{"gitId":"-"},"content":"            makeRankRecipientQuestionResponsesConsistent(question, roster);"},{"lineNumber":797,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":798,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":799,"author":{"gitId":"-"},"content":""},{"lineNumber":800,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":801,"author":{"gitId":"-"},"content":"     * Makes the rankings by one giver in the response to a \u0027rank recipient question\u0027 consistent, after deleting a"},{"lineNumber":802,"author":{"gitId":"-"},"content":"     * student."},{"lineNumber":803,"author":{"gitId":"-"},"content":"     * \u003cp\u003e"},{"lineNumber":804,"author":{"gitId":"-"},"content":"     *     Fails silently if the question type is not \u0027rank recipient question\u0027."},{"lineNumber":805,"author":{"gitId":"-"},"content":"     * \u003c/p\u003e"},{"lineNumber":806,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":807,"author":{"gitId":"-"},"content":"    private void makeRankRecipientQuestionResponsesConsistent("},{"lineNumber":808,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question, CourseRoster roster) {"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        if (!question.getQuestionType().equals(FeedbackQuestionType.RANK_RECIPIENTS)) {"},{"lineNumber":810,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":811,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":812,"author":{"gitId":"-"},"content":""},{"lineNumber":813,"author":{"gitId":"-"},"content":"        FeedbackParticipantType giverType \u003d question.getGiverType();"},{"lineNumber":814,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responses;"},{"lineNumber":815,"author":{"gitId":"-"},"content":""},{"lineNumber":816,"author":{"gitId":"-"},"content":"        int numberOfRecipients;"},{"lineNumber":817,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes.UpdateOptions\u003e updates \u003d new ArrayList\u003c\u003e();"},{"lineNumber":818,"author":{"gitId":"-"},"content":""},{"lineNumber":819,"author":{"gitId":"-"},"content":"        switch (giverType) {"},{"lineNumber":820,"author":{"gitId":"-"},"content":"        case INSTRUCTORS:"},{"lineNumber":821,"author":{"gitId":"-"},"content":"        case SELF:"},{"lineNumber":822,"author":{"gitId":"-"},"content":"            for (InstructorAttributes instructor : roster.getInstructors()) {"},{"lineNumber":823,"author":{"gitId":"-"},"content":"                numberOfRecipients \u003d"},{"lineNumber":824,"author":{"gitId":"-"},"content":"                        fqLogic.getRecipientsOfQuestion(question, instructor, null, roster).size();"},{"lineNumber":825,"author":{"gitId":"-"},"content":"                responses \u003d getFeedbackResponsesFromGiverForQuestion(question.getId(), instructor.getEmail());"},{"lineNumber":826,"author":{"gitId":"-"},"content":"                updates.addAll(FeedbackRankRecipientsResponseDetails"},{"lineNumber":827,"author":{"gitId":"-"},"content":"                        .getUpdateOptionsForRankRecipientQuestions(responses, numberOfRecipients));"},{"lineNumber":828,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":829,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":830,"author":{"gitId":"-"},"content":"        case TEAMS:"},{"lineNumber":831,"author":{"gitId":"-"},"content":"        case TEAMS_IN_SAME_SECTION:"},{"lineNumber":832,"author":{"gitId":"-"},"content":"            StudentAttributes firstMemberOfTeam;"},{"lineNumber":833,"author":{"gitId":"-"},"content":"            String team;"},{"lineNumber":834,"author":{"gitId":"-"},"content":"            Map\u003cString, List\u003cStudentAttributes\u003e\u003e teams \u003d roster.getTeamToMembersTable();"},{"lineNumber":835,"author":{"gitId":"-"},"content":"            for (Map.Entry\u003cString, List\u003cStudentAttributes\u003e\u003e entry : teams.entrySet()) {"},{"lineNumber":836,"author":{"gitId":"-"},"content":"                team \u003d entry.getKey();"},{"lineNumber":837,"author":{"gitId":"-"},"content":"                firstMemberOfTeam \u003d entry.getValue().get(0);"},{"lineNumber":838,"author":{"gitId":"-"},"content":"                numberOfRecipients \u003d"},{"lineNumber":839,"author":{"gitId":"-"},"content":"                        fqLogic.getRecipientsOfQuestion(question, null, firstMemberOfTeam, roster).size();"},{"lineNumber":840,"author":{"gitId":"-"},"content":"                responses \u003d"},{"lineNumber":841,"author":{"gitId":"-"},"content":"                        getFeedbackResponsesFromTeamForQuestion(question.getId(), question.getCourseId(), team, roster);"},{"lineNumber":842,"author":{"gitId":"-"},"content":"                updates.addAll(FeedbackRankRecipientsResponseDetails"},{"lineNumber":843,"author":{"gitId":"-"},"content":"                        .getUpdateOptionsForRankRecipientQuestions(responses, numberOfRecipients));"},{"lineNumber":844,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":845,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":847,"author":{"gitId":"-"},"content":"            for (StudentAttributes student : roster.getStudents()) {"},{"lineNumber":848,"author":{"gitId":"-"},"content":"                numberOfRecipients \u003d"},{"lineNumber":849,"author":{"gitId":"-"},"content":"                        fqLogic.getRecipientsOfQuestion(question, null, student, roster).size();"},{"lineNumber":850,"author":{"gitId":"-"},"content":"                responses \u003d getFeedbackResponsesFromGiverForQuestion(question.getId(), student.getEmail());"},{"lineNumber":851,"author":{"gitId":"-"},"content":"                updates.addAll(FeedbackRankRecipientsResponseDetails"},{"lineNumber":852,"author":{"gitId":"-"},"content":"                        .getUpdateOptionsForRankRecipientQuestions(responses, numberOfRecipients));"},{"lineNumber":853,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":854,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":855,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":856,"author":{"gitId":"-"},"content":""},{"lineNumber":857,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes.UpdateOptions update : updates) {"},{"lineNumber":858,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":859,"author":{"gitId":"-"},"content":"                frDb.updateFeedbackResponse(update);"},{"lineNumber":860,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException | EntityDoesNotExistException | InvalidParametersException e) {"},{"lineNumber":861,"author":{"gitId":"-"},"content":"                assert false : \"Exception occurred when updating responses after deleting students.\";"},{"lineNumber":862,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":863,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":864,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":865,"author":{"gitId":"-"},"content":""},{"lineNumber":866,"author":{"gitId":"-"},"content":"    private void updateSectionOfResponsesToUser(String courseId, String userEmail, String newSection)"},{"lineNumber":867,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":868,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesToUser \u003d"},{"lineNumber":869,"author":{"gitId":"-"},"content":"                getFeedbackResponsesForReceiverForCourse(courseId, userEmail);"},{"lineNumber":870,"author":{"gitId":"-"},"content":""},{"lineNumber":871,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesToUser) {"},{"lineNumber":872,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":873,"author":{"gitId":"-"},"content":"                frDb.updateFeedbackResponse("},{"lineNumber":874,"author":{"gitId":"-"},"content":"                        FeedbackResponseAttributes.updateOptionsBuilder(response.getId())"},{"lineNumber":875,"author":{"gitId":"-"},"content":"                                .withRecipientSection(newSection)"},{"lineNumber":876,"author":{"gitId":"-"},"content":"                                .build());"},{"lineNumber":877,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":878,"author":{"gitId":"-"},"content":"                assert false : \"Not possible to trigger recreating of response\";"},{"lineNumber":879,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":880,"author":{"gitId":"-"},"content":"            frcLogic.updateFeedbackResponseCommentsForResponse(response.getId());"},{"lineNumber":881,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":882,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":883,"author":{"gitId":"-"},"content":""},{"lineNumber":884,"author":{"gitId":"-"},"content":"    private void updateSectionOfResponsesFromUser(String courseId, String userEmail, String newSection)"},{"lineNumber":885,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":886,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesFromUser \u003d"},{"lineNumber":887,"author":{"gitId":"-"},"content":"                getFeedbackResponsesFromGiverForCourse(courseId, userEmail);"},{"lineNumber":888,"author":{"gitId":"-"},"content":""},{"lineNumber":889,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesFromUser) {"},{"lineNumber":890,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":891,"author":{"gitId":"-"},"content":"                frDb.updateFeedbackResponse("},{"lineNumber":892,"author":{"gitId":"-"},"content":"                        FeedbackResponseAttributes.updateOptionsBuilder(response.getId())"},{"lineNumber":893,"author":{"gitId":"-"},"content":"                                .withGiverSection(newSection)"},{"lineNumber":894,"author":{"gitId":"-"},"content":"                                .build());"},{"lineNumber":895,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":896,"author":{"gitId":"-"},"content":"                assert false : \"Not possible to trigger recreating of response\";"},{"lineNumber":897,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":898,"author":{"gitId":"-"},"content":"            frcLogic.updateFeedbackResponseCommentsForResponse(response.getId());"},{"lineNumber":899,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":900,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":901,"author":{"gitId":"-"},"content":""},{"lineNumber":902,"author":{"gitId":"-"},"content":"    private boolean isRecipientTypeTeamMembers(FeedbackQuestionAttributes question) {"},{"lineNumber":903,"author":{"gitId":"-"},"content":"        return question.getRecipientType() \u003d\u003d FeedbackParticipantType.OWN_TEAM_MEMBERS"},{"lineNumber":904,"author":{"gitId":"-"},"content":"               || question.getRecipientType() \u003d\u003d FeedbackParticipantType.OWN_TEAM_MEMBERS_INCLUDING_SELF;"},{"lineNumber":905,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":906,"author":{"gitId":"-"},"content":""},{"lineNumber":907,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":908,"author":{"gitId":"-"},"content":"     * Updates responses for a student when his email changes."},{"lineNumber":909,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":910,"author":{"gitId":"-"},"content":"    public void updateFeedbackResponsesForChangingEmail("},{"lineNumber":911,"author":{"gitId":"-"},"content":"            String courseId, String oldEmail, String newEmail)"},{"lineNumber":912,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":913,"author":{"gitId":"-"},"content":""},{"lineNumber":914,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesFromUser \u003d"},{"lineNumber":915,"author":{"gitId":"-"},"content":"                getFeedbackResponsesFromGiverForCourse(courseId, oldEmail);"},{"lineNumber":916,"author":{"gitId":"-"},"content":""},{"lineNumber":917,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesFromUser) {"},{"lineNumber":918,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":919,"author":{"gitId":"-"},"content":"                updateFeedbackResponseCascade("},{"lineNumber":920,"author":{"gitId":"-"},"content":"                        FeedbackResponseAttributes.updateOptionsBuilder(response.getId())"},{"lineNumber":921,"author":{"gitId":"-"},"content":"                                .withGiver(newEmail)"},{"lineNumber":922,"author":{"gitId":"-"},"content":"                                .build());"},{"lineNumber":923,"author":{"gitId":"-"},"content":"                frcLogic.updateFeedbackResponseCommentsEmails(courseId, oldEmail, newEmail);"},{"lineNumber":924,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":925,"author":{"gitId":"-"},"content":"                assert false : \"Feedback response failed to update successfully as email was already in use.\";"},{"lineNumber":926,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":927,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":928,"author":{"gitId":"-"},"content":""},{"lineNumber":929,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesToUser \u003d"},{"lineNumber":930,"author":{"gitId":"-"},"content":"                getFeedbackResponsesForReceiverForCourse(courseId, oldEmail);"},{"lineNumber":931,"author":{"gitId":"-"},"content":""},{"lineNumber":932,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesToUser) {"},{"lineNumber":933,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":934,"author":{"gitId":"-"},"content":"                updateFeedbackResponseCascade("},{"lineNumber":935,"author":{"gitId":"-"},"content":"                        FeedbackResponseAttributes.updateOptionsBuilder(response.getId())"},{"lineNumber":936,"author":{"gitId":"-"},"content":"                                .withRecipient(newEmail)"},{"lineNumber":937,"author":{"gitId":"-"},"content":"                                .build());"},{"lineNumber":938,"author":{"gitId":"-"},"content":"            } catch (EntityAlreadyExistsException e) {"},{"lineNumber":939,"author":{"gitId":"-"},"content":"                assert false : \"Feedback response failed to update successfully as email was already in use.\";"},{"lineNumber":940,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":941,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":942,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":943,"author":{"gitId":"-"},"content":""},{"lineNumber":944,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":945,"author":{"gitId":"-"},"content":"     * Deletes responses using {@link AttributesDeletionQuery}."},{"lineNumber":946,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":947,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponses(AttributesDeletionQuery query) {"},{"lineNumber":948,"author":{"gitId":"-"},"content":"        frDb.deleteFeedbackResponses(query);"},{"lineNumber":949,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":950,"author":{"gitId":"-"},"content":""},{"lineNumber":951,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":952,"author":{"gitId":"-"},"content":"     * Deletes a feedback response cascade its associated comments."},{"lineNumber":953,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":954,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponseCascade(String responseId) {"},{"lineNumber":955,"author":{"gitId":"-"},"content":"        frcLogic.deleteFeedbackResponseComments("},{"lineNumber":956,"author":{"gitId":"-"},"content":"                AttributesDeletionQuery.builder()"},{"lineNumber":957,"author":{"gitId":"-"},"content":"                        .withResponseId(responseId)"},{"lineNumber":958,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":959,"author":{"gitId":"-"},"content":"        frDb.deleteFeedbackResponse(responseId);"},{"lineNumber":960,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":961,"author":{"gitId":"-"},"content":""},{"lineNumber":962,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":963,"author":{"gitId":"-"},"content":"     * Deletes all feedback responses of a question cascade its associated comments."},{"lineNumber":964,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":965,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesForQuestionCascade(String feedbackQuestionId) {"},{"lineNumber":966,"author":{"gitId":"-"},"content":"        // delete all responses, comments of the question"},{"lineNumber":967,"author":{"gitId":"-"},"content":"        AttributesDeletionQuery query \u003d AttributesDeletionQuery.builder()"},{"lineNumber":968,"author":{"gitId":"-"},"content":"                .withQuestionId(feedbackQuestionId)"},{"lineNumber":969,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":970,"author":{"gitId":"-"},"content":"        deleteFeedbackResponses(query);"},{"lineNumber":971,"author":{"gitId":"-"},"content":"        frcLogic.deleteFeedbackResponseComments(query);"},{"lineNumber":972,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":973,"author":{"gitId":"-"},"content":""},{"lineNumber":974,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":975,"author":{"gitId":"-"},"content":"     * Deletes all feedback responses involved an entity cascade its associated comments."},{"lineNumber":976,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":977,"author":{"gitId":"-"},"content":"     * @param courseId the course id"},{"lineNumber":978,"author":{"gitId":"-"},"content":"     * @param entityEmail the entity email"},{"lineNumber":979,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":980,"author":{"gitId":"-"},"content":"    public void deleteFeedbackResponsesInvolvedEntityOfCourseCascade(String courseId, String entityEmail) {"},{"lineNumber":981,"author":{"gitId":"-"},"content":"        // delete responses from the entity"},{"lineNumber":982,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesFromStudent \u003d"},{"lineNumber":983,"author":{"gitId":"-"},"content":"                getFeedbackResponsesFromGiverForCourse(courseId, entityEmail);"},{"lineNumber":984,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesFromStudent) {"},{"lineNumber":985,"author":{"gitId":"-"},"content":"            deleteFeedbackResponseCascade(response.getId());"},{"lineNumber":986,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":987,"author":{"gitId":"-"},"content":""},{"lineNumber":988,"author":{"gitId":"-"},"content":"        // delete responses to the entity"},{"lineNumber":989,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesToStudent \u003d"},{"lineNumber":990,"author":{"gitId":"-"},"content":"                getFeedbackResponsesForReceiverForCourse(courseId, entityEmail);"},{"lineNumber":991,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesToStudent) {"},{"lineNumber":992,"author":{"gitId":"-"},"content":"            deleteFeedbackResponseCascade(response.getId());"},{"lineNumber":993,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":994,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":995,"author":{"gitId":"-"},"content":""},{"lineNumber":996,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":997,"author":{"gitId":"-"},"content":"            String feedbackQuestionId, String courseId, String teamName, @Nullable CourseRoster courseRoster) {"},{"lineNumber":998,"author":{"gitId":"-"},"content":""},{"lineNumber":999,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":1000,"author":{"gitId":"-"},"content":"        List\u003cStudentAttributes\u003e studentsInTeam \u003d courseRoster \u003d\u003d null"},{"lineNumber":1001,"author":{"gitId":"-"},"content":"                ? studentsLogic.getStudentsForTeam(teamName, courseId) : courseRoster.getTeamToMembersTable().get(teamName);"},{"lineNumber":1002,"author":{"gitId":"-"},"content":""},{"lineNumber":1003,"author":{"gitId":"-"},"content":"        for (StudentAttributes student : studentsInTeam) {"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"            responses.addAll(frDb.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":1005,"author":{"gitId":"-"},"content":"                    feedbackQuestionId, student.getEmail()));"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1007,"author":{"gitId":"-"},"content":""},{"lineNumber":1008,"author":{"gitId":"-"},"content":"        responses.addAll(frDb.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":1009,"author":{"gitId":"-"},"content":"                                        feedbackQuestionId, teamName));"},{"lineNumber":1010,"author":{"gitId":"-"},"content":""},{"lineNumber":1011,"author":{"gitId":"-"},"content":"        return responses;"},{"lineNumber":1012,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1013,"author":{"gitId":"-"},"content":""},{"lineNumber":1014,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"     * Returns feedback responses given/received by an instructor."},{"lineNumber":1016,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesToOrFromInstructorForQuestion("},{"lineNumber":1018,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question, InstructorAttributes instructor) {"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"        UniqueResponsesSet viewableResponses \u003d new UniqueResponsesSet();"},{"lineNumber":1020,"author":{"gitId":"-"},"content":""},{"lineNumber":1021,"author":{"gitId":"-"},"content":"        // Add responses that the instructor submitted him/herself"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses("},{"lineNumber":1024,"author":{"gitId":"-"},"content":"                    getFeedbackResponsesFromGiverForQuestion(question.getFeedbackQuestionId(), instructor.getEmail())"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":1026,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1027,"author":{"gitId":"-"},"content":""},{"lineNumber":1028,"author":{"gitId":"-"},"content":"        // Add responses that user is a receiver of when response is visible to receiver or instructors"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"        if (question.getRecipientType() \u003d\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"                \u0026\u0026 (question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"                || question.isResponseVisibleTo(FeedbackParticipantType.INSTRUCTORS))) {"},{"lineNumber":1032,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses("},{"lineNumber":1033,"author":{"gitId":"-"},"content":"                    getFeedbackResponsesForReceiverForQuestion(question.getFeedbackQuestionId(), instructor.getEmail())"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1036,"author":{"gitId":"-"},"content":""},{"lineNumber":1037,"author":{"gitId":"-"},"content":"        return viewableResponses.getResponses();"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1039,"author":{"gitId":"-"},"content":""},{"lineNumber":1040,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"     * Returns viewable feedback responses for a student."},{"lineNumber":1042,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseAttributes\u003e getViewableFeedbackResponsesForStudentForQuestion("},{"lineNumber":1044,"author":{"gitId":"-"},"content":"            FeedbackQuestionAttributes question, StudentAttributes student, CourseRoster courseRoster) {"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"        UniqueResponsesSet viewableResponses \u003d new UniqueResponsesSet();"},{"lineNumber":1046,"author":{"gitId":"-"},"content":""},{"lineNumber":1047,"author":{"gitId":"-"},"content":"        // Add responses that the student submitted him/herself"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"        if (question.getGiverType() !\u003d FeedbackParticipantType.INSTRUCTORS) {"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses("},{"lineNumber":1050,"author":{"gitId":"-"},"content":"                    getFeedbackResponsesFromGiverForQuestion(question.getFeedbackQuestionId(), student.getEmail())"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1053,"author":{"gitId":"-"},"content":""},{"lineNumber":1054,"author":{"gitId":"-"},"content":"        // Add responses that user is a receiver of when response is visible to receiver"},{"lineNumber":1055,"author":{"gitId":"-"},"content":"        if (question.getRecipientType() !\u003d FeedbackParticipantType.INSTRUCTORS"},{"lineNumber":1056,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) {"},{"lineNumber":1057,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses("},{"lineNumber":1058,"author":{"gitId":"-"},"content":"                    getFeedbackResponsesForReceiverForQuestion(question.getFeedbackQuestionId(), student.getEmail())"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1061,"author":{"gitId":"-"},"content":""},{"lineNumber":1062,"author":{"gitId":"-"},"content":"        if (question.isResponseVisibleTo(FeedbackParticipantType.STUDENTS)) {"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses(getFeedbackResponsesForQuestion(question.getId()));"},{"lineNumber":1064,"author":{"gitId":"-"},"content":""},{"lineNumber":1065,"author":{"gitId":"-"},"content":"            // Early return as STUDENTS covers all cases below."},{"lineNumber":1066,"author":{"gitId":"-"},"content":"            return viewableResponses.getResponses();"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1068,"author":{"gitId":"-"},"content":""},{"lineNumber":1069,"author":{"gitId":"-"},"content":"        if (question.getRecipientType().isTeam()"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"                \u0026\u0026 question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER)) {"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses("},{"lineNumber":1072,"author":{"gitId":"-"},"content":"                    getFeedbackResponsesForReceiverForQuestion(question.getId(), student.getTeam())"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":1074,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1075,"author":{"gitId":"-"},"content":""},{"lineNumber":1076,"author":{"gitId":"-"},"content":"        if (question.getGiverType() \u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"                || question.isResponseVisibleTo(FeedbackParticipantType.OWN_TEAM_MEMBERS)) {"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"            viewableResponses.addNewResponses("},{"lineNumber":1079,"author":{"gitId":"-"},"content":"                    getFeedbackResponsesFromTeamForQuestion("},{"lineNumber":1080,"author":{"gitId":"-"},"content":"                            question.getId(), question.getCourseId(), student.getTeam(), courseRoster));"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1082,"author":{"gitId":"-"},"content":""},{"lineNumber":1083,"author":{"gitId":"-"},"content":"        if (question.isResponseVisibleTo(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS)) {"},{"lineNumber":1084,"author":{"gitId":"-"},"content":"            for (StudentAttributes studentInTeam : courseRoster.getTeamToMembersTable().get(student.getTeam())) {"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"                if (studentInTeam.getEmail().equals(student.getEmail())) {"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"                List\u003cFeedbackResponseAttributes\u003e responses \u003d"},{"lineNumber":1089,"author":{"gitId":"-"},"content":"                        frDb.getFeedbackResponsesForReceiverForQuestion(question.getId(), studentInTeam.getEmail());"},{"lineNumber":1090,"author":{"gitId":"-"},"content":"                viewableResponses.addNewResponses(responses);"},{"lineNumber":1091,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1092,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1093,"author":{"gitId":"-"},"content":""},{"lineNumber":1094,"author":{"gitId":"-"},"content":"        return viewableResponses.getResponses();"},{"lineNumber":1095,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1096,"author":{"gitId":"-"},"content":""},{"lineNumber":1097,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1098,"author":{"gitId":"-"},"content":"     * Gets the number of feedback responses created within a specified time range."},{"lineNumber":1099,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1100,"author":{"gitId":"-"},"content":"    int getNumFeedbackResponsesByTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"        return frDb.getNumFeedbackResponsesByTimeRange(startTime, endTime);"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1103,"author":{"gitId":"-"},"content":""},{"lineNumber":1104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"     * Set contains only unique response."},{"lineNumber":1106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":1107,"author":{"gitId":"-"},"content":"    private static class UniqueResponsesSet {"},{"lineNumber":1108,"author":{"gitId":"-"},"content":""},{"lineNumber":1109,"author":{"gitId":"-"},"content":"        private final Set\u003cString\u003e responseIds;"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"        private final List\u003cFeedbackResponseAttributes\u003e responses;"},{"lineNumber":1111,"author":{"gitId":"-"},"content":""},{"lineNumber":1112,"author":{"gitId":"-"},"content":"        private UniqueResponsesSet() {"},{"lineNumber":1113,"author":{"gitId":"-"},"content":"            responseIds \u003d new HashSet\u003c\u003e();"},{"lineNumber":1114,"author":{"gitId":"-"},"content":"            responses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1116,"author":{"gitId":"-"},"content":""},{"lineNumber":1117,"author":{"gitId":"-"},"content":"        private void addNewResponses(Collection\u003cFeedbackResponseAttributes\u003e newResponses) {"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"            newResponses.forEach(this::addNewResponse);"},{"lineNumber":1119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1120,"author":{"gitId":"-"},"content":""},{"lineNumber":1121,"author":{"gitId":"-"},"content":"        private void addNewResponse(FeedbackResponseAttributes newResponse) {"},{"lineNumber":1122,"author":{"gitId":"-"},"content":"            if (responseIds.contains(newResponse.getId())) {"},{"lineNumber":1123,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":1124,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1125,"author":{"gitId":"-"},"content":"            responseIds.add(newResponse.getId());"},{"lineNumber":1126,"author":{"gitId":"-"},"content":"            responses.add(newResponse);"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1128,"author":{"gitId":"-"},"content":""},{"lineNumber":1129,"author":{"gitId":"-"},"content":"        private List\u003cFeedbackResponseAttributes\u003e getResponses() {"},{"lineNumber":1130,"author":{"gitId":"-"},"content":"            return responses;"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":3,"-":1130}},{"path":"src/main/java/teammates/sqllogic/api/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.api;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import teammates.sqllogic.core.AccountRequestsLogic;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.sqllogic.core.AccountsLogic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.CoursesLogic;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.DeadlineExtensionsLogic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.FeedbackSessionsLogic;"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"import teammates.sqllogic.core.NotificationsLogic;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.UsageStatisticsLogic;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.sqllogic.core.UsersLogic;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Provides the business logic for production usage of the system."},{"lineNumber":33,"author":{"gitId":"-"},"content":" *"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * \u003cp\u003eThis is a Facade class which simply forwards the method to internal classes."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class Logic {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Logic instance \u003d new Logic();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    final AccountRequestsLogic accountRequestLogic \u003d AccountRequestsLogic.inst();"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    final AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    final CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    final DeadlineExtensionsLogic deadlineExtensionsLogic \u003d DeadlineExtensionsLogic.inst();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    final FeedbackSessionsLogic feedbackSessionsLogic \u003d FeedbackSessionsLogic.inst();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    final UsageStatisticsLogic usageStatisticsLogic \u003d UsageStatisticsLogic.inst();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    final UsersLogic usersLogic \u003d UsersLogic.inst();"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"    final NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    Logic() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Logic inst() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"     * Creates an account request."},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"     * @return newly created account request."},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidParametersException if the account request details are invalid."},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"     * @throws EntityAlreadyExistsException if the account request already exists."},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"     * @throws InvalidOperationException if the account request cannot be created."},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest createAccountRequest(String name, String email, String institute)"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"        return accountRequestLogic.createAccountRequest(name, email, institute);"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"     * Gets the account request with the given email and institute."},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"     * @return account request with the given email and institute."},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest getAccountRequest(String email, String institute) {"},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"        return accountRequestLogic.getAccountRequest(email, institute);"},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"kevin9foong"},"content":"     * Creates/Resets the account request with the given email and institute"},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":"     * such that it is not registered."},{"lineNumber":82,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"kevin9foong"},"content":"     * @return account request that is unregistered with the"},{"lineNumber":84,"author":{"gitId":"kevin9foong"},"content":"     *         email and institute."},{"lineNumber":85,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest resetAccountRequest(String email, String institute)"},{"lineNumber":87,"author":{"gitId":"kevin9foong"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":88,"author":{"gitId":"kevin9foong"},"content":"        return accountRequestLogic.resetAccountRequest(email, institute);"},{"lineNumber":89,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":91,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"kevin9foong"},"content":"     * Deletes account request by email and institute."},{"lineNumber":93,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"kevin9foong"},"content":"     * \u003cul\u003e"},{"lineNumber":95,"author":{"gitId":"kevin9foong"},"content":"     * \u003cli\u003eFails silently if no such account request.\u003c/li\u003e"},{"lineNumber":96,"author":{"gitId":"kevin9foong"},"content":"     * \u003c/ul\u003e"},{"lineNumber":97,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"kevin9foong"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":99,"author":{"gitId":"kevin9foong"},"content":"     * All parameters are non-null."},{"lineNumber":100,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"kevin9foong"},"content":"    public void deleteAccountRequest(String email, String institute) {"},{"lineNumber":102,"author":{"gitId":"kevin9foong"},"content":"        accountRequestLogic.deleteAccountRequest(email, institute);"},{"lineNumber":103,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Gets an account."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Account getAccount(UUID id) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return accountsLogic.getAccount(id);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Creates an account."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @return the created account"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the account is not valid"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the account already exists in the database."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Account createAccount(Account account)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return accountsLogic.createAccount(account);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Gets a course by course id."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @param courseId courseId of the course."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * @return the specified course."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public Course getCourse(String courseId) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return coursesLogic.getCourse(courseId);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Creates a course."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @param course the course to create."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * @return the created course."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the course is not valid."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the course already exists."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public Course createCourse(Course course) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return coursesLogic.createCourse(course);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Get section by {@code courseId} and {@code teamName}."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public Section getSectionByCourseIdAndTeam(String courseId, String teamName) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return coursesLogic.getSectionByCourseIdAndTeam(courseId, teamName);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Creates a deadline extension."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @return created deadline extension"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the deadline extension is not valid"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the deadline extension already exist"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public DeadlineExtension createDeadlineExtension(DeadlineExtension deadlineExtension)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return deadlineExtensionsLogic.createDeadlineExtension(deadlineExtension);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Gets a feedback session."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @return null if not found."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(UUID id) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.getFeedbackSession(id);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Creates a feedback session."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * @return created feedback session"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException if the session is not valid"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the session already exist"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public FeedbackSession createFeedbackSession(FeedbackSession session)"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return feedbackSessionsLogic.createFeedbackSession(session);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * Get usage statistics within a time range."},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public List\u003cUsageStatistics\u003e getUsageStatisticsForTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return usageStatisticsLogic.getUsageStatisticsForTimeRange(startTime, endTime);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Calculate usage statistics within a time range."},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public UsageStatistics calculateEntitiesStatisticsForTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return usageStatisticsLogic.calculateEntitiesStatisticsForTimeRange(startTime, endTime);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * Create usage statistics within a time range."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void createUsageStatistics(UsageStatistics attributes)"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        usageStatisticsLogic.createUsageStatistics(attributes);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"hhdqirui"},"content":"     * Creates a notification."},{"lineNumber":208,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"hhdqirui"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":210,"author":{"gitId":"hhdqirui"},"content":"     * * All parameters are non-null."},{"lineNumber":211,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":212,"author":{"gitId":"hhdqirui"},"content":"     * @return created notification"},{"lineNumber":213,"author":{"gitId":"hhdqirui"},"content":"     * @throws InvalidParametersException if the notification is not valid"},{"lineNumber":214,"author":{"gitId":"hhdqirui"},"content":"     * @throws EntityAlreadyExistsException if the notification exists in the database"},{"lineNumber":215,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"hhdqirui"},"content":"    public Notification createNotification(Notification notification) throws"},{"lineNumber":217,"author":{"gitId":"hhdqirui"},"content":"            InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":218,"author":{"gitId":"hhdqirui"},"content":"        return notificationsLogic.createNotification(notification);"},{"lineNumber":219,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"hhdqirui"},"content":"     * Gets a notification by ID."},{"lineNumber":223,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"hhdqirui"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":225,"author":{"gitId":"hhdqirui"},"content":"     * * All parameters are non-null."},{"lineNumber":226,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":227,"author":{"gitId":"hhdqirui"},"content":"     * @return Null if no match found."},{"lineNumber":228,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"hhdqirui"},"content":"    public Notification getNotification(UUID notificationId) {"},{"lineNumber":230,"author":{"gitId":"hhdqirui"},"content":"        return notificationsLogic.getNotification(notificationId);"},{"lineNumber":231,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":233,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"hhdqirui"},"content":"     * Updates a notification."},{"lineNumber":235,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":236,"author":{"gitId":"hhdqirui"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":237,"author":{"gitId":"hhdqirui"},"content":"     * * All parameters are non-null."},{"lineNumber":238,"author":{"gitId":"hhdqirui"},"content":"     * @return updated notification"},{"lineNumber":239,"author":{"gitId":"hhdqirui"},"content":"     * @throws InvalidParametersException if the notification is not valid"},{"lineNumber":240,"author":{"gitId":"hhdqirui"},"content":"     * @throws EntityDoesNotExistException if the notification does not exist in the database"},{"lineNumber":241,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"hhdqirui"},"content":"    public Notification updateNotification(UUID notificationId, Instant startTime, Instant endTime,"},{"lineNumber":243,"author":{"gitId":"hhdqirui"},"content":"                                           NotificationStyle style, NotificationTargetUser targetUser, String title,"},{"lineNumber":244,"author":{"gitId":"hhdqirui"},"content":"                                           String message) throws"},{"lineNumber":245,"author":{"gitId":"hhdqirui"},"content":"            InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":246,"author":{"gitId":"hhdqirui"},"content":"        return notificationsLogic.updateNotification(notificationId, startTime, endTime, style, targetUser, title, message);"},{"lineNumber":247,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":249,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":250,"author":{"gitId":"hhdqirui"},"content":"     * Deletes notification by ID."},{"lineNumber":251,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":252,"author":{"gitId":"hhdqirui"},"content":"     * \u003cul\u003e"},{"lineNumber":253,"author":{"gitId":"hhdqirui"},"content":"     * \u003cli\u003eFails silently if no such notification.\u003c/li\u003e"},{"lineNumber":254,"author":{"gitId":"hhdqirui"},"content":"     * \u003c/ul\u003e"},{"lineNumber":255,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":256,"author":{"gitId":"hhdqirui"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":257,"author":{"gitId":"hhdqirui"},"content":"     * * All parameters are non-null."},{"lineNumber":258,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"hhdqirui"},"content":"    public void deleteNotification(UUID notificationId) {"},{"lineNumber":260,"author":{"gitId":"hhdqirui"},"content":"        notificationsLogic.deleteNotification(notificationId);"},{"lineNumber":261,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":263,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"hhdqirui"},"content":"     * Get a list of IDs of the read notifications of the account."},{"lineNumber":265,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"hhdqirui"},"content":"    public List\u003cUUID\u003e getReadNotificationsId(String id) {"},{"lineNumber":267,"author":{"gitId":"hhdqirui"},"content":"        return accountsLogic.getReadNotificationsId(id);"},{"lineNumber":268,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":270,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":271,"author":{"gitId":"hhdqirui"},"content":"     * Updates user read status for notification with ID {@code notificationId} and expiry time {@code endTime}."},{"lineNumber":272,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":273,"author":{"gitId":"hhdqirui"},"content":"     * \u003cp\u003ePreconditions:\u003c/p\u003e"},{"lineNumber":274,"author":{"gitId":"hhdqirui"},"content":"     * * All parameters are non-null. {@code endTime} must be after current moment."},{"lineNumber":275,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"hhdqirui"},"content":"    public List\u003cUUID\u003e updateReadNotifications(String id, UUID notificationId, Instant endTime)"},{"lineNumber":277,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":278,"author":{"gitId":"hhdqirui"},"content":"        return accountsLogic.updateReadNotifications(id, notificationId, endTime);"},{"lineNumber":279,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * Gets instructor associated with {@code id}."},{"lineNumber":283,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * @param id    Id of Instructor."},{"lineNumber":285,"author":{"gitId":"-"},"content":"     * @return      Returns Instructor if found else null."},{"lineNumber":286,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    public Instructor getInstructor(UUID id) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructor(id);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * Gets instructor associated with {@code courseId} and {@code email}."},{"lineNumber":293,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    public Instructor getInstructor(String courseId, String email) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructor(courseId, email);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code regkey}."},{"lineNumber":300,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByRegistrationKey(String regKey) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorByRegistrationKey(regKey);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":306,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code googleId}."},{"lineNumber":307,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByGoogleId(String courseId, String googleId) {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        return usersLogic.getInstructorByGoogleId(courseId, googleId);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":313,"author":{"gitId":"-"},"content":"     * Gets student associated with {@code id}."},{"lineNumber":314,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":315,"author":{"gitId":"-"},"content":"     * @param id    Id of Student."},{"lineNumber":316,"author":{"gitId":"-"},"content":"     * @return      Returns Student if found else null."},{"lineNumber":317,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    public Student getStudent(UUID id) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        return usersLogic.getStudent(id);"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":323,"author":{"gitId":"-"},"content":"     * Gets student associated with {@code courseId} and {@code email}."},{"lineNumber":324,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    public Student getStudent(String courseId, String email) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        return usersLogic.getStudent(courseId, email);"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code regkey}."},{"lineNumber":331,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public Student getStudentByRegistrationKey(String regKey) {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentByRegistrationKey(regKey);"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":337,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code googleId}."},{"lineNumber":338,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public Student getStudentByGoogleId(String courseId, String googleId) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        return usersLogic.getStudentByGoogleId(courseId, googleId);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":83,"-":207,"kevin9foong":52}},{"path":"src/main/java/teammates/sqllogic/core/AccountRequestsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":" * Handles operations related to account requests."},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":" *"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":" * @see AccountRequest"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":" * @see AccountRequestsDb"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"public final class AccountRequestsLogic {"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    private static final AccountRequestsLogic instance \u003d new AccountRequestsLogic();"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"    private AccountRequestsDb accountRequestDb;"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"    private AccountRequestsLogic() {"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":"        // prevent notification"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    public static AccountRequestsLogic inst() {"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"        return instance;"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"     * Initialise dependencies for {@code AccountRequestLogic} object."},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    public void initLogicDependencies(AccountRequestsDb accountRequestDb) {"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        this.accountRequestDb \u003d accountRequestDb;"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"     * Creates an account request."},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest createAccountRequest(String name, String email, String institute)"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest toCreate \u003d new AccountRequest(email, name, institute);"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"        return accountRequestDb.createAccountRequest(toCreate);"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"     * Gets account request associated with the {@code }."},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest getAccountRequest(String email, String institute) {"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"        return accountRequestDb.getAccountRequest(email, institute);"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"     * Creates/resets the account request with the given email and institute such that it is not registered."},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest resetAccountRequest(String email, String institute)"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"            throws EntityDoesNotExistException, InvalidParametersException {"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d accountRequestDb.getAccountRequest(email, institute);"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"        if (accountRequest \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"            throw new EntityDoesNotExistException(\"Failed to reset since AccountRequest with \""},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"                + \"the given email and institute cannot be found.\");"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"        accountRequest.setRegisteredAt(null);"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"        return accountRequestDb.updateAccountRequest(accountRequest);"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"     * Deletes account request associated with the {@code email} and {@code institute}."},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"     * \u003cp\u003eFails silently if no account requests with the given email and institute to delete can be found.\u003c/p\u003e"},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"    public void deleteAccountRequest(String email, String institute) {"},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest toDelete \u003d accountRequestDb.getAccountRequest(email, institute);"},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":"        accountRequestDb.deleteAccountRequest(toDelete);"},{"lineNumber":80,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":"}"}],"authorContributionMap":{"kevin9foong":81}},{"path":"src/main/java/teammates/sqllogic/core/AccountsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":" * Handles operations related to accounts."},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":" *"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":" * @see Account"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":" * @see AccountsDb"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":"public final class AccountsLogic {"},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":"    private static final AccountsLogic instance \u003d new AccountsLogic();"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"    private AccountsDb accountsDb;"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsLogic notificationsLogic;"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"    private AccountsLogic() {"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"        // prevent initialization"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"    void initLogicDependencies(AccountsDb accountsDb, NotificationsLogic notificationsLogic) {"},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"        this.accountsDb \u003d accountsDb;"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"        this.notificationsLogic \u003d notificationsLogic;"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"    public static AccountsLogic inst() {"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"        return instance;"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Gets an account."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Account getAccount(UUID id) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return accountsDb.getAccount(id);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates an account."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return the created account"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException   if the account is not valid"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws EntityAlreadyExistsException if the account already exists in the"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *                                      database."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Account createAccount(Account account)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assert account !\u003d null;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return accountsDb.createAccount(account);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"hhdqirui"},"content":"     * Updates the readNotifications of an account."},{"lineNumber":67,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"hhdqirui"},"content":"     * @param googleId       google ID of the user who read the notification."},{"lineNumber":69,"author":{"gitId":"hhdqirui"},"content":"     * @param notificationId ID of notification to be marked as read."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param endTime        the expiry time of the notification, i.e. notification"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *                       will not be shown after this time."},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":"     * @return the account with updated read notifications."},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":"     * @throws InvalidParametersException  if the notification has expired."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if account or notification does not"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *                                     exist."},{"lineNumber":76,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"hhdqirui"},"content":"    public List\u003cUUID\u003e updateReadNotifications(String googleId, UUID notificationId, Instant endTime)"},{"lineNumber":78,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":79,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d accountsDb.getAccountByGoogleId(googleId);"},{"lineNumber":80,"author":{"gitId":"hhdqirui"},"content":"        if (account \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitId":"hhdqirui"},"content":"            throw new EntityDoesNotExistException(\"Trying to update the read notifications of a non-existent account.\");"},{"lineNumber":82,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":84,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d notificationsLogic.getNotification(notificationId);"},{"lineNumber":85,"author":{"gitId":"hhdqirui"},"content":"        if (notification \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitId":"hhdqirui"},"content":"            throw new EntityDoesNotExistException(\"Trying to mark as read a notification that does not exist.\");"},{"lineNumber":87,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"hhdqirui"},"content":"        if (endTime.isBefore(Instant.now())) {"},{"lineNumber":89,"author":{"gitId":"hhdqirui"},"content":"            throw new InvalidParametersException(\"Trying to mark an expired notification as read.\");"},{"lineNumber":90,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":92,"author":{"gitId":"hhdqirui"},"content":"        ReadNotification readNotification \u003d new ReadNotification(account, notification);"},{"lineNumber":93,"author":{"gitId":"hhdqirui"},"content":"        account.addReadNotification(readNotification);"},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":"        return account.getReadNotifications().stream()"},{"lineNumber":96,"author":{"gitId":"hhdqirui"},"content":"                .map(n -\u003e n.getNotification().getId())"},{"lineNumber":97,"author":{"gitId":"hhdqirui"},"content":"                .collect(Collectors.toList());"},{"lineNumber":98,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":100,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"hhdqirui"},"content":"     * Gets ids of read notifications in an account."},{"lineNumber":102,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"hhdqirui"},"content":"    public List\u003cUUID\u003e getReadNotificationsId(String googleId) {"},{"lineNumber":104,"author":{"gitId":"hhdqirui"},"content":"        return accountsDb.getAccountByGoogleId(googleId).getReadNotifications().stream()"},{"lineNumber":105,"author":{"gitId":"hhdqirui"},"content":"                .map(n -\u003e n.getNotification().getId())"},{"lineNumber":106,"author":{"gitId":"hhdqirui"},"content":"                .collect(Collectors.toList());"},{"lineNumber":107,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":81,"-":27}},{"path":"src/main/java/teammates/sqllogic/core/LogicStarter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javax.servlet.ServletContextEvent;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javax.servlet.ServletContextListener;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlapi.AccountRequestsDb;"},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.CoursesDb;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.DeadlineExtensionsDb;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.FeedbackSessionsDb;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.NotificationsDb;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.UsageStatisticsDb;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Setup in web.xml to register logic classes at application startup."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class LogicStarter implements ServletContextListener {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Registers dependencies between different logic classes."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void initializeDependencies() {"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        AccountRequestsLogic accountRequestsLogic \u003d AccountRequestsLogic.inst();"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"        AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        CoursesLogic coursesLogic \u003d CoursesLogic.inst();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        DeadlineExtensionsLogic deadlineExtensionsLogic \u003d DeadlineExtensionsLogic.inst();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FeedbackSessionsLogic fsLogic \u003d FeedbackSessionsLogic.inst();"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"        NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        UsageStatisticsLogic usageStatisticsLogic \u003d UsageStatisticsLogic.inst();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        UsersLogic usersLogic \u003d UsersLogic.inst();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        accountRequestsLogic.initLogicDependencies(AccountRequestsDb.inst());"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"        accountsLogic.initLogicDependencies(AccountsDb.inst(), notificationsLogic);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        coursesLogic.initLogicDependencies(CoursesDb.inst(), fsLogic);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        deadlineExtensionsLogic.initLogicDependencies(DeadlineExtensionsDb.inst());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        fsLogic.initLogicDependencies(FeedbackSessionsDb.inst());"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"        notificationsLogic.initLogicDependencies(NotificationsDb.inst());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        usageStatisticsLogic.initLogicDependencies(UsageStatisticsDb.inst());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        usersLogic.initLogicDependencies(UsersDb.inst());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        log.info(\"Initialized dependencies between logic classes\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void contextInitialized(ServletContextEvent event) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Invoked by Jetty at application startup."},{"lineNumber":51,"author":{"gitId":"-"},"content":"        initializeDependencies();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void contextDestroyed(ServletContextEvent event) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Nothing to do"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":6,"-":49,"kevin9foong":4}},{"path":"src/main/java/teammates/sqllogic/core/NotificationsLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.NotificationsDb;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":" * Handles the logic related to notifications."},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"public final class NotificationsLogic {"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"    private static final NotificationsLogic instance \u003d new NotificationsLogic();"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsDb notificationsDb;"},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsLogic() {"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"        // prevent initialization"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"    public static NotificationsLogic inst() {"},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"        return instance;"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"     * Initialise dependencies for {@code NotificationLogic} object."},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"    public void initLogicDependencies(NotificationsDb notificationsDb) {"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"        this.notificationsDb \u003d notificationsDb;"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"     * Creates a notification."},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"     * @return the created notification"},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"     * @throws InvalidParametersException if the notification is not valid"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"     * @throws EntityAlreadyExistsException if the notification already exists in the database."},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"    public Notification createNotification(Notification notification)"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        return notificationsDb.createNotification(notification);"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"     * Gets notification associated with the {@code notificationId}."},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":"     * @return null if no match found."},{"lineNumber":56,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"hhdqirui"},"content":"    public Notification getNotification(UUID notificationId) {"},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":"        assert notificationId !\u003d null;"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":"        return notificationsDb.getNotification(notificationId);"},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":63,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"hhdqirui"},"content":"     * Updates/Creates the notification using {@link Notification}."},{"lineNumber":65,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"hhdqirui"},"content":"     * @return updated notification"},{"lineNumber":67,"author":{"gitId":"hhdqirui"},"content":"     * @throws InvalidParametersException if attributes to update are not valid"},{"lineNumber":68,"author":{"gitId":"hhdqirui"},"content":"     * @throws EntityDoesNotExistException if notification cannot be found with given Id"},{"lineNumber":69,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"hhdqirui"},"content":"    public Notification updateNotification(UUID notificationId, Instant startTime, Instant endTime,"},{"lineNumber":71,"author":{"gitId":"hhdqirui"},"content":"                                           NotificationStyle style, NotificationTargetUser targetUser, String title,"},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":"                                           String message)"},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":74,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d notificationsDb.getNotification(notificationId);"},{"lineNumber":75,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":76,"author":{"gitId":"hhdqirui"},"content":"        if (notification \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitId":"hhdqirui"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT + Notification.class);"},{"lineNumber":78,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":80,"author":{"gitId":"hhdqirui"},"content":"        notification.setStartTime(startTime);"},{"lineNumber":81,"author":{"gitId":"hhdqirui"},"content":"        notification.setEndTime(endTime);"},{"lineNumber":82,"author":{"gitId":"hhdqirui"},"content":"        notification.setStyle(style);"},{"lineNumber":83,"author":{"gitId":"hhdqirui"},"content":"        notification.setTargetUser(targetUser);"},{"lineNumber":84,"author":{"gitId":"hhdqirui"},"content":"        notification.setTitle(title);"},{"lineNumber":85,"author":{"gitId":"hhdqirui"},"content":"        notification.setMessage(message);"},{"lineNumber":86,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":87,"author":{"gitId":"hhdqirui"},"content":"        if (!notification.isValid()) {"},{"lineNumber":88,"author":{"gitId":"hhdqirui"},"content":"            throw new InvalidParametersException(notification.getInvalidityInfo());"},{"lineNumber":89,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":"        return notification;"},{"lineNumber":92,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":"     * Deletes notification associated with the {@code notificationId}."},{"lineNumber":96,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"hhdqirui"},"content":"     * \u003cp\u003eFails silently if the notification doesn\u0027t exist.\u003c/p\u003e"},{"lineNumber":98,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"hhdqirui"},"content":"    public void deleteNotification(UUID notificationId) {"},{"lineNumber":100,"author":{"gitId":"hhdqirui"},"content":"        assert notificationId !\u003d null;"},{"lineNumber":101,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":102,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d getNotification(notificationId);"},{"lineNumber":103,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.deleteNotification(notification);"},{"lineNumber":104,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":105}},{"path":"src/main/java/teammates/sqllogic/core/UsersLogic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":5,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlapi.UsersDb;"},{"lineNumber":6,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":8,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":9,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"domlimm"},"content":" * Handles operations related to user (instructor \u0026 student)."},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":" *"},{"lineNumber":12,"author":{"gitId":"domlimm"},"content":" * @see User"},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":" * @see UsersDb"},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":"public final class UsersLogic {"},{"lineNumber":16,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"    private static final UsersLogic instance \u003d new UsersLogic();"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"    private UsersDb usersDb;"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"    private UsersLogic() {"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":"        // prevent initialization"},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":"    public static UsersLogic inst() {"},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":"        return instance;"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":"    void initLogicDependencies(UsersDb usersDb) {"},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":"        this.usersDb \u003d usersDb;"},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":33,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":"     * Gets instructor associated with {@code id}."},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"domlimm"},"content":"     * @param id    Id of Instructor."},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":"     * @return      Returns Instructor if found else null."},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"    public Instructor getInstructor(UUID id) {"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"        assert id !\u003d null;"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":"        return usersDb.getInstructor(id);"},{"lineNumber":43,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Gets instructor associated with {@code courseId} and {@code email}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Instructor getInstructor(String courseId, String email) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return usersDb.getInstructor(courseId, email);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code regkey}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByRegistrationKey(String regKey) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assert regKey !\u003d null;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorByRegKey(regKey);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Gets an instructor by associated {@code googleId}."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByGoogleId(String courseId, String googleId) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return usersDb.getInstructorByGoogleId(courseId, googleId);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":"     * Gets student associated with {@code id}."},{"lineNumber":76,"author":{"gitId":"domlimm"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":"     * @param id    Id of Student."},{"lineNumber":78,"author":{"gitId":"domlimm"},"content":"     * @return      Returns Student if found else null."},{"lineNumber":79,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"domlimm"},"content":"    public Student getStudent(UUID id) {"},{"lineNumber":81,"author":{"gitId":"domlimm"},"content":"        assert id !\u003d null;"},{"lineNumber":82,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":83,"author":{"gitId":"domlimm"},"content":"        return usersDb.getStudent(id);"},{"lineNumber":84,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Gets student associated with {@code courseId} and {@code email}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public Student getStudent(String courseId, String email) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assert email !\u003d null;"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return usersDb.getStudent(courseId, email);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code regkey}."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public Student getStudentByRegistrationKey(String regKey) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assert regKey !\u003d null;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return usersDb.getStudentByRegKey(regKey);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Gets a student by associated {@code googleId}."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Student getStudentByGoogleId(String courseId, String googleId) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return usersDb.getStudentByGoogleId(courseId, googleId);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":56,"-":58}},{"path":"src/main/java/teammates/storage/sqlapi/AccountRequestsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.TypedQuery;"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":" * Generates CRUD operations for AccountRequest."},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":" *"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":" * @see AccountRequest"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":" */"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"public final class AccountRequestsDb extends EntitiesDb\u003cAccountRequest\u003e {"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"    private static final AccountRequestsDb instance \u003d new AccountRequestsDb();"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"    private AccountRequestsDb() {"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"        // prevent instantiation"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"    public static AccountRequestsDb inst() {"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"     * Creates an AccountRequest in the database."},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest createAccountRequest(AccountRequest accountRequest)"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        assert accountRequest !\u003d null;"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"        if (!accountRequest.isValid()) {"},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidParametersException(accountRequest.getInvalidityInfo());"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"        // don\u0027t need to check registrationKey for uniqueness since it is generated using email + institute"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"        if (getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()) !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"            throw new EntityAlreadyExistsException("},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"                String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, accountRequest.toString()));"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        persist(accountRequest);"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"        return accountRequest;"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"     * Get AccountRequest by {@code email} and {@code institute} from database."},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest getAccountRequest(String email, String institute) {"},{"lineNumber":61,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":"        CriteriaQuery\u003cAccountRequest\u003e cr \u003d cb.createQuery(AccountRequest.class);"},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"        Root\u003cAccountRequest\u003e root \u003d cr.from(AccountRequest.class);"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"        cr.select(root).where(cb.and(cb.equal("},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"                root.get(\"email\"), email), cb.equal(root.get(\"institute\"), institute)));"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":67,"author":{"gitId":"domlimm"},"content":"        TypedQuery\u003cAccountRequest\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"        return query.getResultStream().findFirst().orElse(null);"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"     * Get AccountRequest by {@code registrationKey} from database."},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest getAccountRequest(String registrationKey) {"},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"        CriteriaQuery\u003cAccountRequest\u003e cr \u003d cb.createQuery(AccountRequest.class);"},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":"        Root\u003cAccountRequest\u003e root \u003d cr.from(AccountRequest.class);"},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":"        cr.select(root).where(cb.equal(root.get(\"registrationKey\"), registrationKey));"},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":80,"author":{"gitId":"domlimm"},"content":"        TypedQuery\u003cAccountRequest\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":"        return query.getResultStream().findFirst().orElse(null);"},{"lineNumber":82,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":84,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"kevin9foong"},"content":"     * Get AccountRequest with {@code createdTime} within the times {@code startTime} and {@code endTime}."},{"lineNumber":86,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"kevin9foong"},"content":"    public List\u003cAccountRequest\u003e getAccountRequests(Instant startTime, Instant endTime) {"},{"lineNumber":88,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":89,"author":{"gitId":"kevin9foong"},"content":"        CriteriaQuery\u003cAccountRequest\u003e cr \u003d cb.createQuery(AccountRequest.class);"},{"lineNumber":90,"author":{"gitId":"kevin9foong"},"content":"        Root\u003cAccountRequest\u003e root \u003d cr.from(AccountRequest.class);"},{"lineNumber":91,"author":{"gitId":"kevin9foong"},"content":"        cr.select(root).where(cb.and(cb.greaterThanOrEqualTo(root.get(\"createdAt\"), startTime),"},{"lineNumber":92,"author":{"gitId":"kevin9foong"},"content":"                cb.lessThanOrEqualTo(root.get(\"createdAt\"), endTime)));"},{"lineNumber":93,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":94,"author":{"gitId":"domlimm"},"content":"        TypedQuery\u003cAccountRequest\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":95,"author":{"gitId":"kevin9foong"},"content":"        return query.getResultList();"},{"lineNumber":96,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":98,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"kevin9foong"},"content":"     * Updates or creates (if does not exist) the AccountRequest in the database."},{"lineNumber":100,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest updateAccountRequest(AccountRequest accountRequest)"},{"lineNumber":102,"author":{"gitId":"kevin9foong"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":103,"author":{"gitId":"kevin9foong"},"content":"        assert accountRequest !\u003d null;"},{"lineNumber":104,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":105,"author":{"gitId":"kevin9foong"},"content":"        if (!accountRequest.isValid()) {"},{"lineNumber":106,"author":{"gitId":"kevin9foong"},"content":"            throw new InvalidParametersException(accountRequest.getInvalidityInfo());"},{"lineNumber":107,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":109,"author":{"gitId":"kevin9foong"},"content":"        if (getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute()) \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitId":"kevin9foong"},"content":"            throw new EntityDoesNotExistException("},{"lineNumber":111,"author":{"gitId":"kevin9foong"},"content":"                String.format(ERROR_UPDATE_NON_EXISTENT, accountRequest.toString()));"},{"lineNumber":112,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":114,"author":{"gitId":"kevin9foong"},"content":"        merge(accountRequest);"},{"lineNumber":115,"author":{"gitId":"kevin9foong"},"content":"        return accountRequest;"},{"lineNumber":116,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":118,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Deletes an AccountRequest."},{"lineNumber":120,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void deleteAccountRequest(AccountRequest accountRequest) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (accountRequest !\u003d null) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            delete(accountRequest);"},{"lineNumber":124,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"kevin9foong"},"content":"}"}],"authorContributionMap":{"domlimm":6,"hhdqirui":2,"kevin9foong":114,"-":4}},{"path":"src/main/java/teammates/storage/sqlapi/AccountsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Handles CRUD operations for accounts."},{"lineNumber":16,"author":{"gitId":"-"},"content":" *"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * @see Account"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public final class AccountsDb extends EntitiesDb\u003cAccount\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final AccountsDb instance \u003d new AccountsDb();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private AccountsDb() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static AccountsDb inst() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an Account with the {@code id} or null if it does not exist."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Account getAccount(UUID id) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assert id !\u003d null;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(Account.class, id);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns an Account with the {@code googleId} or null if it does not exist."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Account getAccountByGoogleId(String googleId) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assert googleId !\u003d null;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return HibernateUtil.getBySimpleNaturalId(Account.class, googleId);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Creates an Account."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Account createAccount(Account account) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assert account !\u003d null;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!account.isValid()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(account.getInvalidityInfo());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (getAccountByGoogleId(account.getGoogleId()) !\u003d null) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, account.toString()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        persist(account);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return account;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Saves an updated {@code Account} to the db."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Account updateAccount(Account account) throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assert account !\u003d null;"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!account.isValid()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(account.getInvalidityInfo());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (getAccount(account.getId()) \u003d\u003d null) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT + account.toString());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return merge(account);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Deletes an Account."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void deleteAccount(Account account) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (account !\u003d null) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            delete(account);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":3,"-":90}},{"path":"src/main/java/teammates/storage/sqlapi/CoursesDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Section;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Team;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Handles CRUD operations for courses."},{"lineNumber":21,"author":{"gitId":"-"},"content":" *"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * @see Course"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public final class CoursesDb extends EntitiesDb\u003cCourse\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final CoursesDb instance \u003d new CoursesDb();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private CoursesDb() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static CoursesDb inst() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns a course with the {@code courseID} or null if it does not exist."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Course getCourse(String courseId) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(Course.class, courseId);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a course."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Course createCourse(Course course) throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assert course !\u003d null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!course.isValid()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(course.getInvalidityInfo());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (getCourse(course.getId()) !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, course.toString()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        persist(course);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return course;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Saves an updated {@code Course} to the db."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Course updateCourse(Course course) throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assert course !\u003d null;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!course.isValid()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(course.getInvalidityInfo());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (getCourse(course.getId()) \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return merge(course);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Deletes a course."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void deleteCourse(Course course) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (course !\u003d null) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            delete(course);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Get section by {@code courseId} and {@code teamName}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Section getSectionByCourseIdAndTeam(String courseId, String teamName) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assert courseId !\u003d null;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert teamName !\u003d null;"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cSection\u003e cr \u003d cb.createQuery(Section.class);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Root\u003cSection\u003e sectionRoot \u003d cr.from(Section.class);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Join\u003cSection, Course\u003e courseJoin \u003d sectionRoot.join(\"course\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Join\u003cSection, Team\u003e teamJoin \u003d sectionRoot.join(\"teams\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        cr.select(sectionRoot).where(cb.and("},{"lineNumber":103,"author":{"gitId":"-"},"content":"                cb.equal(courseJoin.get(\"id\"), courseId),"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                cb.equal(teamJoin.get(\"name\"), teamName)));"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":3,"-":105}},{"path":"src/main/java/teammates/storage/sqlapi/DeadlineExtensionsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EuniceSim142"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"EuniceSim142"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"EuniceSim142"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"EuniceSim142"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"EuniceSim142"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"EuniceSim142"},"content":"import teammates.storage.sqlentity.DeadlineExtension;"},{"lineNumber":13,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":14,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.TypedQuery;"},{"lineNumber":15,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":16,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":17,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":18,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":19,"author":{"gitId":"EuniceSim142"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"EuniceSim142"},"content":" * Handles CRUD operations for deadline extensions."},{"lineNumber":21,"author":{"gitId":"EuniceSim142"},"content":" *"},{"lineNumber":22,"author":{"gitId":"EuniceSim142"},"content":" * @see DeadlineExtension"},{"lineNumber":23,"author":{"gitId":"EuniceSim142"},"content":" */"},{"lineNumber":24,"author":{"gitId":"EuniceSim142"},"content":"public final class DeadlineExtensionsDb extends EntitiesDb\u003cDeadlineExtension\u003e {"},{"lineNumber":25,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":26,"author":{"gitId":"EuniceSim142"},"content":"    private static final DeadlineExtensionsDb instance \u003d new DeadlineExtensionsDb();"},{"lineNumber":27,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":28,"author":{"gitId":"EuniceSim142"},"content":"    private DeadlineExtensionsDb() {"},{"lineNumber":29,"author":{"gitId":"EuniceSim142"},"content":"        // prevent initialization"},{"lineNumber":30,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":32,"author":{"gitId":"EuniceSim142"},"content":"    public static DeadlineExtensionsDb inst() {"},{"lineNumber":33,"author":{"gitId":"EuniceSim142"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":36,"author":{"gitId":"EuniceSim142"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"EuniceSim142"},"content":"     * Creates a deadline extension."},{"lineNumber":38,"author":{"gitId":"EuniceSim142"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"EuniceSim142"},"content":"    public DeadlineExtension createDeadlineExtension(DeadlineExtension de)"},{"lineNumber":40,"author":{"gitId":"EuniceSim142"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":41,"author":{"gitId":"EuniceSim142"},"content":"        assert de !\u003d null;"},{"lineNumber":42,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":43,"author":{"gitId":"EuniceSim142"},"content":"        if (!de.isValid()) {"},{"lineNumber":44,"author":{"gitId":"EuniceSim142"},"content":"            throw new InvalidParametersException(de.getInvalidityInfo());"},{"lineNumber":45,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (getDeadlineExtension(de.getId()) !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"EuniceSim142"},"content":"            throw new EntityAlreadyExistsException("},{"lineNumber":49,"author":{"gitId":"EuniceSim142"},"content":"                    String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, de.toString()));"},{"lineNumber":50,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":52,"author":{"gitId":"EuniceSim142"},"content":"        persist(de);"},{"lineNumber":53,"author":{"gitId":"EuniceSim142"},"content":"        return de;"},{"lineNumber":54,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":56,"author":{"gitId":"EuniceSim142"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"EuniceSim142"},"content":"     * Gets a deadline extension by {@code id}."},{"lineNumber":58,"author":{"gitId":"EuniceSim142"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public DeadlineExtension getDeadlineExtension(UUID id) {"},{"lineNumber":60,"author":{"gitId":"EuniceSim142"},"content":"        assert id !\u003d null;"},{"lineNumber":61,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(DeadlineExtension.class, id);"},{"lineNumber":63,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":65,"author":{"gitId":"EuniceSim142"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"EuniceSim142"},"content":"     * Get DeadlineExtension by {@code userId} and {@code feedbackSessionId}."},{"lineNumber":67,"author":{"gitId":"EuniceSim142"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public DeadlineExtension getDeadlineExtension(UUID userId, UUID feedbackSessionId) {"},{"lineNumber":69,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":70,"author":{"gitId":"EuniceSim142"},"content":"        CriteriaQuery\u003cDeadlineExtension\u003e cr \u003d cb.createQuery(DeadlineExtension.class);"},{"lineNumber":71,"author":{"gitId":"EuniceSim142"},"content":"        Root\u003cDeadlineExtension\u003e root \u003d cr.from(DeadlineExtension.class);"},{"lineNumber":72,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":73,"author":{"gitId":"EuniceSim142"},"content":"        cr.select(root).where(cb.and("},{"lineNumber":74,"author":{"gitId":"EuniceSim142"},"content":"                cb.equal(root.get(\"sessionId\"), feedbackSessionId),"},{"lineNumber":75,"author":{"gitId":"EuniceSim142"},"content":"                cb.equal(root.get(\"userId\"), userId)));"},{"lineNumber":76,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":"        TypedQuery\u003cDeadlineExtension\u003e query \u003d HibernateUtil.createQuery(cr);"},{"lineNumber":78,"author":{"gitId":"EuniceSim142"},"content":"        return query.getResultStream().findFirst().orElse(null);"},{"lineNumber":79,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":81,"author":{"gitId":"EuniceSim142"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"EuniceSim142"},"content":"     * Saves an updated {@code DeadlineExtension} to the db."},{"lineNumber":83,"author":{"gitId":"EuniceSim142"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"EuniceSim142"},"content":"     * @return updated deadline extension"},{"lineNumber":85,"author":{"gitId":"EuniceSim142"},"content":"     * @throws InvalidParametersException  if attributes to update are not valid"},{"lineNumber":86,"author":{"gitId":"EuniceSim142"},"content":"     * @throws EntityDoesNotExistException if the deadline extension cannot be found"},{"lineNumber":87,"author":{"gitId":"EuniceSim142"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"EuniceSim142"},"content":"    public DeadlineExtension updateDeadlineExtension(DeadlineExtension deadlineExtension)"},{"lineNumber":89,"author":{"gitId":"EuniceSim142"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":90,"author":{"gitId":"EuniceSim142"},"content":"        assert deadlineExtension !\u003d null;"},{"lineNumber":91,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":92,"author":{"gitId":"EuniceSim142"},"content":"        if (!deadlineExtension.isValid()) {"},{"lineNumber":93,"author":{"gitId":"EuniceSim142"},"content":"            throw new InvalidParametersException(deadlineExtension.getInvalidityInfo());"},{"lineNumber":94,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":96,"author":{"gitId":"EuniceSim142"},"content":"        if (getDeadlineExtension(deadlineExtension.getId()) \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"EuniceSim142"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":98,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":100,"author":{"gitId":"EuniceSim142"},"content":"        return merge(deadlineExtension);"},{"lineNumber":101,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":103,"author":{"gitId":"EuniceSim142"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"EuniceSim142"},"content":"     * Deletes a deadline extension."},{"lineNumber":105,"author":{"gitId":"EuniceSim142"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"EuniceSim142"},"content":"    public void deleteDeadlineExtension(DeadlineExtension de) {"},{"lineNumber":107,"author":{"gitId":"EuniceSim142"},"content":"        if (de !\u003d null) {"},{"lineNumber":108,"author":{"gitId":"EuniceSim142"},"content":"            delete(de);"},{"lineNumber":109,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"EuniceSim142"},"content":"}"}],"authorContributionMap":{"domlimm":2,"EuniceSim142":100,"hhdqirui":3,"-":6}},{"path":"src/main/java/teammates/storage/sqlapi/EntitiesDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":""},{"lineNumber":2,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.BaseEntity;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Base class for all classes performing CRUD operations against the database."},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * @param \u003cE\u003e subclass of BaseEntity"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"class EntitiesDb\u003cE extends BaseEntity\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    static final Logger log \u003d Logger.getLogger();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Copy the state of the given object onto the persistent object with the same identifier."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * If there is no persistent instance currently associated with the session, it will be loaded."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"    protected \u003cT extends E\u003e T merge(T entity) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assert entity !\u003d null;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":"        T newEntity \u003d HibernateUtil.merge(entity);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        log.info(\"Entity saved: \" + entity.toString());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return newEntity;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Associate {@code entity} with the persistence context."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected void persist(E entity) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assert entity !\u003d null;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        HibernateUtil.persist(entity);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        log.info(\"Entity persisted: \" + entity.toString());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Deletes {@code entity} from persistence context."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected void delete(E entity) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assert entity !\u003d null;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        HibernateUtil.remove(entity);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        log.info(\"Entity deleted: \" + entity.toString());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":2,"-":46}},{"path":"src/main/java/teammates/storage/sqlapi/FeedbackSessionsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static teammates.common.util.Const.ERROR_CREATE_ENTITY_ALREADY_EXISTS;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import static teammates.common.util.Const.ERROR_UPDATE_NON_EXISTENT;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.FeedbackSession;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Handles CRUD operations for feedback sessions."},{"lineNumber":16,"author":{"gitId":"-"},"content":" *"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * @see FeedbackSession"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public final class FeedbackSessionsDb extends EntitiesDb\u003cFeedbackSession\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final FeedbackSessionsDb instance \u003d new FeedbackSessionsDb();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private FeedbackSessionsDb() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static FeedbackSessionsDb inst() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Gets a feedback session."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return null if not found"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public FeedbackSession getFeedbackSession(UUID fsId) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assert fsId !\u003d null;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(FeedbackSession.class, fsId);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates a feedback session."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public FeedbackSession createFeedbackSession(FeedbackSession session)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assert session !\u003d null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!session.isValid()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(session.getInvalidityInfo());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (getFeedbackSession(session.getId()) !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new EntityAlreadyExistsException(String.format(ERROR_CREATE_ENTITY_ALREADY_EXISTS, session.toString()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        persist(session);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return session;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Saves an updated {@code FeedbackSession} to the db."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @return updated feedback session"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws InvalidParametersException  if attributes to update are not valid"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws EntityDoesNotExistException if the feedback session cannot be found"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public FeedbackSession updateFeedbackSession(FeedbackSession feedbackSession)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assert feedbackSession !\u003d null;"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!feedbackSession.isValid()) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new InvalidParametersException(feedbackSession.getInvalidityInfo());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (getFeedbackSession(feedbackSession.getId()) \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new EntityDoesNotExistException(ERROR_UPDATE_NON_EXISTENT);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return merge(feedbackSession);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Deletes a feedback session."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void deleteFeedbackSession(FeedbackSession feedbackSession) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (feedbackSession !\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            delete(feedbackSession);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":89}},{"path":"src/main/java/teammates/storage/sqlapi/NotificationsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":" * Handles CRUD operations for notifications."},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":" *"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":" * @see Notification"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"public final class NotificationsDb extends EntitiesDb\u003cNotification\u003e {"},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"    private static final NotificationsDb instance \u003d new NotificationsDb();"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsDb() {"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"        // prevent initialization"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"    public static NotificationsDb inst() {"},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":"        return instance;"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"     * Creates a notification."},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"    public Notification createNotification(Notification notification)"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"        assert notification !\u003d null;"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"        if (!notification.isValid()) {"},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"            throw new InvalidParametersException(notification.getInvalidityInfo());"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"        persist(notification);"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"        return notification;"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"     * Gets a notification by its unique ID."},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"    public Notification getNotification(UUID notificationId) {"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"        assert notificationId !\u003d null;"},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return HibernateUtil.get(Notification.class, notificationId);"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Deletes a notification."},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFails silently if notification is null."},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void deleteNotification(Notification notification) {"},{"lineNumber":57,"author":{"gitId":"hhdqirui"},"content":"        if (notification !\u003d null) {"},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":"            delete(notification);"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":57,"-":4}},{"path":"src/main/java/teammates/storage/sqlapi/UsageStatisticsDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.UsageStatistics;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Handles CRUD operations for usage statistics."},{"lineNumber":15,"author":{"gitId":"-"},"content":" *"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * @see UsageStatistics"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public final class UsageStatisticsDb extends EntitiesDb\u003cUsageStatistics\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final UsageStatisticsDb instance \u003d new UsageStatisticsDb();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UsageStatisticsDb() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // prevent initialization"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static UsageStatisticsDb inst() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Gets a list of statistics objects between start time and end time."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public List\u003cUsageStatistics\u003e getUsageStatisticsForTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cUsageStatistics\u003e cr \u003d cb.createQuery(UsageStatistics.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Root\u003cUsageStatistics\u003e root \u003d cr.from(UsageStatistics.class);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        cr.select(root).where(cb.and("},{"lineNumber":39,"author":{"gitId":"-"},"content":"                cb.greaterThanOrEqualTo(root.get(\"startTime\"), startTime),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                cb.lessThan(root.get(\"startTime\"), endTime)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.createQuery(cr).getResultList();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a usage statistics object."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public UsageStatistics createUsageStatistics(UsageStatistics usageStatistics) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assert usageStatistics !\u003d null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        persist(usageStatistics);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return usageStatistics;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":2,"-":54}},{"path":"src/main/java/teammates/storage/sqlapi/UsersDb.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":6,"author":{"gitId":"domlimm"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":8,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":10,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":12,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.User;"},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.criteria.CriteriaBuilder;"},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.criteria.CriteriaQuery;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import jakarta.persistence.criteria.Join;"},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.criteria.Root;"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":" * Handles CRUD operations for users."},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":" *"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":" * @see User"},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":"public final class UsersDb extends EntitiesDb\u003cUser\u003e {"},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":"    private static final UsersDb instance \u003d new UsersDb();"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":"    private UsersDb() {"},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":"        // prevent initialization"},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":"    public static UsersDb inst() {"},{"lineNumber":33,"author":{"gitId":"domlimm"},"content":"        return instance;"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":36,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":"     * Creates an instructor."},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"    public Instructor createInstructor(Instructor instructor)"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":"        assert instructor !\u003d null;"},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":43,"author":{"gitId":"domlimm"},"content":"        if (!instructor.isValid()) {"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":"            throw new InvalidParametersException(instructor.getInvalidityInfo());"},{"lineNumber":45,"author":{"gitId":"domlimm"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":"        persist(instructor);"},{"lineNumber":48,"author":{"gitId":"domlimm"},"content":"        return instructor;"},{"lineNumber":49,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":51,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"domlimm"},"content":"     * Creates a student."},{"lineNumber":53,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"domlimm"},"content":"    public Student createStudent(Student student)"},{"lineNumber":55,"author":{"gitId":"domlimm"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":56,"author":{"gitId":"domlimm"},"content":"        assert student !\u003d null;"},{"lineNumber":57,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":58,"author":{"gitId":"domlimm"},"content":"        if (!student.isValid()) {"},{"lineNumber":59,"author":{"gitId":"domlimm"},"content":"            throw new InvalidParametersException(student.getInvalidityInfo());"},{"lineNumber":60,"author":{"gitId":"domlimm"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":62,"author":{"gitId":"domlimm"},"content":"        persist(student);"},{"lineNumber":63,"author":{"gitId":"domlimm"},"content":"        return student;"},{"lineNumber":64,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":66,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"domlimm"},"content":"     * Gets an instructor by its {@code id}."},{"lineNumber":68,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"domlimm"},"content":"    public Instructor getInstructor(UUID id) {"},{"lineNumber":70,"author":{"gitId":"domlimm"},"content":"        assert id !\u003d null;"},{"lineNumber":71,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":72,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.get(Instructor.class, id);"},{"lineNumber":73,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"domlimm"},"content":"     * Gets instructor exists by its {@code courseId} and {@code email}."},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"domlimm"},"content":"    public Instructor getInstructor(String courseId, String email) {"},{"lineNumber":79,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":80,"author":{"gitId":"domlimm"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":81,"author":{"gitId":"domlimm"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":82,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":83,"author":{"gitId":"domlimm"},"content":"        cr.select(instructorRoot).where(cb.and("},{"lineNumber":84,"author":{"gitId":"domlimm"},"content":"                cb.equal(instructorRoot.get(\"courseId\"), courseId),"},{"lineNumber":85,"author":{"gitId":"domlimm"},"content":"                cb.equal(instructorRoot.get(\"email\"), email)));"},{"lineNumber":86,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":87,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":88,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Gets an instructor by {@code regKey}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByRegKey(String regKey) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot).where(cb.equal(instructorRoot.get(\"regKey\"), regKey));"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Gets an instructor by {@code googleId}."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public Instructor getInstructorByGoogleId(String courseId, String googleId) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cInstructor\u003e cr \u003d cb.createQuery(Instructor.class);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Root\u003cInstructor\u003e instructorRoot \u003d cr.from(Instructor.class);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Join\u003cInstructor, Account\u003e accountsJoin \u003d instructorRoot.join(\"account\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        cr.select(instructorRoot).where(cb.and("},{"lineNumber":113,"author":{"gitId":"-"},"content":"                cb.equal(instructorRoot.get(\"courseId\"), courseId),"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                cb.equal(accountsJoin.get(\"googleId\"), googleId)));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"domlimm"},"content":"     * Gets a student by its {@code id}."},{"lineNumber":121,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"domlimm"},"content":"    public Student getStudent(UUID id) {"},{"lineNumber":123,"author":{"gitId":"domlimm"},"content":"        assert id !\u003d null;"},{"lineNumber":124,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":125,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.get(Student.class, id);"},{"lineNumber":126,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":128,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"domlimm"},"content":"     * Gets a student exists by its {@code courseId} and {@code email}."},{"lineNumber":130,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"domlimm"},"content":"    public Student getStudent(String courseId, String email) {"},{"lineNumber":132,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":133,"author":{"gitId":"domlimm"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":134,"author":{"gitId":"domlimm"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":135,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":136,"author":{"gitId":"domlimm"},"content":"        cr.select(studentRoot).where(cb.and("},{"lineNumber":137,"author":{"gitId":"domlimm"},"content":"                cb.equal(studentRoot.get(\"courseId\"), courseId),"},{"lineNumber":138,"author":{"gitId":"domlimm"},"content":"                cb.equal(studentRoot.get(\"email\"), email)));"},{"lineNumber":139,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":140,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":141,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Gets a student by {@code regKey}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public Student getStudentByRegKey(String regKey) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        cr.select(studentRoot).where(cb.equal(studentRoot.get(\"regKey\"), regKey));"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Gets a student by {@code googleId}."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public Student getStudentByGoogleId(String courseId, String googleId) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        CriteriaQuery\u003cStudent\u003e cr \u003d cb.createQuery(Student.class);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Root\u003cStudent\u003e studentRoot \u003d cr.from(Student.class);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Join\u003cStudent, Account\u003e accountsJoin \u003d studentRoot.join(\"account\");"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        cr.select(studentRoot).where(cb.and("},{"lineNumber":166,"author":{"gitId":"-"},"content":"                cb.equal(studentRoot.get(\"courseId\"), courseId),"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                cb.equal(accountsJoin.get(\"googleId\"), googleId)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return HibernateUtil.createQuery(cr).getResultStream().findFirst().orElse(null);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"domlimm"},"content":"     * Deletes a user."},{"lineNumber":174,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"domlimm"},"content":"    public \u003cT extends User\u003e void deleteUser(T user) {"},{"lineNumber":176,"author":{"gitId":"domlimm"},"content":"        if (user !\u003d null) {"},{"lineNumber":177,"author":{"gitId":"domlimm"},"content":"            delete(user);"},{"lineNumber":178,"author":{"gitId":"domlimm"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":181,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"domlimm"},"content":"     * Gets the number of instructors created within a specified time range."},{"lineNumber":183,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"domlimm"},"content":"    public long getNumInstructorsByTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":185,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":186,"author":{"gitId":"domlimm"},"content":"        CriteriaQuery\u003cLong\u003e cr \u003d cb.createQuery(Long.class);"},{"lineNumber":187,"author":{"gitId":"domlimm"},"content":"        Root\u003cInstructor\u003e root \u003d cr.from(Instructor.class);"},{"lineNumber":188,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":189,"author":{"gitId":"domlimm"},"content":"        cr.select(cb.count(root.get(\"id\"))).where(cb.and("},{"lineNumber":190,"author":{"gitId":"domlimm"},"content":"                cb.greaterThanOrEqualTo(root.get(\"createdAt\"), startTime),"},{"lineNumber":191,"author":{"gitId":"domlimm"},"content":"                cb.lessThan(root.get(\"createdAt\"), endTime)));"},{"lineNumber":192,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":193,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.createQuery(cr).getSingleResult();"},{"lineNumber":194,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":196,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"domlimm"},"content":"     * Gets the number of students created within a specified time range."},{"lineNumber":198,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"domlimm"},"content":"    public long getNumStudentsByTimeRange(Instant startTime, Instant endTime) {"},{"lineNumber":200,"author":{"gitId":"domlimm"},"content":"        CriteriaBuilder cb \u003d HibernateUtil.getCriteriaBuilder();"},{"lineNumber":201,"author":{"gitId":"domlimm"},"content":"        CriteriaQuery\u003cLong\u003e cr \u003d cb.createQuery(Long.class);"},{"lineNumber":202,"author":{"gitId":"domlimm"},"content":"        Root\u003cStudent\u003e root \u003d cr.from(Student.class);"},{"lineNumber":203,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":204,"author":{"gitId":"domlimm"},"content":"        cr.select(cb.count(root.get(\"id\"))).where(cb.and("},{"lineNumber":205,"author":{"gitId":"domlimm"},"content":"                cb.greaterThanOrEqualTo(root.get(\"createdAt\"), startTime),"},{"lineNumber":206,"author":{"gitId":"domlimm"},"content":"                cb.lessThan(root.get(\"createdAt\"), endTime)));"},{"lineNumber":207,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":208,"author":{"gitId":"domlimm"},"content":"        return HibernateUtil.createQuery(cr).getSingleResult();"},{"lineNumber":209,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":211,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":150,"-":61}},{"path":"src/main/java/teammates/storage/sqlentity/Account.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.NaturalId;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.CascadeType;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import jakarta.persistence.Id;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import jakarta.persistence.OneToMany;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import jakarta.persistence.Table;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Represents a unique account in the system."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":26,"author":{"gitId":"-"},"content":"@Table(name \u003d \"Accounts\")"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class Account extends BaseEntity {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Id"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @NaturalId"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private String googleId;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private String email;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    @OneToMany(mappedBy \u003d \"account\", cascade \u003d CascadeType.ALL)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private List\u003cReadNotification\u003e readNotifications;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @UpdateTimestamp"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Instant updatedAt;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Account() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Account(String googleId, String name, String email) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.setGoogleId(googleId);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.setName(name);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.setEmail(email);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.readNotifications \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"     * Add a read notification to this account."},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"    public void addReadNotification(ReadNotification readNotification) {"},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":"        readNotifications.add(readNotification);"},{"lineNumber":63,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return id;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.id \u003d id;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public String getGoogleId() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return googleId;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setGoogleId(String googleId) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.googleId \u003d SanitizationHelper.sanitizeGoogleId(googleId);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setName(String name) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.name \u003d SanitizationHelper.sanitizeName(name);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public String getEmail() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setEmail(String email) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.email \u003d SanitizationHelper.sanitizeEmail(email);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public List\u003cReadNotification\u003e getReadNotifications() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return readNotifications;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setReadNotifications(List\u003cReadNotification\u003e readNotifications) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        this.readNotifications \u003d readNotifications;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return updatedAt;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForGoogleId(googleId), errors);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(name), errors);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(email), errors);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            Account otherAccount \u003d (Account) other;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherAccount.getId());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return \"Account [id\u003d\" + id + \", googleId\u003d\" + googleId + \", name\u003d\" + name + \", email\u003d\" + email"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                + \", readNotifications\u003d\" + readNotifications + \", createdAt\u003d\" + getCreatedAt()"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                + \",updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":9,"-":140}},{"path":"src/main/java/teammates/storage/sqlentity/AccountRequest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import java.security.SecureRandom;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitId":"kevin9foong"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.Config;"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.Const;"},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.Id;"},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.Table;"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":"import jakarta.persistence.UniqueConstraint;"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":" * Entity for AccountRequests."},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":" */"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":"@Entity"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"@Table(name \u003d \"AccountRequests\","},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"        uniqueConstraints \u003d {"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"                @UniqueConstraint(name \u003d \"Unique registration key\", columnNames \u003d \"registrationKey\"),"},{"lineNumber":30,"author":{"gitId":"kevin9foong"},"content":"                @UniqueConstraint(name \u003d \"Unique name and institute\", columnNames \u003d {\"email\", \"institute\"})"},{"lineNumber":31,"author":{"gitId":"kevin9foong"},"content":"        })"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"public class AccountRequest extends BaseEntity {"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"    @Id"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":35,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    private String registrationKey;"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    private String name;"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"    private String email;"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"    private String institute;"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"    private Instant registeredAt;"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"    @UpdateTimestamp"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"    private Instant updatedAt;"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"    protected AccountRequest() {"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"        // required by Hibernate"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequest(String email, String name, String institute) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":"        this.setEmail(email);"},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"        this.setName(name);"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"        this.setInstitute(institute);"},{"lineNumber":58,"author":{"gitId":"kevin9foong"},"content":"        this.setRegistrationKey(generateRegistrationKey());"},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"        this.setCreatedAt(Instant.now());"},{"lineNumber":60,"author":{"gitId":"kevin9foong"},"content":"        this.setRegisteredAt(null);"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(getEmail()), errors);"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(getName()), errors);"},{"lineNumber":69,"author":{"gitId":"kevin9foong"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForInstituteName(getInstitute()), errors);"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"        return errors;"},{"lineNumber":72,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":74,"author":{"gitId":"kevin9foong"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"kevin9foong"},"content":"     * Generate unique registration key for the account request."},{"lineNumber":76,"author":{"gitId":"kevin9foong"},"content":"     * The key contains random elements to avoid being guessed."},{"lineNumber":77,"author":{"gitId":"kevin9foong"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"kevin9foong"},"content":"    private String generateRegistrationKey() {"},{"lineNumber":79,"author":{"gitId":"kevin9foong"},"content":"        String uniqueId \u003d String.valueOf(getId());"},{"lineNumber":80,"author":{"gitId":"kevin9foong"},"content":"        SecureRandom prng \u003d new SecureRandom();"},{"lineNumber":81,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":82,"author":{"gitId":"kevin9foong"},"content":"        return StringHelper.encrypt(uniqueId + prng.nextInt());"},{"lineNumber":83,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":86,"author":{"gitId":"kevin9foong"},"content":"        return this.id;"},{"lineNumber":87,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":90,"author":{"gitId":"kevin9foong"},"content":"        this.id \u003d id;"},{"lineNumber":91,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":93,"author":{"gitId":"kevin9foong"},"content":"    public String getRegistrationKey() {"},{"lineNumber":94,"author":{"gitId":"kevin9foong"},"content":"        return this.registrationKey;"},{"lineNumber":95,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":97,"author":{"gitId":"kevin9foong"},"content":"    public void setRegistrationKey(String registrationKey) {"},{"lineNumber":98,"author":{"gitId":"kevin9foong"},"content":"        this.registrationKey \u003d registrationKey;"},{"lineNumber":99,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":101,"author":{"gitId":"kevin9foong"},"content":"    public String getName() {"},{"lineNumber":102,"author":{"gitId":"kevin9foong"},"content":"        return this.name;"},{"lineNumber":103,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":105,"author":{"gitId":"kevin9foong"},"content":"    public void setName(String name) {"},{"lineNumber":106,"author":{"gitId":"kevin9foong"},"content":"        this.name \u003d SanitizationHelper.sanitizeName(name);"},{"lineNumber":107,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":109,"author":{"gitId":"kevin9foong"},"content":"    public String getEmail() {"},{"lineNumber":110,"author":{"gitId":"kevin9foong"},"content":"        return this.email;"},{"lineNumber":111,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":113,"author":{"gitId":"kevin9foong"},"content":"    public void setEmail(String email) {"},{"lineNumber":114,"author":{"gitId":"kevin9foong"},"content":"        this.email \u003d SanitizationHelper.sanitizeEmail(email);"},{"lineNumber":115,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":117,"author":{"gitId":"kevin9foong"},"content":"    public String getInstitute() {"},{"lineNumber":118,"author":{"gitId":"kevin9foong"},"content":"        return this.institute;"},{"lineNumber":119,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":121,"author":{"gitId":"kevin9foong"},"content":"    public void setInstitute(String institute) {"},{"lineNumber":122,"author":{"gitId":"kevin9foong"},"content":"        this.institute \u003d SanitizationHelper.sanitizeTitle(institute);"},{"lineNumber":123,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":125,"author":{"gitId":"kevin9foong"},"content":"    public Instant getRegisteredAt() {"},{"lineNumber":126,"author":{"gitId":"kevin9foong"},"content":"        return this.registeredAt;"},{"lineNumber":127,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":129,"author":{"gitId":"kevin9foong"},"content":"    public void setRegisteredAt(Instant registeredAt) {"},{"lineNumber":130,"author":{"gitId":"kevin9foong"},"content":"        this.registeredAt \u003d registeredAt;"},{"lineNumber":131,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":133,"author":{"gitId":"kevin9foong"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":134,"author":{"gitId":"kevin9foong"},"content":"        return this.updatedAt;"},{"lineNumber":135,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":137,"author":{"gitId":"kevin9foong"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":138,"author":{"gitId":"kevin9foong"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":139,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            AccountRequest otherAccountRequest \u003d (AccountRequest) other;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherAccountRequest.getId());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return \"AccountRequest [id\u003d\" + id + \", registrationKey\u003d\" + registrationKey + \", name\u003d\" + name + \", email\u003d\""},{"lineNumber":163,"author":{"gitId":"-"},"content":"                + email + \", institute\u003d\" + institute + \", registeredAt\u003d\" + registeredAt + \", createdAt\u003d\" + getCreatedAt()"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"kevin9foong"},"content":"    public String getRegistrationUrl() {"},{"lineNumber":168,"author":{"gitId":"kevin9foong"},"content":"        return Config.getFrontEndAppUrl(Const.WebPageURIs.JOIN_PAGE)"},{"lineNumber":169,"author":{"gitId":"kevin9foong"},"content":"                .withIsCreatingAccount(\"true\")"},{"lineNumber":170,"author":{"gitId":"kevin9foong"},"content":"                .withRegistrationKey(this.getRegistrationKey())"},{"lineNumber":171,"author":{"gitId":"kevin9foong"},"content":"                .toAbsoluteString();"},{"lineNumber":172,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"kevin9foong"},"content":"}"}],"authorContributionMap":{"kevin9foong":140,"-":33}},{"path":"src/main/java/teammates/storage/sqlentity/BaseEntity.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.CreationTimestamp;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import com.google.common.reflect.TypeToken;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import jakarta.persistence.AttributeConverter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import jakarta.persistence.MappedSuperclass;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Base class for all entities."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@MappedSuperclass"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public abstract class BaseEntity {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @CreationTimestamp"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Column(updatable \u003d false)"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Instant createdAt;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    BaseEntity() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // instantiate as child classes"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns a {@code List} of strings, one string for each attribute whose"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * value is invalid, or an empty {@code List} if all attributes are valid."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThe string explains why the value is invalid"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * and what should values are acceptable. These explanations are"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * good enough to show to the user."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public abstract List\u003cString\u003e getInvalidityInfo();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns true if the attributes represent a valid state for the entity."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean isValid() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return getInvalidityInfo().isEmpty();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Adds {@code error} to {@code errors} if {@code error} is a non-empty string."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param error  An error message, possibly empty."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param errors A List of errors, to add {@code error} to."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void addNonEmptyError(String error, List\u003cString\u003e errors) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (error.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        errors.add(error);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Instant getCreatedAt() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return createdAt;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setCreatedAt(Instant createdAt) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.createdAt \u003d createdAt;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Attribute converter between Duration and Long types."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Converter"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static class DurationLongConverter implements AttributeConverter\u003cDuration, Long\u003e {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        public Long convertToDatabaseColumn(Duration duration) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return duration.toMinutes();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public Duration convertToEntityAttribute(Long minutes) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return Duration.ofMinutes(minutes);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":88,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"cedricongjh"},"content":"     * Generic attribute converter for classes stored in JSON."},{"lineNumber":90,"author":{"gitId":"cedricongjh"},"content":"     * @param \u003cT\u003e The type of entity to be converted to and from JSON."},{"lineNumber":91,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":93,"author":{"gitId":"cedricongjh"},"content":"    public static class JsonConverter\u003cT\u003e implements AttributeConverter\u003cT, String\u003e {"},{"lineNumber":94,"author":{"gitId":"cedricongjh"},"content":"        @Override"},{"lineNumber":95,"author":{"gitId":"domlimm"},"content":"        public String convertToDatabaseColumn(T entity) {"},{"lineNumber":96,"author":{"gitId":"domlimm"},"content":"            return JsonUtils.toJson(entity);"},{"lineNumber":97,"author":{"gitId":"cedricongjh"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":99,"author":{"gitId":"cedricongjh"},"content":"        @Override"},{"lineNumber":100,"author":{"gitId":"cedricongjh"},"content":"        public T convertToEntityAttribute(String dbData) {"},{"lineNumber":101,"author":{"gitId":"cedricongjh"},"content":"            return JsonUtils.fromJson(dbData, new TypeToken\u003cT\u003e(){}.getType());"},{"lineNumber":102,"author":{"gitId":"cedricongjh"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":105,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"cedricongjh"},"content":"     * Attribute converter between FeedbackParticipantType and JSON."},{"lineNumber":107,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":109,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackParticipantTypeConverter"},{"lineNumber":110,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackParticipantType\u003e {"},{"lineNumber":111,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":112,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":114,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"cedricongjh"},"content":"     * Attribute converter between a list of FeedbackParticipantTypes and JSON."},{"lineNumber":116,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":118,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackParticipantTypeListConverter"},{"lineNumber":119,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cList\u003cFeedbackParticipantType\u003e\u003e {"},{"lineNumber":120,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":121,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":2,"cedricongjh":38,"-":82}},{"path":"src/main/java/teammates/storage/sqlentity/DeadlineExtension.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"EuniceSim142"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":3,"author":{"gitId":"EuniceSim142"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"EuniceSim142"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"EuniceSim142"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"EuniceSim142"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":9,"author":{"gitId":"EuniceSim142"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":11,"author":{"gitId":"EuniceSim142"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":12,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":13,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.Column;"},{"lineNumber":14,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":15,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.Id;"},{"lineNumber":16,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":17,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":18,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.Table;"},{"lineNumber":19,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":20,"author":{"gitId":"EuniceSim142"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"EuniceSim142"},"content":" * Represents a deadline extension entity."},{"lineNumber":22,"author":{"gitId":"EuniceSim142"},"content":" */"},{"lineNumber":23,"author":{"gitId":"EuniceSim142"},"content":"@Entity"},{"lineNumber":24,"author":{"gitId":"EuniceSim142"},"content":"@Table(name \u003d \"DeadlineExtensions\")"},{"lineNumber":25,"author":{"gitId":"EuniceSim142"},"content":"public class DeadlineExtension extends BaseEntity {"},{"lineNumber":26,"author":{"gitId":"EuniceSim142"},"content":"    @Id"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":28,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":29,"author":{"gitId":"EuniceSim142"},"content":"    @ManyToOne"},{"lineNumber":30,"author":{"gitId":"EuniceSim142"},"content":"    @JoinColumn(name \u003d \"userId\", nullable \u003d false)"},{"lineNumber":31,"author":{"gitId":"EuniceSim142"},"content":"    private User user;"},{"lineNumber":32,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":33,"author":{"gitId":"EuniceSim142"},"content":"    @ManyToOne"},{"lineNumber":34,"author":{"gitId":"EuniceSim142"},"content":"    @JoinColumn(name \u003d \"sessionId\", nullable \u003d false)"},{"lineNumber":35,"author":{"gitId":"EuniceSim142"},"content":"    private FeedbackSession feedbackSession;"},{"lineNumber":36,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":37,"author":{"gitId":"EuniceSim142"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":38,"author":{"gitId":"EuniceSim142"},"content":"    private Instant endTime;"},{"lineNumber":39,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":40,"author":{"gitId":"EuniceSim142"},"content":"    @UpdateTimestamp"},{"lineNumber":41,"author":{"gitId":"EuniceSim142"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":42,"author":{"gitId":"EuniceSim142"},"content":"    private Instant updatedAt;"},{"lineNumber":43,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":44,"author":{"gitId":"EuniceSim142"},"content":"    protected DeadlineExtension() {"},{"lineNumber":45,"author":{"gitId":"EuniceSim142"},"content":"        // required by Hibernate"},{"lineNumber":46,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":48,"author":{"gitId":"EuniceSim142"},"content":"    public DeadlineExtension(User user, FeedbackSession feedbackSession, Instant endTime) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":50,"author":{"gitId":"EuniceSim142"},"content":"        this.setUser(user);"},{"lineNumber":51,"author":{"gitId":"EuniceSim142"},"content":"        this.setFeedbackSession(feedbackSession);"},{"lineNumber":52,"author":{"gitId":"EuniceSim142"},"content":"        this.setEndTime(endTime);"},{"lineNumber":53,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":56,"author":{"gitId":"EuniceSim142"},"content":"        return id;"},{"lineNumber":57,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":60,"author":{"gitId":"EuniceSim142"},"content":"        this.id \u003d id;"},{"lineNumber":61,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":63,"author":{"gitId":"EuniceSim142"},"content":"    public User getUser() {"},{"lineNumber":64,"author":{"gitId":"EuniceSim142"},"content":"        return user;"},{"lineNumber":65,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":67,"author":{"gitId":"EuniceSim142"},"content":"    public void setUser(User user) {"},{"lineNumber":68,"author":{"gitId":"EuniceSim142"},"content":"        this.user \u003d user;"},{"lineNumber":69,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":71,"author":{"gitId":"EuniceSim142"},"content":"    public FeedbackSession getFeedbackSession() {"},{"lineNumber":72,"author":{"gitId":"EuniceSim142"},"content":"        return feedbackSession;"},{"lineNumber":73,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":75,"author":{"gitId":"EuniceSim142"},"content":"    public void setFeedbackSession(FeedbackSession feedbackSession) {"},{"lineNumber":76,"author":{"gitId":"EuniceSim142"},"content":"        this.feedbackSession \u003d feedbackSession;"},{"lineNumber":77,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":79,"author":{"gitId":"EuniceSim142"},"content":"    public Instant getEndTime() {"},{"lineNumber":80,"author":{"gitId":"EuniceSim142"},"content":"        return endTime;"},{"lineNumber":81,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":83,"author":{"gitId":"EuniceSim142"},"content":"    public void setEndTime(Instant endTime) {"},{"lineNumber":84,"author":{"gitId":"EuniceSim142"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":85,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":87,"author":{"gitId":"EuniceSim142"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":88,"author":{"gitId":"EuniceSim142"},"content":"        return updatedAt;"},{"lineNumber":89,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":91,"author":{"gitId":"EuniceSim142"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":92,"author":{"gitId":"EuniceSim142"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":93,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":95,"author":{"gitId":"EuniceSim142"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"EuniceSim142"},"content":"    public String toString() {"},{"lineNumber":97,"author":{"gitId":"EuniceSim142"},"content":"        return \"DeadlineExtension [id\u003d\" + id + \", user\u003d\" + user + \", feedbackSession\u003d\" + feedbackSession"},{"lineNumber":98,"author":{"gitId":"EuniceSim142"},"content":"                + \", endTime\u003d\" + endTime + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":99,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":101,"author":{"gitId":"EuniceSim142"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"EuniceSim142"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":104,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":106,"author":{"gitId":"EuniceSim142"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"EuniceSim142"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitId":"EuniceSim142"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"EuniceSim142"},"content":"            return false;"},{"lineNumber":110,"author":{"gitId":"EuniceSim142"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":111,"author":{"gitId":"EuniceSim142"},"content":"            return true;"},{"lineNumber":112,"author":{"gitId":"EuniceSim142"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":113,"author":{"gitId":"EuniceSim142"},"content":"            DeadlineExtension otherDe \u003d (DeadlineExtension) other;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherDe.getId());"},{"lineNumber":115,"author":{"gitId":"EuniceSim142"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"EuniceSim142"},"content":"            return false;"},{"lineNumber":117,"author":{"gitId":"EuniceSim142"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":120,"author":{"gitId":"EuniceSim142"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"EuniceSim142"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":122,"author":{"gitId":"EuniceSim142"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":123,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":124,"author":{"gitId":"EuniceSim142"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTimeForSessionEndAndExtendedDeadlines("},{"lineNumber":125,"author":{"gitId":"-"},"content":"                feedbackSession.getEndTime(), List.of(this)), errors);"},{"lineNumber":126,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":127,"author":{"gitId":"EuniceSim142"},"content":"        return errors;"},{"lineNumber":128,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"EuniceSim142"},"content":"}"}],"authorContributionMap":{"EuniceSim142":121,"-":8}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.EnumType;"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Enumerated;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Id;"},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Inheritance;"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.InheritanceType;"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.OneToMany;"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Table;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback question."},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"@Table(name \u003d \"FeedbackQuestions\")"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"@Inheritance(strategy \u003d InheritanceType.SINGLE_TABLE)"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"public abstract class FeedbackQuestion extends BaseEntity {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    @Id"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"    private UUID id;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"sessionId\")"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackSession feedbackSession;"},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @OneToMany(mappedBy \u003d \"feedbackQuestion\")"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackResponse\u003e feedbackResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"    private Integer questionNumber;"},{"lineNumber":47,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":48,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":49,"author":{"gitId":"cedricongjh"},"content":"    private String description;"},{"lineNumber":50,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":51,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":52,"author":{"gitId":"cedricongjh"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":53,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackQuestionType questionType;"},{"lineNumber":54,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":55,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":56,"author":{"gitId":"cedricongjh"},"content":"    private String questionText;"},{"lineNumber":57,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":58,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":59,"author":{"gitId":"cedricongjh"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":60,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackParticipantType giverType;"},{"lineNumber":61,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":62,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":63,"author":{"gitId":"cedricongjh"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":64,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackParticipantType recipientType;"},{"lineNumber":65,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":66,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":67,"author":{"gitId":"cedricongjh"},"content":"    private Integer numOfEntitiesToGiveFeedbackTo;"},{"lineNumber":68,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":69,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":70,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":71,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackParticipantType\u003e showResponsesTo;"},{"lineNumber":72,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":73,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":74,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":75,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackParticipantType\u003e showGiverNameTo;"},{"lineNumber":76,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":77,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":78,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":79,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackParticipantType\u003e showRecipientNameTo;"},{"lineNumber":80,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":81,"author":{"gitId":"cedricongjh"},"content":"    @UpdateTimestamp"},{"lineNumber":82,"author":{"gitId":"cedricongjh"},"content":"    @Column"},{"lineNumber":83,"author":{"gitId":"cedricongjh"},"content":"    private Instant updatedAt;"},{"lineNumber":84,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":85,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackQuestion() {"},{"lineNumber":86,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":87,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":89,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackQuestion("},{"lineNumber":90,"author":{"gitId":"cedricongjh"},"content":"            FeedbackSession feedbackSession, Integer questionNumber,"},{"lineNumber":91,"author":{"gitId":"cedricongjh"},"content":"            String description, FeedbackQuestionType questionType,"},{"lineNumber":92,"author":{"gitId":"cedricongjh"},"content":"            String questionText, FeedbackParticipantType giverType,"},{"lineNumber":93,"author":{"gitId":"cedricongjh"},"content":"            Integer numOfEntitiesToGiveFeedbackTo, List\u003cFeedbackParticipantType\u003e showResponsesTo,"},{"lineNumber":94,"author":{"gitId":"cedricongjh"},"content":"            List\u003cFeedbackParticipantType\u003e showGiverNameTo, List\u003cFeedbackParticipantType\u003e showRecipientNameTo"},{"lineNumber":95,"author":{"gitId":"cedricongjh"},"content":"    ) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":97,"author":{"gitId":"cedricongjh"},"content":"        this.setFeedbackSession(feedbackSession);"},{"lineNumber":98,"author":{"gitId":"cedricongjh"},"content":"        this.setQuestionNumber(questionNumber);"},{"lineNumber":99,"author":{"gitId":"cedricongjh"},"content":"        this.setDescription(description);"},{"lineNumber":100,"author":{"gitId":"cedricongjh"},"content":"        this.setQuestionType(questionType);"},{"lineNumber":101,"author":{"gitId":"cedricongjh"},"content":"        this.setQuestionText(questionText);"},{"lineNumber":102,"author":{"gitId":"cedricongjh"},"content":"        this.setGiverType(giverType);"},{"lineNumber":103,"author":{"gitId":"cedricongjh"},"content":"        this.setRecipientType(recipientType);"},{"lineNumber":104,"author":{"gitId":"cedricongjh"},"content":"        this.setNumOfEntitiesToGiveFeedbackTo(numOfEntitiesToGiveFeedbackTo);"},{"lineNumber":105,"author":{"gitId":"cedricongjh"},"content":"        this.setShowResponsesTo(showResponsesTo);"},{"lineNumber":106,"author":{"gitId":"cedricongjh"},"content":"        this.setShowGiverNameTo(showGiverNameTo);"},{"lineNumber":107,"author":{"gitId":"cedricongjh"},"content":"        this.setShowRecipientNameTo(showRecipientNameTo);"},{"lineNumber":108,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":110,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":112,"author":{"gitId":"cedricongjh"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":114,"author":{"gitId":"cedricongjh"},"content":"        errors.addAll(FieldValidator.getValidityInfoForFeedbackParticipantType(giverType, recipientType));"},{"lineNumber":115,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":116,"author":{"gitId":"cedricongjh"},"content":"        errors.addAll(FieldValidator.getValidityInfoForFeedbackResponseVisibility(showResponsesTo,"},{"lineNumber":117,"author":{"gitId":"cedricongjh"},"content":"                showGiverNameTo,"},{"lineNumber":118,"author":{"gitId":"cedricongjh"},"content":"                showRecipientNameTo));"},{"lineNumber":119,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":120,"author":{"gitId":"cedricongjh"},"content":"        return errors;"},{"lineNumber":121,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":123,"author":{"gitId":"cedricongjh"},"content":"    public UUID getId() {"},{"lineNumber":124,"author":{"gitId":"cedricongjh"},"content":"        return id;"},{"lineNumber":125,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":127,"author":{"gitId":"cedricongjh"},"content":"    public void setId(UUID id) {"},{"lineNumber":128,"author":{"gitId":"cedricongjh"},"content":"        this.id \u003d id;"},{"lineNumber":129,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":131,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackSession getFeedbackSession() {"},{"lineNumber":132,"author":{"gitId":"cedricongjh"},"content":"        return feedbackSession;"},{"lineNumber":133,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":135,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedbackSession(FeedbackSession feedbackSession) {"},{"lineNumber":136,"author":{"gitId":"cedricongjh"},"content":"        this.feedbackSession \u003d feedbackSession;"},{"lineNumber":137,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":139,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackResponse\u003e getFeedbackResponses() {"},{"lineNumber":140,"author":{"gitId":"cedricongjh"},"content":"        return feedbackResponses;"},{"lineNumber":141,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":143,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedbackResponses(List\u003cFeedbackResponse\u003e feedbackResponses) {"},{"lineNumber":144,"author":{"gitId":"cedricongjh"},"content":"        this.feedbackResponses \u003d feedbackResponses;"},{"lineNumber":145,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":147,"author":{"gitId":"cedricongjh"},"content":"    public Integer getQuestionNumber() {"},{"lineNumber":148,"author":{"gitId":"cedricongjh"},"content":"        return questionNumber;"},{"lineNumber":149,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":151,"author":{"gitId":"cedricongjh"},"content":"    public void setQuestionNumber(Integer questionNumber) {"},{"lineNumber":152,"author":{"gitId":"cedricongjh"},"content":"        this.questionNumber \u003d questionNumber;"},{"lineNumber":153,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":155,"author":{"gitId":"cedricongjh"},"content":"    public String getDescription() {"},{"lineNumber":156,"author":{"gitId":"cedricongjh"},"content":"        return description;"},{"lineNumber":157,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":159,"author":{"gitId":"cedricongjh"},"content":"    public void setDescription(String description) {"},{"lineNumber":160,"author":{"gitId":"cedricongjh"},"content":"        this.description \u003d description;"},{"lineNumber":161,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":163,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackQuestionType getQuestionType() {"},{"lineNumber":164,"author":{"gitId":"cedricongjh"},"content":"        return questionType;"},{"lineNumber":165,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":167,"author":{"gitId":"cedricongjh"},"content":"    public void setQuestionType(FeedbackQuestionType questionType) {"},{"lineNumber":168,"author":{"gitId":"cedricongjh"},"content":"        this.questionType \u003d questionType;"},{"lineNumber":169,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":171,"author":{"gitId":"cedricongjh"},"content":"    public String getQuestionText() {"},{"lineNumber":172,"author":{"gitId":"cedricongjh"},"content":"        return questionText;"},{"lineNumber":173,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":175,"author":{"gitId":"cedricongjh"},"content":"    public void setQuestionText(String questionText) {"},{"lineNumber":176,"author":{"gitId":"cedricongjh"},"content":"        this.questionText \u003d questionText;"},{"lineNumber":177,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":179,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackParticipantType getGiverType() {"},{"lineNumber":180,"author":{"gitId":"cedricongjh"},"content":"        return giverType;"},{"lineNumber":181,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":183,"author":{"gitId":"cedricongjh"},"content":"    public void setGiverType(FeedbackParticipantType giverType) {"},{"lineNumber":184,"author":{"gitId":"cedricongjh"},"content":"        this.giverType \u003d giverType;"},{"lineNumber":185,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":187,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackParticipantType getRecipientType() {"},{"lineNumber":188,"author":{"gitId":"cedricongjh"},"content":"        return recipientType;"},{"lineNumber":189,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":191,"author":{"gitId":"cedricongjh"},"content":"    public void setRecipientType(FeedbackParticipantType recipientType) {"},{"lineNumber":192,"author":{"gitId":"cedricongjh"},"content":"        this.recipientType \u003d recipientType;"},{"lineNumber":193,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":195,"author":{"gitId":"cedricongjh"},"content":"    public Integer getNumOfEntitiesToGiveFeedbackTo() {"},{"lineNumber":196,"author":{"gitId":"cedricongjh"},"content":"        return numOfEntitiesToGiveFeedbackTo;"},{"lineNumber":197,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":199,"author":{"gitId":"cedricongjh"},"content":"    public void setNumOfEntitiesToGiveFeedbackTo(Integer numOfEntitiesToGiveFeedbackTo) {"},{"lineNumber":200,"author":{"gitId":"cedricongjh"},"content":"        this.numOfEntitiesToGiveFeedbackTo \u003d numOfEntitiesToGiveFeedbackTo;"},{"lineNumber":201,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":203,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowResponsesTo() {"},{"lineNumber":204,"author":{"gitId":"cedricongjh"},"content":"        return showResponsesTo;"},{"lineNumber":205,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":207,"author":{"gitId":"cedricongjh"},"content":"    public void setShowResponsesTo(List\u003cFeedbackParticipantType\u003e showResponsesTo) {"},{"lineNumber":208,"author":{"gitId":"cedricongjh"},"content":"        this.showResponsesTo \u003d showResponsesTo;"},{"lineNumber":209,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":211,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowGiverNameTo() {"},{"lineNumber":212,"author":{"gitId":"cedricongjh"},"content":"        return showGiverNameTo;"},{"lineNumber":213,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":215,"author":{"gitId":"cedricongjh"},"content":"    public void setShowGiverNameTo(List\u003cFeedbackParticipantType\u003e showGiverNameTo) {"},{"lineNumber":216,"author":{"gitId":"cedricongjh"},"content":"        this.showGiverNameTo \u003d showGiverNameTo;"},{"lineNumber":217,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":219,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowRecipientNameTo() {"},{"lineNumber":220,"author":{"gitId":"cedricongjh"},"content":"        return showRecipientNameTo;"},{"lineNumber":221,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":223,"author":{"gitId":"cedricongjh"},"content":"    public void setShowRecipientNameTo(List\u003cFeedbackParticipantType\u003e showRecipientNameTo) {"},{"lineNumber":224,"author":{"gitId":"cedricongjh"},"content":"        this.showRecipientNameTo \u003d showRecipientNameTo;"},{"lineNumber":225,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":227,"author":{"gitId":"cedricongjh"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":228,"author":{"gitId":"cedricongjh"},"content":"        return updatedAt;"},{"lineNumber":229,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":231,"author":{"gitId":"cedricongjh"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":232,"author":{"gitId":"cedricongjh"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":233,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":235,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":236,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":237,"author":{"gitId":"cedricongjh"},"content":"        return \"Question [id\u003d\" + id + \", questionNumber\u003d\" + questionNumber + \", description\u003d\" + description"},{"lineNumber":238,"author":{"gitId":"cedricongjh"},"content":"                + \", questionType\u003d\" + questionType"},{"lineNumber":239,"author":{"gitId":"cedricongjh"},"content":"                + \", questionText\u003d\" + questionText + \", giverType\u003d\" + giverType + \", recipientType\u003d\" + recipientType"},{"lineNumber":240,"author":{"gitId":"cedricongjh"},"content":"                + \", numOfEntitiesToGiveFeedbackTo\u003d\" + numOfEntitiesToGiveFeedbackTo + \", showResponsesTo\u003d\""},{"lineNumber":241,"author":{"gitId":"cedricongjh"},"content":"                + showResponsesTo + \", showGiverNameTo\u003d\" + showGiverNameTo + \", showRecipientNameTo\u003d\""},{"lineNumber":242,"author":{"gitId":"-"},"content":"                + showRecipientNameTo + \", isClosingEmailEnabled\u003d\" + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\""},{"lineNumber":243,"author":{"gitId":"cedricongjh"},"content":"                + updatedAt + \"]\";"},{"lineNumber":244,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":246,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":247,"author":{"gitId":"cedricongjh"},"content":"    public int hashCode() {"},{"lineNumber":248,"author":{"gitId":"cedricongjh"},"content":"        // FeedbackQuestion ID uniquely identifies a FeedbackQuestion."},{"lineNumber":249,"author":{"gitId":"cedricongjh"},"content":"        return this.getId().hashCode();"},{"lineNumber":250,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":252,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":253,"author":{"gitId":"cedricongjh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":254,"author":{"gitId":"cedricongjh"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":255,"author":{"gitId":"cedricongjh"},"content":"            return false;"},{"lineNumber":256,"author":{"gitId":"cedricongjh"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":257,"author":{"gitId":"cedricongjh"},"content":"            return true;"},{"lineNumber":258,"author":{"gitId":"cedricongjh"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":259,"author":{"gitId":"cedricongjh"},"content":"            FeedbackQuestion otherQuestion \u003d (FeedbackQuestion) other;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherQuestion.getId());"},{"lineNumber":261,"author":{"gitId":"cedricongjh"},"content":"        } else {"},{"lineNumber":262,"author":{"gitId":"cedricongjh"},"content":"            return false;"},{"lineNumber":263,"author":{"gitId":"cedricongjh"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"cedricongjh"},"content":"}"},{"lineNumber":266,"author":{"gitId":"cedricongjh"},"content":""}],"authorContributionMap":{"cedricongjh":263,"-":3}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Id;"},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Inheritance;"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.InheritanceType;"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.OneToMany;"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Table;"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":" * Represents a Feedback Response."},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"@Table(name \u003d \"FeedbackReponses\")"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"@Inheritance(strategy \u003d InheritanceType.SINGLE_TABLE)"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"public abstract class FeedbackResponse extends BaseEntity {"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    @Id"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"    private UUID id;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"questionId\")"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackQuestion feedbackQuestion;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeConverter.class)"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackQuestionType type;"},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @OneToMany(mappedBy \u003d \"feedbackResponse\")"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackResponseComment\u003e feedbackResponseComments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"    private String giver;"},{"lineNumber":47,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":48,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":49,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"giverSectionId\")"},{"lineNumber":50,"author":{"gitId":"cedricongjh"},"content":"    private Section giverSection;"},{"lineNumber":51,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":52,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":53,"author":{"gitId":"cedricongjh"},"content":"    private String receiver;"},{"lineNumber":54,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":55,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":56,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"receiverSectionId\")"},{"lineNumber":57,"author":{"gitId":"cedricongjh"},"content":"    private Section receiverSection;"},{"lineNumber":58,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":59,"author":{"gitId":"cedricongjh"},"content":"    @UpdateTimestamp"},{"lineNumber":60,"author":{"gitId":"cedricongjh"},"content":"    private Instant updatedAt;"},{"lineNumber":61,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":62,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackResponse() {"},{"lineNumber":63,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":64,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":66,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackResponse("},{"lineNumber":67,"author":{"gitId":"cedricongjh"},"content":"            FeedbackQuestion feedbackQuestion, FeedbackQuestionType type, String giver,"},{"lineNumber":68,"author":{"gitId":"cedricongjh"},"content":"            Section giverSection, String receiver, Section receiverSection"},{"lineNumber":69,"author":{"gitId":"cedricongjh"},"content":"    ) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":71,"author":{"gitId":"cedricongjh"},"content":"        this.setFeedbackQuestion(feedbackQuestion);"},{"lineNumber":72,"author":{"gitId":"cedricongjh"},"content":"        this.setFeedbackQuestionType(type);"},{"lineNumber":73,"author":{"gitId":"cedricongjh"},"content":"        this.setGiver(giver);"},{"lineNumber":74,"author":{"gitId":"cedricongjh"},"content":"        this.setGiverSection(giverSection);"},{"lineNumber":75,"author":{"gitId":"cedricongjh"},"content":"        this.setReceiver(receiver);"},{"lineNumber":76,"author":{"gitId":"cedricongjh"},"content":"        this.setReceiverSection(receiverSection);"},{"lineNumber":77,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":79,"author":{"gitId":"cedricongjh"},"content":"    public UUID getId() {"},{"lineNumber":80,"author":{"gitId":"cedricongjh"},"content":"        return id;"},{"lineNumber":81,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":83,"author":{"gitId":"cedricongjh"},"content":"    public void setId(UUID id) {"},{"lineNumber":84,"author":{"gitId":"cedricongjh"},"content":"        this.id \u003d id;"},{"lineNumber":85,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":87,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackQuestion getFeedbackQuestion() {"},{"lineNumber":88,"author":{"gitId":"cedricongjh"},"content":"        return feedbackQuestion;"},{"lineNumber":89,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":91,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedbackQuestion(FeedbackQuestion feedbackQuestion) {"},{"lineNumber":92,"author":{"gitId":"cedricongjh"},"content":"        this.feedbackQuestion \u003d feedbackQuestion;"},{"lineNumber":93,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":95,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackQuestionType getFeedbackQuestionType() {"},{"lineNumber":96,"author":{"gitId":"cedricongjh"},"content":"        return type;"},{"lineNumber":97,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":99,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedbackQuestionType(FeedbackQuestionType type) {"},{"lineNumber":100,"author":{"gitId":"cedricongjh"},"content":"        this.type \u003d type;"},{"lineNumber":101,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":103,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackResponseComment\u003e getFeedbackResponseComments() {"},{"lineNumber":104,"author":{"gitId":"cedricongjh"},"content":"        return feedbackResponseComments;"},{"lineNumber":105,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":107,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedbackResponseComments(List\u003cFeedbackResponseComment\u003e feedbackResponseComments) {"},{"lineNumber":108,"author":{"gitId":"cedricongjh"},"content":"        this.feedbackResponseComments \u003d feedbackResponseComments;"},{"lineNumber":109,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":111,"author":{"gitId":"cedricongjh"},"content":"    public String getGiver() {"},{"lineNumber":112,"author":{"gitId":"cedricongjh"},"content":"        return giver;"},{"lineNumber":113,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":115,"author":{"gitId":"cedricongjh"},"content":"    public void setGiver(String giver) {"},{"lineNumber":116,"author":{"gitId":"cedricongjh"},"content":"        this.giver \u003d giver;"},{"lineNumber":117,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":119,"author":{"gitId":"cedricongjh"},"content":"    public Section getGiverSection() {"},{"lineNumber":120,"author":{"gitId":"cedricongjh"},"content":"        return giverSection;"},{"lineNumber":121,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":123,"author":{"gitId":"cedricongjh"},"content":"    public void setGiverSection(Section giverSection) {"},{"lineNumber":124,"author":{"gitId":"cedricongjh"},"content":"        this.giverSection \u003d giverSection;"},{"lineNumber":125,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":127,"author":{"gitId":"cedricongjh"},"content":"    public String getReceiver() {"},{"lineNumber":128,"author":{"gitId":"cedricongjh"},"content":"        return receiver;"},{"lineNumber":129,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":131,"author":{"gitId":"cedricongjh"},"content":"    public void setReceiver(String receiver) {"},{"lineNumber":132,"author":{"gitId":"cedricongjh"},"content":"        this.receiver \u003d receiver;"},{"lineNumber":133,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":135,"author":{"gitId":"cedricongjh"},"content":"    public Section getReceiverSection() {"},{"lineNumber":136,"author":{"gitId":"cedricongjh"},"content":"        return receiverSection;"},{"lineNumber":137,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":139,"author":{"gitId":"cedricongjh"},"content":"    public void setReceiverSection(Section receiverSection) {"},{"lineNumber":140,"author":{"gitId":"cedricongjh"},"content":"        this.receiverSection \u003d receiverSection;"},{"lineNumber":141,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":143,"author":{"gitId":"cedricongjh"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":144,"author":{"gitId":"cedricongjh"},"content":"        return updatedAt;"},{"lineNumber":145,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":147,"author":{"gitId":"cedricongjh"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":148,"author":{"gitId":"cedricongjh"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":149,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":151,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":153,"author":{"gitId":"cedricongjh"},"content":"        return new ArrayList\u003c\u003e();"},{"lineNumber":154,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":156,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":158,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackResponse [id\u003d\" + id + \", giver\u003d\" + giver + \", receiver\u003d\" + receiver"},{"lineNumber":159,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":160,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":162,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":163,"author":{"gitId":"cedricongjh"},"content":"    public int hashCode() {"},{"lineNumber":164,"author":{"gitId":"cedricongjh"},"content":"        return this.getId().hashCode();"},{"lineNumber":165,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":167,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"cedricongjh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":169,"author":{"gitId":"cedricongjh"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":170,"author":{"gitId":"cedricongjh"},"content":"            return false;"},{"lineNumber":171,"author":{"gitId":"cedricongjh"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":172,"author":{"gitId":"cedricongjh"},"content":"            return true;"},{"lineNumber":173,"author":{"gitId":"cedricongjh"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":174,"author":{"gitId":"cedricongjh"},"content":"            FeedbackResponse otherResponse \u003d (FeedbackResponse) other;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherResponse.getId());"},{"lineNumber":176,"author":{"gitId":"cedricongjh"},"content":"        } else {"},{"lineNumber":177,"author":{"gitId":"cedricongjh"},"content":"            return false;"},{"lineNumber":178,"author":{"gitId":"cedricongjh"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":178,"-":2}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackResponseComment.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Id;"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Table;"},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback response comment."},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"@Table(name \u003d \"FeedbackReponseComments\")"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackResponseComment extends BaseEntity {"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"    @Id"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    private UUID id;"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"responseId\")"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackResponse feedbackResponse;"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"    private String giver;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeConverter.class)"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackParticipantType giverType;"},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"giverSectionId\")"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"    private Section giverSection;"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"    @ManyToOne"},{"lineNumber":47,"author":{"gitId":"cedricongjh"},"content":"    @JoinColumn(name \u003d \"receiverSectionId\")"},{"lineNumber":48,"author":{"gitId":"cedricongjh"},"content":"    private Section receiverSection;"},{"lineNumber":49,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":50,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":51,"author":{"gitId":"cedricongjh"},"content":"    private String commentText;"},{"lineNumber":52,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":53,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":54,"author":{"gitId":"cedricongjh"},"content":"    private boolean isVisibilityFollowingFeedbackQuestion;"},{"lineNumber":55,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":56,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":57,"author":{"gitId":"cedricongjh"},"content":"    private boolean isCommentFromFeedbackParticipant;"},{"lineNumber":58,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":59,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":60,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":61,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackParticipantType\u003e showCommentTo;"},{"lineNumber":62,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":63,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":64,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackParticipantTypeListConverter.class)"},{"lineNumber":65,"author":{"gitId":"cedricongjh"},"content":"    private List\u003cFeedbackParticipantType\u003e showGiverNameTo;"},{"lineNumber":66,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":67,"author":{"gitId":"cedricongjh"},"content":"    @UpdateTimestamp"},{"lineNumber":68,"author":{"gitId":"cedricongjh"},"content":"    private Instant updatedAt;"},{"lineNumber":69,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":70,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":71,"author":{"gitId":"cedricongjh"},"content":"    private String lastEditorEmail;"},{"lineNumber":72,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":73,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackResponseComment() {"},{"lineNumber":74,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":75,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":77,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackResponseComment("},{"lineNumber":78,"author":{"gitId":"cedricongjh"},"content":"            FeedbackResponse feedbackResponse, String giver, FeedbackParticipantType giverType,"},{"lineNumber":79,"author":{"gitId":"cedricongjh"},"content":"            Section giverSection, Section receiverSection, String commentText,"},{"lineNumber":80,"author":{"gitId":"cedricongjh"},"content":"            boolean isVisibilityFollowingFeedbackQuestion, boolean isCommentFromFeedbackParticipant,"},{"lineNumber":81,"author":{"gitId":"cedricongjh"},"content":"            List\u003cFeedbackParticipantType\u003e showCommentTo, List\u003cFeedbackParticipantType\u003e showGiverNameTo,"},{"lineNumber":82,"author":{"gitId":"cedricongjh"},"content":"            String lastEditorEmail"},{"lineNumber":83,"author":{"gitId":"cedricongjh"},"content":"    ) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":85,"author":{"gitId":"cedricongjh"},"content":"        this.setFeedbackResponse(feedbackResponse);"},{"lineNumber":86,"author":{"gitId":"cedricongjh"},"content":"        this.setGiver(giver);"},{"lineNumber":87,"author":{"gitId":"cedricongjh"},"content":"        this.setGiverType(giverType);"},{"lineNumber":88,"author":{"gitId":"cedricongjh"},"content":"        this.setGiverSection(giverSection);"},{"lineNumber":89,"author":{"gitId":"cedricongjh"},"content":"        this.setReceiverSection(receiverSection);"},{"lineNumber":90,"author":{"gitId":"cedricongjh"},"content":"        this.setCommentText(commentText);"},{"lineNumber":91,"author":{"gitId":"cedricongjh"},"content":"        this.setIsVisibilityFollowingFeedbackQuestion(isVisibilityFollowingFeedbackQuestion);"},{"lineNumber":92,"author":{"gitId":"cedricongjh"},"content":"        this.setIsCommentFromFeedbackParticipant(isCommentFromFeedbackParticipant);"},{"lineNumber":93,"author":{"gitId":"cedricongjh"},"content":"        this.setShowCommentTo(showCommentTo);"},{"lineNumber":94,"author":{"gitId":"cedricongjh"},"content":"        this.setShowGiverNameTo(showGiverNameTo);"},{"lineNumber":95,"author":{"gitId":"cedricongjh"},"content":"        this.setLastEditorEmail(lastEditorEmail);"},{"lineNumber":96,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":98,"author":{"gitId":"cedricongjh"},"content":"    public UUID getId() {"},{"lineNumber":99,"author":{"gitId":"cedricongjh"},"content":"        return id;"},{"lineNumber":100,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":102,"author":{"gitId":"cedricongjh"},"content":"    public void setId(UUID id) {"},{"lineNumber":103,"author":{"gitId":"cedricongjh"},"content":"        this.id \u003d id;"},{"lineNumber":104,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":106,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackResponse getFeedbackResponse() {"},{"lineNumber":107,"author":{"gitId":"cedricongjh"},"content":"        return feedbackResponse;"},{"lineNumber":108,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":110,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedbackResponse(FeedbackResponse feedbackResponse) {"},{"lineNumber":111,"author":{"gitId":"cedricongjh"},"content":"        this.feedbackResponse \u003d feedbackResponse;"},{"lineNumber":112,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":114,"author":{"gitId":"cedricongjh"},"content":"    public String getGiver() {"},{"lineNumber":115,"author":{"gitId":"cedricongjh"},"content":"        return giver;"},{"lineNumber":116,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":118,"author":{"gitId":"cedricongjh"},"content":"    public void setGiver(String giver) {"},{"lineNumber":119,"author":{"gitId":"cedricongjh"},"content":"        this.giver \u003d giver;"},{"lineNumber":120,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":122,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackParticipantType getGiverType() {"},{"lineNumber":123,"author":{"gitId":"cedricongjh"},"content":"        return giverType;"},{"lineNumber":124,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":126,"author":{"gitId":"cedricongjh"},"content":"    public void setGiverType(FeedbackParticipantType giverType) {"},{"lineNumber":127,"author":{"gitId":"cedricongjh"},"content":"        this.giverType \u003d giverType;"},{"lineNumber":128,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":130,"author":{"gitId":"cedricongjh"},"content":"    public Section getGiverSection() {"},{"lineNumber":131,"author":{"gitId":"cedricongjh"},"content":"        return giverSection;"},{"lineNumber":132,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":134,"author":{"gitId":"cedricongjh"},"content":"    public void setGiverSection(Section giverSection) {"},{"lineNumber":135,"author":{"gitId":"cedricongjh"},"content":"        this.giverSection \u003d giverSection;"},{"lineNumber":136,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":138,"author":{"gitId":"cedricongjh"},"content":"    public Section getReceiverSection() {"},{"lineNumber":139,"author":{"gitId":"cedricongjh"},"content":"        return receiverSection;"},{"lineNumber":140,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":142,"author":{"gitId":"cedricongjh"},"content":"    public void setReceiverSection(Section receiverSection) {"},{"lineNumber":143,"author":{"gitId":"cedricongjh"},"content":"        this.receiverSection \u003d receiverSection;"},{"lineNumber":144,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":146,"author":{"gitId":"cedricongjh"},"content":"    public String getCommentText() {"},{"lineNumber":147,"author":{"gitId":"cedricongjh"},"content":"        return commentText;"},{"lineNumber":148,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":150,"author":{"gitId":"cedricongjh"},"content":"    public void setCommentText(String commentText) {"},{"lineNumber":151,"author":{"gitId":"cedricongjh"},"content":"        this.commentText \u003d commentText;"},{"lineNumber":152,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":154,"author":{"gitId":"cedricongjh"},"content":"    public boolean getIsVisibilityFollowingFeedbackQuestion() {"},{"lineNumber":155,"author":{"gitId":"cedricongjh"},"content":"        return this.isVisibilityFollowingFeedbackQuestion;"},{"lineNumber":156,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":158,"author":{"gitId":"cedricongjh"},"content":"    public void setIsVisibilityFollowingFeedbackQuestion(boolean isVisibilityFollowingFeedbackQuestion) {"},{"lineNumber":159,"author":{"gitId":"cedricongjh"},"content":"        this.isVisibilityFollowingFeedbackQuestion \u003d isVisibilityFollowingFeedbackQuestion;"},{"lineNumber":160,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":162,"author":{"gitId":"cedricongjh"},"content":"    public boolean getIsCommentFromFeedbackParticipant() {"},{"lineNumber":163,"author":{"gitId":"cedricongjh"},"content":"        return this.isCommentFromFeedbackParticipant;"},{"lineNumber":164,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":166,"author":{"gitId":"cedricongjh"},"content":"    public void setIsCommentFromFeedbackParticipant(boolean isCommentFromFeedbackParticipant) {"},{"lineNumber":167,"author":{"gitId":"cedricongjh"},"content":"        this.isCommentFromFeedbackParticipant \u003d isCommentFromFeedbackParticipant;"},{"lineNumber":168,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":170,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowCommentTo() {"},{"lineNumber":171,"author":{"gitId":"cedricongjh"},"content":"        return showCommentTo;"},{"lineNumber":172,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":174,"author":{"gitId":"cedricongjh"},"content":"    public void setShowCommentTo(List\u003cFeedbackParticipantType\u003e showCommentTo) {"},{"lineNumber":175,"author":{"gitId":"cedricongjh"},"content":"        this.showCommentTo \u003d showCommentTo;"},{"lineNumber":176,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":178,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cFeedbackParticipantType\u003e getShowGiverNameTo() {"},{"lineNumber":179,"author":{"gitId":"cedricongjh"},"content":"        return showGiverNameTo;"},{"lineNumber":180,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":182,"author":{"gitId":"cedricongjh"},"content":"    public void setShowGiverNameTo(List\u003cFeedbackParticipantType\u003e showGiverNameTo) {"},{"lineNumber":183,"author":{"gitId":"cedricongjh"},"content":"        this.showGiverNameTo \u003d showGiverNameTo;"},{"lineNumber":184,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":186,"author":{"gitId":"cedricongjh"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":187,"author":{"gitId":"cedricongjh"},"content":"        return updatedAt;"},{"lineNumber":188,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":190,"author":{"gitId":"cedricongjh"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":191,"author":{"gitId":"cedricongjh"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":192,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":194,"author":{"gitId":"cedricongjh"},"content":"    public String getLastEditorEmail() {"},{"lineNumber":195,"author":{"gitId":"cedricongjh"},"content":"        return lastEditorEmail;"},{"lineNumber":196,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":198,"author":{"gitId":"cedricongjh"},"content":"    public void setLastEditorEmail(String lastEditorEmail) {"},{"lineNumber":199,"author":{"gitId":"cedricongjh"},"content":"        this.lastEditorEmail \u003d lastEditorEmail;"},{"lineNumber":200,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":202,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":203,"author":{"gitId":"cedricongjh"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":204,"author":{"gitId":"cedricongjh"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":205,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":206,"author":{"gitId":"cedricongjh"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForCommentGiverType(giverType), errors);"},{"lineNumber":207,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":208,"author":{"gitId":"cedricongjh"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForVisibilityOfFeedbackParticipantComments("},{"lineNumber":209,"author":{"gitId":"cedricongjh"},"content":"                isCommentFromFeedbackParticipant, isVisibilityFollowingFeedbackQuestion), errors);"},{"lineNumber":210,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":211,"author":{"gitId":"cedricongjh"},"content":"        return errors;"},{"lineNumber":212,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":214,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":215,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":216,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackResponse [id\u003d\" + id + \", giver\u003d\" + giver + \", commentText\u003d\" + commentText"},{"lineNumber":217,"author":{"gitId":"cedricongjh"},"content":"                + \", isVisibilityFollowingFeedbackQuestion\u003d\" + isVisibilityFollowingFeedbackQuestion"},{"lineNumber":218,"author":{"gitId":"cedricongjh"},"content":"                + \", isCommentFromFeedbackParticipant\u003d\" + isCommentFromFeedbackParticipant"},{"lineNumber":219,"author":{"gitId":"cedricongjh"},"content":"                + \", lastEditorEmail\u003d\" + lastEditorEmail + \", createdAt\u003d\" + getCreatedAt()"},{"lineNumber":220,"author":{"gitId":"cedricongjh"},"content":"                + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":221,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":223,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":224,"author":{"gitId":"cedricongjh"},"content":"    public int hashCode() {"},{"lineNumber":225,"author":{"gitId":"cedricongjh"},"content":"        return this.getId().hashCode();"},{"lineNumber":226,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":228,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":229,"author":{"gitId":"cedricongjh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":230,"author":{"gitId":"cedricongjh"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":231,"author":{"gitId":"cedricongjh"},"content":"            return false;"},{"lineNumber":232,"author":{"gitId":"cedricongjh"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":233,"author":{"gitId":"cedricongjh"},"content":"            return true;"},{"lineNumber":234,"author":{"gitId":"cedricongjh"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":235,"author":{"gitId":"cedricongjh"},"content":"            FeedbackResponseComment otherResponse \u003d (FeedbackResponseComment) other;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherResponse.getId());"},{"lineNumber":237,"author":{"gitId":"cedricongjh"},"content":"        } else {"},{"lineNumber":238,"author":{"gitId":"cedricongjh"},"content":"            return false;"},{"lineNumber":239,"author":{"gitId":"cedricongjh"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":239,"-":2}},{"path":"src/main/java/teammates/storage/sqlentity/FeedbackSession.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.apache.commons.lang.StringUtils;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import jakarta.persistence.Column;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import jakarta.persistence.Id;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":23,"author":{"gitId":"EuniceSim142"},"content":"import jakarta.persistence.OneToMany;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import jakarta.persistence.Table;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Represents a course entity."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"@Entity"},{"lineNumber":30,"author":{"gitId":"-"},"content":"@Table(name \u003d \"FeedbackSessions\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class FeedbackSession extends BaseEntity {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Id"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @ManyToOne"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JoinColumn(name \u003d \"courseId\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Course course;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private String creatorEmail;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private String instructions;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Instant startTime;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private Instant endTime;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Instant sessionVisibleFromTime;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private Instant resultsVisibleFromTime;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Convert(converter \u003d DurationLongConverter.class)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private Duration gracePeriod;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private boolean isOpeningEmailEnabled;"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private boolean isClosingEmailEnabled;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private boolean isPublishedEmailEnabled;"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"EuniceSim142"},"content":"    @OneToMany(mappedBy \u003d \"feedbackSession\")"},{"lineNumber":74,"author":{"gitId":"EuniceSim142"},"content":"    private List\u003cDeadlineExtension\u003e deadlineExtensions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @UpdateTimestamp"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Instant updatedAt;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private Instant deletedAt;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    protected FeedbackSession() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // required by Hibernate"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public FeedbackSession(String name, Course course, String creatorEmail, String instructions, Instant startTime,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            Instant endTime, Instant sessionVisibleFromTime, Instant resultsVisibleFromTime, Duration gracePeriod,"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            boolean isOpeningEmailEnabled, boolean isClosingEmailEnabled, boolean isPublishedEmailEnabled) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        this.setName(name);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.setCourse(course);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.setCreatorEmail(creatorEmail);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.setInstructions(StringUtils.defaultString(instructions));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.setStartTime(startTime);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.setEndTime(endTime);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.setSessionVisibleFromTime(sessionVisibleFromTime);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.setResultsVisibleFromTime(resultsVisibleFromTime);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.setGracePeriod(Objects.requireNonNullElse(gracePeriod, Duration.ZERO));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        this.setOpeningEmailEnabled(isOpeningEmailEnabled);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.setClosingEmailEnabled(isClosingEmailEnabled);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.setPublishedEmailEnabled(isPublishedEmailEnabled);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Check for null fields."},{"lineNumber":108,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField("},{"lineNumber":109,"author":{"gitId":"-"},"content":"                FieldValidator.FEEDBACK_SESSION_NAME_FIELD_NAME, name), errors);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField(\"instructions to students\", instructions),"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                errors);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField("},{"lineNumber":115,"author":{"gitId":"-"},"content":"                \"time for the session to become visible\", sessionVisibleFromTime), errors);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField(\"creator\u0027s email\", creatorEmail), errors);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // Early return if any null fields"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!errors.isEmpty()) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return errors;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForFeedbackSessionName(name), errors);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(creatorEmail), errors);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForGracePeriod(gracePeriod), errors);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField(\"submission opening time\", startTime), errors);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField(\"submission closing time\", endTime), errors);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField("},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \"time for the responses to become visible\", resultsVisibleFromTime), errors);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // Early return if any null fields"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (!errors.isEmpty()) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return errors;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTimeForSessionStartAndEnd(startTime, endTime), errors);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTimeForVisibilityStartAndSessionStart("},{"lineNumber":145,"author":{"gitId":"-"},"content":"                sessionVisibleFromTime, startTime), errors);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Instant actualSessionVisibleFromTime \u003d sessionVisibleFromTime;"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (actualSessionVisibleFromTime.equals(Const.TIME_REPRESENTS_FOLLOW_OPENING)) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            actualSessionVisibleFromTime \u003d startTime;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTimeForVisibilityStartAndResultsPublish("},{"lineNumber":154,"author":{"gitId":"-"},"content":"                actualSessionVisibleFromTime, resultsVisibleFromTime), errors);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"EuniceSim142"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTimeForSessionEndAndExtendedDeadlines("},{"lineNumber":157,"author":{"gitId":"EuniceSim142"},"content":"                endTime, deadlineExtensions), errors);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return errors;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Returns {@code true} if the session is visible; {@code false} if not."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     *         Does not care if the session has started or not."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public boolean isVisible() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Instant visibleTime \u003d this.getSessionVisibleFromTime();"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (visibleTime.equals(Const.TIME_REPRESENTS_FOLLOW_OPENING)) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            visibleTime \u003d this.startTime;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return now.isAfter(visibleTime) || now.equals(visibleTime);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return id;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        this.id \u003d id;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public Course getCourse() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return course;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void setCourse(Course course) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        this.course \u003d course;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void setName(String name) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public String getCreatorEmail() {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return creatorEmail;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public void setCreatorEmail(String creatorEmail) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        this.creatorEmail \u003d creatorEmail;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public String getInstructions() {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return instructions;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public void setInstructions(String instructions) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        this.instructions \u003d SanitizationHelper.sanitizeForRichText(instructions);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public Instant getStartTime() {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        return startTime;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public void setStartTime(Instant startTime) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public Instant getEndTime() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return endTime;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public void setEndTime(Instant endTime) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public Instant getSessionVisibleFromTime() {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        return sessionVisibleFromTime;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    public void setSessionVisibleFromTime(Instant sessionVisibleFromTime) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        this.sessionVisibleFromTime \u003d sessionVisibleFromTime;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    public Instant getResultsVisibleFromTime() {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        return resultsVisibleFromTime;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    public void setResultsVisibleFromTime(Instant resultsVisibleFromTime) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        this.resultsVisibleFromTime \u003d resultsVisibleFromTime;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"    public Duration getGracePeriod() {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return gracePeriod;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public void setGracePeriod(Duration gracePeriod) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        this.gracePeriod \u003d gracePeriod;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public boolean isOpeningEmailEnabled() {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        return isOpeningEmailEnabled;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    public void setOpeningEmailEnabled(boolean isOpeningEmailEnabled) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        this.isOpeningEmailEnabled \u003d isOpeningEmailEnabled;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public boolean isClosingEmailEnabled() {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return isClosingEmailEnabled;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public void setClosingEmailEnabled(boolean isClosingEmailEnabled) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        this.isClosingEmailEnabled \u003d isClosingEmailEnabled;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    public boolean isPublishedEmailEnabled() {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        return isPublishedEmailEnabled;"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public void setPublishedEmailEnabled(boolean isPublishedEmailEnabled) {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        this.isPublishedEmailEnabled \u003d isPublishedEmailEnabled;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"EuniceSim142"},"content":"    public List\u003cDeadlineExtension\u003e getDeadlineExtensions() {"},{"lineNumber":282,"author":{"gitId":"EuniceSim142"},"content":"        return deadlineExtensions;"},{"lineNumber":283,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":285,"author":{"gitId":"EuniceSim142"},"content":"    public void setDeadlineExtensions(List\u003cDeadlineExtension\u003e deadlineExtensions) {"},{"lineNumber":286,"author":{"gitId":"EuniceSim142"},"content":"        this.deadlineExtensions \u003d deadlineExtensions;"},{"lineNumber":287,"author":{"gitId":"EuniceSim142"},"content":"    }"},{"lineNumber":288,"author":{"gitId":"EuniceSim142"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        return updatedAt;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"    public Instant getDeletedAt() {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        return deletedAt;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    public void setDeletedAt(Instant deletedAt) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        this.deletedAt \u003d deletedAt;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        return \"FeedbackSession [id\u003d\" + id + \", course\u003d\" + course + \", name\u003d\" + name + \", creatorEmail\u003d\" + creatorEmail"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                + \", instructions\u003d\" + instructions + \", startTime\u003d\" + startTime + \", endTime\u003d\" + endTime"},{"lineNumber":309,"author":{"gitId":"-"},"content":"                + \", sessionVisibleFromTime\u003d\" + sessionVisibleFromTime + \", resultsVisibleFromTime\u003d\""},{"lineNumber":310,"author":{"gitId":"-"},"content":"                + resultsVisibleFromTime + \", gracePeriod\u003d\" + gracePeriod + \", isOpeningEmailEnabled\u003d\""},{"lineNumber":311,"author":{"gitId":"-"},"content":"                + isOpeningEmailEnabled + \", isClosingEmailEnabled\u003d\" + isClosingEmailEnabled"},{"lineNumber":312,"author":{"gitId":"EuniceSim142"},"content":"                + \", isPublishedEmailEnabled\u003d\" + isPublishedEmailEnabled + \", deadlineExtensions\u003d\" + deadlineExtensions"},{"lineNumber":313,"author":{"gitId":"EuniceSim142"},"content":"                + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\" + updatedAt + \", deletedAt\u003d\" + deletedAt + \"]\";"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"            FeedbackSession otherFs \u003d (FeedbackSession) other;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherFs.getId());"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"EuniceSim142":16,"-":318}},{"path":"src/main/java/teammates/storage/sqlentity/Instructor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"domlimm"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPermissionRole;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPermissionSet;"},{"lineNumber":9,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPrivileges;"},{"lineNumber":10,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPrivilegesLegacy;"},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":12,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Column;"},{"lineNumber":16,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.EnumType;"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Enumerated;"},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Table;"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":" * Represents an Instructor."},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":"@Entity"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":"@Table(name \u003d \"Instructors\")"},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":"public class Instructor extends User {"},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":"    private boolean isDisplayedToStudents;"},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":33,"author":{"gitId":"domlimm"},"content":"    private String displayName;"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":36,"author":{"gitId":"domlimm"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":"    private InstructorPermissionRole role;"},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false, columnDefinition \u003d \"TEXT\")"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"    @Convert(converter \u003d InstructorPrivilegesConverter.class)"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":"    private InstructorPrivileges instructorPrivileges;"},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":43,"author":{"gitId":"domlimm"},"content":"    protected Instructor() {"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":"        // required by Hibernate"},{"lineNumber":45,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":"    public Instructor(Course course, String name, String email, boolean isDisplayedToStudents,"},{"lineNumber":48,"author":{"gitId":"domlimm"},"content":"            String displayName, InstructorPermissionRole role, InstructorPrivileges instructorPrivileges) {"},{"lineNumber":49,"author":{"gitId":"domlimm"},"content":"        super(course, name, email);"},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":"        this.setDisplayedToStudents(isDisplayedToStudents);"},{"lineNumber":51,"author":{"gitId":"domlimm"},"content":"        this.setDisplayName(displayName);"},{"lineNumber":52,"author":{"gitId":"domlimm"},"content":"        this.setRole(role);"},{"lineNumber":53,"author":{"gitId":"domlimm"},"content":"        this.setInstructorPrivileges(instructorPrivileges);"},{"lineNumber":54,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":56,"author":{"gitId":"domlimm"},"content":"    public boolean isDisplayedToStudents() {"},{"lineNumber":57,"author":{"gitId":"domlimm"},"content":"        return isDisplayedToStudents;"},{"lineNumber":58,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":60,"author":{"gitId":"domlimm"},"content":"    public void setDisplayedToStudents(boolean displayedToStudents) {"},{"lineNumber":61,"author":{"gitId":"domlimm"},"content":"        isDisplayedToStudents \u003d displayedToStudents;"},{"lineNumber":62,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":64,"author":{"gitId":"domlimm"},"content":"    public String getDisplayName() {"},{"lineNumber":65,"author":{"gitId":"domlimm"},"content":"        return displayName;"},{"lineNumber":66,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":68,"author":{"gitId":"domlimm"},"content":"    public void setDisplayName(String displayName) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.displayName \u003d SanitizationHelper.sanitizeName(displayName);"},{"lineNumber":70,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":72,"author":{"gitId":"domlimm"},"content":"    public InstructorPermissionRole getRole() {"},{"lineNumber":73,"author":{"gitId":"domlimm"},"content":"        return role;"},{"lineNumber":74,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":76,"author":{"gitId":"domlimm"},"content":"    public void setRole(InstructorPermissionRole role) {"},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":"        this.role \u003d role;"},{"lineNumber":78,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":80,"author":{"gitId":"domlimm"},"content":"    public InstructorPrivileges getInstructorPrivileges() {"},{"lineNumber":81,"author":{"gitId":"domlimm"},"content":"        return instructorPrivileges;"},{"lineNumber":82,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":84,"author":{"gitId":"domlimm"},"content":"    public void setInstructorPrivileges(InstructorPrivileges instructorPrivileges) {"},{"lineNumber":85,"author":{"gitId":"domlimm"},"content":"        this.instructorPrivileges \u003d instructorPrivileges;"},{"lineNumber":86,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":88,"author":{"gitId":"domlimm"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"domlimm"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitId":"domlimm"},"content":"        return \"Instructor [id\u003d\" + super.getId() + \", isDisplayedToStudents\u003d\" + isDisplayedToStudents"},{"lineNumber":91,"author":{"gitId":"domlimm"},"content":"                + \", displayName\u003d\" + displayName + \", role\u003d\" + role + \", instructorPrivileges\u003d\" + instructorPrivileges"},{"lineNumber":92,"author":{"gitId":"domlimm"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":93,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":95,"author":{"gitId":"domlimm"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"domlimm"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":97,"author":{"gitId":"domlimm"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":99,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(super.getName()), errors);"},{"lineNumber":100,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(super.getEmail()), errors);"},{"lineNumber":101,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(displayName), errors);"},{"lineNumber":102,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForRole(role.getRoleName()), errors);"},{"lineNumber":103,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":104,"author":{"gitId":"domlimm"},"content":"        return errors;"},{"lineNumber":105,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Returns a list of sections this instructor has the specified privilege."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public Map\u003cString, InstructorPermissionSet\u003e getSectionsWithPrivilege(String privilegeName) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return this.instructorPrivileges.getSectionsWithPrivilege(privilegeName);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Returns true if the instructor has the given privilege in the course."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean isAllowedForPrivilege(String privilegeName) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return this.instructorPrivileges.isAllowedForPrivilege(privilegeName);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Returns true if the instructor has the given privilege in the given section for the given feedback session."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public boolean isAllowedForPrivilege(String sectionName, String sessionName, String privilegeName) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return instructorPrivileges.isAllowedForPrivilege(sectionName, sessionName, privilegeName);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Returns true if the instructor has the given privilege in the given section."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public boolean isAllowedForPrivilege(String sectionName, String privilegeName) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return instructorPrivileges.isAllowedForPrivilege(sectionName, privilegeName);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns true if privilege for session is present for any section."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public boolean isAllowedForPrivilegeAnySection(String sessionName, String privilegeName) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return instructorPrivileges.isAllowedForPrivilegeAnySection(sessionName, privilegeName);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"domlimm"},"content":"     * Converter for InstructorPrivileges."},{"lineNumber":144,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"domlimm"},"content":"    @Converter"},{"lineNumber":146,"author":{"gitId":"domlimm"},"content":"    public static class InstructorPrivilegesConverter"},{"lineNumber":147,"author":{"gitId":"domlimm"},"content":"            extends JsonConverter\u003cInstructorPrivileges\u003e {"},{"lineNumber":148,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":149,"author":{"gitId":"domlimm"},"content":"        @Override"},{"lineNumber":150,"author":{"gitId":"domlimm"},"content":"        public String convertToDatabaseColumn(InstructorPrivileges instructorPrivileges) {"},{"lineNumber":151,"author":{"gitId":"domlimm"},"content":"            return JsonUtils.toJson(instructorPrivileges.toLegacyFormat(), InstructorPrivilegesLegacy.class);"},{"lineNumber":152,"author":{"gitId":"domlimm"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":154,"author":{"gitId":"domlimm"},"content":"        @Override"},{"lineNumber":155,"author":{"gitId":"domlimm"},"content":"        public InstructorPrivileges convertToEntityAttribute(String instructorPriviledgesAsString) {"},{"lineNumber":156,"author":{"gitId":"domlimm"},"content":"            InstructorPrivilegesLegacy privilegesLegacy \u003d"},{"lineNumber":157,"author":{"gitId":"domlimm"},"content":"                    JsonUtils.fromJson(instructorPriviledgesAsString, InstructorPrivilegesLegacy.class);"},{"lineNumber":158,"author":{"gitId":"domlimm"},"content":"            return new InstructorPrivileges(privilegesLegacy);"},{"lineNumber":159,"author":{"gitId":"domlimm"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":123,"-":38}},{"path":"src/main/java/teammates/storage/sqlentity/Notification.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.Column;"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.EnumType;"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.Enumerated;"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.Id;"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"import jakarta.persistence.Table;"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":" * Represents a unique notification in the system."},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"@Entity"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"@Table(name \u003d \"Notifications\")"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"public class Notification extends BaseEntity {"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"    @Id"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"    private Instant startTime;"},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"    private Instant endTime;"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"    private NotificationStyle style;"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"    @Enumerated(EnumType.STRING)"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"    private NotificationTargetUser targetUser;"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"    private String title;"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":"    private String message;"},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":"    private boolean shown;"},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":56,"author":{"gitId":"hhdqirui"},"content":"    @UpdateTimestamp"},{"lineNumber":57,"author":{"gitId":"hhdqirui"},"content":"    private Instant updatedAt;"},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Instantiates a new notification."},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Notification(Instant startTime, Instant endTime, NotificationStyle style,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            NotificationTargetUser targetUser, String title, String message) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.setStartTime(startTime);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.setEndTime(endTime);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.setStyle(style);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.setTargetUser(targetUser);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.setTitle(title);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.setMessage(message);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":71,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":"    protected Notification() {"},{"lineNumber":74,"author":{"gitId":"hhdqirui"},"content":"        // required by Hibernate"},{"lineNumber":75,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":77,"author":{"gitId":"hhdqirui"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"hhdqirui"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":79,"author":{"gitId":"hhdqirui"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":81,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField(\"notification visible time\", startTime), errors);"},{"lineNumber":82,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getValidityInfoForNonNullField(\"notification expiry time\", endTime), errors);"},{"lineNumber":83,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForTimeForNotificationStartAndEnd(startTime, endTime), errors);"},{"lineNumber":84,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForNotificationStyle(style.name()), errors);"},{"lineNumber":85,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForNotificationTargetUser(targetUser.name()), errors);"},{"lineNumber":86,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForNotificationTitle(title), errors);"},{"lineNumber":87,"author":{"gitId":"hhdqirui"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForNotificationBody(message), errors);"},{"lineNumber":88,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":89,"author":{"gitId":"hhdqirui"},"content":"        return errors;"},{"lineNumber":90,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return id;"},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.id \u003d id;"},{"lineNumber":98,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":100,"author":{"gitId":"hhdqirui"},"content":"    public Instant getStartTime() {"},{"lineNumber":101,"author":{"gitId":"hhdqirui"},"content":"        return startTime;"},{"lineNumber":102,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":104,"author":{"gitId":"hhdqirui"},"content":"    public void setStartTime(Instant startTime) {"},{"lineNumber":105,"author":{"gitId":"hhdqirui"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":106,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":108,"author":{"gitId":"hhdqirui"},"content":"    public Instant getEndTime() {"},{"lineNumber":109,"author":{"gitId":"hhdqirui"},"content":"        return endTime;"},{"lineNumber":110,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":112,"author":{"gitId":"hhdqirui"},"content":"    public void setEndTime(Instant endTime) {"},{"lineNumber":113,"author":{"gitId":"hhdqirui"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":114,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":116,"author":{"gitId":"hhdqirui"},"content":"    public NotificationStyle getStyle() {"},{"lineNumber":117,"author":{"gitId":"hhdqirui"},"content":"        return style;"},{"lineNumber":118,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":120,"author":{"gitId":"hhdqirui"},"content":"    public void setStyle(NotificationStyle style) {"},{"lineNumber":121,"author":{"gitId":"hhdqirui"},"content":"        this.style \u003d style;"},{"lineNumber":122,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":124,"author":{"gitId":"hhdqirui"},"content":"    public NotificationTargetUser getTargetUser() {"},{"lineNumber":125,"author":{"gitId":"hhdqirui"},"content":"        return targetUser;"},{"lineNumber":126,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":128,"author":{"gitId":"hhdqirui"},"content":"    public void setTargetUser(NotificationTargetUser targetUser) {"},{"lineNumber":129,"author":{"gitId":"hhdqirui"},"content":"        this.targetUser \u003d targetUser;"},{"lineNumber":130,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":132,"author":{"gitId":"hhdqirui"},"content":"    public String getTitle() {"},{"lineNumber":133,"author":{"gitId":"hhdqirui"},"content":"        return title;"},{"lineNumber":134,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":136,"author":{"gitId":"hhdqirui"},"content":"    public void setTitle(String title) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        this.title \u003d SanitizationHelper.sanitizeTitle(title);"},{"lineNumber":138,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":140,"author":{"gitId":"hhdqirui"},"content":"    public String getMessage() {"},{"lineNumber":141,"author":{"gitId":"hhdqirui"},"content":"        return message;"},{"lineNumber":142,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":144,"author":{"gitId":"hhdqirui"},"content":"    public void setMessage(String message) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        this.message \u003d SanitizationHelper.sanitizeForRichText(message);"},{"lineNumber":146,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":148,"author":{"gitId":"hhdqirui"},"content":"    public boolean isShown() {"},{"lineNumber":149,"author":{"gitId":"hhdqirui"},"content":"        return shown;"},{"lineNumber":150,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":152,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"hhdqirui"},"content":"     * Sets the notification as shown to the user."},{"lineNumber":154,"author":{"gitId":"hhdqirui"},"content":"     * Only allowed to change value from false to true."},{"lineNumber":155,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"hhdqirui"},"content":"    public void setShown() {"},{"lineNumber":157,"author":{"gitId":"hhdqirui"},"content":"        this.shown \u003d true;"},{"lineNumber":158,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":160,"author":{"gitId":"hhdqirui"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":161,"author":{"gitId":"hhdqirui"},"content":"        return updatedAt;"},{"lineNumber":162,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":164,"author":{"gitId":"hhdqirui"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":165,"author":{"gitId":"hhdqirui"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":166,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":168,"author":{"gitId":"hhdqirui"},"content":"    @Override"},{"lineNumber":169,"author":{"gitId":"hhdqirui"},"content":"    public String toString() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return \"Notification [notificationId\u003d\" + id + \", startTime\u003d\" + startTime + \", endTime\u003d\" + endTime"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                + \", style\u003d\" + style + \", targetUser\u003d\" + targetUser + \", title\u003d\" + title + \", message\u003d\" + message"},{"lineNumber":172,"author":{"gitId":"hhdqirui"},"content":"                + \", shown\u003d\" + shown + \", createdAt\u003d\" + getCreatedAt() + \", updatedAt\u003d\" + updatedAt + \"]\";"},{"lineNumber":173,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":175,"author":{"gitId":"hhdqirui"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"hhdqirui"},"content":"    public int hashCode() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":178,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":180,"author":{"gitId":"hhdqirui"},"content":"    @Override"},{"lineNumber":181,"author":{"gitId":"hhdqirui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":182,"author":{"gitId":"hhdqirui"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":183,"author":{"gitId":"hhdqirui"},"content":"            return false;"},{"lineNumber":184,"author":{"gitId":"hhdqirui"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":185,"author":{"gitId":"hhdqirui"},"content":"            return true;"},{"lineNumber":186,"author":{"gitId":"hhdqirui"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":187,"author":{"gitId":"hhdqirui"},"content":"            Notification otherNotification \u003d (Notification) other;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherNotification.getId());"},{"lineNumber":189,"author":{"gitId":"hhdqirui"},"content":"        } else {"},{"lineNumber":190,"author":{"gitId":"hhdqirui"},"content":"            return false;"},{"lineNumber":191,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":172,"-":21}},{"path":"src/main/java/teammates/storage/sqlentity/Student.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"domlimm"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":6,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":8,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":9,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Column;"},{"lineNumber":10,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Table;"},{"lineNumber":12,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":" * Represents a Student."},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":16,"author":{"gitId":"domlimm"},"content":"@Entity"},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"@Table(name \u003d \"Students\")"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":"public class Student extends User {"},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":"    private String comments;"},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":"    protected Student() {"},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":"        // required by Hibernate"},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":"    public Student(Course course, String name, String email, String comments) {"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":"        super(course, name, email);"},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":"        this.setComments(comments);"},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":"    public String getComments() {"},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":"        return comments;"},{"lineNumber":33,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":"    public void setComments(String comments) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.comments \u003d SanitizationHelper.sanitizeTextField(comments);"},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":"        return \"Student [id\u003d\" + super.getId() + \", comments\u003d\" + comments"},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":43,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":45,"author":{"gitId":"domlimm"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"domlimm"},"content":"    public List\u003cString\u003e getInvalidityInfo() {"},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":"        assert comments !\u003d null;"},{"lineNumber":48,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":49,"author":{"gitId":"domlimm"},"content":"        List\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":51,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForEmail(super.getEmail()), errors);"},{"lineNumber":52,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForStudentRoleComments(comments), errors);"},{"lineNumber":53,"author":{"gitId":"domlimm"},"content":"        addNonEmptyError(FieldValidator.getInvalidityInfoForPersonName(super.getName()), errors);"},{"lineNumber":54,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":55,"author":{"gitId":"domlimm"},"content":"        return errors;"},{"lineNumber":56,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":56,"-":1}},{"path":"src/main/java/teammates/storage/sqlentity/User.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.storage.sqlentity;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import java.security.SecureRandom;"},{"lineNumber":4,"author":{"gitId":"domlimm"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.UUID;"},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":8,"author":{"gitId":"domlimm"},"content":"import org.hibernate.annotations.UpdateTimestamp;"},{"lineNumber":9,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.util.SanitizationHelper;"},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Column;"},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Id;"},{"lineNumber":16,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Inheritance;"},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.InheritanceType;"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.JoinColumn;"},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.ManyToOne;"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.Table;"},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"import jakarta.persistence.UniqueConstraint;"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Represents a User."},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":"@Entity"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":"@Table(name \u003d \"Users\", uniqueConstraints \u003d {"},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":"        @UniqueConstraint(name \u003d \"Unique email and courseId\", columnNames \u003d { \"email\", \"courseId\" })"},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":"})"},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":"@Inheritance(strategy \u003d InheritanceType.JOINED)"},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":"public abstract class User extends BaseEntity {"},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":"    @Id"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private UUID id;"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":"    @ManyToOne"},{"lineNumber":36,"author":{"gitId":"domlimm"},"content":"    @JoinColumn(name \u003d \"accountId\")"},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":"    private Account account;"},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false, insertable \u003d false, updatable \u003d false)"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"    private String courseId;"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":"    @ManyToOne"},{"lineNumber":43,"author":{"gitId":"domlimm"},"content":"    @JoinColumn(name \u003d \"courseId\", nullable \u003d false)"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":"    private Course course;"},{"lineNumber":45,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":46,"author":{"gitId":"domlimm"},"content":"    @ManyToOne"},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":"    @JoinColumn(name \u003d \"teamId\")"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Team team;"},{"lineNumber":49,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":51,"author":{"gitId":"domlimm"},"content":"    private String name;"},{"lineNumber":52,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":53,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":54,"author":{"gitId":"domlimm"},"content":"    private String email;"},{"lineNumber":55,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":56,"author":{"gitId":"domlimm"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":57,"author":{"gitId":"domlimm"},"content":"    private String regKey;"},{"lineNumber":58,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":59,"author":{"gitId":"domlimm"},"content":"    @UpdateTimestamp"},{"lineNumber":60,"author":{"gitId":"domlimm"},"content":"    private Instant updatedAt;"},{"lineNumber":61,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":62,"author":{"gitId":"domlimm"},"content":"    protected User() {"},{"lineNumber":63,"author":{"gitId":"domlimm"},"content":"        // required by Hibernate"},{"lineNumber":64,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":66,"author":{"gitId":"domlimm"},"content":"    public User(Course course, String name, String email) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.setId(UUID.randomUUID());"},{"lineNumber":68,"author":{"gitId":"domlimm"},"content":"        this.setCourse(course);"},{"lineNumber":69,"author":{"gitId":"domlimm"},"content":"        this.setName(name);"},{"lineNumber":70,"author":{"gitId":"domlimm"},"content":"        this.setEmail(email);"},{"lineNumber":71,"author":{"gitId":"domlimm"},"content":"        this.setRegKey(generateRegistrationKey());"},{"lineNumber":72,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public UUID getId() {"},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":"        return id;"},{"lineNumber":76,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setId(UUID id) {"},{"lineNumber":79,"author":{"gitId":"domlimm"},"content":"        this.id \u003d id;"},{"lineNumber":80,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":82,"author":{"gitId":"domlimm"},"content":"    public Account getAccount() {"},{"lineNumber":83,"author":{"gitId":"domlimm"},"content":"        return account;"},{"lineNumber":84,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":86,"author":{"gitId":"domlimm"},"content":"    public void setAccount(Account account) {"},{"lineNumber":87,"author":{"gitId":"domlimm"},"content":"        this.account \u003d account;"},{"lineNumber":88,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":90,"author":{"gitId":"domlimm"},"content":"    public String getCourseId() {"},{"lineNumber":91,"author":{"gitId":"domlimm"},"content":"        return courseId;"},{"lineNumber":92,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":94,"author":{"gitId":"domlimm"},"content":"    public Course getCourse() {"},{"lineNumber":95,"author":{"gitId":"domlimm"},"content":"        return course;"},{"lineNumber":96,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":98,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"domlimm"},"content":"     * Sets a course as well as the courseId."},{"lineNumber":100,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"domlimm"},"content":"    public void setCourse(Course course) {"},{"lineNumber":102,"author":{"gitId":"domlimm"},"content":"        this.course \u003d course;"},{"lineNumber":103,"author":{"gitId":"domlimm"},"content":"        this.courseId \u003d course.getId();"},{"lineNumber":104,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public Team getTeam() {"},{"lineNumber":107,"author":{"gitId":"domlimm"},"content":"        return team;"},{"lineNumber":108,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setTeam(Team team) {"},{"lineNumber":111,"author":{"gitId":"domlimm"},"content":"        this.team \u003d team;"},{"lineNumber":112,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":114,"author":{"gitId":"domlimm"},"content":"    public String getName() {"},{"lineNumber":115,"author":{"gitId":"domlimm"},"content":"        return name;"},{"lineNumber":116,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":118,"author":{"gitId":"domlimm"},"content":"    public void setName(String name) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        this.name \u003d SanitizationHelper.sanitizeName(name);"},{"lineNumber":120,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":122,"author":{"gitId":"domlimm"},"content":"    public String getEmail() {"},{"lineNumber":123,"author":{"gitId":"domlimm"},"content":"        return email;"},{"lineNumber":124,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":126,"author":{"gitId":"domlimm"},"content":"    public void setEmail(String email) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        this.email \u003d SanitizationHelper.sanitizeEmail(email);"},{"lineNumber":128,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":130,"author":{"gitId":"domlimm"},"content":"    public Instant getUpdatedAt() {"},{"lineNumber":131,"author":{"gitId":"domlimm"},"content":"        return updatedAt;"},{"lineNumber":132,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":134,"author":{"gitId":"domlimm"},"content":"    public void setUpdatedAt(Instant updatedAt) {"},{"lineNumber":135,"author":{"gitId":"domlimm"},"content":"        this.updatedAt \u003d updatedAt;"},{"lineNumber":136,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"domlimm"},"content":"    public String getRegKey() {"},{"lineNumber":139,"author":{"gitId":"domlimm"},"content":"        return this.regKey;"},{"lineNumber":140,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":142,"author":{"gitId":"domlimm"},"content":"    public void setRegKey(String regKey) {"},{"lineNumber":143,"author":{"gitId":"domlimm"},"content":"        this.regKey \u003d regKey;"},{"lineNumber":144,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":146,"author":{"gitId":"domlimm"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"domlimm"},"content":"     * Returns unique registration key for the student/instructor."},{"lineNumber":148,"author":{"gitId":"domlimm"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"domlimm"},"content":"    private String generateRegistrationKey() {"},{"lineNumber":150,"author":{"gitId":"domlimm"},"content":"        String uniqueId \u003d this.email + \u0027%\u0027 + this.course.getId();"},{"lineNumber":151,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":152,"author":{"gitId":"domlimm"},"content":"        SecureRandom prng \u003d new SecureRandom();"},{"lineNumber":153,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":154,"author":{"gitId":"domlimm"},"content":"        return StringHelper.encrypt(uniqueId + \"%\" + prng.nextInt());"},{"lineNumber":155,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } else if (this \u003d\u003d other) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } else if (this.getClass() \u003d\u003d other.getClass()) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            User otherUser \u003d (User) other;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return Objects.equals(this.getId(), otherUser.getId());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return this.getId().hashCode();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":142,"-":33}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackConstantSumQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackConstantSumQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a constant sum question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackConstantSumQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackConstantSumQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackConstantSumQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackConstantSumQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackConstantSumQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackConstantSumQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackConstantSumQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackConstantSumQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackConstantSumQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackConstantSumQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackContributionQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackContributionQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a contribution question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackContributionQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackContributionQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackContributionQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackContributionQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackContributionQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackContributionQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackContributionQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackContributionQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackContributionQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackContributionQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackMcqQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents an mcq question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackMcqQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackMcqQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackMcqQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackMcqQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackMcqQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackMcqQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackMcqQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackMcqQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackMcqQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackMcqQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackMsqQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents an msq question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackMsqQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackMsqQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackMsqQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackMsqQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackMsqQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackMsqQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackMsqQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackMsqQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackMsqQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackMsqQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackNumericalScaleQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a numerical scale question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackNumericalScaleQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackNumericalScaleQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackNumericalScaleQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackNumericalScaleQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackNumericalScaleQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackNumericalScaleQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackNumericalScaleQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackNumericalScaleQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackNumericalScaleQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackNumericalScaleQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackRankOptionsQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a rank options question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackRankOptionsQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackRankOptionsQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackRankOptionsQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackRankOptionsQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackRankOptionsQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackRankOptionsQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackRankOptionsQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackRankOptionsQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackRankOptionsQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackRankOptionsQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackRankRecipientsQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackRankRecipientsQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a rank recipients question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackRankRecipientsQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackRankRecipientsQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackRankRecipientsQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackRankRecipientsQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackRankRecipientsQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackRankRecipientsQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackRankRecipientsQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackRankaRecipientsQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackRankRecipientsQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackRankRecipientsQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackRubricQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackRubricQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a rubric question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackRubricQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackRubricQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackRubricQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackRubricQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackRubricQuestion [id\u003d\" + super.getId()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackRubricQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackRubricQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackRubricQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackRubricQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackRubricQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/FeedbackTextQuestion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackTextQuestionDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackQuestion;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a text question."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackTextQuestion extends FeedbackQuestion {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackTextQuestionDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackTextQuestionDetails questionDetails;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackTextQuestion() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackTextQuestion [id\u003d\" + super.getId() + \", createdAt\u003d\" + super.getCreatedAt()"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":"                + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    public void setFeedBackQuestionDetails(FeedbackTextQuestionDetails questionDetails) {"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"        this.questionDetails \u003d questionDetails;"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackTextQuestionDetails getFeedbackQuestionDetails() {"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"        return questionDetails;"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackTextQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackTextQuestionDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackTextQuestionDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/questions/package-info.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":" * Contains FeedbackQuestion subclass entities."},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.questions;"}],"authorContributionMap":{"cedricongjh":4}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackConstantSumResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackConstantSumResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback constant sum response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackConstantSumResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackConstantSumResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackConstantSumResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackConstantSumResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackConstantSumResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackConstantSumResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackConstantSumResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackConstantSumResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackConstantSumResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackConstantSumResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackContributionResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackContributionResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback contribution response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackContributionResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackContributionResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackContributionResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackContributionResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackContributionResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackContributionResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackContributionResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackContributionResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackContributionResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackContributionResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackMcqResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackMcqResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback mcq response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackMcqResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackMcqResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackMcqResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackMcqResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackMcqResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackMcqResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackMcqResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackMcqResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackMcqResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackMcqResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackMsqResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackMsqResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback msq response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackMsqResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackMsqResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackMsqResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackMsqResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackMsqResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackMsqResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackMsqResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackMsqResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackMsqResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackMsqResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackNumericalScaleResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackNumericalScaleResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback numerical scale response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackNumericalScaleResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackNumericalScaleResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackNumericalScaleResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackNumericalScaleResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackNumericalScaleResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackNumericalScaleResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackTextResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackNumericalScaleQuestion specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackNumericalScaleResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackNumericalScaleResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackRankOptionsResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackRankOptionsResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback rank options response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackRankOptionsResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackRankOptionsResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackRankOptionsResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackRankOptionsResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackRankOptionsResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackRankOptionsResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackRankOptionsResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackRankOptionsResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackRankOptionsResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackRankOptionsResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackRankRecipientsResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackRankRecipientsResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback rank recipients response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackRankRecipientsResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackRankRecipientsResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackRankRecipientsResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackRankRecipientsResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackRankRecipientsResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackRankRecipientsResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackRankRecipientsResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackRankRecipientsResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackRankRecipientsResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackRankRecipientsResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackRubricResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.common.datatransfer.questions.FeedbackRubricResponseDetails;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Convert;"},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Converter;"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":" * Represents a feedback rubric response."},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackRubricResponse extends FeedbackResponse {"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"    @Convert(converter \u003d FeedbackRubricResponseDetailsConverter.class)"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    private FeedbackRubricResponseDetails answer;"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackRubricResponse() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public FeedbackRubricResponseDetails getAnswer() {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(FeedbackRubricResponseDetails answer) {"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackRubricResponse [id\u003d\" + super.getId()"},{"lineNumber":36,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":37,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":39,"author":{"gitId":"cedricongjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"cedricongjh"},"content":"     * Converter for FeedbackRubricResponse specific attributes."},{"lineNumber":41,"author":{"gitId":"cedricongjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"cedricongjh"},"content":"    @Converter"},{"lineNumber":43,"author":{"gitId":"cedricongjh"},"content":"    public static class FeedbackRubricResponseDetailsConverter"},{"lineNumber":44,"author":{"gitId":"cedricongjh"},"content":"            extends JsonConverter\u003cFeedbackRubricResponseDetails\u003e {"},{"lineNumber":45,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":46}},{"path":"src/main/java/teammates/storage/sqlentity/responses/FeedbackTextResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":"import teammates.storage.sqlentity.FeedbackResponse;"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":5,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Column;"},{"lineNumber":6,"author":{"gitId":"cedricongjh"},"content":"import jakarta.persistence.Entity;"},{"lineNumber":7,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":8,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"cedricongjh"},"content":" * Represents a text response."},{"lineNumber":10,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"cedricongjh"},"content":"@Entity"},{"lineNumber":12,"author":{"gitId":"cedricongjh"},"content":"public class FeedbackTextResponse extends FeedbackResponse {"},{"lineNumber":13,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":14,"author":{"gitId":"cedricongjh"},"content":"    @Column(nullable \u003d false)"},{"lineNumber":15,"author":{"gitId":"cedricongjh"},"content":"    private String answer;"},{"lineNumber":16,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":17,"author":{"gitId":"cedricongjh"},"content":"    protected FeedbackTextResponse() {"},{"lineNumber":18,"author":{"gitId":"cedricongjh"},"content":"        // required by Hibernate"},{"lineNumber":19,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"    public String getAnswer() {"},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"        return answer;"},{"lineNumber":23,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":25,"author":{"gitId":"cedricongjh"},"content":"    public void setAnswer(String answer) {"},{"lineNumber":26,"author":{"gitId":"cedricongjh"},"content":"        this.answer \u003d answer;"},{"lineNumber":27,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":29,"author":{"gitId":"cedricongjh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"cedricongjh"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"cedricongjh"},"content":"        return \"FeedbackTextResponse [id\u003d\" + super.getId()"},{"lineNumber":32,"author":{"gitId":"cedricongjh"},"content":"            + \", createdAt\u003d\" + super.getCreatedAt() + \", updatedAt\u003d\" + super.getUpdatedAt() + \"]\";"},{"lineNumber":33,"author":{"gitId":"cedricongjh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"cedricongjh"},"content":"}"}],"authorContributionMap":{"cedricongjh":34}},{"path":"src/main/java/teammates/storage/sqlentity/responses/package-info.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"cedricongjh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"cedricongjh"},"content":" * Contains FeedbackResponse subclass entities."},{"lineNumber":3,"author":{"gitId":"cedricongjh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"cedricongjh"},"content":"package teammates.storage.sqlentity.responses;"}],"authorContributionMap":{"cedricongjh":4}},{"path":"src/main/java/teammates/ui/output/AccountRequestData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.output;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javax.annotation.Nullable;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Output format of account request data."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AccountRequestData extends ApiOutput {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final String institute;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final String registrationKey;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Nullable"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Long registeredAt;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final long createdAt;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public AccountRequestData(AccountRequestAttributes accountRequestInfo) {"},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.name \u003d accountRequestInfo.getName();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.email \u003d accountRequestInfo.getEmail();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.institute \u003d accountRequestInfo.getInstitute();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.registrationKey \u003d accountRequestInfo.getRegistrationKey();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.createdAt \u003d accountRequestInfo.getCreatedAt().toEpochMilli();"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (accountRequestInfo.getRegisteredAt() \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            this.registeredAt \u003d null;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            this.registeredAt \u003d accountRequestInfo.getRegisteredAt().toEpochMilli();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"    public AccountRequestData(AccountRequest accountRequest) {"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        this.name \u003d accountRequest.getName();"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"        this.email \u003d accountRequest.getEmail();"},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"        this.institute \u003d accountRequest.getInstitute();"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"        this.registrationKey \u003d accountRequest.getRegistrationKey();"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"        this.createdAt \u003d accountRequest.getCreatedAt().toEpochMilli();"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":44,"author":{"gitId":"kevin9foong"},"content":"        if (accountRequest.getRegisteredAt() \u003d\u003d null) {"},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"            this.registeredAt \u003d null;"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"kevin9foong"},"content":"            this.registeredAt \u003d accountRequest.getRegisteredAt().toEpochMilli();"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String getInstitute() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return institute;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String getEmail() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String getRegistrationKey() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return registrationKey;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Long getRegisteredAt() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return registeredAt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public long getCreatedAt() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return createdAt;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":57,"kevin9foong":18}},{"path":"src/main/java/teammates/ui/output/NotificationData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.output;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * The API output format of a notification."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NotificationData extends ApiOutput {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private String notificationId;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private long startTimestamp;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private long endTimestamp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private long createdAt;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private NotificationStyle style;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private NotificationTargetUser targetUser;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private String title;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private String message;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private boolean shown;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public NotificationData(NotificationAttributes notificationAttributes) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.notificationId \u003d notificationAttributes.getNotificationId();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.startTimestamp \u003d notificationAttributes.getStartTime().toEpochMilli();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.endTimestamp \u003d notificationAttributes.getEndTime().toEpochMilli();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.createdAt \u003d notificationAttributes.getCreatedAt().toEpochMilli();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.style \u003d notificationAttributes.getStyle();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.targetUser \u003d notificationAttributes.getTargetUser();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.title \u003d notificationAttributes.getTitle();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.message \u003d notificationAttributes.getMessage();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.shown \u003d notificationAttributes.isShown();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"    public NotificationData(Notification notification) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.notificationId \u003d notification.getId().toString();"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"        this.startTimestamp \u003d notification.getStartTime().toEpochMilli();"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"        this.endTimestamp \u003d notification.getEndTime().toEpochMilli();"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"        this.createdAt \u003d notification.getCreatedAt().toEpochMilli();"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"        this.style \u003d notification.getStyle();"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"        this.targetUser \u003d notification.getTargetUser();"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"        this.title \u003d notification.getTitle();"},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"        this.message \u003d notification.getMessage();"},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"        this.shown \u003d notification.isShown();"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String getNotificationId() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return this.notificationId;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public long getStartTimestamp() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return this.startTimestamp;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public long getEndTimestamp() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this.endTimestamp;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public long getCreatedAt() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return this.createdAt;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public NotificationStyle getStyle() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this.style;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public NotificationTargetUser getTargetUser() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return this.targetUser;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String getTitle() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this.title;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this.message;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isShown() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this.shown;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":12,"-":70}},{"path":"src/main/java/teammates/ui/webapi/Action.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.lang.reflect.Type;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javax.servlet.http.HttpServletRequest;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.InstructorPermissionSet;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.UserInfo;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.UserInfoCookie;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.CourseAttributes;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.logs.RequestLogUser;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.util.Config;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.util.HttpRequestHelper;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.util.StringHelper;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.logic.api.EmailGenerator;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.logic.api.EmailSender;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.logic.api.LogsProcessor;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.logic.api.RecaptchaVerifier;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.logic.api.TaskQueuer;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.logic.api.UserProvision;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.sqllogic.api.Logic;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.ui.request.BasicRequest;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * An \"action\" to be performed by the system."},{"lineNumber":36,"author":{"gitId":"-"},"content":" * If the requesting user is allowed to perform the requested action,"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * this object can talk to the back end to perform that action."},{"lineNumber":38,"author":{"gitId":"-"},"content":" */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public abstract class Action {"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    teammates.logic.api.Logic logic \u003d teammates.logic.api.Logic.inst();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Logic sqlLogic \u003d Logic.inst();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    UserProvision userProvision \u003d UserProvision.inst();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GateKeeper gateKeeper \u003d GateKeeper.inst();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    EmailGenerator emailGenerator \u003d EmailGenerator.inst();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    TaskQueuer taskQueuer \u003d TaskQueuer.inst();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    EmailSender emailSender \u003d EmailSender.inst();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    RecaptchaVerifier recaptchaVerifier \u003d RecaptchaVerifier.inst();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    LogsProcessor logsProcessor \u003d LogsProcessor.inst();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    HttpServletRequest req;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    UserInfo userInfo;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    AuthType authType;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // TODO: unregisteredStudent. Instructor, isCourseMigrated can be removed after migration"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StudentAttributes unregisteredStudent;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private InstructorAttributes unregisteredInstructor;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private Boolean isCourseMigrated;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private Student unregisteredSqlStudent;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private Instructor unregisteredSqlInstructor;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // buffer to store the request body"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private String requestBody;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Initializes the action object based on the HTTP request."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void init(HttpServletRequest req) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.req \u003d req;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        initAuthInfo();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setUserProvision(UserProvision userProvision) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.userProvision \u003d userProvision;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setTaskQueuer(TaskQueuer taskQueuer) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.taskQueuer \u003d taskQueuer;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setEmailSender(EmailSender emailSender) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.emailSender \u003d emailSender;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setRecaptchaVerifier(RecaptchaVerifier recaptchaVerifier) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.recaptchaVerifier \u003d recaptchaVerifier;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setLogsProcessor(LogsProcessor logsProcessor) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.logsProcessor \u003d logsProcessor;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Returns true if course has been migrated or does not exist in the datastore."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    protected boolean isCourseMigrated(String courseId) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (isCourseMigrated \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            CourseAttributes course \u003d logic.getCourse(courseId);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            isCourseMigrated \u003d course \u003d\u003d null || course.isMigrated();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return isCourseMigrated;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Checks if the requesting user has sufficient authority to access the resource."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void checkAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String userParam \u003d getRequestParamValue(Const.ParamsNames.USER_ID);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (userInfo !\u003d null \u0026\u0026 userParam !\u003d null \u0026\u0026 !userInfo.isAdmin \u0026\u0026 !userInfo.id.equals(userParam)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"User \" + userInfo.id"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                    + \" is trying to masquerade as \" + userParam + \" without admin permission.\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (authType.getLevel() \u003c getMinAuthLevel().getLevel()) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            // Access control level lower than required"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new UnauthorizedAccessException(\"Not authorized to access this resource.\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (authType \u003d\u003d AuthType.ALL_ACCESS) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            // All-access pass granted"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // All other cases: to be dealt in case-by-case basis"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        checkSpecificAccessControl();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Gets the user information of the current user."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public RequestLogUser getUserInfoForLogging() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RequestLogUser user \u003d new RequestLogUser();"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String googleId \u003d userInfo \u003d\u003d null ? null : userInfo.getId();"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        user.setGoogleId(googleId);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (unregisteredStudent \u003d\u003d null \u0026\u0026 unregisteredInstructor \u003d\u003d null"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                \u0026\u0026 unregisteredSqlStudent \u003d\u003d null \u0026\u0026 unregisteredSqlInstructor \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            user.setRegkey(getRequestParamValue(Const.ParamsNames.REGKEY));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        } else if (unregisteredStudent !\u003d null) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            user.setRegkey(unregisteredStudent.getKey());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            user.setEmail(unregisteredStudent.getEmail());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        } else if (unregisteredInstructor !\u003d null) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            user.setRegkey(unregisteredInstructor.getKey());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            user.setEmail(unregisteredInstructor.getEmail());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } else if (unregisteredSqlStudent !\u003d null) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            user.setRegkey(unregisteredSqlStudent.getRegKey());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            user.setEmail(unregisteredSqlStudent.getEmail());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            user.setRegkey(unregisteredSqlInstructor.getRegKey());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            user.setEmail(unregisteredSqlInstructor.getEmail());"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return user;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    private void initAuthInfo() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        if (Config.BACKDOOR_KEY.equals(req.getHeader(Const.HeaderNames.BACKDOOR_KEY))) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            authType \u003d AuthType.ALL_ACCESS;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            userInfo \u003d userProvision.getAdminOnlyUser(getRequestParamValue(Const.ParamsNames.USER_ID));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            userInfo.isStudent \u003d true;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            userInfo.isInstructor \u003d true;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // The header X-AppEngine-QueueName cannot be spoofed as GAE will strip any user-sent X-AppEngine-QueueName headers."},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // Reference: https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        String queueNameHeader \u003d req.getHeader(\"X-AppEngine-QueueName\");"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        boolean isRequestFromAppEngineQueue \u003d queueNameHeader !\u003d null;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        if (isRequestFromAppEngineQueue) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            userInfo \u003d userProvision.getAdminOnlyUser(\"AppEngine-\" + queueNameHeader);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            String cookie \u003d HttpRequestHelper.getCookieValueFromRequest(req, Const.SecurityConfig.AUTH_COOKIE_NAME);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            UserInfoCookie uic \u003d UserInfoCookie.fromCookie(cookie);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            userInfo \u003d userProvision.getCurrentUser(uic);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        authType \u003d userInfo \u003d\u003d null ? AuthType.PUBLIC : AuthType.LOGGED_IN;"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        String userParam \u003d getRequestParamValue(Const.ParamsNames.USER_ID);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        if (userInfo !\u003d null \u0026\u0026 userParam !\u003d null \u0026\u0026 userInfo.isAdmin) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            userInfo \u003d userProvision.getMasqueradeUser(userParam);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            authType \u003d AuthType.MASQUERADE;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Returns the first value for the specified parameter in the HTTP request, or null if such parameter is not found."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    String getRequestParamValue(String paramName) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        return req.getParameter(paramName);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Returns the first value for the specified parameter expected to be present in the HTTP request."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    String getNonNullRequestParamValue(String paramName) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        String value \u003d req.getParameter(paramName);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        if (value \u003d\u003d null) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException(String.format(\"The [%s] HTTP parameter is null.\", paramName));"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Returns the first value for the specified parameter expected to be present in the HTTP request as boolean."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    boolean getBooleanRequestParamValue(String paramName) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        String value \u003d getNonNullRequestParamValue(paramName);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (\"true\".equalsIgnoreCase(value) || \"false\".equalsIgnoreCase(value)) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return Boolean.parseBoolean(value);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException("},{"lineNumber":214,"author":{"gitId":"-"},"content":"                    \"Expected boolean value for \" + paramName + \" parameter, but found: [\" + value + \"]\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * Returns the first value for the specified parameter expected to be present in the HTTP request as long."},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    long getLongRequestParamValue(String paramName) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        String value \u003d getNonNullRequestParamValue(paramName);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            return Long.parseLong(value);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            throw new InvalidHttpParameterException("},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \"Expected long value for \" + paramName + \" parameter, but found: [\" + value + \"]\", e);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"hhdqirui"},"content":"    /**"},{"lineNumber":232,"author":{"gitId":"hhdqirui"},"content":"     * Returns the first value for the specified parameter expected to be present in the HTTP request as UUID."},{"lineNumber":233,"author":{"gitId":"hhdqirui"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"hhdqirui"},"content":"    UUID getUuidRequestParamValue(String paramName) {"},{"lineNumber":235,"author":{"gitId":"hhdqirui"},"content":"        String value \u003d getNonNullRequestParamValue(paramName);"},{"lineNumber":236,"author":{"gitId":"hhdqirui"},"content":"        try {"},{"lineNumber":237,"author":{"gitId":"hhdqirui"},"content":"            return UUID.fromString(value);"},{"lineNumber":238,"author":{"gitId":"hhdqirui"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":239,"author":{"gitId":"hhdqirui"},"content":"            throw new InvalidHttpParameterException("},{"lineNumber":240,"author":{"gitId":"hhdqirui"},"content":"                    \"Expected UUID value for \" + paramName + \" parameter, but found: [\" + value + \"]\", e);"},{"lineNumber":241,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * Returns the request body payload."},{"lineNumber":246,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    public String getRequestBody() {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        if (!hasDefinedRequestBody()) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            requestBody \u003d HttpRequestHelper.getRequestBody(req);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return requestBody;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     * Returns true if the action has a request body already defined in it."},{"lineNumber":256,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public boolean hasDefinedRequestBody() {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        return requestBody !\u003d null;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"    FeedbackSessionAttributes getNonNullFeedbackSession(String feedbackSessionName, String courseId) {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes feedbackSession \u003d logic.getFeedbackSession(feedbackSessionName, courseId);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        if (feedbackSession \u003d\u003d null) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(\"Feedback session not found\");"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        return feedbackSession;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * Deserializes and validates the request body payload."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    \u003cT extends BasicRequest\u003e T getAndValidateRequestBody(Type typeOfBody) throws InvalidHttpRequestBodyException {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        T requestBody \u003d JsonUtils.fromJson(getRequestBody(), typeOfBody);"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        if (requestBody \u003d\u003d null) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(\"The request body is null\");"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        requestBody.validate();"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        return requestBody;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * Gets the unregistered student by the HTTP param."},{"lineNumber":283,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    Optional\u003cStudentAttributes\u003e getUnregisteredStudent() {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        String key \u003d getRequestParamValue(Const.ParamsNames.REGKEY);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(key)) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            StudentAttributes studentAttributes \u003d logic.getStudentForRegistrationKey(key);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            if (studentAttributes \u003d\u003d null) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                return Optional.empty();"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            unregisteredStudent \u003d studentAttributes;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            return Optional.of(studentAttributes);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        return Optional.empty();"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitId":"-"},"content":"     * Gets the unregistered student by the HTTP param."},{"lineNumber":299,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    Optional\u003cStudent\u003e getUnregisteredSqlStudent() {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        // TODO: Remove Sql from method name after migration"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        String key \u003d getRequestParamValue(Const.ParamsNames.REGKEY);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(key)) {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            Student student \u003d sqlLogic.getStudentByRegistrationKey(key);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            if (student \u003d\u003d null) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                return Optional.empty();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            unregisteredSqlStudent \u003d student;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"            return Optional.of(student);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        return Optional.empty();"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitId":"-"},"content":"     * Gets the unregistered instructor by the HTTP param."},{"lineNumber":316,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    Optional\u003cInstructorAttributes\u003e getUnregisteredInstructor() {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        String key \u003d getRequestParamValue(Const.ParamsNames.REGKEY);"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(key)) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            InstructorAttributes instructorAttributes \u003d logic.getInstructorForRegistrationKey(key);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"            if (instructorAttributes \u003d\u003d null) {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"                return Optional.empty();"},{"lineNumber":323,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            unregisteredInstructor \u003d instructorAttributes;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            return Optional.of(instructorAttributes);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        return Optional.empty();"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":331,"author":{"gitId":"-"},"content":"     * Gets the unregistered instructor by the HTTP param."},{"lineNumber":332,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    Optional\u003cInstructor\u003e getUnregisteredSqlInstructor() {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        // TODO: Remove Sql from method name after migration"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        String key \u003d getRequestParamValue(Const.ParamsNames.REGKEY);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        if (!StringHelper.isEmpty(key)) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"            Instructor instructor \u003d sqlLogic.getInstructorByRegistrationKey(key);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"            if (instructor \u003d\u003d null) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"                return Optional.empty();"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            unregisteredSqlInstructor \u003d instructor;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            return Optional.of(instructor);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        return Optional.empty();"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"-"},"content":"    InstructorAttributes getPossiblyUnregisteredInstructor(String courseId) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        return getUnregisteredInstructor().orElseGet(() -\u003e {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"            if (userInfo \u003d\u003d null) {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":352,"author":{"gitId":"-"},"content":"            return logic.getInstructorForGoogleId(courseId, userInfo.getId());"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"    Instructor getPossiblyUnregisteredSqlInstructor(String courseId) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        return getUnregisteredSqlInstructor().orElseGet(() -\u003e {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"            if (userInfo \u003d\u003d null) {"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":360,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            return sqlLogic.getInstructorByGoogleId(courseId, userInfo.getId());"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"    StudentAttributes getPossiblyUnregisteredStudent(String courseId) {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        return getUnregisteredStudent().orElseGet(() -\u003e {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"            if (userInfo \u003d\u003d null) {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":369,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":370,"author":{"gitId":"-"},"content":"            return logic.getStudentForGoogleId(courseId, userInfo.getId());"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"    Student getPossiblyUnregisteredSqlStudent(String courseId) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        return getUnregisteredSqlStudent().orElseGet(() -\u003e {"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            if (userInfo \u003d\u003d null) {"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                return null;"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            return sqlLogic.getStudentByGoogleId(courseId, userInfo.getId());"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"    InstructorPermissionSet constructInstructorPrivileges(InstructorAttributes instructor, String feedbackSessionName) {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        InstructorPermissionSet privilege \u003d instructor.getPrivileges().getCourseLevelPrivileges();"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        if (feedbackSessionName !\u003d null) {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"            privilege.setCanSubmitSessionInSections("},{"lineNumber":387,"author":{"gitId":"-"},"content":"                    instructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS)"},{"lineNumber":388,"author":{"gitId":"-"},"content":"                            || instructor.isAllowedForPrivilegeAnySection("},{"lineNumber":389,"author":{"gitId":"-"},"content":"                            feedbackSessionName, Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS));"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            privilege.setCanViewSessionInSections("},{"lineNumber":391,"author":{"gitId":"-"},"content":"                    instructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS)"},{"lineNumber":392,"author":{"gitId":"-"},"content":"                            || instructor.isAllowedForPrivilegeAnySection("},{"lineNumber":393,"author":{"gitId":"-"},"content":"                            feedbackSessionName, Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS));"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            privilege.setCanModifySessionCommentsInSections("},{"lineNumber":395,"author":{"gitId":"-"},"content":"                    instructor.isAllowedForPrivilege("},{"lineNumber":396,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS)"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                            || instructor.isAllowedForPrivilegeAnySection(feedbackSessionName,"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS));"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        return privilege;"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"    InstructorPermissionSet constructInstructorPrivileges(Instructor instructor, String feedbackSessionName) {"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        InstructorPermissionSet privilege \u003d instructor.getInstructorPrivileges().getCourseLevelPrivileges();"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        if (feedbackSessionName !\u003d null) {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            privilege.setCanSubmitSessionInSections("},{"lineNumber":407,"author":{"gitId":"-"},"content":"                    instructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS)"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                            || instructor.isAllowedForPrivilegeAnySection("},{"lineNumber":409,"author":{"gitId":"-"},"content":"                            feedbackSessionName, Const.InstructorPermissions.CAN_SUBMIT_SESSION_IN_SECTIONS));"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            privilege.setCanViewSessionInSections("},{"lineNumber":411,"author":{"gitId":"-"},"content":"                    instructor.isAllowedForPrivilege(Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS)"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                            || instructor.isAllowedForPrivilegeAnySection("},{"lineNumber":413,"author":{"gitId":"-"},"content":"                            feedbackSessionName, Const.InstructorPermissions.CAN_VIEW_SESSION_IN_SECTIONS));"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            privilege.setCanModifySessionCommentsInSections("},{"lineNumber":415,"author":{"gitId":"-"},"content":"                    instructor.isAllowedForPrivilege("},{"lineNumber":416,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS)"},{"lineNumber":417,"author":{"gitId":"-"},"content":"                            || instructor.isAllowedForPrivilegeAnySection(feedbackSessionName,"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                            Const.InstructorPermissions.CAN_MODIFY_SESSION_COMMENT_IN_SECTIONS));"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        return privilege;"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":424,"author":{"gitId":"-"},"content":"     * Gets the minimum access control level required to access the resource."},{"lineNumber":425,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":426,"author":{"gitId":"-"},"content":"    abstract AuthType getMinAuthLevel();"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":429,"author":{"gitId":"-"},"content":"     * Checks the specific access control needs for the resource."},{"lineNumber":430,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    abstract void checkSpecificAccessControl() throws UnauthorizedAccessException;"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":434,"author":{"gitId":"-"},"content":"     * Executes the action."},{"lineNumber":435,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    public abstract ActionResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException;"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":14,"-":424}},{"path":"src/main/java/teammates/ui/webapi/CreateAccountRequestAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.ui.output.JoinLinkData;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.ui.request.AccountCreateRequest;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Creates a new account request."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"class CreateAccountRequestAction extends AdminOnlyAction {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"    public JsonResult execute()"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"            throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        AccountCreateRequest createRequest \u003d getAndValidateRequestBody(AccountCreateRequest.class);"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String instructorName \u003d createRequest.getInstructorName().trim();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String instructorEmail \u003d createRequest.getInstructorEmail().trim();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String instructorInstitution \u003d createRequest.getInstructorInstitution().trim();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":"            accountRequest \u003d sqlLogic.createAccountRequest(instructorName, instructorEmail, instructorInstitution);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException ipe) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(ipe);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException eaee) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            // Use existing account request"},{"lineNumber":33,"author":{"gitId":"kevin9foong"},"content":"            accountRequest \u003d sqlLogic.getAccountRequest(instructorEmail, instructorInstitution);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"        assert accountRequest !\u003d null;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"        if (accountRequest.getRegisteredAt() !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(\"Cannot create account request as instructor has already registered.\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"        String joinLink \u003d accountRequest.getRegistrationUrl();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d emailGenerator.generateNewInstructorAccountJoinEmail("},{"lineNumber":45,"author":{"gitId":"-"},"content":"                instructorEmail, instructorName, joinLink);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        emailSender.sendEmail(email);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JoinLinkData output \u003d new JoinLinkData(joinLink);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new JsonResult(output);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":43,"kevin9foong":9}},{"path":"src/main/java/teammates/ui/webapi/CreateNotificationAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.request.NotificationCreateRequest;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Action: Creates a new notification banner."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class CreateNotificationAction extends AdminOnlyAction {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NotificationCreateRequest notificationRequest \u003d getAndValidateRequestBody(NotificationCreateRequest.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Instant startTime \u003d Instant.ofEpochMilli(notificationRequest.getStartTimestamp());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Instant endTime \u003d Instant.ofEpochMilli(notificationRequest.getEndTimestamp());"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        Notification newNotification \u003d new Notification(startTime, endTime, notificationRequest.getStyle(),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                notificationRequest.getTargetUser(), notificationRequest.getTitle(), notificationRequest.getMessage());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"            return new JsonResult(new NotificationData(sqlLogic.createNotification(newNotification)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (EntityAlreadyExistsException e) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            // Should not happen since UUID is usually unique"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            log.severe(\"Unexpected error\", e);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return new JsonResult(e.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":39}},{"path":"src/main/java/teammates/ui/webapi/DeleteAccountRequestAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Deletes an existing account request."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"class DeleteAccountRequestAction extends AdminOnlyAction {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidOperationException {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String email \u003d getNonNullRequestParamValue(Const.ParamsNames.INSTRUCTOR_EMAIL);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String institute \u003d getNonNullRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest toDelete \u003d sqlLogic.getAccountRequest(email, institute);"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"        if (toDelete !\u003d null \u0026\u0026 toDelete.getRegisteredAt() !\u003d null) {"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"            // instructor is already registered and cannot be deleted"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(\"Account request of a registered instructor cannot be deleted.\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"        sqlLogic.deleteAccountRequest(email, institute);"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Account request successfully deleted.\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":21,"kevin9foong":7}},{"path":"src/main/java/teammates/ui/webapi/DeleteNotificationAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Action: Deletes a notification by its ID."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class DeleteNotificationAction extends AdminOnlyAction {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d getUuidRequestParamValue(Const.ParamsNames.NOTIFICATION_ID);"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"        sqlLogic.deleteNotification(notificationId);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new JsonResult(\"Notification has been deleted.\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":4,"-":14}},{"path":"src/main/java/teammates/ui/webapi/GetAccountRequestAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountRequestData;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Gets account request information."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"class GetAccountRequestAction extends AdminOnlyAction {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public JsonResult execute() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String email \u003d getNonNullRequestParamValue(Const.ParamsNames.INSTRUCTOR_EMAIL);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        String institute \u003d getNonNullRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d sqlLogic.getAccountRequest(email, institute);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":"        if (accountRequest \u003d\u003d null) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(\"Account request for email: \""},{"lineNumber":21,"author":{"gitId":"-"},"content":"                    + email + \" and institute: \" + institute + \" not found.\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":"        AccountRequestData output \u003d new AccountRequestData(accountRequest);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new JsonResult(output);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":24,"kevin9foong":4}},{"path":"src/main/java/teammates/ui/webapi/GetNotificationAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Action: Gets a notification by ID."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GetNotificationAction extends AdminOnlyAction {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException {"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d getUuidRequestParamValue(Const.ParamsNames.NOTIFICATION_ID);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d sqlLogic.getNotification(notificationId);"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (notification \u003d\u003d null) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(\"Notification does not exist.\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return new JsonResult(new NotificationData(notification));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":5,"-":22}},{"path":"src/main/java/teammates/ui/webapi/GetReadNotificationsAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.ui.output.ReadNotificationsData;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Action: Gets read notifications from account entity."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class GetReadNotificationsAction extends Action {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // Any user can get the read notifications for their account."},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public ActionResult execute() {"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"        List\u003cUUID\u003e readNotifications \u003d"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"                sqlLogic.getReadNotificationsId(userInfo.getId());"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"        ReadNotificationsData output \u003d new ReadNotificationsData("},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"                readNotifications.stream().map(UUID::toString).collect(Collectors.toList()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new JsonResult(output);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":6,"-":25}},{"path":"src/main/java/teammates/ui/webapi/MarkNotificationAsReadAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.output.ReadNotificationsData;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.request.MarkNotificationAsReadRequest;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Action: Marks a notification as read in account entity."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class MarkNotificationAsReadAction extends Action {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    AuthType getMinAuthLevel() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return AuthType.LOGGED_IN;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    void checkSpecificAccessControl() throws UnauthorizedAccessException {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // Any user can create a read status for notification."},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ActionResult execute() throws InvalidHttpRequestBodyException, InvalidOperationException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        MarkNotificationAsReadRequest readNotificationCreateRequest \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                getAndValidateRequestBody(MarkNotificationAsReadRequest.class);"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d UUID.fromString(readNotificationCreateRequest.getNotificationId());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Instant endTime \u003d Instant.ofEpochMilli(readNotificationCreateRequest.getEndTimestamp());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"            List\u003cUUID\u003e readNotifications \u003d"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"                    sqlLogic.updateReadNotifications(userInfo.getId(), notificationId, endTime);"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"            ReadNotificationsData output \u003d new ReadNotificationsData("},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"                    readNotifications.stream().map(UUID::toString).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return new JsonResult(output);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (EntityDoesNotExistException e) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(e);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":7,"-":41}},{"path":"src/main/java/teammates/ui/webapi/ResetAccountRequestAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.apache.http.HttpStatus;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.Logger;"},{"lineNumber":10,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.output.JoinLinkData;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Action: resets an account request."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"class ResetAccountRequestAction extends AdminOnlyAction {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Logger log \u003d Logger.getLogger();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidOperationException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String instructorEmail \u003d getNonNullRequestParamValue(Const.ParamsNames.INSTRUCTOR_EMAIL);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String institute \u003d getNonNullRequestParamValue(Const.ParamsNames.INSTRUCTOR_INSTITUTION);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d sqlLogic.getAccountRequest(instructorEmail, institute);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (accountRequest \u003d\u003d null) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(\"Account request for instructor with email: \" + instructorEmail"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    + \" and institute: \" + institute + \" does not exist.\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (accountRequest.getRegisteredAt() \u003d\u003d null) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            throw new InvalidOperationException(\"Unable to reset account request as instructor is still unregistered.\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"kevin9foong"},"content":"            accountRequest \u003d sqlLogic.resetAccountRequest(instructorEmail, institute);"},{"lineNumber":37,"author":{"gitId":"kevin9foong"},"content":"        } catch (InvalidParametersException | EntityDoesNotExistException ue) {"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"            // InvalidParametersException and EntityDoesNotExistException should not be thrown as"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":"            // validity of params has been verified when fetching entity."},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"            log.severe(\"Unexpected error\", ue);"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"            return new JsonResult(ue.getMessage(), HttpStatus.SC_INTERNAL_SERVER_ERROR);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String joinLink \u003d accountRequest.getRegistrationUrl();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EmailWrapper email \u003d emailGenerator.generateNewInstructorAccountJoinEmail("},{"lineNumber":46,"author":{"gitId":"-"},"content":"                accountRequest.getEmail(), accountRequest.getName(), joinLink);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        emailSender.sendEmail(email);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JoinLinkData output \u003d new JoinLinkData(joinLink);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new JsonResult(output);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"kevin9foong":8}},{"path":"src/main/java/teammates/ui/webapi/UpdateNotificationAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.request.NotificationUpdateRequest;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Action: Updates a new notification banner."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class UpdateNotificationAction extends AdminOnlyAction {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonResult execute() throws InvalidHttpRequestBodyException {"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d getUuidRequestParamValue(Const.ParamsNames.NOTIFICATION_ID);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NotificationUpdateRequest notificationRequest \u003d getAndValidateRequestBody(NotificationUpdateRequest.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        Instant startTime \u003d Instant.ofEpochMilli(notificationRequest.getStartTimestamp());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Instant endTime \u003d Instant.ofEpochMilli(notificationRequest.getEndTimestamp());"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"            Notification updateNotification \u003d sqlLogic.updateNotification(notificationId, startTime, endTime,"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"                    notificationRequest.getStyle(), notificationRequest.getTargetUser(), notificationRequest.getTitle(),"},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":"                    notificationRequest.getMessage());"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"            return new JsonResult(new NotificationData(updateNotification));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        } catch (InvalidParametersException e) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new InvalidHttpRequestBodyException(e);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (EntityDoesNotExistException ednee) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new EntityNotFoundException(ednee);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":8,"-":31}},{"path":"src/test/java/teammates/logic/core/FeedbackResponsesLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.logic.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.AttributesDeletionQuery;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.CourseRoster;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackParticipantType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.FeedbackResultFetchType;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.SessionResultsBundle;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackQuestionAttributes;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseAttributes;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackResponseCommentAttributes;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.FeedbackSessionAttributes;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.StudentAttributes;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackQuestionType;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackRankRecipientsResponseDetails;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackResponseDetails;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.questions.FeedbackTextResponseDetails;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import teammates.test.AssertHelper;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * SUT: {@link FeedbackResponsesLogic}."},{"lineNumber":39,"author":{"gitId":"-"},"content":" */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class FeedbackResponsesLogicTest extends BaseLogicTest {"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final FeedbackSessionsLogic fsLogic \u003d FeedbackSessionsLogic.inst();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final FeedbackQuestionsLogic fqLogic \u003d FeedbackQuestionsLogic.inst();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final FeedbackResponsesLogic frLogic \u003d FeedbackResponsesLogic.inst();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final FeedbackResponseCommentsLogic frcLogic \u003d FeedbackResponseCommentsLogic.inst();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final InstructorsLogic instructorsLogic \u003d InstructorsLogic.inst();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final StudentsLogic studentsLogic \u003d StudentsLogic.inst();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private DataBundle questionTypeBundle;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private DataBundle responseVisibilityBundle;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected void prepareTestData() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // test data is refreshed before each test case"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void refreshTestData() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        dataBundle \u003d getTypicalDataBundle();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        questionTypeBundle \u003d loadDataBundle(\"/FeedbackSessionQuestionTypeTest.json\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        responseVisibilityBundle \u003d loadDataBundle(\"/FeedbackResponseVisibilityTest.json\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        removeAndRestoreTypicalDataBundle();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // extra test data used on top of typical data bundle"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(loadDataBundle(\"/SpecialCharacterTest.json\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(questionTypeBundle);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseVisibilityBundle);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void testAreThereResponsesForQuestion() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes questionWithResponse;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes questionWithoutResponse;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ______TS(\"Check that a question has some responses\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        questionWithResponse \u003d getQuestionFromDatabase(\"qn1InSession1InCourse2\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.areThereResponsesForQuestion(questionWithResponse.getId()));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ______TS(\"Check that a question has no responses\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        questionWithoutResponse \u003d getQuestionFromDatabase(\"qn2InSession1InCourse2\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.areThereResponsesForQuestion(questionWithoutResponse.getId()));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void testUpdateFeedbackResponseCascade() throws Exception {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ______TS(\"success: standard update\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes responseToUpdate \u003d getResponseFromDatabase(\"response1ForQ2S1C1\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        FeedbackResponseDetails frd \u003d new FeedbackTextResponseDetails(\"Updated Response\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        frLogic.updateFeedbackResponseCascade("},{"lineNumber":96,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.updateOptionsBuilder(responseToUpdate.getId())"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                        .withResponseDetails(frd)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        responseToUpdate \u003d getResponseFromDatabase(\"response1ForQ2S1C1\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(responseToUpdate.toString(),"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponse(responseToUpdate.getId()).toString());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        ______TS(\"failure: recipient one that is already exists\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        responseToUpdate \u003d getResponseFromDatabase(\"response1ForQ2S1C1\");"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes existingResponse \u003d"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.builder("},{"lineNumber":111,"author":{"gitId":"-"},"content":"                        responseToUpdate.getFeedbackQuestionId(), responseToUpdate.getGiver(), \"student3InCourse1@gmail.tmt\")"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .withFeedbackSessionName(responseToUpdate.getFeedbackSessionName())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .withCourseId(responseToUpdate.getCourseId())"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withGiverSection(responseToUpdate.getGiverSection())"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withRecipientSection(responseToUpdate.getRecipientSection())"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withResponseDetails(responseToUpdate.getResponseDetails())"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        frLogic.createFeedbackResponse(existingResponse);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes[] finalResponse \u003d new FeedbackResponseAttributes[] { responseToUpdate };"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EntityAlreadyExistsException eaee \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                () -\u003e frLogic.updateFeedbackResponseCascade("},{"lineNumber":124,"author":{"gitId":"-"},"content":"                        FeedbackResponseAttributes.updateOptionsBuilder(finalResponse[0].getId())"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                                .withRecipient(\"student3InCourse1@gmail.tmt\")"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                                .build()));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        AssertHelper.assertContains(\"Trying to create an entity that exists\", eaee.getMessage());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        ______TS(\"success: recipient changed to something else\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        responseToUpdate.setRecipient(\"student5InCourse1@gmail.tmt\");"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        frLogic.updateFeedbackResponseCascade("},{"lineNumber":134,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.updateOptionsBuilder(responseToUpdate.getId())"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                        .withRecipient(responseToUpdate.getRecipient())"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertEquals(responseToUpdate.toString(),"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponse(responseToUpdate.getFeedbackQuestionId(), responseToUpdate.getGiver(),"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                        responseToUpdate.getRecipient()).toString());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertNull(frLogic.getFeedbackResponse("},{"lineNumber":142,"author":{"gitId":"-"},"content":"                responseToUpdate.getFeedbackQuestionId(), responseToUpdate.getGiver(), \"student2InCourse1@gmail.tmt\"));"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        ______TS(\"success: update giver, recipient, giverSection and recipientSection, \""},{"lineNumber":145,"author":{"gitId":"-"},"content":"                + \"should do cascade update to comments\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        responseToUpdate \u003d getResponseFromDatabase(\"response1ForQ1S1C1\");"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(frcLogic.getFeedbackResponseCommentForResponse(responseToUpdate.getId()).isEmpty());"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes updatedResponse \u003d frLogic.updateFeedbackResponseCascade("},{"lineNumber":151,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.updateOptionsBuilder(responseToUpdate.getId())"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        .withGiver(\"test@example.com\")"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                        .withGiverSection(\"giverSection\")"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                        .withRecipient(\"test@example.com\")"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                        .withRecipientSection(\"recipientSection\")"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertEquals(\"test@example.com\", updatedResponse.getGiver());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertEquals(\"giverSection\", updatedResponse.getGiverSection());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertEquals(\"test@example.com\", updatedResponse.getRecipient());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(\"recipientSection\", updatedResponse.getRecipientSection());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(frcLogic.getFeedbackResponseCommentForResponse(responseToUpdate.getId()).isEmpty());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e associatedComments \u003d"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                frcLogic.getFeedbackResponseCommentForResponse(updatedResponse.getId());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(associatedComments.isEmpty());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertTrue(associatedComments.stream()"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                .allMatch(c -\u003e \"giverSection\".equals(c.getGiverSection())"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                        \u0026\u0026 \"recipientSection\".equals(c.getReceiverSection())));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        ______TS(\"failure: invalid params\");"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // Cannot have invalid params as all possible invalid params"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // are copied over from an existing response."},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ______TS(\"failure: no such response\");"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                () -\u003e frLogic.updateFeedbackResponseCascade("},{"lineNumber":178,"author":{"gitId":"-"},"content":"                        FeedbackResponseAttributes.updateOptionsBuilder(\"non-existent\")"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                                .withGiver(\"random\")"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                                .build()));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void testUpdateFeedbackResponsesForChangingTeam_typicalData_shouldDoCascadeDeletion() throws Exception {"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        StudentAttributes studentToUpdate \u003d dataBundle.students.get(\"student4InCourse1\");"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // Student 4 has 1 responses to him from team members,"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // 1 response from him a team member, and"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // 1 team response from him to another team."},{"lineNumber":191,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes teamQuestion \u003d getQuestionFromDatabase(\"team.members.feedback\");"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertEquals(1, getFeedbackResponsesForReceiverForQuestion("},{"lineNumber":193,"author":{"gitId":"-"},"content":"                teamQuestion.getId(), studentToUpdate.getEmail()).size());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(1,"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":196,"author":{"gitId":"-"},"content":"                teamQuestion.getId(), studentToUpdate.getEmail()).size());"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        teamQuestion \u003d getQuestionFromDatabase(\"team.feedback\");"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertEquals(1,"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":201,"author":{"gitId":"-"},"content":"                teamQuestion.getId(), studentToUpdate.getTeam()).size());"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // Add one more non-team response"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes responseToAdd \u003d"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.builder("},{"lineNumber":206,"author":{"gitId":"-"},"content":"                        getQuestionFromDatabase(\"qn1InSession1InCourse1\").getId(),"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                        studentToUpdate.getEmail(), studentToUpdate.getEmail())"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                .withFeedbackSessionName(\"First feedback session\")"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                .withCourseId(\"idOfTypicalCourse1\")"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                .withGiverSection(\"Section 1\")"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                .withRecipientSection(\"Section 1\")"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                .withResponseDetails(new FeedbackTextResponseDetails(\"New Response to self\"))"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        frLogic.createFeedbackResponse(responseToAdd);"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // All these responses should be gone after he changes teams"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        frLogic.updateFeedbackResponsesForChangingTeam("},{"lineNumber":220,"author":{"gitId":"-"},"content":"                studentToUpdate.getCourse(), studentToUpdate.getEmail(), studentToUpdate.getTeam(), \"Team 1.2\");"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        teamQuestion \u003d getQuestionFromDatabase(\"team.members.feedback\");"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        assertEquals(0, getFeedbackResponsesForReceiverForQuestion("},{"lineNumber":224,"author":{"gitId":"-"},"content":"                teamQuestion.getId(), studentToUpdate.getEmail()).size());"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertEquals(0,"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":227,"author":{"gitId":"-"},"content":"                teamQuestion.getId(), studentToUpdate.getEmail()).size());"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"        teamQuestion \u003d getQuestionFromDatabase(\"team.feedback\");"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        assertEquals(0, getFeedbackResponsesForReceiverForQuestion("},{"lineNumber":231,"author":{"gitId":"-"},"content":"                teamQuestion.getId(), studentToUpdate.getEmail()).size());"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        // Non-team response should remain"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        assertEquals(1,"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":237,"author":{"gitId":"-"},"content":"                        getQuestionFromDatabase(\"qn1InSession1InCourse1\").getId(),"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                        studentToUpdate.getEmail()).size());"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Gets all responses for a recipient of a question."},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseAttributes\u003e getFeedbackResponsesForReceiverForQuestion("},{"lineNumber":245,"author":{"gitId":"-"},"content":"            String questionId, String receiver) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e allResponses \u003d frLogic.getFeedbackResponsesForQuestion(questionId);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        return allResponses.stream()"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                .filter(response -\u003e response.getRecipient().equals(receiver))"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    public void testUpdateFeedbackResponsesForChangingTeam_deleteLastResponse_decreaseResponseRate() {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes responseShouldBeDeleted \u003d"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                getResponseFromDatabase(questionTypeBundle, \"response1ForQ1ContribSession2Course2\");"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        // make sure it\u0027s the last response by the student"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        assertEquals(1, numResponsesFromGiverInSession(responseShouldBeDeleted.getGiver(),"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getFeedbackSessionName(),"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getCourseId()));"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d questionTypeBundle.students.get(\"student2InCourse2\");"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        // the response is given by the student"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        assertEquals(student.getEmail(), responseShouldBeDeleted.getGiver());"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"        int originalResponseRate \u003d getResponseRate(responseShouldBeDeleted.getFeedbackSessionName(),"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getCourseId());"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"        frLogic.updateFeedbackResponsesForChangingTeam(student.getCourse(), student.getEmail(), student.getTeam(),"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                student.getTeam() + \"tmp\");"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        int responseRateAfterDeletion \u003d getResponseRate(responseShouldBeDeleted.getFeedbackSessionName(),"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getCourseId());"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        assertEquals(originalResponseRate - 1, responseRateAfterDeletion);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    public void testUpdateFeedbackResponsesForChangingTeam_noResponseShouldBeDeleted_shouldReaminSameResponseRate() {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes responseShouldBeDeleted \u003d"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                getResponseFromDatabase(questionTypeBundle, \"response1ForQ1RankSession\");"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        // make sure it\u0027s not the last response by the student"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        assertTrue(1 \u003c numResponsesFromGiverInSession(responseShouldBeDeleted.getGiver(),"},{"lineNumber":281,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getFeedbackSessionName(),"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getCourseId()));"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d questionTypeBundle.students.get(\"student1InCourse1\");"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        // the response is given by the student"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        assertEquals(student.getEmail(), responseShouldBeDeleted.getGiver());"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"        int originalResponseRate \u003d getResponseRate(responseShouldBeDeleted.getFeedbackSessionName(),"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getCourseId());"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"        frLogic.updateFeedbackResponsesForChangingTeam(student.getCourse(), student.getEmail(), student.getTeam(),"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                student.getTeam() + \"tmp\");"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        int responseRateAfterDeletion \u003d getResponseRate(responseShouldBeDeleted.getFeedbackSessionName(),"},{"lineNumber":294,"author":{"gitId":"-"},"content":"                responseShouldBeDeleted.getCourseId());"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        assertEquals(originalResponseRate, responseRateAfterDeletion);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    public void testUpdateResponsesForDeletingStudent_rankRecipientQuestionResponse_newResponsesShouldBeConsistent()"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes distinctRankQuestion \u003d"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                getQuestionFromDatabase(questionTypeBundle, \"qn1InRANKSession\");"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        String courseId \u003d distinctRankQuestion.getCourseId();"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        List\u003cStudentAttributes\u003e studentsInCourse \u003d studentsLogic.getStudentsForCourse(courseId);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e giverResponseMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        for (StudentAttributes student : studentsInCourse) {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"            giverResponseMap.put(student.getEmail(), frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":310,"author":{"gitId":"-"},"content":"                    distinctRankQuestion.getFeedbackQuestionId(), student.getEmail()));"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"        int numStudents;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesFromStudent;"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        while (!studentsInCourse.isEmpty()) {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            studentsLogic.deleteStudentCascade(courseId, studentsInCourse.get(0).getEmail());"},{"lineNumber":317,"author":{"gitId":"-"},"content":"            numStudents \u003d studentsLogic.getNumberOfStudentsForCourse(courseId);"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            studentsInCourse \u003d studentsLogic.getStudentsForCourse(courseId);"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            for (StudentAttributes student : studentsInCourse) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                responsesFromStudent \u003d frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":321,"author":{"gitId":"-"},"content":"                        distinctRankQuestion.getId(), student.getEmail());"},{"lineNumber":322,"author":{"gitId":"-"},"content":"                assertTrue(areRankResponsesConsistent(responsesFromStudent, numStudents));"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                assertTrue(areRankResponsesInSameOrder(giverResponseMap.get(student.getEmail()), responsesFromStudent));"},{"lineNumber":324,"author":{"gitId":"-"},"content":"                giverResponseMap.put(student.getEmail(), responsesFromStudent);"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"        refreshTestData();"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes nonDistinctRankQuestion \u003d"},{"lineNumber":330,"author":{"gitId":"-"},"content":"                getQuestionFromDatabase(questionTypeBundle, \"qn2InRANKSession\");"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"        for (StudentAttributes student : studentsInCourse) {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"            giverResponseMap.put(student.getEmail(), frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":334,"author":{"gitId":"-"},"content":"                    nonDistinctRankQuestion.getFeedbackQuestionId(), student.getEmail()));"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"        int numTeamMembers;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        while (!studentsInCourse.isEmpty()) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            studentsLogic.deleteStudentCascade(courseId, studentsInCourse.get(0).getEmail());"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            studentsInCourse \u003d studentsLogic.getStudentsForCourse(courseId);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            for (StudentAttributes student : studentsInCourse) {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                numTeamMembers \u003d studentsLogic.getStudentsForTeam(student.getTeam(), courseId).size();"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                responsesFromStudent \u003d frLogic.getFeedbackResponsesFromGiverForQuestion("},{"lineNumber":344,"author":{"gitId":"-"},"content":"                        nonDistinctRankQuestion.getId(), student.getEmail());"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                assertTrue(areRankResponsesConsistent(responsesFromStudent, numTeamMembers));"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                assertTrue(areRankResponsesInSameOrder(giverResponseMap.get(student.getEmail()), responsesFromStudent));"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                giverResponseMap.put(student.getEmail(), responsesFromStudent);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"    private boolean areRankResponsesConsistent(List\u003cFeedbackResponseAttributes\u003e responses, int maxRank) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responses) {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            if (!response.getFeedbackQuestionType().equals(FeedbackQuestionType.RANK_RECIPIENTS)) {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            FeedbackRankRecipientsResponseDetails responseDetails \u003d"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                    (FeedbackRankRecipientsResponseDetails) response.getResponseDetails();"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            if (responseDetails.getAnswer() \u003e maxRank) {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":367,"author":{"gitId":"-"},"content":"     * Checks whether two list of responses for \u0027rank recipient question\u0027 have the same order for each recipient."},{"lineNumber":368,"author":{"gitId":"-"},"content":"     * The recipients of the updated responses should be a subset of that of the original responses."},{"lineNumber":369,"author":{"gitId":"-"},"content":"     * @param responses the original response list"},{"lineNumber":370,"author":{"gitId":"-"},"content":"     * @param modifiedResponses the updated response list"},{"lineNumber":371,"author":{"gitId":"-"},"content":"     * @return true if the modified response list maintain the original order of the responses"},{"lineNumber":372,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    private boolean areRankResponsesInSameOrder(List\u003cFeedbackResponseAttributes\u003e responses,"},{"lineNumber":374,"author":{"gitId":"-"},"content":"                                                List\u003cFeedbackResponseAttributes\u003e modifiedResponses) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        if (responses.isEmpty()) {"},{"lineNumber":376,"author":{"gitId":"-"},"content":"            return modifiedResponses.isEmpty();"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        if (modifiedResponses.isEmpty()) {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"        // Expects responses to rank recipient questions."},{"lineNumber":383,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes r : responses) {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            assert r.getFeedbackQuestionType().equals(FeedbackQuestionType.RANK_RECIPIENTS);"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes r : modifiedResponses) {"},{"lineNumber":387,"author":{"gitId":"-"},"content":"            assert r.getFeedbackQuestionType().equals(FeedbackQuestionType.RANK_RECIPIENTS);"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"        responses.sort(Comparator.comparing("},{"lineNumber":391,"author":{"gitId":"-"},"content":"                response -\u003e ((FeedbackRankRecipientsResponseDetails) response.getResponseDetails()).getAnswer()));"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        modifiedResponses.sort(Comparator.comparing("},{"lineNumber":393,"author":{"gitId":"-"},"content":"                response -\u003e ((FeedbackRankRecipientsResponseDetails) response.getResponseDetails()).getAnswer()));"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"        int pointer1 \u003d 0;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        int pointer2 \u003d 0;"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        String recipient1Email;"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        String recipient2Email;"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        while (pointer1 \u003c responses.size() \u0026\u0026 pointer2 \u003c modifiedResponses.size()) {"},{"lineNumber":400,"author":{"gitId":"-"},"content":"            recipient1Email \u003d responses.get(pointer1).getRecipient();"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            recipient2Email \u003d responses.get(pointer2).getRecipient();"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            if (recipient1Email.equals(recipient2Email)) {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                pointer1++;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"                pointer2++;"},{"lineNumber":405,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"                pointer1++; // Skips one response from first list."},{"lineNumber":407,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"        return pointer2 \u003d\u003d modifiedResponses.size();"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"    private int numResponsesFromGiverInSession(String studentEmail, String sessionName, String courseId) {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        int numResponses \u003d 0;"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : questionTypeBundle.feedbackResponses.values()) {"},{"lineNumber":416,"author":{"gitId":"-"},"content":"            if (response.getGiver().equals(studentEmail) \u0026\u0026 response.getFeedbackSessionName().equals(sessionName)"},{"lineNumber":417,"author":{"gitId":"-"},"content":"                    \u0026\u0026 response.getCourseId().equals(courseId)) {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                numResponses++;"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":420,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        return numResponses;"},{"lineNumber":422,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"    private int getResponseRate(String sessionName, String courseId) {"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes sessionFromDatabase \u003d fsLogic.getFeedbackSession(sessionName, courseId);"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        return fsLogic.getActualTotalSubmission(sessionFromDatabase);"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    public void testUpdateFeedbackResponsesForChangingEmail() throws Exception {"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        ______TS(\"standard update email case\");"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"        // Student 1 currently has 11 responses to him and 2 from himself."},{"lineNumber":434,"author":{"gitId":"-"},"content":"        // Student 1 currently has 1 response comment for responses from instructor to him"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        // and 1 response comment from responses from himself."},{"lineNumber":436,"author":{"gitId":"-"},"content":"        StudentAttributes studentToUpdate \u003d questionTypeBundle.students.get(\"student2InCourse1\");"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesForReceiver \u003d"},{"lineNumber":438,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesForReceiverForCourse("},{"lineNumber":439,"author":{"gitId":"-"},"content":"                        studentToUpdate.getCourse(), studentToUpdate.getEmail());"},{"lineNumber":440,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesFromGiver \u003d"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForCourse("},{"lineNumber":442,"author":{"gitId":"-"},"content":"                        studentToUpdate.getCourse(), studentToUpdate.getEmail());"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e responseIdsToAndFromStudent \u003d new HashSet\u003c\u003e();"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent.addAll("},{"lineNumber":445,"author":{"gitId":"-"},"content":"                responsesForReceiver.stream().map(FeedbackResponseAttributes::getId).collect(Collectors.toList()));"},{"lineNumber":446,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent.addAll("},{"lineNumber":447,"author":{"gitId":"-"},"content":"                responsesFromGiver.stream().map(FeedbackResponseAttributes::getId).collect(Collectors.toList()));"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e responseCommentsForStudent \u003d"},{"lineNumber":449,"author":{"gitId":"-"},"content":"                getFeedbackResponseCommentsForResponsesFromDatabase(responseIdsToAndFromStudent);"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"        assertEquals(11, responsesForReceiver.size());"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        assertEquals(8, responsesFromGiver.size());"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        assertEquals(2, responseCommentsForStudent.size());"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        // student\u0027s comment"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        assertTrue(responseCommentsForStudent.stream().anyMatch(r -\u003e r.isCommentFromFeedbackParticipant()));"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        // instructor comment"},{"lineNumber":457,"author":{"gitId":"-"},"content":"        assertTrue(responseCommentsForStudent.stream().anyMatch(r -\u003e !r.isCommentFromFeedbackParticipant()));"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"        frLogic.updateFeedbackResponsesForChangingEmail("},{"lineNumber":460,"author":{"gitId":"-"},"content":"                studentToUpdate.getCourse(), studentToUpdate.getEmail(), \"new@email.tmt\");"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"        responsesForReceiver \u003d frLogic.getFeedbackResponsesForReceiverForCourse("},{"lineNumber":463,"author":{"gitId":"-"},"content":"                studentToUpdate.getCourse(), studentToUpdate.getEmail());"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        responsesFromGiver \u003d frLogic.getFeedbackResponsesFromGiverForCourse("},{"lineNumber":465,"author":{"gitId":"-"},"content":"                studentToUpdate.getCourse(), studentToUpdate.getEmail());"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent \u003d new HashSet\u003c\u003e();"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent.addAll("},{"lineNumber":468,"author":{"gitId":"-"},"content":"                responsesForReceiver.stream().map(FeedbackResponseAttributes::getId).collect(Collectors.toList()));"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent.addAll("},{"lineNumber":470,"author":{"gitId":"-"},"content":"                responsesFromGiver.stream().map(FeedbackResponseAttributes::getId).collect(Collectors.toList()));"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        responseCommentsForStudent \u003d"},{"lineNumber":472,"author":{"gitId":"-"},"content":"                getFeedbackResponseCommentsForResponsesFromDatabase(responseIdsToAndFromStudent);"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"        assertEquals(0, responsesForReceiver.size());"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        assertEquals(0, responsesFromGiver.size());"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        assertEquals(0, responseCommentsForStudent.size());"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"        responsesForReceiver \u003d frLogic.getFeedbackResponsesForReceiverForCourse("},{"lineNumber":479,"author":{"gitId":"-"},"content":"                studentToUpdate.getCourse(), \"new@email.tmt\");"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        responsesFromGiver \u003d frLogic.getFeedbackResponsesFromGiverForCourse("},{"lineNumber":481,"author":{"gitId":"-"},"content":"                studentToUpdate.getCourse(), \"new@email.tmt\");"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent \u003d new HashSet\u003c\u003e();"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent.addAll("},{"lineNumber":484,"author":{"gitId":"-"},"content":"                responsesForReceiver.stream().map(FeedbackResponseAttributes::getId).collect(Collectors.toList()));"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        responseIdsToAndFromStudent.addAll("},{"lineNumber":486,"author":{"gitId":"-"},"content":"                responsesFromGiver.stream().map(FeedbackResponseAttributes::getId).collect(Collectors.toList()));"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        responseCommentsForStudent \u003d"},{"lineNumber":488,"author":{"gitId":"-"},"content":"                getFeedbackResponseCommentsForResponsesFromDatabase(responseIdsToAndFromStudent);"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"        assertEquals(11, responsesForReceiver.size());"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        assertEquals(8, responsesFromGiver.size());"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        assertEquals(2, responseCommentsForStudent.size());"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":494,"author":{"gitId":"-"},"content":""},{"lineNumber":495,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":496,"author":{"gitId":"-"},"content":"    public void testIsNameVisibleTo() {"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"        ______TS(\"testIsNameVisibleTo\");"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d dataBundle.students.get(\"student1InCourse1\");"},{"lineNumber":502,"author":{"gitId":"-"},"content":"        StudentAttributes student2 \u003d dataBundle.students.get(\"student2InCourse1\");"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        StudentAttributes student3 \u003d dataBundle.students.get(\"student3InCourse1\");"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        StudentAttributes student5 \u003d dataBundle.students.get(\"student5InCourse1\");"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq \u003d getQuestionFromDatabase(\"qn3InSession1InCourse1\");"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr \u003d getResponseFromDatabase(\"response1ForQ3S1C1\");"},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"        CourseRoster roster \u003d new CourseRoster("},{"lineNumber":510,"author":{"gitId":"-"},"content":"                studentsLogic.getStudentsForCourse(fq.getCourseId()),"},{"lineNumber":511,"author":{"gitId":"-"},"content":"                instructorsLogic.getInstructorsForCourse(fq.getCourseId()));"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, instructor.getEmail(), true, true, roster));"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, instructor.getEmail(), true, false, roster));"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to own team members\");"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"        fr.setGiver(student.getEmail());"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to receiver/reciever team members\");"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"        fq.setRecipientType(FeedbackParticipantType.TEAMS);"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().clear();"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().add(FeedbackParticipantType.RECEIVER);"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        fr.setRecipient(student.getTeam());"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":529,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student3.getEmail(), false, false, roster));"},{"lineNumber":530,"author":{"gitId":"-"},"content":""},{"lineNumber":531,"author":{"gitId":"-"},"content":"        fq.setRecipientType(FeedbackParticipantType.STUDENTS);"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        fr.setRecipient(student.getEmail());"},{"lineNumber":533,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isNameVisibleToUser(fq, fr, student2.getEmail(), false, false, roster));"},{"lineNumber":535,"author":{"gitId":"-"},"content":""},{"lineNumber":536,"author":{"gitId":"-"},"content":"        fq.setRecipientType(FeedbackParticipantType.TEAMS);"},{"lineNumber":537,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().clear();"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        fr.setRecipient(student.getTeam());"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student3.getEmail(), false, false, roster));"},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":"        fq.setRecipientType(FeedbackParticipantType.STUDENTS);"},{"lineNumber":544,"author":{"gitId":"-"},"content":"        fr.setRecipient(student.getEmail());"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student3.getEmail(), false, false, roster));"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isNameVisibleToUser(fq, fr, student5.getEmail(), false, false, roster));"},{"lineNumber":548,"author":{"gitId":"-"},"content":""},{"lineNumber":549,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to receiver/giver team members for team questions\");"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"        fq.setRecipientType(FeedbackParticipantType.TEAMS);"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().clear();"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().add(FeedbackParticipantType.RECEIVER_TEAM_MEMBERS);"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        fq.setGiverType(FeedbackParticipantType.TEAMS);"},{"lineNumber":555,"author":{"gitId":"-"},"content":"        fq.getShowGiverNameTo().clear();"},{"lineNumber":556,"author":{"gitId":"-"},"content":"        fq.getShowGiverNameTo().add(FeedbackParticipantType.OWN_TEAM_MEMBERS_INCLUDING_SELF);"},{"lineNumber":557,"author":{"gitId":"-"},"content":""},{"lineNumber":558,"author":{"gitId":"-"},"content":"        fr.setRecipient(student5.getTeam());"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        fr.setGiver(student.getTeam());"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student.getEmail(), false, false, roster));"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student3.getEmail(), false, false, roster));"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isNameVisibleToUser(fq, fr, student5.getEmail(), false, false, roster));"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"-"},"content":"        ______TS(\"test anonymous team recipients\");"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        // Only members of the recipient team should be able to see the recipient name"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        fq.setRecipientType(FeedbackParticipantType.TEAMS);"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().clear();"},{"lineNumber":568,"author":{"gitId":"-"},"content":"        fq.getShowRecipientNameTo().add(FeedbackParticipantType.RECEIVER);"},{"lineNumber":569,"author":{"gitId":"-"},"content":"        fq.getShowResponsesTo().add(FeedbackParticipantType.STUDENTS);"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        fr.setRecipient(\"Team 1.1\");"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isNameVisibleToUser(fq, fr, student5.getEmail(), false, false, roster));"},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"-"},"content":"        ______TS(\"null question\");"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isNameVisibleToUser(null, fr, student.getEmail(), false, false, roster));"},{"lineNumber":576,"author":{"gitId":"-"},"content":""},{"lineNumber":577,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":578,"author":{"gitId":"-"},"content":""},{"lineNumber":579,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    public void testIsResponseVisibleForUser() {"},{"lineNumber":581,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor1 \u003d responseVisibilityBundle.instructors.get(\"FRV.instructor1OfCourse1\");"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor2 \u003d responseVisibilityBundle.instructors.get(\"FRV.instructor2OfCourse1\");"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor3 \u003d responseVisibilityBundle.instructors.get(\"FRV.instructor3OfCourse1\");"},{"lineNumber":584,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor4 \u003d responseVisibilityBundle.instructors.get(\"FRV.instructor4OfCourse1\");"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor5 \u003d responseVisibilityBundle.instructors.get(\"FRV.instructor5OfCourse1\");"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor6 \u003d responseVisibilityBundle.instructors.get(\"FRV.instructor6OfCourse1\");"},{"lineNumber":587,"author":{"gitId":"-"},"content":""},{"lineNumber":588,"author":{"gitId":"-"},"content":"        StudentAttributes student1 \u003d responseVisibilityBundle.students.get(\"FRV.student1InCourse1\");"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        StudentAttributes student2 \u003d responseVisibilityBundle.students.get(\"FRV.student2InCourse1\");"},{"lineNumber":590,"author":{"gitId":"-"},"content":"        StudentAttributes student3 \u003d responseVisibilityBundle.students.get(\"FRV.student3InCourse1\");"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        StudentAttributes student4 \u003d responseVisibilityBundle.students.get(\"FRV.student4InCourse1\");"},{"lineNumber":592,"author":{"gitId":"-"},"content":"        StudentAttributes student5 \u003d responseVisibilityBundle.students.get(\"FRV.student5InCourse1\");"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        StudentAttributes student6 \u003d responseVisibilityBundle.students.get(\"FRV.student6InCourse1\");"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        StudentAttributes student7 \u003d responseVisibilityBundle.students.get(\"FRV.student7InCourse1\");"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        StudentAttributes student8 \u003d responseVisibilityBundle.students.get(\"FRV.student8InCourse1\");"},{"lineNumber":596,"author":{"gitId":"-"},"content":""},{"lineNumber":597,"author":{"gitId":"-"},"content":"        // stu -\u003e self : instructors"},{"lineNumber":598,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq11 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn1InSession1InCourse1\");"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        // stu -\u003e stu : instructors, receiver"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq12 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn2InSession1InCourse1\");"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        // self -\u003e none : other students, instructors"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq13 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn3InSession1InCourse1\");"},{"lineNumber":603,"author":{"gitId":"-"},"content":"        // team -\u003e ins : instructors, other students"},{"lineNumber":604,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq16 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn6InSession1InCourse1\");"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        // stu -\u003e stu in same section : own team members, receiver team members"},{"lineNumber":606,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq17 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn7InSession1InCourse1\");"},{"lineNumber":607,"author":{"gitId":"-"},"content":"        // ins -\u003e ins : -"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq18 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn8InSession1InCourse1\");"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        // ins -\u003e ins team : instructors"},{"lineNumber":610,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq19 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn9InSession1InCourse1\");"},{"lineNumber":611,"author":{"gitId":"-"},"content":"        // team -\u003e team : receiver"},{"lineNumber":612,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq21 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn1InSession2InCourse1\");"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        // stu -\u003e own team mem : receiver, own team members"},{"lineNumber":614,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq22 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn2InSession2InCourse1\");"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        // ins -\u003e stu : receiver, instructors, other students, receiver\u0027s team members"},{"lineNumber":616,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq23 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn3InSession2InCourse1\");"},{"lineNumber":617,"author":{"gitId":"-"},"content":"        // stu -\u003e ins : receiver"},{"lineNumber":618,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq24 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn4InSession2InCourse1\");"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        // stu -\u003e own team : own team members, instructors"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq25 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn5InSession2InCourse1\");"},{"lineNumber":621,"author":{"gitId":"-"},"content":"        // stu -\u003e team : other students"},{"lineNumber":622,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq26 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn6InSession2InCourse1\");"},{"lineNumber":623,"author":{"gitId":"-"},"content":"        // team -\u003e stu in same section : instructors"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq27 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn7InSession2InCourse1\");"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        // team -\u003e team in same section : receiver"},{"lineNumber":626,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq28 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn8InSession2InCourse1\");"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        // stu -\u003e team in same section : instructors"},{"lineNumber":628,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq29 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn9InSession2InCourse1\");"},{"lineNumber":629,"author":{"gitId":"hhdqirui"},"content":"        // stu -\u003e team excluding self : instructors, receiver"},{"lineNumber":630,"author":{"gitId":"hhdqirui"},"content":"        FeedbackQuestionAttributes fq30 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn11InSession2InCourse1\");"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        // ins -\u003e team : instructors"},{"lineNumber":632,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq20 \u003d responseVisibilityBundle.feedbackQuestions.get(\"FRV.qn10InSession2InCourse1\");"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"        // stu1 -\u003e stu1 (self feedback)"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr111 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ1S1C1\");"},{"lineNumber":636,"author":{"gitId":"-"},"content":"        // stu5 -\u003e stu5 (self feedback)"},{"lineNumber":637,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr112 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ1S1C1\");"},{"lineNumber":638,"author":{"gitId":"-"},"content":"        // stu2 -\u003e stu5"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr121 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ2S1C1\");"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        // stu5 -\u003e stu2"},{"lineNumber":641,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr122 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ2S1C1\");"},{"lineNumber":642,"author":{"gitId":"-"},"content":"        // stu3 -\u003e stu2"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr123 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response3ForQ2S1C1\");"},{"lineNumber":644,"author":{"gitId":"-"},"content":"        // ins1 -\u003e General"},{"lineNumber":645,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr131 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ3S1C1\");"},{"lineNumber":646,"author":{"gitId":"-"},"content":"        // team2 -\u003e ins2"},{"lineNumber":647,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr161 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ6S1C1\");"},{"lineNumber":648,"author":{"gitId":"-"},"content":"        // team3 -\u003e ins2"},{"lineNumber":649,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr162 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ6S1C1\");"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        // stu1 -\u003e stu6"},{"lineNumber":651,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr171 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ7S1C1\");"},{"lineNumber":652,"author":{"gitId":"-"},"content":"        // ins1 -\u003e ins2"},{"lineNumber":653,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr181 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ8S1C1\");"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        // ins2 -\u003e ins team"},{"lineNumber":655,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr191 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ9S1C1\");"},{"lineNumber":656,"author":{"gitId":"-"},"content":"        // team1 -\u003e team2"},{"lineNumber":657,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr211 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ1S2C1\");"},{"lineNumber":658,"author":{"gitId":"-"},"content":"        // stu4 -\u003e stu3"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr221 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ2S2C1\");"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        // ins1 -\u003e stu3"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr231 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ3S2C1\");"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        // ins6 -\u003e stu5"},{"lineNumber":663,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr232 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ3S2C1\");"},{"lineNumber":664,"author":{"gitId":"-"},"content":"        // stu1 -\u003e ins1"},{"lineNumber":665,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr241 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ4S2C1\");"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        // stu1 -\u003e ins4"},{"lineNumber":667,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr242 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ4S2C1\");"},{"lineNumber":668,"author":{"gitId":"-"},"content":"        // stu6 -\u003e team3 (own team)"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr251 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ5S2C1\");"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        // stu5 -\u003e team2 (own team)"},{"lineNumber":671,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr252 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ5S2C1\");"},{"lineNumber":672,"author":{"gitId":"-"},"content":"        // stu1 -\u003e team3"},{"lineNumber":673,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr261 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ6S2C1\");"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        // team1 -\u003e stu7"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr271 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ7S2C1\");"},{"lineNumber":676,"author":{"gitId":"-"},"content":"        // team3 -\u003e team1"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr281 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ8S2C1\");"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        // stu8 -\u003e team1"},{"lineNumber":679,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr291 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ9S2C1\");"},{"lineNumber":680,"author":{"gitId":"hhdqirui"},"content":"        // stu1 -\u003e team2"},{"lineNumber":681,"author":{"gitId":"hhdqirui"},"content":"        FeedbackResponseAttributes fr2111 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ11S2C1\");"},{"lineNumber":682,"author":{"gitId":"hhdqirui"},"content":"        // stu6 -\u003e team1"},{"lineNumber":683,"author":{"gitId":"hhdqirui"},"content":"        FeedbackResponseAttributes fr2112 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response2ForQ11S2C1\");"},{"lineNumber":684,"author":{"gitId":"hhdqirui"},"content":"        // stu7 -\u003e team2"},{"lineNumber":685,"author":{"gitId":"hhdqirui"},"content":"        FeedbackResponseAttributes fr2113 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response3ForQ11S2C1\");"},{"lineNumber":686,"author":{"gitId":"-"},"content":"        // ins2 -\u003e team2"},{"lineNumber":687,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fr201 \u003d responseVisibilityBundle.feedbackResponses.get(\"FRV.response1ForQ10S2C1\");"},{"lineNumber":688,"author":{"gitId":"-"},"content":""},{"lineNumber":689,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e studentsEmailInTeam1 \u003d new HashSet\u003c\u003e("},{"lineNumber":690,"author":{"gitId":"-"},"content":"                Arrays.asList(student1.getEmail(), student2.getEmail(), student3.getEmail(), student4.getEmail()));"},{"lineNumber":691,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e studentsEmailInTeam2 \u003d new HashSet\u003c\u003e(Arrays.asList(student5.getEmail()));"},{"lineNumber":692,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e studentsEmailInTeam3 \u003d new HashSet\u003c\u003e(Arrays.asList(student6.getEmail(), student7.getEmail()));"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e studentsEmailInTeam4 \u003d new HashSet\u003c\u003e(Arrays.asList(student8.getEmail()));"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e studentsEmailEmpty \u003d Collections.emptySet();"},{"lineNumber":695,"author":{"gitId":"-"},"content":""},{"lineNumber":696,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to giver\");"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":699,"author":{"gitId":"-"},"content":"                fr111, fq11, null));"},{"lineNumber":700,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, null,"},{"lineNumber":701,"author":{"gitId":"-"},"content":"                fr131, fq13, instructor1));"},{"lineNumber":702,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":703,"author":{"gitId":"-"},"content":"                fr181, fq18, instructor1));"},{"lineNumber":704,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":705,"author":{"gitId":"-"},"content":"                fr191, fq19, instructor2));"},{"lineNumber":706,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student2.getEmail(), false, student2, studentsEmailInTeam1,"},{"lineNumber":707,"author":{"gitId":"-"},"content":"                fr211, fq21, null));"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student4.getEmail(), false, student4, studentsEmailInTeam1,"},{"lineNumber":709,"author":{"gitId":"-"},"content":"                fr221, fq22, null));"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":711,"author":{"gitId":"-"},"content":"                fr231, fq23, instructor1));"},{"lineNumber":712,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":713,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, null));"},{"lineNumber":714,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student6.getEmail(), false, student6, studentsEmailInTeam3,"},{"lineNumber":715,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, null));"},{"lineNumber":716,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":717,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, null));"},{"lineNumber":718,"author":{"gitId":"-"},"content":""},{"lineNumber":719,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to other students\");"},{"lineNumber":720,"author":{"gitId":"-"},"content":""},{"lineNumber":721,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student3.getEmail(), false, student3, studentsEmailInTeam1,"},{"lineNumber":722,"author":{"gitId":"-"},"content":"                fr131, fq13, null));"},{"lineNumber":723,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student5.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":724,"author":{"gitId":"-"},"content":"                fr161, fq16, null));"},{"lineNumber":725,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student5.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":726,"author":{"gitId":"-"},"content":"                fr211, fq21, null));"},{"lineNumber":727,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":728,"author":{"gitId":"-"},"content":"                fr231, fq23, null));"},{"lineNumber":729,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student5.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":730,"author":{"gitId":"-"},"content":"                fr261, fq26, null));"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":732,"author":{"gitId":"-"},"content":"                fr112, fq11, null));"},{"lineNumber":733,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":734,"author":{"gitId":"-"},"content":"                fr121, fq12, null));"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student5.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":736,"author":{"gitId":"-"},"content":"                fr171, fq17, null));"},{"lineNumber":737,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":738,"author":{"gitId":"-"},"content":"                fr291, fq29, null));"},{"lineNumber":739,"author":{"gitId":"-"},"content":""},{"lineNumber":740,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to receiver\");"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student2.getEmail(), false, student2, studentsEmailInTeam1,"},{"lineNumber":743,"author":{"gitId":"-"},"content":"                fr122, fq12, null));"},{"lineNumber":744,"author":{"gitId":"-"},"content":"        // receiver\u0027s team members include receiver"},{"lineNumber":745,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student6.getEmail(), false, student6, studentsEmailInTeam3,"},{"lineNumber":746,"author":{"gitId":"-"},"content":"                fr171, fq17, null));"},{"lineNumber":747,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student5.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":748,"author":{"gitId":"-"},"content":"                fr211, fq21, null));"},{"lineNumber":749,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student3.getEmail(), false, student3, studentsEmailInTeam1,"},{"lineNumber":750,"author":{"gitId":"-"},"content":"                fr221, fq22, null));"},{"lineNumber":751,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":752,"author":{"gitId":"-"},"content":"                fr241, fq24, instructor1));"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        // other students include receiver"},{"lineNumber":754,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student6.getEmail(), false, student6, studentsEmailInTeam3,"},{"lineNumber":755,"author":{"gitId":"-"},"content":"                fr261, fq26, null));"},{"lineNumber":756,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":757,"author":{"gitId":"-"},"content":"                fr281, fq28, null));"},{"lineNumber":758,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":759,"author":{"gitId":"-"},"content":"                fr181, fq18, instructor2));"},{"lineNumber":760,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":761,"author":{"gitId":"-"},"content":"                fr271, fq27, null));"},{"lineNumber":762,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student8.getEmail(), false, student8, studentsEmailInTeam4,"},{"lineNumber":763,"author":{"gitId":"-"},"content":"                fr281, fq28, null));"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student5.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":765,"author":{"gitId":"-"},"content":"                fr201, fq20, null));"},{"lineNumber":766,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student6.getEmail(), false, student6, studentsEmailInTeam3,"},{"lineNumber":767,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, null));"},{"lineNumber":768,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":769,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, null));"},{"lineNumber":770,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":771,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, null));"},{"lineNumber":772,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student2.getEmail(), false, student2, studentsEmailInTeam1,"},{"lineNumber":773,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, null));"},{"lineNumber":774,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student3.getEmail(), false, student3, studentsEmailInTeam1,"},{"lineNumber":775,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, null));"},{"lineNumber":776,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student4.getEmail(), false, student4, studentsEmailInTeam1,"},{"lineNumber":777,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, null));"},{"lineNumber":778,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student4.getEmail(), false, student5, studentsEmailInTeam2,"},{"lineNumber":779,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, null));"},{"lineNumber":780,"author":{"gitId":"-"},"content":""},{"lineNumber":781,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to giver\u0027s team members\");"},{"lineNumber":782,"author":{"gitId":"-"},"content":""},{"lineNumber":783,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student2.getEmail(), false, student2, studentsEmailInTeam1,"},{"lineNumber":784,"author":{"gitId":"-"},"content":"                fr171, fq17, null));"},{"lineNumber":785,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":786,"author":{"gitId":"-"},"content":"                fr221, fq22, null));"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":788,"author":{"gitId":"-"},"content":"                fr251, fq25, null));"},{"lineNumber":789,"author":{"gitId":"-"},"content":"        // other students include giver\u0027s team members"},{"lineNumber":790,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student3.getEmail(), false, student3, studentsEmailInTeam1,"},{"lineNumber":791,"author":{"gitId":"-"},"content":"                fr261, fq26, null));"},{"lineNumber":792,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student3.getEmail(), false, student3, studentsEmailInTeam1,"},{"lineNumber":793,"author":{"gitId":"-"},"content":"                fr111, fq11, null));"},{"lineNumber":794,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student4.getEmail(), false, student4, studentsEmailInTeam1,"},{"lineNumber":795,"author":{"gitId":"-"},"content":"                fr123, fq12, null));"},{"lineNumber":796,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student2.getEmail(), false, student2, studentsEmailInTeam1,"},{"lineNumber":797,"author":{"gitId":"-"},"content":"                fr241, fq24, null));"},{"lineNumber":798,"author":{"gitId":"-"},"content":"        // invalid usage"},{"lineNumber":799,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student8.getEmail(), false, student8, null,"},{"lineNumber":800,"author":{"gitId":"-"},"content":"                fr281, fq28, null));"},{"lineNumber":801,"author":{"gitId":"-"},"content":""},{"lineNumber":802,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to receiver\u0027s team members\");"},{"lineNumber":803,"author":{"gitId":"-"},"content":""},{"lineNumber":804,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student7.getEmail(), false, student7, studentsEmailInTeam3,"},{"lineNumber":805,"author":{"gitId":"-"},"content":"                fr171, fq17, null));"},{"lineNumber":806,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(student1.getEmail(), false, student1, studentsEmailInTeam1,"},{"lineNumber":807,"author":{"gitId":"-"},"content":"                fr231, fq23, null));"},{"lineNumber":808,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student2.getEmail(), false, student2, studentsEmailInTeam1,"},{"lineNumber":809,"author":{"gitId":"-"},"content":"                fr111, fq11, null));"},{"lineNumber":810,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student4.getEmail(), false, student4, studentsEmailInTeam1,"},{"lineNumber":811,"author":{"gitId":"-"},"content":"                fr122, fq12, null));"},{"lineNumber":812,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(student6.getEmail(), false, student6, studentsEmailInTeam3,"},{"lineNumber":813,"author":{"gitId":"-"},"content":"                fr271, fq27, null));"},{"lineNumber":814,"author":{"gitId":"-"},"content":""},{"lineNumber":815,"author":{"gitId":"-"},"content":"        ______TS(\"test if visible to instructors\");"},{"lineNumber":816,"author":{"gitId":"-"},"content":""},{"lineNumber":817,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":818,"author":{"gitId":"-"},"content":"                fr111, fq11, instructor1));"},{"lineNumber":819,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":820,"author":{"gitId":"-"},"content":"                fr123, fq12, instructor2));"},{"lineNumber":821,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":822,"author":{"gitId":"-"},"content":"                fr131, fq13, instructor1));"},{"lineNumber":823,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":824,"author":{"gitId":"-"},"content":"                fr161, fq16, instructor2));"},{"lineNumber":825,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":826,"author":{"gitId":"-"},"content":"                fr191, fq19, instructor1));"},{"lineNumber":827,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":828,"author":{"gitId":"-"},"content":"                fr231, fq23, instructor2));"},{"lineNumber":829,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":830,"author":{"gitId":"-"},"content":"                fr271, fq27, instructor1));"},{"lineNumber":831,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":832,"author":{"gitId":"-"},"content":"                fr171, fq17, instructor1));"},{"lineNumber":833,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":834,"author":{"gitId":"-"},"content":"                fr181, fq18, instructor2));"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":836,"author":{"gitId":"-"},"content":"                fr211, fq21, instructor2));"},{"lineNumber":837,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":838,"author":{"gitId":"-"},"content":"                fr221, fq22, instructor1));"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":841,"author":{"gitId":"-"},"content":"                fr123, fq12, instructor3));"},{"lineNumber":842,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":843,"author":{"gitId":"-"},"content":"                fr161, fq16, instructor3));"},{"lineNumber":844,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":845,"author":{"gitId":"-"},"content":"                fr191, fq19, instructor3));"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":847,"author":{"gitId":"-"},"content":"                fr251, fq25, instructor3));"},{"lineNumber":848,"author":{"gitId":"-"},"content":""},{"lineNumber":849,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":850,"author":{"gitId":"-"},"content":"                fr112, fq11, instructor4));"},{"lineNumber":851,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":852,"author":{"gitId":"-"},"content":"                fr252, fq25, instructor4));"},{"lineNumber":853,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":854,"author":{"gitId":"-"},"content":"                fr121, fq12, instructor4));"},{"lineNumber":855,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":856,"author":{"gitId":"-"},"content":"                fr122, fq12, instructor4));"},{"lineNumber":857,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":858,"author":{"gitId":"-"},"content":"                fr211, fq21, instructor4));"},{"lineNumber":859,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":860,"author":{"gitId":"-"},"content":"                fr242, fq24, instructor4));"},{"lineNumber":861,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":862,"author":{"gitId":"-"},"content":"                fr271, fq27, instructor4));"},{"lineNumber":863,"author":{"gitId":"-"},"content":""},{"lineNumber":864,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":865,"author":{"gitId":"-"},"content":"                fr162, fq16, instructor5));"},{"lineNumber":866,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":867,"author":{"gitId":"-"},"content":"                fr191, fq19, instructor5));"},{"lineNumber":868,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":869,"author":{"gitId":"-"},"content":"                fr271, fq27, instructor5));"},{"lineNumber":870,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":871,"author":{"gitId":"-"},"content":"                fr121, fq12, instructor5));"},{"lineNumber":872,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":873,"author":{"gitId":"-"},"content":"                fr122, fq12, instructor5));"},{"lineNumber":874,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":875,"author":{"gitId":"-"},"content":"                fr161, fq16, instructor5));"},{"lineNumber":876,"author":{"gitId":"-"},"content":""},{"lineNumber":877,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":878,"author":{"gitId":"-"},"content":"                fr111, fq11, instructor6));"},{"lineNumber":879,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":880,"author":{"gitId":"-"},"content":"                fr123, fq12, instructor6));"},{"lineNumber":881,"author":{"gitId":"-"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":882,"author":{"gitId":"-"},"content":"                fr252, fq25, instructor6));"},{"lineNumber":883,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":884,"author":{"gitId":"-"},"content":"                fr112, fq11, instructor6));"},{"lineNumber":885,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":886,"author":{"gitId":"-"},"content":"                fr121, fq12, instructor6));"},{"lineNumber":887,"author":{"gitId":"-"},"content":"        // \"general\" involved is checked as a section"},{"lineNumber":888,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":889,"author":{"gitId":"-"},"content":"                fr131, fq13, instructor6));"},{"lineNumber":890,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":891,"author":{"gitId":"-"},"content":"                fr161, fq16, instructor6));"},{"lineNumber":892,"author":{"gitId":"-"},"content":"        // \"instructors\" involved is checked as a section"},{"lineNumber":893,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":894,"author":{"gitId":"-"},"content":"                fr162, fq16, instructor6));"},{"lineNumber":895,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":896,"author":{"gitId":"-"},"content":"                fr191, fq19, instructor6));"},{"lineNumber":897,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":898,"author":{"gitId":"-"},"content":"                fr232, fq23, instructor6));"},{"lineNumber":899,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":900,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":901,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, instructor1));"},{"lineNumber":902,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":903,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, instructor2));"},{"lineNumber":904,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":905,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, instructor3));"},{"lineNumber":906,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":907,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, instructor4));"},{"lineNumber":908,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":909,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, instructor5));"},{"lineNumber":910,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":911,"author":{"gitId":"hhdqirui"},"content":"                fr2111, fq30, instructor6));"},{"lineNumber":912,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":913,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":914,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, instructor1));"},{"lineNumber":915,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":916,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, instructor2));"},{"lineNumber":917,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":918,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, instructor3));"},{"lineNumber":919,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":920,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, instructor4));"},{"lineNumber":921,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":922,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, instructor5));"},{"lineNumber":923,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":924,"author":{"gitId":"hhdqirui"},"content":"                fr2112, fq30, instructor6));"},{"lineNumber":925,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":926,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor1.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":927,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, instructor1));"},{"lineNumber":928,"author":{"gitId":"hhdqirui"},"content":"        assertTrue(frLogic.isResponseVisibleForUser(instructor2.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":929,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, instructor2));"},{"lineNumber":930,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor3.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":931,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, instructor3));"},{"lineNumber":932,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor4.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":933,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, instructor4));"},{"lineNumber":934,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor5.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":935,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, instructor5));"},{"lineNumber":936,"author":{"gitId":"hhdqirui"},"content":"        assertFalse(frLogic.isResponseVisibleForUser(instructor6.getEmail(), true, null, studentsEmailEmpty,"},{"lineNumber":937,"author":{"gitId":"hhdqirui"},"content":"                fr2113, fq30, instructor6));"},{"lineNumber":938,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":939,"author":{"gitId":"-"},"content":""},{"lineNumber":940,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":941,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelatedResponses() {"},{"lineNumber":942,"author":{"gitId":"-"},"content":"        StudentAttributes studentToDelete \u003d dataBundle.students.get(\"student1InCourse1\");"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes session1InCourse1 \u003d dataBundle.feedbackSessions.get(\"session1InCourse1\");"},{"lineNumber":944,"author":{"gitId":"-"},"content":""},{"lineNumber":945,"author":{"gitId":"-"},"content":"        // the responses also have some associated comments"},{"lineNumber":946,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e remainingResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":947,"author":{"gitId":"-"},"content":"        remainingResponses.addAll("},{"lineNumber":948,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForCourse(studentToDelete.getCourse(), studentToDelete.getEmail()));"},{"lineNumber":949,"author":{"gitId":"-"},"content":"        remainingResponses.addAll("},{"lineNumber":950,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesForReceiverForCourse(studentToDelete.getCourse(), studentToDelete.getEmail()));"},{"lineNumber":951,"author":{"gitId":"-"},"content":"        assertFalse(remainingResponses.isEmpty());"},{"lineNumber":952,"author":{"gitId":"-"},"content":""},{"lineNumber":953,"author":{"gitId":"-"},"content":"        // the student has some responses"},{"lineNumber":954,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responsesForStudent1 \u003d"},{"lineNumber":955,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForCourse(studentToDelete.getCourse(), studentToDelete.getEmail());"},{"lineNumber":956,"author":{"gitId":"-"},"content":"        responsesForStudent1.addAll("},{"lineNumber":957,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesForReceiverForCourse(studentToDelete.getCourse(), studentToDelete.getEmail()));"},{"lineNumber":958,"author":{"gitId":"-"},"content":"        assertFalse(responsesForStudent1.isEmpty());"},{"lineNumber":959,"author":{"gitId":"-"},"content":"        assertTrue("},{"lineNumber":960,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(session1InCourse1.getCourseId(),"},{"lineNumber":961,"author":{"gitId":"-"},"content":"                        session1InCourse1.getFeedbackSessionName()).contains(studentToDelete.getEmail()));"},{"lineNumber":962,"author":{"gitId":"-"},"content":""},{"lineNumber":963,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesInvolvedEntityOfCourseCascade("},{"lineNumber":964,"author":{"gitId":"-"},"content":"                studentToDelete.getCourse(), studentToDelete.getEmail());"},{"lineNumber":965,"author":{"gitId":"-"},"content":""},{"lineNumber":966,"author":{"gitId":"-"},"content":"        // responses should be deleted"},{"lineNumber":967,"author":{"gitId":"-"},"content":"        remainingResponses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":968,"author":{"gitId":"-"},"content":"        remainingResponses.addAll("},{"lineNumber":969,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesFromGiverForCourse(studentToDelete.getCourse(), studentToDelete.getEmail()));"},{"lineNumber":970,"author":{"gitId":"-"},"content":"        remainingResponses.addAll("},{"lineNumber":971,"author":{"gitId":"-"},"content":"                frLogic.getFeedbackResponsesForReceiverForCourse(studentToDelete.getCourse(), studentToDelete.getEmail()));"},{"lineNumber":972,"author":{"gitId":"-"},"content":"        assertEquals(0, remainingResponses.size());"},{"lineNumber":973,"author":{"gitId":"-"},"content":""},{"lineNumber":974,"author":{"gitId":"-"},"content":"        // comments should also be deleted"},{"lineNumber":975,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e remainingComments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":976,"author":{"gitId":"-"},"content":"        for (FeedbackResponseAttributes response : responsesForStudent1) {"},{"lineNumber":977,"author":{"gitId":"-"},"content":"            remainingComments.addAll(frcLogic.getFeedbackResponseCommentForResponse(response.getId()));"},{"lineNumber":978,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":979,"author":{"gitId":"-"},"content":"        assertEquals(0, remainingComments.size());"},{"lineNumber":980,"author":{"gitId":"-"},"content":""},{"lineNumber":981,"author":{"gitId":"-"},"content":"        // the student no longer has responses for the session"},{"lineNumber":982,"author":{"gitId":"-"},"content":"        assertFalse("},{"lineNumber":983,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(session1InCourse1.getCourseId(),"},{"lineNumber":984,"author":{"gitId":"-"},"content":"                        session1InCourse1.getFeedbackSessionName()).contains(studentToDelete.getEmail()));"},{"lineNumber":985,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":986,"author":{"gitId":"-"},"content":""},{"lineNumber":987,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":988,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponseCascade() {"},{"lineNumber":989,"author":{"gitId":"-"},"content":"        ______TS(\"non-existent response\");"},{"lineNumber":990,"author":{"gitId":"-"},"content":""},{"lineNumber":991,"author":{"gitId":"-"},"content":"        // should pass silently"},{"lineNumber":992,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponseCascade(\"not-exist\");"},{"lineNumber":993,"author":{"gitId":"-"},"content":""},{"lineNumber":994,"author":{"gitId":"-"},"content":"        ______TS(\"standard delete\");"},{"lineNumber":995,"author":{"gitId":"-"},"content":""},{"lineNumber":996,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra \u003d getResponseFromDatabase(\"response1ForQ1S1C1\");"},{"lineNumber":997,"author":{"gitId":"-"},"content":"        assertNotNull(fra);"},{"lineNumber":998,"author":{"gitId":"-"},"content":"        // the response has comments"},{"lineNumber":999,"author":{"gitId":"-"},"content":"        assertFalse(frcLogic.getFeedbackResponseCommentForResponse(fra.getId()).isEmpty());"},{"lineNumber":1000,"author":{"gitId":"-"},"content":""},{"lineNumber":1001,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponseCascade(fra.getId());"},{"lineNumber":1002,"author":{"gitId":"-"},"content":""},{"lineNumber":1003,"author":{"gitId":"-"},"content":"        assertNull(frLogic.getFeedbackResponse(fra.getId()));"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"        // associated comments are deleted"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"        assertTrue(frcLogic.getFeedbackResponseCommentForResponse(fra.getId()).isEmpty());"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1007,"author":{"gitId":"-"},"content":""},{"lineNumber":1008,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponses_byCourseId() {"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"        ______TS(\"standard delete\");"},{"lineNumber":1011,"author":{"gitId":"-"},"content":""},{"lineNumber":1012,"author":{"gitId":"-"},"content":"        // test that responses are deleted"},{"lineNumber":1013,"author":{"gitId":"-"},"content":"        String courseId \u003d \"idOfTypicalCourse1\";"},{"lineNumber":1014,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.getFeedbackResponsesForSession(\"First feedback session\", courseId).isEmpty());"},{"lineNumber":1015,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.getFeedbackResponsesForSession(\"Grace Period Session\", courseId).isEmpty());"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.getFeedbackResponsesForSession(\"Closed Session\", courseId).isEmpty());"},{"lineNumber":1017,"author":{"gitId":"-"},"content":""},{"lineNumber":1018,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponses("},{"lineNumber":1019,"author":{"gitId":"-"},"content":"                AttributesDeletionQuery.builder()"},{"lineNumber":1020,"author":{"gitId":"-"},"content":"                        .withCourseId(courseId)"},{"lineNumber":1021,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1022,"author":{"gitId":"-"},"content":""},{"lineNumber":1023,"author":{"gitId":"-"},"content":"        assertEquals(0, frLogic.getFeedbackResponsesForSession(\"First feedback session\", courseId).size());"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"        assertEquals(0, frLogic.getFeedbackResponsesForSession(\"Grace Period Session\", courseId).size());"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"        assertEquals(0, frLogic.getFeedbackResponsesForSession(\"Closed Session\", courseId).size());"},{"lineNumber":1026,"author":{"gitId":"-"},"content":""},{"lineNumber":1027,"author":{"gitId":"-"},"content":"        // test that responses from other courses are unaffected"},{"lineNumber":1028,"author":{"gitId":"-"},"content":"        String otherCourse \u003d \"idOfTypicalCourse2\";"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"        assertFalse(frLogic.getFeedbackResponsesForSession(\"Instructor feedback session\", otherCourse).isEmpty());"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1031,"author":{"gitId":"-"},"content":""},{"lineNumber":1032,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesForQuestionCascade_studentsQuestion_shouldUpdateRespondents() {"},{"lineNumber":1034,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra \u003d getResponseFromDatabase(\"response1ForQ1S1C1\");"},{"lineNumber":1035,"author":{"gitId":"-"},"content":""},{"lineNumber":1036,"author":{"gitId":"-"},"content":"        // this is the only response the student has given for the session"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"        assertEquals(1, frLogic.getFeedbackResponsesFromGiverForCourse(fra.getCourseId(), fra.getGiver()).stream()"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"                .filter(response -\u003e response.getFeedbackSessionName().equals(fra.getFeedbackSessionName()))"},{"lineNumber":1039,"author":{"gitId":"-"},"content":"                .count());"},{"lineNumber":1040,"author":{"gitId":"-"},"content":"        // the student has answers for the session"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"        assertTrue("},{"lineNumber":1042,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1044,"author":{"gitId":"-"},"content":""},{"lineNumber":1045,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesForQuestionCascade(fra.getFeedbackQuestionId());"},{"lineNumber":1046,"author":{"gitId":"-"},"content":""},{"lineNumber":1047,"author":{"gitId":"-"},"content":"        // there is no student X as respondents"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"        assertFalse("},{"lineNumber":1049,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1050,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1052,"author":{"gitId":"-"},"content":""},{"lineNumber":1053,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1054,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesForQuestionCascade_instructorsQuestion_shouldUpdateRespondents() {"},{"lineNumber":1055,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra \u003d getResponseFromDatabase(\"response1ForQ3S1C1\");"},{"lineNumber":1056,"author":{"gitId":"-"},"content":""},{"lineNumber":1057,"author":{"gitId":"-"},"content":"        // this is the only response the instructor has given for the session"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"        assertEquals(1, frLogic.getFeedbackResponsesFromGiverForCourse(fra.getCourseId(), fra.getGiver()).stream()"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"                .filter(response -\u003e response.getFeedbackSessionName().equals(fra.getFeedbackSessionName()))"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"                .count());"},{"lineNumber":1061,"author":{"gitId":"-"},"content":"        // the instructor has answers for the session"},{"lineNumber":1062,"author":{"gitId":"-"},"content":"        assertTrue("},{"lineNumber":1063,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1065,"author":{"gitId":"-"},"content":""},{"lineNumber":1066,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesForQuestionCascade(fra.getFeedbackQuestionId());"},{"lineNumber":1067,"author":{"gitId":"-"},"content":""},{"lineNumber":1068,"author":{"gitId":"-"},"content":"        // there is not instructor X in instructor respondents"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"        assertFalse("},{"lineNumber":1070,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1073,"author":{"gitId":"-"},"content":""},{"lineNumber":1074,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_giverIsStudent_shouldUpdateRespondents() {"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra \u003d getResponseFromDatabase(\"response3ForQ2S1C1\");"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"        StudentAttributes student2InCourse1 \u003d dataBundle.students.get(\"student2InCourse1\");"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"        // giver is student"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"        assertEquals(FeedbackParticipantType.STUDENTS,"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"                fqLogic.getFeedbackQuestion(fra.getFeedbackQuestionId()).getGiverType());"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"        // student is the recipient"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"        assertEquals(fra.getRecipient(), student2InCourse1.getEmail());"},{"lineNumber":1083,"author":{"gitId":"-"},"content":""},{"lineNumber":1084,"author":{"gitId":"-"},"content":"        // this is the only response the giver has given for the session"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"        assertEquals(1, frLogic.getFeedbackResponsesFromGiverForCourse(fra.getCourseId(), fra.getGiver()).stream()"},{"lineNumber":1086,"author":{"gitId":"-"},"content":"                .filter(response -\u003e response.getFeedbackSessionName().equals(fra.getFeedbackSessionName()))"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"                .count());"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"        // the student has answers for the session"},{"lineNumber":1089,"author":{"gitId":"-"},"content":"        assertTrue("},{"lineNumber":1090,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1091,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1092,"author":{"gitId":"-"},"content":""},{"lineNumber":1093,"author":{"gitId":"-"},"content":"        // after the giver is removed from the course"},{"lineNumber":1094,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesInvolvedEntityOfCourseCascade("},{"lineNumber":1095,"author":{"gitId":"-"},"content":"                student2InCourse1.getCourse(), student2InCourse1.getEmail());"},{"lineNumber":1096,"author":{"gitId":"-"},"content":""},{"lineNumber":1097,"author":{"gitId":"-"},"content":"        // there is no student X as respondents"},{"lineNumber":1098,"author":{"gitId":"-"},"content":"        assertFalse("},{"lineNumber":1099,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1100,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1102,"author":{"gitId":"-"},"content":""},{"lineNumber":1103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1104,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_giverIsInstructor_shouldUpdateRespondents() {"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra \u003d getResponseFromDatabase(\"response1ForQ1S2C2\");"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"        StudentAttributes student1InCourse2 \u003d dataBundle.students.get(\"student1InCourse2\");"},{"lineNumber":1107,"author":{"gitId":"-"},"content":"        // giver is instructor"},{"lineNumber":1108,"author":{"gitId":"-"},"content":"        assertEquals(FeedbackParticipantType.SELF,"},{"lineNumber":1109,"author":{"gitId":"-"},"content":"                fqLogic.getFeedbackQuestion(fra.getFeedbackQuestionId()).getGiverType());"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"        // student is the recipient"},{"lineNumber":1111,"author":{"gitId":"-"},"content":"        assertEquals(fra.getRecipient(), student1InCourse2.getEmail());"},{"lineNumber":1112,"author":{"gitId":"-"},"content":""},{"lineNumber":1113,"author":{"gitId":"-"},"content":"        // this is the only response the instructor has given for the session"},{"lineNumber":1114,"author":{"gitId":"-"},"content":"        assertEquals(1, frLogic.getFeedbackResponsesFromGiverForCourse(fra.getCourseId(), fra.getGiver()).stream()"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"                .filter(response -\u003e response.getFeedbackSessionName().equals(fra.getFeedbackSessionName()))"},{"lineNumber":1116,"author":{"gitId":"-"},"content":"                .count());"},{"lineNumber":1117,"author":{"gitId":"-"},"content":"        // the instructor has answers for the session"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"        assertTrue("},{"lineNumber":1119,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1120,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1121,"author":{"gitId":"-"},"content":""},{"lineNumber":1122,"author":{"gitId":"-"},"content":"        // after the giver is removed from the course"},{"lineNumber":1123,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesInvolvedEntityOfCourseCascade("},{"lineNumber":1124,"author":{"gitId":"-"},"content":"                student1InCourse2.getCourse(), student1InCourse2.getEmail());"},{"lineNumber":1125,"author":{"gitId":"-"},"content":""},{"lineNumber":1126,"author":{"gitId":"-"},"content":"        // there is no instructor X as respondents"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"        assertFalse("},{"lineNumber":1128,"author":{"gitId":"-"},"content":"                frLogic.getGiverSetThatAnswerFeedbackSession(fra.getCourseId(),"},{"lineNumber":1129,"author":{"gitId":"-"},"content":"                        fra.getFeedbackSessionName()).contains(fra.getGiver()));"},{"lineNumber":1130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1131,"author":{"gitId":"-"},"content":""},{"lineNumber":1132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelevantResponsesAsRecipient()"},{"lineNumber":1134,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":1135,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor1OfCourse1 \u003d dataBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1136,"author":{"gitId":"-"},"content":""},{"lineNumber":1137,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra1ReceivedByTeam \u003d getResponseFromDatabase(\"response1ForQ1S2C1\");"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"        frcLogic.createFeedbackResponseComment("},{"lineNumber":1139,"author":{"gitId":"-"},"content":"                FeedbackResponseCommentAttributes"},{"lineNumber":1140,"author":{"gitId":"-"},"content":"                        .builder()"},{"lineNumber":1141,"author":{"gitId":"-"},"content":"                        .withCourseId(fra1ReceivedByTeam.getCourseId())"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"                        .withFeedbackSessionName(fra1ReceivedByTeam.getFeedbackSessionName())"},{"lineNumber":1143,"author":{"gitId":"-"},"content":"                        .withCommentGiver(instructor1OfCourse1.getEmail())"},{"lineNumber":1144,"author":{"gitId":"-"},"content":"                        .withCommentText(\"Comment 1\")"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"                        .withFeedbackQuestionId(fra1ReceivedByTeam.getFeedbackQuestionId())"},{"lineNumber":1146,"author":{"gitId":"-"},"content":"                        .withFeedbackResponseId(fra1ReceivedByTeam.getId())"},{"lineNumber":1147,"author":{"gitId":"-"},"content":"                        .withGiverSection(fra1ReceivedByTeam.getGiverSection())"},{"lineNumber":1148,"author":{"gitId":"-"},"content":"                        .withReceiverSection(fra1ReceivedByTeam.getRecipientSection())"},{"lineNumber":1149,"author":{"gitId":"-"},"content":"                        .withCommentFromFeedbackParticipant(false)"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"                        .withCommentGiverType(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"                        .withVisibilityFollowingFeedbackQuestion(false)"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra2ReceivedByTeam \u003d getResponseFromDatabase(\"response1GracePeriodFeedback\");"},{"lineNumber":1154,"author":{"gitId":"-"},"content":"        frcLogic.createFeedbackResponseComment("},{"lineNumber":1155,"author":{"gitId":"-"},"content":"                FeedbackResponseCommentAttributes"},{"lineNumber":1156,"author":{"gitId":"-"},"content":"                        .builder()"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"                        .withCourseId(fra2ReceivedByTeam.getCourseId())"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"                        .withFeedbackSessionName(fra2ReceivedByTeam.getFeedbackSessionName())"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"                        .withCommentGiver(instructor1OfCourse1.getEmail())"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"                        .withCommentText(\"Comment 2\")"},{"lineNumber":1161,"author":{"gitId":"-"},"content":"                        .withFeedbackQuestionId(fra2ReceivedByTeam.getFeedbackQuestionId())"},{"lineNumber":1162,"author":{"gitId":"-"},"content":"                        .withFeedbackResponseId(fra2ReceivedByTeam.getId())"},{"lineNumber":1163,"author":{"gitId":"-"},"content":"                        .withGiverSection(fra2ReceivedByTeam.getGiverSection())"},{"lineNumber":1164,"author":{"gitId":"-"},"content":"                        .withReceiverSection(fra2ReceivedByTeam.getRecipientSection())"},{"lineNumber":1165,"author":{"gitId":"-"},"content":"                        .withCommentFromFeedbackParticipant(false)"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"                        .withCommentGiverType(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"                        .withVisibilityFollowingFeedbackQuestion(false)"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1169,"author":{"gitId":"-"},"content":""},{"lineNumber":1170,"author":{"gitId":"-"},"content":"        String teamName \u003d \"Team 1.2\";"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"        assertEquals(teamName, fra1ReceivedByTeam.getRecipient());"},{"lineNumber":1172,"author":{"gitId":"-"},"content":"        assertEquals(teamName, fra2ReceivedByTeam.getRecipient());"},{"lineNumber":1173,"author":{"gitId":"-"},"content":""},{"lineNumber":1174,"author":{"gitId":"-"},"content":"        // both responses got some comments"},{"lineNumber":1175,"author":{"gitId":"-"},"content":"        assertFalse(frcLogic.getFeedbackResponseCommentForResponse(fra1ReceivedByTeam.getId()).isEmpty());"},{"lineNumber":1176,"author":{"gitId":"-"},"content":"        assertFalse(frcLogic.getFeedbackResponseCommentForResponse(fra2ReceivedByTeam.getId()).isEmpty());"},{"lineNumber":1177,"author":{"gitId":"-"},"content":""},{"lineNumber":1178,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesInvolvedEntityOfCourseCascade(fra1ReceivedByTeam.getCourseId(), teamName);"},{"lineNumber":1179,"author":{"gitId":"-"},"content":""},{"lineNumber":1180,"author":{"gitId":"-"},"content":"        // responses received by the team should be deleted"},{"lineNumber":1181,"author":{"gitId":"-"},"content":"        assertNull(frLogic.getFeedbackResponse(fra1ReceivedByTeam.getId()));"},{"lineNumber":1182,"author":{"gitId":"-"},"content":"        assertNull(frLogic.getFeedbackResponse(fra2ReceivedByTeam.getId()));"},{"lineNumber":1183,"author":{"gitId":"-"},"content":""},{"lineNumber":1184,"author":{"gitId":"-"},"content":"        // their associated comments should be deleted"},{"lineNumber":1185,"author":{"gitId":"-"},"content":"        assertTrue(frcLogic.getFeedbackResponseCommentForResponse(fra1ReceivedByTeam.getId()).isEmpty());"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"        assertTrue(frcLogic.getFeedbackResponseCommentForResponse(fra2ReceivedByTeam.getId()).isEmpty());"},{"lineNumber":1187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1188,"author":{"gitId":"-"},"content":""},{"lineNumber":1189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"    public void testDeleteFeedbackResponsesInvolvedEntityOfCourseCascade_shouldDeleteRelevantResponsesAsGiver()"},{"lineNumber":1191,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":1192,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor1OfCourse1 \u003d dataBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1193,"author":{"gitId":"-"},"content":"        StudentAttributes student4InCourse1 \u003d dataBundle.students.get(\"student4InCourse1\");"},{"lineNumber":1194,"author":{"gitId":"-"},"content":""},{"lineNumber":1195,"author":{"gitId":"-"},"content":"        // the following two responses are given by student4InCourse1 as a representative of his team"},{"lineNumber":1196,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra1GivenByTeam \u003d getResponseFromDatabase(\"response1ForQ1S2C1\");"},{"lineNumber":1197,"author":{"gitId":"-"},"content":"        // update the response\u0027s giver to the team name"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"        fra1GivenByTeam \u003d frLogic.updateFeedbackResponseCascade("},{"lineNumber":1199,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.updateOptionsBuilder(fra1GivenByTeam.getId())"},{"lineNumber":1200,"author":{"gitId":"-"},"content":"                        .withGiver(student4InCourse1.getTeam())"},{"lineNumber":1201,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1202,"author":{"gitId":"-"},"content":"        frcLogic.createFeedbackResponseComment("},{"lineNumber":1203,"author":{"gitId":"-"},"content":"                FeedbackResponseCommentAttributes"},{"lineNumber":1204,"author":{"gitId":"-"},"content":"                        .builder()"},{"lineNumber":1205,"author":{"gitId":"-"},"content":"                        .withCourseId(fra1GivenByTeam.getCourseId())"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"                        .withFeedbackSessionName(fra1GivenByTeam.getFeedbackSessionName())"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"                        .withCommentGiver(instructor1OfCourse1.getEmail())"},{"lineNumber":1208,"author":{"gitId":"-"},"content":"                        .withCommentText(\"Comment 1\")"},{"lineNumber":1209,"author":{"gitId":"-"},"content":"                        .withFeedbackQuestionId(fra1GivenByTeam.getFeedbackQuestionId())"},{"lineNumber":1210,"author":{"gitId":"-"},"content":"                        .withFeedbackResponseId(fra1GivenByTeam.getId())"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"                        .withGiverSection(fra1GivenByTeam.getGiverSection())"},{"lineNumber":1212,"author":{"gitId":"-"},"content":"                        .withReceiverSection(fra1GivenByTeam.getRecipientSection())"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"                        .withCommentFromFeedbackParticipant(false)"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"                        .withCommentGiverType(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":1215,"author":{"gitId":"-"},"content":"                        .withVisibilityFollowingFeedbackQuestion(false)"},{"lineNumber":1216,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1217,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes fra2GivenByTeam \u003d getResponseFromDatabase(\"response1GracePeriodFeedback\");"},{"lineNumber":1218,"author":{"gitId":"-"},"content":"        // update the response\u0027s giver to the team name"},{"lineNumber":1219,"author":{"gitId":"-"},"content":"        fra2GivenByTeam \u003d frLogic.updateFeedbackResponseCascade("},{"lineNumber":1220,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.updateOptionsBuilder(fra2GivenByTeam.getId())"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"                        .withGiver(student4InCourse1.getTeam())"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1223,"author":{"gitId":"-"},"content":"        frcLogic.createFeedbackResponseComment("},{"lineNumber":1224,"author":{"gitId":"-"},"content":"                FeedbackResponseCommentAttributes"},{"lineNumber":1225,"author":{"gitId":"-"},"content":"                        .builder()"},{"lineNumber":1226,"author":{"gitId":"-"},"content":"                        .withCourseId(fra2GivenByTeam.getCourseId())"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"                        .withFeedbackSessionName(fra2GivenByTeam.getFeedbackSessionName())"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"                        .withCommentGiver(instructor1OfCourse1.getEmail())"},{"lineNumber":1229,"author":{"gitId":"-"},"content":"                        .withCommentText(\"Comment 2\")"},{"lineNumber":1230,"author":{"gitId":"-"},"content":"                        .withFeedbackQuestionId(fra2GivenByTeam.getFeedbackQuestionId())"},{"lineNumber":1231,"author":{"gitId":"-"},"content":"                        .withFeedbackResponseId(fra2GivenByTeam.getId())"},{"lineNumber":1232,"author":{"gitId":"-"},"content":"                        .withGiverSection(fra2GivenByTeam.getGiverSection())"},{"lineNumber":1233,"author":{"gitId":"-"},"content":"                        .withReceiverSection(fra2GivenByTeam.getRecipientSection())"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"                        .withCommentFromFeedbackParticipant(false)"},{"lineNumber":1235,"author":{"gitId":"-"},"content":"                        .withCommentGiverType(FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"                        .withVisibilityFollowingFeedbackQuestion(false)"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"                        .build());"},{"lineNumber":1238,"author":{"gitId":"-"},"content":""},{"lineNumber":1239,"author":{"gitId":"-"},"content":"        String teamName \u003d student4InCourse1.getTeam();"},{"lineNumber":1240,"author":{"gitId":"-"},"content":"        assertEquals(teamName, fra1GivenByTeam.getGiver());"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"        assertEquals(teamName, fra2GivenByTeam.getGiver());"},{"lineNumber":1242,"author":{"gitId":"-"},"content":""},{"lineNumber":1243,"author":{"gitId":"-"},"content":"        // both responses got some comments"},{"lineNumber":1244,"author":{"gitId":"-"},"content":"        assertFalse(frcLogic.getFeedbackResponseCommentForResponse(fra1GivenByTeam.getId()).isEmpty());"},{"lineNumber":1245,"author":{"gitId":"-"},"content":"        assertFalse(frcLogic.getFeedbackResponseCommentForResponse(fra2GivenByTeam.getId()).isEmpty());"},{"lineNumber":1246,"author":{"gitId":"-"},"content":""},{"lineNumber":1247,"author":{"gitId":"-"},"content":"        frLogic.deleteFeedbackResponsesInvolvedEntityOfCourseCascade(fra1GivenByTeam.getCourseId(), teamName);"},{"lineNumber":1248,"author":{"gitId":"-"},"content":""},{"lineNumber":1249,"author":{"gitId":"-"},"content":"        // responses received by the team should be deleted"},{"lineNumber":1250,"author":{"gitId":"-"},"content":"        assertNull(frLogic.getFeedbackResponse(fra1GivenByTeam.getId()));"},{"lineNumber":1251,"author":{"gitId":"-"},"content":"        assertNull(frLogic.getFeedbackResponse(fra2GivenByTeam.getId()));"},{"lineNumber":1252,"author":{"gitId":"-"},"content":""},{"lineNumber":1253,"author":{"gitId":"-"},"content":"        // their associated comments should be deleted"},{"lineNumber":1254,"author":{"gitId":"-"},"content":"        assertTrue(frcLogic.getFeedbackResponseCommentForResponse(fra1GivenByTeam.getId()).isEmpty());"},{"lineNumber":1255,"author":{"gitId":"-"},"content":"        assertTrue(frcLogic.getFeedbackResponseCommentForResponse(fra2GivenByTeam.getId()).isEmpty());"},{"lineNumber":1256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1257,"author":{"gitId":"-"},"content":""},{"lineNumber":1258,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1259,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForUser_studentSpecificQuestion_shouldHaveCorrectResponsesFiltered() {"},{"lineNumber":1260,"author":{"gitId":"-"},"content":"        // extra test data used on top of typical data bundle"},{"lineNumber":1261,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(loadDataBundle(\"/SpecialCharacterTest.json\"));"},{"lineNumber":1262,"author":{"gitId":"-"},"content":""},{"lineNumber":1263,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes question \u003d fqLogic.getFeedbackQuestion("},{"lineNumber":1264,"author":{"gitId":"-"},"content":"                \"First Session\", \"FQLogicPCT.CS2104\", 1);"},{"lineNumber":1265,"author":{"gitId":"-"},"content":""},{"lineNumber":1266,"author":{"gitId":"-"},"content":"        // Alice will see 3 responses"},{"lineNumber":1267,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1268,"author":{"gitId":"-"},"content":"                \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.alice.b@gmail.tmt\","},{"lineNumber":1269,"author":{"gitId":"-"},"content":"                false, question.getId());"},{"lineNumber":1270,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1271,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responseForQuestion \u003d"},{"lineNumber":1272,"author":{"gitId":"-"},"content":"                bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1273,"author":{"gitId":"-"},"content":"        assertEquals(3, responseForQuestion.size());"},{"lineNumber":1274,"author":{"gitId":"-"},"content":""},{"lineNumber":1275,"author":{"gitId":"-"},"content":"        // Benny will see 3 responses"},{"lineNumber":1276,"author":{"gitId":"-"},"content":"        bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1277,"author":{"gitId":"-"},"content":"                \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.benny.c@gmail.tmt\","},{"lineNumber":1278,"author":{"gitId":"-"},"content":"                false, question.getId());"},{"lineNumber":1279,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1280,"author":{"gitId":"-"},"content":"        responseForQuestion \u003d bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"        assertEquals(3, responseForQuestion.size());"},{"lineNumber":1282,"author":{"gitId":"-"},"content":""},{"lineNumber":1283,"author":{"gitId":"-"},"content":"        // Charlie will see 2 responses"},{"lineNumber":1284,"author":{"gitId":"-"},"content":"        bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1285,"author":{"gitId":"-"},"content":"                \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.charlie.d@gmail.tmt\","},{"lineNumber":1286,"author":{"gitId":"-"},"content":"                false, question.getId());"},{"lineNumber":1287,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1288,"author":{"gitId":"-"},"content":"        responseForQuestion \u003d bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1289,"author":{"gitId":"-"},"content":"        assertEquals(2, responseForQuestion.size());"},{"lineNumber":1290,"author":{"gitId":"-"},"content":""},{"lineNumber":1291,"author":{"gitId":"-"},"content":"        // Danny will see 2 responses"},{"lineNumber":1292,"author":{"gitId":"-"},"content":"        bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1293,"author":{"gitId":"-"},"content":"                \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.danny.e@gmail.tmt\","},{"lineNumber":1294,"author":{"gitId":"-"},"content":"                false, question.getId());"},{"lineNumber":1295,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1296,"author":{"gitId":"-"},"content":"        responseForQuestion \u003d bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1297,"author":{"gitId":"-"},"content":"        assertEquals(2, responseForQuestion.size());"},{"lineNumber":1298,"author":{"gitId":"-"},"content":""},{"lineNumber":1299,"author":{"gitId":"-"},"content":"        // Emily will see 1 response"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"        bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1301,"author":{"gitId":"-"},"content":"                \"First Session\", \"FQLogicPCT.CS2104\", \"FQLogicPCT.emily.f@gmail.tmt\","},{"lineNumber":1302,"author":{"gitId":"-"},"content":"                false, question.getId());"},{"lineNumber":1303,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1304,"author":{"gitId":"-"},"content":"        responseForQuestion \u003d bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1305,"author":{"gitId":"-"},"content":"        assertEquals(1, responseForQuestion.size());"},{"lineNumber":1306,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1307,"author":{"gitId":"-"},"content":""},{"lineNumber":1308,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1309,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForUser_studentAllQuestions_shouldGenerateCorrectBundle() {"},{"lineNumber":1310,"author":{"gitId":"-"},"content":"        DataBundle responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"},{"lineNumber":1311,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseBundle);"},{"lineNumber":1312,"author":{"gitId":"-"},"content":""},{"lineNumber":1313,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes session \u003d responseBundle.feedbackSessions.get(\"standard.session\");"},{"lineNumber":1314,"author":{"gitId":"-"},"content":""},{"lineNumber":1315,"author":{"gitId":"-"},"content":"        // Test result bundle for student1"},{"lineNumber":1316,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d responseBundle.students.get(\"student1InCourse1\");"},{"lineNumber":1317,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1318,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), student.getEmail(),"},{"lineNumber":1319,"author":{"gitId":"-"},"content":"                false, null);"},{"lineNumber":1320,"author":{"gitId":"-"},"content":""},{"lineNumber":1321,"author":{"gitId":"-"},"content":"        // Student can see responses: q1r1, q2r1,3, q3r1, qr4r2-3, q5r1, q7r1-2, q8r1-2"},{"lineNumber":1322,"author":{"gitId":"-"},"content":"        // We don\u0027t check the actual IDs as this is also implicitly tested"},{"lineNumber":1323,"author":{"gitId":"-"},"content":"        // later when checking the visibility table."},{"lineNumber":1324,"author":{"gitId":"-"},"content":"        int totalResponse \u003d 0;"},{"lineNumber":1325,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1326,"author":{"gitId":"-"},"content":"                : bundle.getQuestionResponseMap().entrySet()) {"},{"lineNumber":1327,"author":{"gitId":"-"},"content":"            totalResponse +\u003d entry.getValue().size();"},{"lineNumber":1328,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1329,"author":{"gitId":"-"},"content":"        int totalMissingResponse \u003d 0;"},{"lineNumber":1330,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1331,"author":{"gitId":"-"},"content":"                : bundle.getQuestionMissingResponseMap().entrySet()) {"},{"lineNumber":1332,"author":{"gitId":"-"},"content":"            totalMissingResponse +\u003d entry.getValue().size();"},{"lineNumber":1333,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1334,"author":{"gitId":"-"},"content":"        assertEquals(11, totalResponse);"},{"lineNumber":1335,"author":{"gitId":"-"},"content":"        // student should not see missing responses"},{"lineNumber":1336,"author":{"gitId":"-"},"content":"        assertEquals(0, totalMissingResponse);"},{"lineNumber":1337,"author":{"gitId":"-"},"content":"        // student cannot see q6 because there is no viewable response"},{"lineNumber":1338,"author":{"gitId":"-"},"content":"        assertEquals(7, bundle.getQuestionsMap().size());"},{"lineNumber":1339,"author":{"gitId":"-"},"content":"        assertEquals(7, bundle.getQuestionResponseMap().size());"},{"lineNumber":1340,"author":{"gitId":"-"},"content":"        assertEquals(7, bundle.getQuestionMissingResponseMap().size());"},{"lineNumber":1341,"author":{"gitId":"-"},"content":""},{"lineNumber":1342,"author":{"gitId":"-"},"content":"        // Test the generated response visibilityTable for userNames."},{"lineNumber":1343,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseGiverVisibilityTable \u003d bundle.getResponseGiverVisibilityTable();"},{"lineNumber":1344,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn1.resp1\", responseBundle)));"},{"lineNumber":1345,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp1\", responseBundle)));"},{"lineNumber":1346,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp3\", responseBundle)));"},{"lineNumber":1347,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1348,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn4.resp2\", responseBundle)));"},{"lineNumber":1349,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn4.resp3\", responseBundle)));"},{"lineNumber":1350,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn5.resp1\", responseBundle)));"},{"lineNumber":1351,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn7.resp1\", responseBundle)));"},{"lineNumber":1352,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn7.resp2\", responseBundle)));"},{"lineNumber":1353,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn8.resp1\", responseBundle)));"},{"lineNumber":1354,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn8.resp2\", responseBundle)));"},{"lineNumber":1355,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse, responseGiverVisibilityTable.size());"},{"lineNumber":1356,"author":{"gitId":"-"},"content":""},{"lineNumber":1357,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseRecipientVisibilityTable \u003d bundle.getResponseRecipientVisibilityTable();"},{"lineNumber":1358,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn1.resp1\", responseBundle)));"},{"lineNumber":1359,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp1\", responseBundle)));"},{"lineNumber":1360,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp3\", responseBundle)));"},{"lineNumber":1361,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1362,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn4.resp2\", responseBundle)));"},{"lineNumber":1363,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn4.resp3\", responseBundle)));"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn5.resp1\", responseBundle)));"},{"lineNumber":1365,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn7.resp1\", responseBundle)));"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn7.resp2\", responseBundle)));"},{"lineNumber":1367,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn8.resp1\", responseBundle)));"},{"lineNumber":1368,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn8.resp2\", responseBundle)));"},{"lineNumber":1369,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse, responseRecipientVisibilityTable.size());"},{"lineNumber":1370,"author":{"gitId":"-"},"content":""},{"lineNumber":1371,"author":{"gitId":"-"},"content":"        // no entry in comment visibility table"},{"lineNumber":1372,"author":{"gitId":"-"},"content":"        Map\u003cLong, Boolean\u003e commentGiverVisibilityTable \u003d bundle.getCommentGiverVisibilityTable();"},{"lineNumber":1373,"author":{"gitId":"-"},"content":"        assertEquals(0, commentGiverVisibilityTable.size());"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1375,"author":{"gitId":"-"},"content":""},{"lineNumber":1376,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1377,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForUser_instructor_shouldGenerateCorrectBundle() {"},{"lineNumber":1378,"author":{"gitId":"-"},"content":"        DataBundle responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"},{"lineNumber":1379,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseBundle);"},{"lineNumber":1380,"author":{"gitId":"-"},"content":""},{"lineNumber":1381,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes session \u003d responseBundle.feedbackSessions.get(\"standard.session\");"},{"lineNumber":1382,"author":{"gitId":"-"},"content":""},{"lineNumber":1383,"author":{"gitId":"-"},"content":"        // Test result bundle for instructor1"},{"lineNumber":1384,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d responseBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1385,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1386,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1387,"author":{"gitId":"-"},"content":"                true, null);"},{"lineNumber":1388,"author":{"gitId":"-"},"content":""},{"lineNumber":1389,"author":{"gitId":"-"},"content":"        // Instructor can see responses: q3r1, q6r1"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"        // We don\u0027t check the actual IDs as this is also implicitly tested"},{"lineNumber":1391,"author":{"gitId":"-"},"content":"        // later when checking the visibility table."},{"lineNumber":1392,"author":{"gitId":"-"},"content":"        int totalResponse \u003d 0;"},{"lineNumber":1393,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1394,"author":{"gitId":"-"},"content":"                : bundle.getQuestionResponseMap().entrySet()) {"},{"lineNumber":1395,"author":{"gitId":"-"},"content":"            totalResponse +\u003d entry.getValue().size();"},{"lineNumber":1396,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1397,"author":{"gitId":"-"},"content":"        int totalMissingResponse \u003d 0;"},{"lineNumber":1398,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1399,"author":{"gitId":"-"},"content":"                : bundle.getQuestionMissingResponseMap().entrySet()) {"},{"lineNumber":1400,"author":{"gitId":"-"},"content":"            totalMissingResponse +\u003d entry.getValue().size();"},{"lineNumber":1401,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1402,"author":{"gitId":"-"},"content":"        assertEquals(2, totalResponse);"},{"lineNumber":1403,"author":{"gitId":"-"},"content":"        // instructor should not see missing responses"},{"lineNumber":1404,"author":{"gitId":"-"},"content":"        assertEquals(0, totalMissingResponse);"},{"lineNumber":1405,"author":{"gitId":"-"},"content":""},{"lineNumber":1406,"author":{"gitId":"-"},"content":"        assertEquals(2, bundle.getQuestionsMap().size());"},{"lineNumber":1407,"author":{"gitId":"-"},"content":"        assertEquals(2, bundle.getQuestionResponseMap().size());"},{"lineNumber":1408,"author":{"gitId":"-"},"content":"        assertEquals(2, bundle.getQuestionMissingResponseMap().size());"},{"lineNumber":1409,"author":{"gitId":"-"},"content":""},{"lineNumber":1410,"author":{"gitId":"-"},"content":"        // Test the generated response visibilityTable for userNames."},{"lineNumber":1411,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseGiverVisibilityTable \u003d bundle.getResponseGiverVisibilityTable();"},{"lineNumber":1412,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1413,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn6.resp1\", responseBundle)));"},{"lineNumber":1414,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse, responseGiverVisibilityTable.size());"},{"lineNumber":1415,"author":{"gitId":"-"},"content":""},{"lineNumber":1416,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseRecipientVisibilityTable \u003d bundle.getResponseRecipientVisibilityTable();"},{"lineNumber":1417,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1418,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn6.resp1\", responseBundle)));"},{"lineNumber":1419,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse, responseRecipientVisibilityTable.size());"},{"lineNumber":1420,"author":{"gitId":"-"},"content":""},{"lineNumber":1421,"author":{"gitId":"-"},"content":"        // no entry in comment visibility table"},{"lineNumber":1422,"author":{"gitId":"-"},"content":"        Map\u003cLong, Boolean\u003e commentGiverVisibilityTable \u003d bundle.getCommentGiverVisibilityTable();"},{"lineNumber":1423,"author":{"gitId":"-"},"content":"        assertEquals(0, commentGiverVisibilityTable.size());"},{"lineNumber":1424,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1425,"author":{"gitId":"-"},"content":""},{"lineNumber":1426,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1427,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForCourse_specificQuestion_shouldHaveCorrectResponsesFiltered() {"},{"lineNumber":1428,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq \u003d getQuestionFromDatabase(\"qn3InSession1InCourse1\");"},{"lineNumber":1429,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d dataBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1430,"author":{"gitId":"-"},"content":""},{"lineNumber":1431,"author":{"gitId":"-"},"content":"        // no section specified"},{"lineNumber":1432,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForCourse("},{"lineNumber":1433,"author":{"gitId":"-"},"content":"                fq.getFeedbackSessionName(), fq.getCourseId(), instructor.getEmail(),"},{"lineNumber":1434,"author":{"gitId":"-"},"content":"                fq.getId(), null, FeedbackResultFetchType.BOTH);"},{"lineNumber":1435,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1436,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responseForQuestion \u003d"},{"lineNumber":1437,"author":{"gitId":"-"},"content":"                bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1438,"author":{"gitId":"-"},"content":"        assertEquals(1, responseForQuestion.size());"},{"lineNumber":1439,"author":{"gitId":"-"},"content":""},{"lineNumber":1440,"author":{"gitId":"-"},"content":"        // section specified"},{"lineNumber":1441,"author":{"gitId":"-"},"content":"        fq \u003d getQuestionFromDatabase(\"qn2InSession1InCourse1\");"},{"lineNumber":1442,"author":{"gitId":"-"},"content":"        bundle \u003d frLogic.getSessionResultsForCourse("},{"lineNumber":1443,"author":{"gitId":"-"},"content":"                fq.getFeedbackSessionName(), fq.getCourseId(), instructor.getEmail(),"},{"lineNumber":1444,"author":{"gitId":"-"},"content":"                fq.getId(), \"Section 1\", FeedbackResultFetchType.BOTH);"},{"lineNumber":1445,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1446,"author":{"gitId":"-"},"content":"        responseForQuestion \u003d bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1447,"author":{"gitId":"-"},"content":"        assertEquals(3, responseForQuestion.size());"},{"lineNumber":1448,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1449,"author":{"gitId":"-"},"content":""},{"lineNumber":1450,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1451,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForCourse_allQuestions_shouldGenerateCorrectBundle() {"},{"lineNumber":1452,"author":{"gitId":"-"},"content":"        DataBundle responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"},{"lineNumber":1453,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseBundle);"},{"lineNumber":1454,"author":{"gitId":"-"},"content":""},{"lineNumber":1455,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes session \u003d responseBundle.feedbackSessions.get(\"standard.session\");"},{"lineNumber":1456,"author":{"gitId":"-"},"content":""},{"lineNumber":1457,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d responseBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1458,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForCourse("},{"lineNumber":1459,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1460,"author":{"gitId":"-"},"content":"                null, null, FeedbackResultFetchType.BOTH);"},{"lineNumber":1461,"author":{"gitId":"-"},"content":""},{"lineNumber":1462,"author":{"gitId":"-"},"content":"        // Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1"},{"lineNumber":1463,"author":{"gitId":"-"},"content":"        int totalResponse \u003d 0;"},{"lineNumber":1464,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1465,"author":{"gitId":"-"},"content":"                : bundle.getQuestionResponseMap().entrySet()) {"},{"lineNumber":1466,"author":{"gitId":"-"},"content":"            totalResponse +\u003d entry.getValue().size();"},{"lineNumber":1467,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1468,"author":{"gitId":"-"},"content":"        int totalMissingResponse \u003d 0;"},{"lineNumber":1469,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1470,"author":{"gitId":"-"},"content":"                : bundle.getQuestionMissingResponseMap().entrySet()) {"},{"lineNumber":1471,"author":{"gitId":"-"},"content":"            totalMissingResponse +\u003d entry.getValue().size();"},{"lineNumber":1472,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1473,"author":{"gitId":"-"},"content":"        assertEquals(10, totalResponse);"},{"lineNumber":1474,"author":{"gitId":"-"},"content":"        assertEquals(4, totalMissingResponse);"},{"lineNumber":1475,"author":{"gitId":"-"},"content":"        // Instructor should still see all questions"},{"lineNumber":1476,"author":{"gitId":"-"},"content":"        assertEquals(8, bundle.getQuestionsMap().size());"},{"lineNumber":1477,"author":{"gitId":"-"},"content":"        assertEquals(8, bundle.getQuestionResponseMap().size());"},{"lineNumber":1478,"author":{"gitId":"-"},"content":"        assertEquals(8, bundle.getQuestionMissingResponseMap().size());"},{"lineNumber":1479,"author":{"gitId":"-"},"content":""},{"lineNumber":1480,"author":{"gitId":"-"},"content":"        // Test the generated response visibilityTable for userNames."},{"lineNumber":1481,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseGiverVisibilityTable \u003d bundle.getResponseGiverVisibilityTable();"},{"lineNumber":1482,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp1\", responseBundle)));"},{"lineNumber":1483,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp2\", responseBundle)));"},{"lineNumber":1484,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp3\", responseBundle)));"},{"lineNumber":1485,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1486,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn3.resp2\", responseBundle)));"},{"lineNumber":1487,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn4.resp1\", responseBundle)));"},{"lineNumber":1488,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn4.resp2\", responseBundle)));"},{"lineNumber":1489,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn4.resp3\", responseBundle)));"},{"lineNumber":1490,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn5.resp1\", responseBundle)));"},{"lineNumber":1491,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn6.resp1\", responseBundle)));"},{"lineNumber":1492,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse + totalMissingResponse, responseGiverVisibilityTable.size());"},{"lineNumber":1493,"author":{"gitId":"-"},"content":""},{"lineNumber":1494,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseRecipientVisibilityTable \u003d bundle.getResponseRecipientVisibilityTable();"},{"lineNumber":1495,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp1\", responseBundle)));"},{"lineNumber":1496,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp2\", responseBundle)));"},{"lineNumber":1497,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp3\", responseBundle)));"},{"lineNumber":1498,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1499,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn3.resp2\", responseBundle)));"},{"lineNumber":1500,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn4.resp1\", responseBundle)));"},{"lineNumber":1501,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn4.resp2\", responseBundle)));"},{"lineNumber":1502,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn4.resp3\", responseBundle)));"},{"lineNumber":1503,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn5.resp1\", responseBundle)));"},{"lineNumber":1504,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn6.resp1\", responseBundle)));"},{"lineNumber":1505,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse + totalMissingResponse, responseRecipientVisibilityTable.size());"},{"lineNumber":1506,"author":{"gitId":"-"},"content":""},{"lineNumber":1507,"author":{"gitId":"-"},"content":"        // no entry in comment visibility table"},{"lineNumber":1508,"author":{"gitId":"-"},"content":"        Map\u003cLong, Boolean\u003e commentGiverVisibilityTable \u003d bundle.getCommentGiverVisibilityTable();"},{"lineNumber":1509,"author":{"gitId":"-"},"content":"        assertEquals(0, commentGiverVisibilityTable.size());"},{"lineNumber":1510,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1511,"author":{"gitId":"-"},"content":""},{"lineNumber":1512,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1513,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForCourse_allQuestionsSpecificSection_shouldGenerateCorrectBundle() {"},{"lineNumber":1514,"author":{"gitId":"-"},"content":"        DataBundle responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"},{"lineNumber":1515,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseBundle);"},{"lineNumber":1516,"author":{"gitId":"-"},"content":""},{"lineNumber":1517,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes session \u003d responseBundle.feedbackSessions.get(\"standard.session\");"},{"lineNumber":1518,"author":{"gitId":"-"},"content":""},{"lineNumber":1519,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d responseBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1520,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForCourse("},{"lineNumber":1521,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1522,"author":{"gitId":"-"},"content":"                null, \"Section A\", FeedbackResultFetchType.BOTH);"},{"lineNumber":1523,"author":{"gitId":"-"},"content":""},{"lineNumber":1524,"author":{"gitId":"-"},"content":"        // Instructor can see responses: q2r1-3, q3r1-2, q4r1-3, q5r1, q6r1"},{"lineNumber":1525,"author":{"gitId":"-"},"content":"        // after filtering by section, the number of responses seen by instructor will differ."},{"lineNumber":1526,"author":{"gitId":"-"},"content":"        // Responses viewed by instructor after filtering: q2r1-3, q3r1, q4r2-3, q5r1"},{"lineNumber":1527,"author":{"gitId":"-"},"content":"        int totalResponse \u003d 0;"},{"lineNumber":1528,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1529,"author":{"gitId":"-"},"content":"                : bundle.getQuestionResponseMap().entrySet()) {"},{"lineNumber":1530,"author":{"gitId":"-"},"content":"            totalResponse +\u003d entry.getValue().size();"},{"lineNumber":1531,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1532,"author":{"gitId":"-"},"content":"        int totalMissingResponse \u003d 0;"},{"lineNumber":1533,"author":{"gitId":"-"},"content":"        for (Map.Entry\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e entry"},{"lineNumber":1534,"author":{"gitId":"-"},"content":"                : bundle.getQuestionMissingResponseMap().entrySet()) {"},{"lineNumber":1535,"author":{"gitId":"-"},"content":"            totalMissingResponse +\u003d entry.getValue().size();"},{"lineNumber":1536,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1537,"author":{"gitId":"-"},"content":"        assertEquals(7, totalResponse);"},{"lineNumber":1538,"author":{"gitId":"-"},"content":"        assertEquals(0, totalMissingResponse);"},{"lineNumber":1539,"author":{"gitId":"-"},"content":"        // Instructor should still see all questions"},{"lineNumber":1540,"author":{"gitId":"-"},"content":"        assertEquals(8, bundle.getQuestionsMap().size());"},{"lineNumber":1541,"author":{"gitId":"-"},"content":"        assertEquals(8, bundle.getQuestionResponseMap().size());"},{"lineNumber":1542,"author":{"gitId":"-"},"content":"        assertEquals(8, bundle.getQuestionMissingResponseMap().size());"},{"lineNumber":1543,"author":{"gitId":"-"},"content":""},{"lineNumber":1544,"author":{"gitId":"-"},"content":"        // Test the generated response visibilityTable for userNames."},{"lineNumber":1545,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseGiverVisibilityTable \u003d bundle.getResponseGiverVisibilityTable();"},{"lineNumber":1546,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1547,"author":{"gitId":"-"},"content":"        assertTrue(responseGiverVisibilityTable.get(getResponseId(\"qn4.resp3\", responseBundle)));"},{"lineNumber":1548,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp3\", responseBundle)));"},{"lineNumber":1549,"author":{"gitId":"-"},"content":"        assertFalse(responseGiverVisibilityTable.get(getResponseId(\"qn2.resp1\", responseBundle)));"},{"lineNumber":1550,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse + totalMissingResponse, responseGiverVisibilityTable.size());"},{"lineNumber":1551,"author":{"gitId":"-"},"content":""},{"lineNumber":1552,"author":{"gitId":"-"},"content":"        Map\u003cString, Boolean\u003e responseRecipientVisibilityTable \u003d bundle.getResponseRecipientVisibilityTable();"},{"lineNumber":1553,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn3.resp1\", responseBundle)));"},{"lineNumber":1554,"author":{"gitId":"-"},"content":"        assertTrue(responseRecipientVisibilityTable.get(getResponseId(\"qn4.resp3\", responseBundle)));"},{"lineNumber":1555,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp3\", responseBundle)));"},{"lineNumber":1556,"author":{"gitId":"-"},"content":"        assertFalse(responseRecipientVisibilityTable.get(getResponseId(\"qn2.resp1\", responseBundle)));"},{"lineNumber":1557,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse + totalMissingResponse, responseGiverVisibilityTable.size());"},{"lineNumber":1558,"author":{"gitId":"-"},"content":"        assertEquals(totalResponse + totalMissingResponse, responseRecipientVisibilityTable.size());"},{"lineNumber":1559,"author":{"gitId":"-"},"content":""},{"lineNumber":1560,"author":{"gitId":"-"},"content":"        // no entry in comment visibility table"},{"lineNumber":1561,"author":{"gitId":"-"},"content":"        Map\u003cLong, Boolean\u003e commentGiverVisibilityTable \u003d bundle.getCommentGiverVisibilityTable();"},{"lineNumber":1562,"author":{"gitId":"-"},"content":"        assertEquals(0, commentGiverVisibilityTable.size());"},{"lineNumber":1563,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1564,"author":{"gitId":"-"},"content":""},{"lineNumber":1565,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1566,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForCourse_responseFetchByGiverOrReceiverOnly_shouldGenerateCorrectBundle() {"},{"lineNumber":1567,"author":{"gitId":"-"},"content":"        var responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"},{"lineNumber":1568,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseBundle);"},{"lineNumber":1569,"author":{"gitId":"-"},"content":""},{"lineNumber":1570,"author":{"gitId":"-"},"content":"        var session \u003d responseBundle.feedbackSessions.get(\"standard.session\");"},{"lineNumber":1571,"author":{"gitId":"-"},"content":""},{"lineNumber":1572,"author":{"gitId":"-"},"content":"        var instructor \u003d responseBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1573,"author":{"gitId":"-"},"content":"        var sectionToTest \u003d \"Section A\";"},{"lineNumber":1574,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e questionResponseMapByGiver \u003d frLogic.getSessionResultsForCourse("},{"lineNumber":1575,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1576,"author":{"gitId":"-"},"content":"                null, sectionToTest, FeedbackResultFetchType.GIVER)"},{"lineNumber":1577,"author":{"gitId":"-"},"content":"                .getQuestionResponseMap();"},{"lineNumber":1578,"author":{"gitId":"-"},"content":"        questionResponseMapByGiver.forEach((key, responses) -\u003e {"},{"lineNumber":1579,"author":{"gitId":"-"},"content":"            responses.forEach(resp -\u003e {"},{"lineNumber":1580,"author":{"gitId":"-"},"content":"                assertEquals(sectionToTest, resp.getGiverSection());"},{"lineNumber":1581,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":1582,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1583,"author":{"gitId":"-"},"content":""},{"lineNumber":1584,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e questionResponseMapByReceiver \u003d"},{"lineNumber":1585,"author":{"gitId":"-"},"content":"                frLogic.getSessionResultsForCourse("},{"lineNumber":1586,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1587,"author":{"gitId":"-"},"content":"                null, sectionToTest, FeedbackResultFetchType.RECEIVER)"},{"lineNumber":1588,"author":{"gitId":"-"},"content":"                .getQuestionResponseMap();"},{"lineNumber":1589,"author":{"gitId":"-"},"content":"        questionResponseMapByReceiver.forEach((key, responses) -\u003e {"},{"lineNumber":1590,"author":{"gitId":"-"},"content":"            responses.forEach(resp -\u003e {"},{"lineNumber":1591,"author":{"gitId":"-"},"content":"                assertEquals(sectionToTest, resp.getRecipientSection());"},{"lineNumber":1592,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":1593,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1594,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1595,"author":{"gitId":"-"},"content":""},{"lineNumber":1596,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1597,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForCourse_splitResponseFetchByGiverAndReceiver_shouldGenerateCorrectBundle() {"},{"lineNumber":1598,"author":{"gitId":"-"},"content":"        var responseBundle \u003d loadDataBundle(\"/FeedbackSessionResultsTest.json\");"},{"lineNumber":1599,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(responseBundle);"},{"lineNumber":1600,"author":{"gitId":"-"},"content":""},{"lineNumber":1601,"author":{"gitId":"-"},"content":"        FeedbackSessionAttributes session \u003d responseBundle.feedbackSessions.get(\"standard.session\");"},{"lineNumber":1602,"author":{"gitId":"-"},"content":""},{"lineNumber":1603,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d responseBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":1604,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e questionResponseMapFromMultiFetch \u003d"},{"lineNumber":1605,"author":{"gitId":"-"},"content":"                frLogic.getSessionResultsForCourse("},{"lineNumber":1606,"author":{"gitId":"-"},"content":"                        session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1607,"author":{"gitId":"-"},"content":"                        null, \"Section A\", FeedbackResultFetchType.GIVER).getQuestionResponseMap();"},{"lineNumber":1608,"author":{"gitId":"-"},"content":"        frLogic.getSessionResultsForCourse("},{"lineNumber":1609,"author":{"gitId":"-"},"content":"                session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1610,"author":{"gitId":"-"},"content":"                null, \"Section A\", FeedbackResultFetchType.RECEIVER)"},{"lineNumber":1611,"author":{"gitId":"-"},"content":"                .getQuestionResponseMap()"},{"lineNumber":1612,"author":{"gitId":"-"},"content":"                .forEach(questionResponseMapFromMultiFetch::putIfAbsent);"},{"lineNumber":1613,"author":{"gitId":"-"},"content":""},{"lineNumber":1614,"author":{"gitId":"-"},"content":"        // Equal to session result fetch by both type"},{"lineNumber":1615,"author":{"gitId":"-"},"content":"        Map\u003cString, List\u003cFeedbackResponseAttributes\u003e\u003e questionResponseMapFromFetchBoth \u003d"},{"lineNumber":1616,"author":{"gitId":"-"},"content":"                frLogic.getSessionResultsForCourse("},{"lineNumber":1617,"author":{"gitId":"-"},"content":"                        session.getFeedbackSessionName(), session.getCourseId(), instructor.getEmail(),"},{"lineNumber":1618,"author":{"gitId":"-"},"content":"                        null, \"Section A\", FeedbackResultFetchType.BOTH).getQuestionResponseMap();"},{"lineNumber":1619,"author":{"gitId":"-"},"content":""},{"lineNumber":1620,"author":{"gitId":"-"},"content":"        for (var entry : questionResponseMapFromFetchBoth.entrySet()) {"},{"lineNumber":1621,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e respFromFetchBoth \u003d entry.getValue();"},{"lineNumber":1622,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseAttributes\u003e respFromMultiFetch \u003d questionResponseMapFromMultiFetch.get(entry.getKey());"},{"lineNumber":1623,"author":{"gitId":"-"},"content":"            assertEquals(respFromFetchBoth.size(), respFromMultiFetch.size());"},{"lineNumber":1624,"author":{"gitId":"-"},"content":"            assertTrue(new HashSet\u003c\u003e(respFromMultiFetch).equals(new HashSet\u003c\u003e(respFromFetchBoth)));"},{"lineNumber":1625,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1626,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1627,"author":{"gitId":"-"},"content":""},{"lineNumber":1628,"author":{"gitId":"-"},"content":""},{"lineNumber":1629,"author":{"gitId":"-"},"content":"    // TODO: check for cases where a person is both a student and an instructor"},{"lineNumber":1630,"author":{"gitId":"-"},"content":""},{"lineNumber":1631,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":1632,"author":{"gitId":"-"},"content":"    public void testGetSessionResultsForUser_orphanResponseInDB_shouldStillHandleCorrectly() throws Exception {"},{"lineNumber":1633,"author":{"gitId":"-"},"content":"        dataBundle \u003d getTypicalDataBundle();"},{"lineNumber":1634,"author":{"gitId":"-"},"content":"        removeAndRestoreDataBundle(dataBundle);"},{"lineNumber":1635,"author":{"gitId":"-"},"content":""},{"lineNumber":1636,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes fq \u003d getQuestionFromDatabase(\"qn2InSession1InCourse1\");"},{"lineNumber":1637,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes existingResponse \u003d getResponseFromDatabase(dataBundle, \"response1ForQ2S1C1\");"},{"lineNumber":1638,"author":{"gitId":"-"},"content":"        // create a \"null\" response to simulate trying to get a null student\u0027s response"},{"lineNumber":1639,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes newResponse \u003d"},{"lineNumber":1640,"author":{"gitId":"-"},"content":"                FeedbackResponseAttributes.builder("},{"lineNumber":1641,"author":{"gitId":"-"},"content":"                        existingResponse.getFeedbackQuestionId(), existingResponse.getGiver(), \"nullRecipient@gmail.tmt\")"},{"lineNumber":1642,"author":{"gitId":"-"},"content":"                        .withFeedbackSessionName(existingResponse.getFeedbackSessionName())"},{"lineNumber":1643,"author":{"gitId":"-"},"content":"                        .withCourseId(\"nullCourse\")"},{"lineNumber":1644,"author":{"gitId":"-"},"content":"                        .withGiverSection(\"Section 1\")"},{"lineNumber":1645,"author":{"gitId":"-"},"content":"                        .withRecipientSection(\"Section 1\")"},{"lineNumber":1646,"author":{"gitId":"-"},"content":"                        .withResponseDetails(existingResponse.getResponseDetailsCopy())"},{"lineNumber":1647,"author":{"gitId":"-"},"content":"                        .build();"},{"lineNumber":1648,"author":{"gitId":"-"},"content":"        frLogic.createFeedbackResponse(newResponse);"},{"lineNumber":1649,"author":{"gitId":"-"},"content":"        StudentAttributes student \u003d dataBundle.students.get(\"student2InCourse1\");"},{"lineNumber":1650,"author":{"gitId":"-"},"content":""},{"lineNumber":1651,"author":{"gitId":"-"},"content":"        SessionResultsBundle bundle \u003d frLogic.getSessionResultsForUser("},{"lineNumber":1652,"author":{"gitId":"-"},"content":"                fq.getFeedbackSessionName(), fq.getCourseId(), student.getEmail(),"},{"lineNumber":1653,"author":{"gitId":"-"},"content":"                false, fq.getId());"},{"lineNumber":1654,"author":{"gitId":"-"},"content":"        assertEquals(1, bundle.getQuestionResponseMap().size());"},{"lineNumber":1655,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseAttributes\u003e responseForQuestion \u003d"},{"lineNumber":1656,"author":{"gitId":"-"},"content":"                bundle.getQuestionResponseMap().entrySet().iterator().next().getValue();"},{"lineNumber":1657,"author":{"gitId":"-"},"content":"        assertEquals(4, responseForQuestion.size());"},{"lineNumber":1658,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1659,"author":{"gitId":"-"},"content":""},{"lineNumber":1660,"author":{"gitId":"-"},"content":"    private FeedbackQuestionAttributes getQuestionFromDatabase(DataBundle dataBundle, String jsonId) {"},{"lineNumber":1661,"author":{"gitId":"-"},"content":"        FeedbackQuestionAttributes questionToGet \u003d dataBundle.feedbackQuestions.get(jsonId);"},{"lineNumber":1662,"author":{"gitId":"-"},"content":"        questionToGet \u003d fqLogic.getFeedbackQuestion(questionToGet.getFeedbackSessionName(),"},{"lineNumber":1663,"author":{"gitId":"-"},"content":"                questionToGet.getCourseId(),"},{"lineNumber":1664,"author":{"gitId":"-"},"content":"                questionToGet.getQuestionNumber());"},{"lineNumber":1665,"author":{"gitId":"-"},"content":""},{"lineNumber":1666,"author":{"gitId":"-"},"content":"        return questionToGet;"},{"lineNumber":1667,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1668,"author":{"gitId":"-"},"content":""},{"lineNumber":1669,"author":{"gitId":"-"},"content":"    private FeedbackQuestionAttributes getQuestionFromDatabase(String jsonId) {"},{"lineNumber":1670,"author":{"gitId":"-"},"content":"        return getQuestionFromDatabase(dataBundle, jsonId);"},{"lineNumber":1671,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1672,"author":{"gitId":"-"},"content":""},{"lineNumber":1673,"author":{"gitId":"-"},"content":"    private FeedbackResponseAttributes getResponseFromDatabase(DataBundle dataBundle, String jsonId) {"},{"lineNumber":1674,"author":{"gitId":"-"},"content":"        FeedbackResponseAttributes response \u003d dataBundle.feedbackResponses.get(jsonId);"},{"lineNumber":1675,"author":{"gitId":"-"},"content":""},{"lineNumber":1676,"author":{"gitId":"-"},"content":"        String qnId;"},{"lineNumber":1677,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":1678,"author":{"gitId":"-"},"content":"            int qnNumber \u003d Integer.parseInt(response.getFeedbackQuestionId());"},{"lineNumber":1679,"author":{"gitId":"-"},"content":"            qnId \u003d fqLogic.getFeedbackQuestion(response.getFeedbackSessionName(), response.getCourseId(), qnNumber).getId();"},{"lineNumber":1680,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":1681,"author":{"gitId":"-"},"content":"            qnId \u003d response.getFeedbackQuestionId();"},{"lineNumber":1682,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1683,"author":{"gitId":"-"},"content":""},{"lineNumber":1684,"author":{"gitId":"-"},"content":"        return frLogic.getFeedbackResponse("},{"lineNumber":1685,"author":{"gitId":"-"},"content":"                qnId, response.getGiver(), response.getRecipient());"},{"lineNumber":1686,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1687,"author":{"gitId":"-"},"content":""},{"lineNumber":1688,"author":{"gitId":"-"},"content":"    private FeedbackResponseAttributes getResponseFromDatabase(String jsonId) {"},{"lineNumber":1689,"author":{"gitId":"-"},"content":"        return getResponseFromDatabase(dataBundle, jsonId);"},{"lineNumber":1690,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1691,"author":{"gitId":"-"},"content":""},{"lineNumber":1692,"author":{"gitId":"-"},"content":"    private String getResponseId(String jsonId, DataBundle bundle) {"},{"lineNumber":1693,"author":{"gitId":"-"},"content":"        return getResponseFromDatabase(bundle, jsonId).getId();"},{"lineNumber":1694,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1695,"author":{"gitId":"-"},"content":""},{"lineNumber":1696,"author":{"gitId":"-"},"content":"    private List\u003cFeedbackResponseCommentAttributes\u003e getFeedbackResponseCommentsForResponsesFromDatabase("},{"lineNumber":1697,"author":{"gitId":"-"},"content":"            Set\u003cString\u003e responseIds) {"},{"lineNumber":1698,"author":{"gitId":"-"},"content":"        List\u003cFeedbackResponseCommentAttributes\u003e responseComments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":1699,"author":{"gitId":"-"},"content":"        for (String id : responseIds) {"},{"lineNumber":1700,"author":{"gitId":"-"},"content":"            List\u003cFeedbackResponseCommentAttributes\u003e responseCommentsForResponse \u003d"},{"lineNumber":1701,"author":{"gitId":"-"},"content":"                    frcLogic.getFeedbackResponseCommentForResponse(id);"},{"lineNumber":1702,"author":{"gitId":"-"},"content":"            responseComments.addAll(responseCommentsForResponse);"},{"lineNumber":1703,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":1704,"author":{"gitId":"-"},"content":"        return responseComments;"},{"lineNumber":1705,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1706,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":67,"-":1639}},{"path":"src/test/java/teammates/sqllogic/core/AccountsLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Test;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.AccountsDb;"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Account;"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.ReadNotification;"},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":" * SUT: {@link AccountsLogic}."},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"public class AccountsLogicTest extends BaseTestCase {"},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"    private AccountsLogic accountsLogic \u003d AccountsLogic.inst();"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"    private AccountsDb accountsDb;"},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsLogic notificationsLogic;"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"    @BeforeMethod"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"    public void setUpMethod() {"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"        accountsDb \u003d mock(AccountsDb.class);"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"        notificationsLogic \u003d mock(NotificationsLogic.class);"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":"        accountsLogic.initLogicDependencies(accountsDb, notificationsLogic);"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateReadNotifications_shouldReturnCorrectReadNotificationId_success()"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotification();"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":"        List\u003cUUID\u003e readNotificationIds \u003d"},{"lineNumber":56,"author":{"gitId":"hhdqirui"},"content":"                accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime());"},{"lineNumber":57,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":"        verify(accountsDb, times(1)).getAccountByGoogleId(googleId);"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"        verify(notificationsLogic, times(1)).getNotification(notificationId);"},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(1, readNotificationIds.size());"},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(notificationId, readNotificationIds.get(0));"},{"lineNumber":63,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":65,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateReadNotifications_shouldAddReadNotificationToAccount_success()"},{"lineNumber":67,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":68,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":69,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotification();"},{"lineNumber":70,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":71,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":74,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":75,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":76,"author":{"gitId":"hhdqirui"},"content":"        accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime());"},{"lineNumber":77,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":78,"author":{"gitId":"hhdqirui"},"content":"        verify(accountsDb, times(1)).getAccountByGoogleId(googleId);"},{"lineNumber":79,"author":{"gitId":"hhdqirui"},"content":"        verify(notificationsLogic, times(1)).getNotification(notificationId);"},{"lineNumber":80,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":81,"author":{"gitId":"hhdqirui"},"content":"        List\u003cReadNotification\u003e accountReadNotifications \u003d account.getReadNotifications();"},{"lineNumber":82,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(1, accountReadNotifications.size());"},{"lineNumber":83,"author":{"gitId":"hhdqirui"},"content":"        ReadNotification readNotification \u003d accountReadNotifications.get(0);"},{"lineNumber":84,"author":{"gitId":"hhdqirui"},"content":"        assertSame(account, readNotification.getAccount());"},{"lineNumber":85,"author":{"gitId":"hhdqirui"},"content":"        assertSame(notification, readNotification.getNotification());"},{"lineNumber":86,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":88,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateReadNotifications_accountDoesNotExist_throwEntityDoesNotExistException() {"},{"lineNumber":90,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotification();"},{"lineNumber":92,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":93,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(null);"},{"lineNumber":96,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":97,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":98,"author":{"gitId":"hhdqirui"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":99,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime()));"},{"lineNumber":100,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"Trying to update the read notifications of a non-existent account.\", ex.getMessage());"},{"lineNumber":101,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":103,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateReadNotifications_notificationDoesNotExist_throwEntityDoesNotExistException() {"},{"lineNumber":105,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":106,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotification();"},{"lineNumber":107,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":108,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":109,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":110,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":111,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(null);"},{"lineNumber":112,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":113,"author":{"gitId":"hhdqirui"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":114,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime()));"},{"lineNumber":115,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"Trying to mark as read a notification that does not exist.\", ex.getMessage());"},{"lineNumber":116,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":118,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateReadNotifications_markExpiredNotificationAsRead_throwInvalidParametersException() {"},{"lineNumber":120,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":121,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotification();"},{"lineNumber":122,"author":{"gitId":"hhdqirui"},"content":"        notification.setEndTime(Instant.parse(\"2012-01-01T00:00:00Z\"));"},{"lineNumber":123,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":124,"author":{"gitId":"hhdqirui"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":125,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":126,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":127,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsLogic.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":128,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":129,"author":{"gitId":"hhdqirui"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":130,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e accountsLogic.updateReadNotifications(googleId, notificationId, notification.getEndTime()));"},{"lineNumber":131,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"Trying to mark an expired notification as read.\", ex.getMessage());"},{"lineNumber":132,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":134,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"hhdqirui"},"content":"    public void testGetReadNotificationsId_doesNotHaveReadNotifications_success() {"},{"lineNumber":136,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":137,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":138,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":139,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":140,"author":{"gitId":"hhdqirui"},"content":"        List\u003cUUID\u003e readNotifications \u003d accountsLogic.getReadNotificationsId(googleId);"},{"lineNumber":141,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":142,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(0, readNotifications.size());"},{"lineNumber":143,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":145,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"hhdqirui"},"content":"    public void testGetReadNotificationsId_hasReadNotifications_success() {"},{"lineNumber":147,"author":{"gitId":"hhdqirui"},"content":"        Account account \u003d generateTypicalAccount();"},{"lineNumber":148,"author":{"gitId":"hhdqirui"},"content":"        List\u003cReadNotification\u003e readNotifications \u003d new ArrayList\u003c\u003e();"},{"lineNumber":149,"author":{"gitId":"hhdqirui"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {"},{"lineNumber":150,"author":{"gitId":"hhdqirui"},"content":"            Notification notification \u003d generateTypicalNotification();"},{"lineNumber":151,"author":{"gitId":"hhdqirui"},"content":"            ReadNotification readNotification \u003d new ReadNotification(account, notification);"},{"lineNumber":152,"author":{"gitId":"hhdqirui"},"content":"            readNotifications.add(readNotification);"},{"lineNumber":153,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"hhdqirui"},"content":"        account.setReadNotifications(readNotifications);"},{"lineNumber":155,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":156,"author":{"gitId":"hhdqirui"},"content":"        String googleId \u003d account.getGoogleId();"},{"lineNumber":157,"author":{"gitId":"hhdqirui"},"content":"        when(accountsDb.getAccountByGoogleId(googleId)).thenReturn(account);"},{"lineNumber":158,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":159,"author":{"gitId":"hhdqirui"},"content":"        List\u003cUUID\u003e actualReadNotifications \u003d accountsLogic.getReadNotificationsId(googleId);"},{"lineNumber":160,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":161,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(10, actualReadNotifications.size());"},{"lineNumber":162,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":163,"author":{"gitId":"hhdqirui"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {"},{"lineNumber":164,"author":{"gitId":"hhdqirui"},"content":"            assertEquals(readNotifications.get(i).getNotification().getId(),"},{"lineNumber":165,"author":{"gitId":"hhdqirui"},"content":"                    actualReadNotifications.get(i));"},{"lineNumber":166,"author":{"gitId":"hhdqirui"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":169,"author":{"gitId":"hhdqirui"},"content":"    private Account generateTypicalAccount() {"},{"lineNumber":170,"author":{"gitId":"hhdqirui"},"content":"        return new Account(\"test-googleId\", \"test-name\", \"test@test.com\");"},{"lineNumber":171,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":173,"author":{"gitId":"hhdqirui"},"content":"    private Notification generateTypicalNotification() {"},{"lineNumber":174,"author":{"gitId":"hhdqirui"},"content":"        return new Notification("},{"lineNumber":175,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":176,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"),"},{"lineNumber":177,"author":{"gitId":"hhdqirui"},"content":"                NotificationStyle.DANGER,"},{"lineNumber":178,"author":{"gitId":"hhdqirui"},"content":"                NotificationTargetUser.GENERAL,"},{"lineNumber":179,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\","},{"lineNumber":180,"author":{"gitId":"hhdqirui"},"content":"                \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":181,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":182}},{"path":"src/test/java/teammates/sqllogic/core/NotificationsLogicTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.sqllogic.core;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.times;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.verify;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.when;"},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":10,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":11,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Test;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityDoesNotExistException;"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlapi.NotificationsDb;"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":" * SUT: {@link NotificationsLogic}."},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":"public class NotificationsLogicTest extends BaseTestCase {"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsLogic notificationsLogic \u003d NotificationsLogic.inst();"},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsDb notificationsDb;"},{"lineNumber":30,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":"    @BeforeMethod"},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"    public void setUpMethod() {"},{"lineNumber":33,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb \u003d mock(NotificationsDb.class);"},{"lineNumber":34,"author":{"gitId":"hhdqirui"},"content":"        notificationsLogic.initLogicDependencies(notificationsDb);"},{"lineNumber":35,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":37,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateNotification_entityAlreadyExists_success()"},{"lineNumber":39,"author":{"gitId":"hhdqirui"},"content":"            throws InvalidParametersException, EntityDoesNotExistException {"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":43,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsDb.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":44,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":45,"author":{"gitId":"hhdqirui"},"content":"        Instant newStartTime \u003d Instant.parse(\"2012-01-01T00:00:00Z\");"},{"lineNumber":46,"author":{"gitId":"hhdqirui"},"content":"        Instant newEndTime \u003d Instant.parse(\"2098-01-01T00:00:00Z\");"},{"lineNumber":47,"author":{"gitId":"hhdqirui"},"content":"        NotificationStyle newStyle \u003d NotificationStyle.DARK;"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":"        NotificationTargetUser newTargetUser \u003d NotificationTargetUser.INSTRUCTOR;"},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        String newTitle \u003d \"An updated deprecation note\";"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":"        String newMessage \u003d \"\u003cp\u003eDeprecation happens in three seconds\u003c/p\u003e\";"},{"lineNumber":51,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"        Notification updatedNotification \u003d notificationsLogic.updateNotification(notificationId, newStartTime,"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":"                newEndTime, newStyle, newTargetUser, newTitle, newMessage);"},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":55,"author":{"gitId":"hhdqirui"},"content":"        verify(notificationsDb, times(1)).getNotification(notificationId);"},{"lineNumber":56,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(notificationId, updatedNotification.getId());"},{"lineNumber":58,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newStartTime, updatedNotification.getStartTime());"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newEndTime, updatedNotification.getEndTime());"},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newStyle, updatedNotification.getStyle());"},{"lineNumber":61,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newTargetUser, updatedNotification.getTargetUser());"},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newTitle, updatedNotification.getTitle());"},{"lineNumber":63,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(newMessage, updatedNotification.getMessage());"},{"lineNumber":64,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":66,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateNotification_invalidNonNullParameter_endTimeBeforeStartTime() {"},{"lineNumber":68,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":70,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":71,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsDb.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":74,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e notificationsLogic.updateNotification(notificationId, Instant.parse(\"2011-01-01T00:00:01Z\"),"},{"lineNumber":75,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2011-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":76,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\"));"},{"lineNumber":77,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":78,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"The time when the notification will expire for this notification cannot be earlier than \""},{"lineNumber":79,"author":{"gitId":"hhdqirui"},"content":"                + \"the time when the notification will be visible.\", ex.getMessage());"},{"lineNumber":80,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":82,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateNotification_invalidNonNullParameter_emptyTitle() {"},{"lineNumber":84,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":86,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":87,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsDb.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":88,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":89,"author":{"gitId":"hhdqirui"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":90,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e notificationsLogic.updateNotification(notificationId, Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":92,"author":{"gitId":"hhdqirui"},"content":"                \"\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\"));"},{"lineNumber":93,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"The field \u0027notification title\u0027 is empty.\", ex.getMessage());"},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":97,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateNotification_invalidNonNullParameter_emptyMessage() {"},{"lineNumber":99,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":101,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":102,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsDb.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":103,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":104,"author":{"gitId":"hhdqirui"},"content":"        InvalidParametersException ex \u003d assertThrows(InvalidParametersException.class,"},{"lineNumber":105,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e notificationsLogic.updateNotification(notificationId, Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":106,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":107,"author":{"gitId":"hhdqirui"},"content":"                \"An updated deprecation note\", \"\"));"},{"lineNumber":108,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":109,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"The field \u0027notification message\u0027 is empty.\", ex.getMessage());"},{"lineNumber":110,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":112,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"hhdqirui"},"content":"    public void testUpdateNotification_entityDoesNotExist() {"},{"lineNumber":114,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d getTypicalNotificationWithId();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        UUID notificationId \u003d notification.getId();"},{"lineNumber":116,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":117,"author":{"gitId":"hhdqirui"},"content":"        when(notificationsDb.getNotification(notificationId)).thenReturn(notification);"},{"lineNumber":118,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":119,"author":{"gitId":"hhdqirui"},"content":"        UUID nonExistentId \u003d UUID.fromString(\"00000000-0000-1000-0000-000000000000\");"},{"lineNumber":120,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":121,"author":{"gitId":"hhdqirui"},"content":"        EntityDoesNotExistException ex \u003d assertThrows(EntityDoesNotExistException.class,"},{"lineNumber":122,"author":{"gitId":"hhdqirui"},"content":"                () -\u003e notificationsLogic.updateNotification(nonExistentId, Instant.parse(\"2012-01-01T00:00:00Z\"),"},{"lineNumber":123,"author":{"gitId":"hhdqirui"},"content":"                        Instant.parse(\"2098-01-01T00:00:00Z\"), NotificationStyle.DARK,"},{"lineNumber":124,"author":{"gitId":"hhdqirui"},"content":"                        NotificationTargetUser.INSTRUCTOR, \"An updated deprecation note\","},{"lineNumber":125,"author":{"gitId":"hhdqirui"},"content":"                        \"\u003cp\u003eDeprecation happens in three seconds\u003c/p\u003e\"));"},{"lineNumber":126,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":127,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(\"Trying to update non-existent Entity: \" + Notification.class, ex.getMessage());"},{"lineNumber":128,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":130,"author":{"gitId":"hhdqirui"},"content":"    private Notification getTypicalNotificationWithId() {"},{"lineNumber":131,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d new Notification("},{"lineNumber":132,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":133,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"),"},{"lineNumber":134,"author":{"gitId":"hhdqirui"},"content":"                NotificationStyle.DANGER,"},{"lineNumber":135,"author":{"gitId":"hhdqirui"},"content":"                NotificationTargetUser.GENERAL,"},{"lineNumber":136,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\","},{"lineNumber":137,"author":{"gitId":"hhdqirui"},"content":"                \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        notification.setId(UUID.fromString(\"00000001-0000-1000-0000-000000000000\"));"},{"lineNumber":139,"author":{"gitId":"hhdqirui"},"content":"        return notification;"},{"lineNumber":140,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":134,"-":7}},{"path":"src/test/java/teammates/sqllogic/core/package-info.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":" * Contains test cases for {@link teammates.sqllogic.core} package."},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"package teammates.sqllogic.core;"}],"authorContributionMap":{"hhdqirui":4}},{"path":"src/test/java/teammates/storage/sqlapi/AccountRequestsDbTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kevin9foong"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":3,"author":{"gitId":"kevin9foong"},"content":"import static org.mockito.ArgumentMatchers.anyString;"},{"lineNumber":4,"author":{"gitId":"kevin9foong"},"content":"import static org.mockito.Mockito.doReturn;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.mockStatic;"},{"lineNumber":6,"author":{"gitId":"kevin9foong"},"content":"import static org.mockito.Mockito.never;"},{"lineNumber":7,"author":{"gitId":"kevin9foong"},"content":"import static org.mockito.Mockito.spy;"},{"lineNumber":8,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.mockito.MockedStatic;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":11,"author":{"gitId":"kevin9foong"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":12,"author":{"gitId":"kevin9foong"},"content":"import org.testng.annotations.Test;"},{"lineNumber":13,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":14,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":15,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":16,"author":{"gitId":"kevin9foong"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":17,"author":{"gitId":"kevin9foong"},"content":"import teammates.storage.sqlentity.AccountRequest;"},{"lineNumber":18,"author":{"gitId":"kevin9foong"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":19,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":20,"author":{"gitId":"kevin9foong"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"kevin9foong"},"content":" * SUT: {@code AccountRequestDb}."},{"lineNumber":22,"author":{"gitId":"kevin9foong"},"content":" */"},{"lineNumber":23,"author":{"gitId":"kevin9foong"},"content":"public class AccountRequestsDbTest extends BaseTestCase {"},{"lineNumber":24,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    private AccountRequestsDb accountRequestDb;"},{"lineNumber":26,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private MockedStatic\u003cHibernateUtil\u003e mockHibernateUtil;"},{"lineNumber":28,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"    @BeforeMethod"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setUpMethod() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        mockHibernateUtil \u003d mockStatic(HibernateUtil.class);"},{"lineNumber":32,"author":{"gitId":"kevin9foong"},"content":"        accountRequestDb \u003d spy(AccountRequestsDb.class);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @AfterMethod"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void teardownMethod() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        mockHibernateUtil.close();"},{"lineNumber":38,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":40,"author":{"gitId":"kevin9foong"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"kevin9foong"},"content":"    public void createAccountRequestDoesNotExist() throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":42,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":43,"author":{"gitId":"kevin9foong"},"content":"        doReturn(null).when(accountRequestDb).getAccountRequest(anyString(), anyString());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"kevin9foong"},"content":"        accountRequestDb.createAccountRequest(accountRequest);"},{"lineNumber":46,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(accountRequest));"},{"lineNumber":48,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":50,"author":{"gitId":"kevin9foong"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"kevin9foong"},"content":"    public void createAccountRequestAlreadyExists() {"},{"lineNumber":52,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":53,"author":{"gitId":"kevin9foong"},"content":"        doReturn(new AccountRequest(\"test@gmail.com\", \"name\", \"institute\"))"},{"lineNumber":54,"author":{"gitId":"kevin9foong"},"content":"                .when(accountRequestDb).getAccountRequest(anyString(), anyString());"},{"lineNumber":55,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":56,"author":{"gitId":"kevin9foong"},"content":"        EntityAlreadyExistsException ex \u003d assertThrows(EntityAlreadyExistsException.class,"},{"lineNumber":57,"author":{"gitId":"kevin9foong"},"content":"                () -\u003e accountRequestDb.createAccountRequest(accountRequest));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"kevin9foong"},"content":"        assertEquals(ex.getMessage(), \"Trying to create an entity that exists: \" + accountRequest.toString());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(accountRequest), never());"},{"lineNumber":61,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":63,"author":{"gitId":"kevin9foong"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"kevin9foong"},"content":"    public void deleteAccountRequest() {"},{"lineNumber":65,"author":{"gitId":"kevin9foong"},"content":"        AccountRequest accountRequest \u003d new AccountRequest(\"test@gmail.com\", \"name\", \"institute\");"},{"lineNumber":66,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        accountRequestDb.deleteAccountRequest(accountRequest);"},{"lineNumber":68,"author":{"gitId":"kevin9foong"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(accountRequest));"},{"lineNumber":70,"author":{"gitId":"kevin9foong"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kevin9foong"},"content":"}"}],"authorContributionMap":{"kevin9foong":55,"-":16}},{"path":"src/test/java/teammates/storage/sqlapi/NotificationsDbTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"hhdqirui"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.ArgumentMatchers.any;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.mockito.Mockito.mockStatic;"},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import static org.mockito.Mockito.never;"},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":7,"author":{"gitId":"hhdqirui"},"content":"import java.time.Instant;"},{"lineNumber":8,"author":{"gitId":"hhdqirui"},"content":"import java.util.UUID;"},{"lineNumber":9,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.mockito.MockedStatic;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":12,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Test;"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":16,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":18,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":19,"author":{"gitId":"hhdqirui"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"import teammates.storage.sqlentity.Notification;"},{"lineNumber":21,"author":{"gitId":"hhdqirui"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":22,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":23,"author":{"gitId":"hhdqirui"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"hhdqirui"},"content":" * SUT: {@code NotificationsDb}."},{"lineNumber":25,"author":{"gitId":"hhdqirui"},"content":" */"},{"lineNumber":26,"author":{"gitId":"hhdqirui"},"content":"public class NotificationsDbTest extends BaseTestCase {"},{"lineNumber":27,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":28,"author":{"gitId":"hhdqirui"},"content":"    private NotificationsDb notificationsDb \u003d NotificationsDb.inst();"},{"lineNumber":29,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private MockedStatic\u003cHibernateUtil\u003e mockHibernateUtil;"},{"lineNumber":31,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":32,"author":{"gitId":"hhdqirui"},"content":"    @BeforeMethod"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUpMethod() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        mockHibernateUtil \u003d mockStatic(HibernateUtil.class);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @AfterMethod"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void teardownMethod() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        mockHibernateUtil.close();"},{"lineNumber":40,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":42,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void testCreateNotification_notificationDoesNotExist_success()"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throws EntityAlreadyExistsException, InvalidParametersException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Notification newNotification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":48,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":49,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.createNotification(newNotification);"},{"lineNumber":50,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(newNotification));"},{"lineNumber":52,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":54,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void testCreateNotification_endTimeIsBeforeStartTime_throwsInvalidParametersException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Notification invalidNotification \u003d new Notification(Instant.parse(\"2011-02-01T00:00:00Z\"),"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                Instant.parse(\"2011-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":59,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":60,"author":{"gitId":"hhdqirui"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e notificationsDb.createNotification(invalidNotification));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(invalidNotification), never());"},{"lineNumber":62,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":64,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void testCreateNotification_emptyTitle_throwsInvalidParametersException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Notification invalidNotification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \"\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":69,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":70,"author":{"gitId":"hhdqirui"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e notificationsDb.createNotification(invalidNotification));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(invalidNotification), never());"},{"lineNumber":72,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":74,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void testCreateNotification_emptyMessage_throwsInvalidParametersException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Notification invalidNotification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \"A deprecation note\", \"\");"},{"lineNumber":79,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":80,"author":{"gitId":"hhdqirui"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e notificationsDb.createNotification(invalidNotification));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(invalidNotification), never());"},{"lineNumber":82,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":84,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"hhdqirui"},"content":"    public void testGetNotification_success() {"},{"lineNumber":86,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotificationWithId();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        mockHibernateUtil.when(() -\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                HibernateUtil.get(Notification.class, notification.getId())).thenReturn(notification);"},{"lineNumber":89,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Notification actualNotification \u003d notificationsDb.getNotification(notification.getId());"},{"lineNumber":91,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(Notification.class, notification.getId()));"},{"lineNumber":93,"author":{"gitId":"hhdqirui"},"content":"        assertEquals(notification, actualNotification);"},{"lineNumber":94,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":96,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"hhdqirui"},"content":"    public void testGetNotification_entityDoesNotExist() {"},{"lineNumber":98,"author":{"gitId":"hhdqirui"},"content":"        UUID nonExistentId \u003d UUID.fromString(\"00000000-0000-1000-0000-000000000000\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        mockHibernateUtil.when(() -\u003e HibernateUtil.get(Notification.class, nonExistentId)).thenReturn(null);"},{"lineNumber":100,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":101,"author":{"gitId":"hhdqirui"},"content":"        Notification actualNotification \u003d notificationsDb.getNotification(nonExistentId);"},{"lineNumber":102,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":103,"author":{"gitId":"hhdqirui"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.get(Notification.class, nonExistentId));"},{"lineNumber":104,"author":{"gitId":"hhdqirui"},"content":"        assertNull(actualNotification);"},{"lineNumber":105,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":107,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"hhdqirui"},"content":"    public void testDeleteNotification_entityExists_success() {"},{"lineNumber":109,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d generateTypicalNotificationWithId();"},{"lineNumber":110,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.deleteNotification(notification);"},{"lineNumber":111,"author":{"gitId":"hhdqirui"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(notification));"},{"lineNumber":112,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":114,"author":{"gitId":"hhdqirui"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"hhdqirui"},"content":"    public void testDeleteNotification_entityDoesNotExists_success() {"},{"lineNumber":116,"author":{"gitId":"hhdqirui"},"content":"        notificationsDb.deleteNotification(null);"},{"lineNumber":117,"author":{"gitId":"hhdqirui"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(any()), never());"},{"lineNumber":118,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":120,"author":{"gitId":"hhdqirui"},"content":"    private Notification generateTypicalNotificationWithId() {"},{"lineNumber":121,"author":{"gitId":"hhdqirui"},"content":"        Notification notification \u003d new Notification(Instant.parse(\"2011-01-01T00:00:00Z\"),"},{"lineNumber":122,"author":{"gitId":"hhdqirui"},"content":"                Instant.parse(\"2099-01-01T00:00:00Z\"), NotificationStyle.DANGER, NotificationTargetUser.GENERAL,"},{"lineNumber":123,"author":{"gitId":"hhdqirui"},"content":"                \"A deprecation note\", \"\u003cp\u003eDeprecation happens in three minutes\u003c/p\u003e\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        notification.setId(UUID.randomUUID());"},{"lineNumber":125,"author":{"gitId":"hhdqirui"},"content":"        return notification;"},{"lineNumber":126,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":128,"author":{"gitId":"hhdqirui"},"content":"}"}],"authorContributionMap":{"hhdqirui":90,"-":38}},{"path":"src/test/java/teammates/storage/sqlapi/UsersDbTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"domlimm"},"content":"package teammates.storage.sqlapi;"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"import static org.mockito.ArgumentMatchers.any;"},{"lineNumber":4,"author":{"gitId":"domlimm"},"content":"import static org.mockito.Mockito.mock;"},{"lineNumber":5,"author":{"gitId":"domlimm"},"content":"import static org.mockito.Mockito.mockStatic;"},{"lineNumber":6,"author":{"gitId":"domlimm"},"content":"import static org.mockito.Mockito.never;"},{"lineNumber":7,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":8,"author":{"gitId":"domlimm"},"content":"import org.mockito.MockedStatic;"},{"lineNumber":9,"author":{"gitId":"domlimm"},"content":"import org.testng.annotations.AfterMethod;"},{"lineNumber":10,"author":{"gitId":"domlimm"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":11,"author":{"gitId":"domlimm"},"content":"import org.testng.annotations.Test;"},{"lineNumber":12,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPermissionRole;"},{"lineNumber":14,"author":{"gitId":"domlimm"},"content":"import teammates.common.datatransfer.InstructorPrivileges;"},{"lineNumber":15,"author":{"gitId":"domlimm"},"content":"import teammates.common.exception.EntityAlreadyExistsException;"},{"lineNumber":16,"author":{"gitId":"domlimm"},"content":"import teammates.common.exception.InvalidParametersException;"},{"lineNumber":17,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.Const;"},{"lineNumber":18,"author":{"gitId":"domlimm"},"content":"import teammates.common.util.HibernateUtil;"},{"lineNumber":19,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Course;"},{"lineNumber":20,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Instructor;"},{"lineNumber":21,"author":{"gitId":"domlimm"},"content":"import teammates.storage.sqlentity.Student;"},{"lineNumber":22,"author":{"gitId":"domlimm"},"content":"import teammates.test.BaseTestCase;"},{"lineNumber":23,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":24,"author":{"gitId":"domlimm"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"domlimm"},"content":" * SUT: {@code UsersDb}."},{"lineNumber":26,"author":{"gitId":"domlimm"},"content":" */"},{"lineNumber":27,"author":{"gitId":"domlimm"},"content":"public class UsersDbTest extends BaseTestCase {"},{"lineNumber":28,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":29,"author":{"gitId":"domlimm"},"content":"    private UsersDb usersDb \u003d UsersDb.inst();"},{"lineNumber":30,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":31,"author":{"gitId":"domlimm"},"content":"    private MockedStatic\u003cHibernateUtil\u003e mockHibernateUtil;"},{"lineNumber":32,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":33,"author":{"gitId":"domlimm"},"content":"    @BeforeMethod"},{"lineNumber":34,"author":{"gitId":"domlimm"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil \u003d mockStatic(HibernateUtil.class);"},{"lineNumber":36,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":38,"author":{"gitId":"domlimm"},"content":"    @AfterMethod"},{"lineNumber":39,"author":{"gitId":"domlimm"},"content":"    public void teardown() {"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil.close();"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":43,"author":{"gitId":"domlimm"},"content":"    private Instructor getTypicalInstructor() {"},{"lineNumber":44,"author":{"gitId":"domlimm"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", Const.DEFAULT_TIME_ZONE, \"institute\");"},{"lineNumber":45,"author":{"gitId":"domlimm"},"content":"        InstructorPrivileges instructorPrivileges \u003d"},{"lineNumber":46,"author":{"gitId":"domlimm"},"content":"                new InstructorPrivileges(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER);"},{"lineNumber":47,"author":{"gitId":"domlimm"},"content":"        InstructorPermissionRole role \u003d InstructorPermissionRole"},{"lineNumber":48,"author":{"gitId":"domlimm"},"content":"                .getEnum(Const.InstructorPermissionRoleNames.INSTRUCTOR_PERMISSION_ROLE_COOWNER);"},{"lineNumber":49,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":50,"author":{"gitId":"domlimm"},"content":"        return new Instructor(course, \"instructor-name\", \"valid@teammates.tmt\","},{"lineNumber":51,"author":{"gitId":"domlimm"},"content":"                false, Const.DEFAULT_DISPLAY_NAME_FOR_INSTRUCTOR, role, instructorPrivileges);"},{"lineNumber":52,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":54,"author":{"gitId":"domlimm"},"content":"    private Student getTypicalStudent() {"},{"lineNumber":55,"author":{"gitId":"domlimm"},"content":"        Course course \u003d new Course(\"course-id\", \"course-name\", Const.DEFAULT_TIME_ZONE, \"institute\");"},{"lineNumber":56,"author":{"gitId":"domlimm"},"content":"        return new Student(course, \"student-name\", \"valid@teammates.tmt\", \"comments\");"},{"lineNumber":57,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":59,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"domlimm"},"content":"    public void testCreateInstructor_validInstructorDoesNotExist_success()"},{"lineNumber":61,"author":{"gitId":"domlimm"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":62,"author":{"gitId":"domlimm"},"content":"        Instructor newInstructor \u003d getTypicalInstructor();"},{"lineNumber":63,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":64,"author":{"gitId":"domlimm"},"content":"        usersDb.createInstructor(newInstructor);"},{"lineNumber":65,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":66,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(newInstructor));"},{"lineNumber":67,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":69,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"domlimm"},"content":"    public void testCreateStudent_studentDoesNotExist_success()"},{"lineNumber":71,"author":{"gitId":"domlimm"},"content":"            throws InvalidParametersException, EntityAlreadyExistsException {"},{"lineNumber":72,"author":{"gitId":"domlimm"},"content":"        Student newStudent \u003d getTypicalStudent();"},{"lineNumber":73,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":74,"author":{"gitId":"domlimm"},"content":"        usersDb.createStudent(newStudent);"},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":76,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(newStudent));"},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":79,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"domlimm"},"content":"    public void testCreateStudent_studentWithInvalidEmail_throwsInvalidParametersException() {"},{"lineNumber":81,"author":{"gitId":"domlimm"},"content":"        Student newStudent \u003d getTypicalStudent();"},{"lineNumber":82,"author":{"gitId":"domlimm"},"content":"        newStudent.setEmail(\"invalid-email\");"},{"lineNumber":83,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":84,"author":{"gitId":"domlimm"},"content":"        assertThrows(InvalidParametersException.class, () -\u003e usersDb.createStudent(newStudent));"},{"lineNumber":85,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":86,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.persist(newStudent), never());"},{"lineNumber":87,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":89,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"domlimm"},"content":"    public void testGetInstructor_instructorIdPresent_success() {"},{"lineNumber":91,"author":{"gitId":"domlimm"},"content":"        Instructor instructor \u003d getTypicalInstructor();"},{"lineNumber":92,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":93,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil"},{"lineNumber":94,"author":{"gitId":"domlimm"},"content":"                .when(() -\u003e HibernateUtil.get(Instructor.class, instructor.getId()))"},{"lineNumber":95,"author":{"gitId":"domlimm"},"content":"                .thenReturn(instructor);"},{"lineNumber":96,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":97,"author":{"gitId":"domlimm"},"content":"        Instructor actualInstructor \u003d usersDb.getInstructor(instructor.getId());"},{"lineNumber":98,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":99,"author":{"gitId":"domlimm"},"content":"        assertEquals(instructor, actualInstructor);"},{"lineNumber":100,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":102,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"domlimm"},"content":"    public void testGetStudent_studentIdPresent_success() {"},{"lineNumber":104,"author":{"gitId":"domlimm"},"content":"        Student student \u003d getTypicalStudent();"},{"lineNumber":105,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":106,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil"},{"lineNumber":107,"author":{"gitId":"domlimm"},"content":"                .when(() -\u003e HibernateUtil.get(Student.class, student.getId()))"},{"lineNumber":108,"author":{"gitId":"domlimm"},"content":"                .thenReturn(student);"},{"lineNumber":109,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":110,"author":{"gitId":"domlimm"},"content":"        Student actualStudent \u003d usersDb.getStudent(student.getId());"},{"lineNumber":111,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":112,"author":{"gitId":"domlimm"},"content":"        assertEquals(student, actualStudent);"},{"lineNumber":113,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":115,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"domlimm"},"content":"    public void testDeleteUser_userNotNull_success() {"},{"lineNumber":117,"author":{"gitId":"domlimm"},"content":"        Student student \u003d mock(Student.class);"},{"lineNumber":118,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":119,"author":{"gitId":"domlimm"},"content":"        usersDb.deleteUser(student);"},{"lineNumber":120,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":121,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(student));"},{"lineNumber":122,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":124,"author":{"gitId":"domlimm"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"domlimm"},"content":"    public void testDeleteUser_userNull_shouldFailSilently() {"},{"lineNumber":126,"author":{"gitId":"domlimm"},"content":"        usersDb.deleteUser(null);"},{"lineNumber":127,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":128,"author":{"gitId":"domlimm"},"content":"        mockHibernateUtil.verify(() -\u003e HibernateUtil.remove(any()), never());"},{"lineNumber":129,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"domlimm"},"content":"}"}],"authorContributionMap":{"domlimm":130}},{"path":"src/test/java/teammates/test/BaseTestCase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.test;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.lang.reflect.Method;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.testng.annotations.AfterClass;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeClass;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.DataBundle;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.common.util.FieldValidator;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.common.util.JsonUtils;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Base class for all test cases."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class BaseTestCase {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Test Segment divider. Used to divide a test case into logical sections."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The weird name is for easy spotting."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param description"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *            of the logical section. This will be printed."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // CHECKSTYLE.OFF:AbbreviationAsWordInName|MethodName the weird name is for easy spotting."},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void ______TS(String description) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        print(\" * \" + description);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // CHECKSTYLE.ON:AbbreviationAsWordInName|MethodName"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void printTestClassHeader() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        print(\"[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"                + getClass().getCanonicalName()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d]\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void printTestClassFooter() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        print(getClass().getCanonicalName() + \" completed\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected static void print(String message) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        System.out.println(message);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected String getTestDataFolder() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return TestProperties.TEST_DATA_FOLDER;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Creates a DataBundle as specified in typicalDataBundle.json."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected DataBundle getTypicalDataBundle() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return loadDataBundle(\"/typicalDataBundle.json\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected DataBundle loadDataBundle(String jsonFileName) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            String pathToJsonFile \u003d getTestDataFolder() + jsonFileName;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            String jsonString \u003d FileHelper.readFile(pathToJsonFile);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return JsonUtils.fromJson(jsonString, DataBundle.class);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Populates the feedback question and response IDs within the data bundle."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * \u003cp\u003eFor tests where simulated database is used, the backend will assign the question and response IDs"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * when the entities are persisted into the database, and modify the relation IDs accordingly."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * However, for tests that do not use simulated database (e.g. pure data structure tests),"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * the assignment of IDs have to be simulated."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    protected void populateQuestionAndResponseIds(DataBundle dataBundle) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Map\u003cString, Map\u003cInteger, String\u003e\u003e sessionToQuestionNumberToId \u003d new HashMap\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        dataBundle.feedbackQuestions.forEach((key, question) -\u003e {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            // Assign the same ID as the key as a later function requires a match between the key and the question ID"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            question.setId(key);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            Map\u003cInteger, String\u003e questionNumberToId \u003d sessionToQuestionNumberToId.computeIfAbsent("},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    question.getCourseId() + \"%\" + question.getFeedbackSessionName(), k -\u003e new HashMap\u003c\u003e());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            questionNumberToId.put(question.getQuestionNumber(), key);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        dataBundle.feedbackResponses.forEach((key, response) -\u003e {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            response.setId(key);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            String feedbackQuestionId \u003d sessionToQuestionNumberToId"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    .get(response.getCourseId() + \"%\" + response.getFeedbackSessionName())"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    .get(Integer.valueOf(response.getFeedbackQuestionId()));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            response.setFeedbackQuestionId(feedbackQuestionId);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Invokes the method named {@code methodName} as defined in the {@code definingClass}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @param definingClass     the class which defines the method"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param parameterTypes    the parameter types of the method,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *                          which must be passed in the same order defined in the method"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param invokingObject    the object which invokes the method, can be {@code null} if the method is static"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param args              the arguments to be passed to the method invocation"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    protected static Object invokeMethod(Class\u003c?\u003e definingClass, String methodName, Class\u003c?\u003e[] parameterTypes,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                                         Object invokingObject, Object[] args)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Method method \u003d definingClass.getDeclaredMethod(methodName, parameterTypes);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        method.setAccessible(true);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return method.invoke(invokingObject, args);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    protected static String getPopulatedErrorMessage(String messageTemplate, String userInput,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                                                     String fieldName, String errorReason)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return getPopulatedErrorMessage(messageTemplate, userInput, fieldName, errorReason, 0);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    protected static String getPopulatedErrorMessage(String messageTemplate, String userInput,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                                                     String fieldName, String errorReason, int maxLength)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return (String) invokeMethod(FieldValidator.class, \"getPopulatedErrorMessage\","},{"lineNumber":125,"author":{"gitId":"-"},"content":"                                     new Class\u003c?\u003e[] { String.class, String.class, String.class, String.class, int.class },"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                                     null, new Object[] { messageTemplate, userInput, fieldName, errorReason, maxLength });"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    protected static String getPopulatedEmptyStringErrorMessage(String messageTemplate, String fieldName, int maxLength)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throws ReflectiveOperationException {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return (String) invokeMethod(FieldValidator.class, \"getPopulatedEmptyStringErrorMessage\","},{"lineNumber":132,"author":{"gitId":"-"},"content":"                new Class\u003c?\u003e[] { String.class, String.class, int.class },"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                null, new Object[] { messageTemplate, fieldName, maxLength });"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Here are some of the most common assertion methods provided by JUnit."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * They are copied here to prevent repetitive importing in test classes."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected static void assertTrue(boolean condition) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Assert.assertTrue(condition);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected static void assertTrue(String message, boolean condition) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Assert.assertTrue(message, condition);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    protected static void assertFalse(boolean condition) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Assert.assertFalse(condition);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    protected static void assertFalse(String message, boolean condition) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Assert.assertFalse(message, condition);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    protected static void assertEquals(int expected, int actual) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    protected static void assertEquals(String message, int expected, int actual) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Assert.assertEquals(message, expected, actual);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    protected static void assertEquals(long expected, long actual) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    protected static void assertEquals(double expected, double actual, double delta) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual, delta);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    protected static void assertEquals(Object expected, Object actual) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expected, actual);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    protected static void assertEquals(String message, Object expected, Object actual) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Assert.assertEquals(message, expected, actual);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    protected static void assertArrayEquals(byte[] expected, byte[] actual) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Assert.assertArrayEquals(expected, actual);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    protected static void assertNotEquals(Object first, Object second) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Assert.assertNotEquals(first, second);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"hhdqirui"},"content":"    protected static void assertSame(Object unexpected, Object actual) {"},{"lineNumber":190,"author":{"gitId":"hhdqirui"},"content":"        Assert.assertSame(unexpected, actual);"},{"lineNumber":191,"author":{"gitId":"hhdqirui"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"hhdqirui"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    protected static void assertNotSame(Object unexpected, Object actual) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Assert.assertNotSame(unexpected, actual);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    protected static void assertNull(Object object) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Assert.assertNull(object);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    protected static void assertNull(String message, Object object) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        Assert.assertNull(message, object);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    protected static void assertNotNull(Object object) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        Assert.assertNotNull(object);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    protected static void assertNotNull(String message, Object object) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        Assert.assertNotNull(message, object);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    protected static void fail(String message) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Assert.fail(message);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    // This method is adapted from JUnit 5\u0027s assertThrows."},{"lineNumber":218,"author":{"gitId":"-"},"content":"    // Once we upgrade to JUnit 5, their built-in method shall be used instead."},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @SuppressWarnings({"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            \"unchecked\","},{"lineNumber":221,"author":{"gitId":"-"},"content":"            \"PMD.AvoidCatchingThrowable\", // As per reference method\u0027s specification"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    protected static \u003cT extends Throwable\u003e T assertThrows(Class\u003cT\u003e expectedType, Executable executable) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            executable.execute();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            if (expectedType.isInstance(actualException)) {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                return (T) actualException;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                String message \u003d String.format(\"Expected %s to be thrown, but %s was instead thrown.\","},{"lineNumber":231,"author":{"gitId":"-"},"content":"                        getCanonicalName(expectedType), getCanonicalName(actualException.getClass()));"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                throw new AssertionError(message, actualException);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        String message \u003d String.format(\"Expected %s to be thrown, but nothing was thrown.\", getCanonicalName(expectedType));"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        throw new AssertionError(message);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    private static String getCanonicalName(Class\u003c?\u003e clazz) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        String canonicalName \u003d clazz.getCanonicalName();"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        return canonicalName \u003d\u003d null ? clazz.getName() : canonicalName;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * {@code Executable} is a functional interface that can be used to"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     * implement any generic block of code that potentially throws a"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * {@link Throwable}."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":250,"author":{"gitId":"-"},"content":"     * \u003cp\u003eThe {@code Executable} interface is similar to {@link Runnable},"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * except that an {@code Executable} can throw any kind of exception."},{"lineNumber":252,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    // This interface is adapted from JUnit 5\u0027s Executable interface."},{"lineNumber":254,"author":{"gitId":"-"},"content":"    // Once we upgrade to JUnit 5, this interface shall no longer be necessary."},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public interface Executable {"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":258,"author":{"gitId":"-"},"content":"         * Executes a block of code, potentially throwing a {@link Throwable}."},{"lineNumber":259,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        // CHECKSTYLE.OFF:IllegalThrows"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        void execute() throws Throwable;"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        // CHECKSTYLE.ON:IllegalThrows"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":4,"-":262}},{"path":"src/test/java/teammates/ui/webapi/CreateAccountRequestActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.ui.output.JoinLinkData;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.request.AccountCreateRequest;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * SUT: {@link CreateAccountRequestAction}."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class CreateAccountRequestActionTest extends BaseActionTest\u003cCreateAccountRequestAction\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    protected String getActionUri() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.ACCOUNT_REQUEST;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected String getRequestMethod() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return POST;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    protected void testExecute() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String name \u003d \"JamesBond\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String email \u003d \"jamesbond89@gmail.tmt\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String institute \u003d \"TEAMMATES Test Institute 1\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ______TS(\"Null parameters\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        InvalidHttpRequestBodyException ex \u003d verifyHttpRequestBodyFailure(buildCreateRequest(null, institute, email));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(\"name cannot be null\", ex.getMessage());"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(buildCreateRequest(name, null, email));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(\"institute cannot be null\", ex.getMessage());"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(buildCreateRequest(name, institute, null));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(\"email cannot be null\", ex.getMessage());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        verifyNoTasksAdded();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ______TS(\"Normal case\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String nameWithSpaces \u003d \"   \" + name + \"   \";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String emailWithSpaces \u003d \"   \" + email + \"   \";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String instituteWithSpaces \u003d \"   \" + institute + \"   \";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AccountCreateRequest req \u003d buildCreateRequest(nameWithSpaces, instituteWithSpaces, emailWithSpaces);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        CreateAccountRequestAction a \u003d getAction(req);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonResult r \u003d getJsonResult(a);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AccountRequestAttributes accountRequestAttributes \u003d logic.getAccountRequest(email, institute);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(name, accountRequestAttributes.getName());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(email, accountRequestAttributes.getEmail());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(institute, accountRequestAttributes.getInstitute());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(accountRequestAttributes.getRegistrationKey());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String joinLink \u003d accountRequestAttributes.getRegistrationUrl();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        JoinLinkData output \u003d (JoinLinkData) r.getOutput();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(joinLink, output.getJoinLink());"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        verifyNumberOfEmailsSent(1);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        verifySpecifiedTasksAdded(Const.TaskQueue.SEARCH_INDEXING_QUEUE_NAME, 1);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EmailWrapper emailSent \u003d mockEmailSender.getEmailsSent().get(0);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(String.format(EmailType.NEW_INSTRUCTOR_ACCOUNT.getSubject(), name),"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                emailSent.getSubject());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(email, emailSent.getRecipient());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(emailSent.getContent().contains(joinLink));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ______TS(\"Account request already exists: instructor unregistered, email sent again\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        a \u003d getAction(req);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        r \u003d getJsonResult(a);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        output \u003d (JoinLinkData) r.getOutput();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(joinLink, output.getJoinLink());"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        verifyNumberOfEmailsSent(1);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        verifyNoTasksAdded(); // Account request not added to search indexing queue"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        emailSent \u003d mockEmailSender.getEmailsSent().get(0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(String.format(EmailType.NEW_INSTRUCTOR_ACCOUNT.getSubject(), name),"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                emailSent.getSubject());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(email, emailSent.getRecipient());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(emailSent.getContent().contains(joinLink));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        ______TS(\"Account request already exists: instructor registered, InvalidOperationException thrown\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        accountRequestAttributes \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse1\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        req \u003d buildCreateRequest(accountRequestAttributes.getName(),"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                accountRequestAttributes.getInstitute(), accountRequestAttributes.getEmail());"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        InvalidOperationException ioe \u003d verifyInvalidOperation(req);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(\"Cannot create account request as instructor has already registered.\", ioe.getMessage());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ______TS(\"Error: invalid parameter\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"James%20Bond99\";"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        req \u003d buildCreateRequest(invalidName, institute, emailWithSpaces);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(\"\\\"\" + invalidName + \"\\\" is not acceptable to TEAMMATES as a/an person name because \""},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + \"it contains invalid characters. A/An person name must start with an \""},{"lineNumber":115,"author":{"gitId":"-"},"content":"                + \"alphanumeric character, and cannot contain any vertical bar (|) or percent sign (%).\","},{"lineNumber":116,"author":{"gitId":"-"},"content":"                ex.getMessage());"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        verifyNoEmailsSent();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        verifyNoTasksAdded();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    protected void testAccessControl() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private AccountCreateRequest buildCreateRequest(String name, String institution, String email) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        AccountCreateRequest req \u003d new AccountCreateRequest();"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        req.setInstructorName(name);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        req.setInstructorInstitution(institution);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        req.setInstructorEmail(email);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return req;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":136,"kevin9foong":2}},{"path":"src/test/java/teammates/ui/webapi/DeleteAccountRequestActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * SUT: {@link DeleteAccountRequestAction}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteAccountRequestActionTest extends BaseActionTest\u003cDeleteAccountRequestAction\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected String getActionUri() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.ACCOUNT_REQUEST;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected String getRequestMethod() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return DELETE;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    protected void testExecute() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AccountRequestAttributes registeredAccountRequest \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse1\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AccountRequestAttributes unregisteredAccountRequest \u003d typicalBundle.accountRequests.get(\"unregisteredInstructor1\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ______TS(\"Not enough parameters\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ______TS(\"Deleting an account request of a registered instructor should fail\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String[] submissionParams \u003d new String[] {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, registeredAccountRequest.getEmail(),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, registeredAccountRequest.getInstitute(),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        InvalidOperationException ex \u003d verifyInvalidOperation(submissionParams);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(\"Account request of a registered instructor cannot be deleted.\", ex.getMessage());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertNotNull(logic.getAccountRequest(registeredAccountRequest.getEmail(), registeredAccountRequest.getInstitute()));"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case, delete an existing account request\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        submissionParams \u003d new String[] {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, unregisteredAccountRequest.getEmail(),"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, unregisteredAccountRequest.getInstitute(),"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteAccountRequestAction action \u003d getAction(submissionParams);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonResult result \u003d getJsonResult(action);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        MessageOutput msg \u003d (MessageOutput) result.getOutput();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(\"Account request successfully deleted.\", msg.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNull(logic.getAccountRequest(unregisteredAccountRequest.getEmail(),"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                unregisteredAccountRequest.getInstitute()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        ______TS(\"Typical case, delete non-existing account request\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        action \u003d getAction(submissionParams);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        result \u003d getJsonResult(action);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        msg \u003d (MessageOutput) result.getOutput();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // should fail silently."},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(\"Account request successfully deleted.\", msg.getMessage());"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected void testAccessControl() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":76,"kevin9foong":2}},{"path":"src/test/java/teammates/ui/webapi/DeleteNotificationActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Ignore;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.ui.output.MessageOutput;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * SUT: {@link DeleteNotificationAction}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"hhdqirui"},"content":"@Ignore"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class DeleteNotificationActionTest extends BaseActionTest\u003cDeleteNotificationAction\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.NOTIFICATION;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return DELETE;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NotificationAttributes testNotificationAttribute \u003d typicalBundle.notifications.get(\"notification1\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Case: Delete notification successfully\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String[] requestParams \u003d new String[] {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                Const.ParamsNames.NOTIFICATION_ID, testNotificationAttribute.getNotificationId(),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        DeleteNotificationAction action \u003d getAction(requestParams);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        JsonResult response \u003d getJsonResult(action);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        MessageOutput msg \u003d (MessageOutput) response.getOutput();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification has been deleted.\", msg.getMessage());"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        verifyAbsentInDatabase(testNotificationAttribute);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        ______TS(\"Deleting non-existent notification should fail silently\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String invalidNotificationId \u003d \"non-existent notification\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requestParams \u003d new String[] {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                Const.ParamsNames.NOTIFICATION_ID, invalidNotificationId,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        NotificationAttributes nonExistentNotification \u003d typicalBundle.notifications.get(\"notification1\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        nonExistentNotification.setNotificationId(invalidNotificationId);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        verifyAbsentInDatabase(nonExistentNotification);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        action \u003d getAction(requestParams);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        response \u003d getJsonResult(action);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        msg \u003d (MessageOutput) response.getOutput();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification has been deleted.\", msg.getMessage());"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ______TS(\"Notification ID cannot be null\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requestParams \u003d new String[] {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                Const.ParamsNames.NOTIFICATION_ID, null,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure(requestParams);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ______TS(\"Not enough request parameters should throw an error\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":75}},{"path":"src/test/java/teammates/ui/webapi/GetAccountRequestActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.ui.output.AccountRequestData;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * SUT: {@link GetAccountRequestAction}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class GetAccountRequestActionTest extends BaseActionTest\u003cGetAccountRequestAction\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected String getActionUri() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.ACCOUNT_REQUEST;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected String getRequestMethod() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return GET;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    protected void testExecute() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AccountRequestAttributes accountRequest \u003d"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                logic.getAccountRequest(\"unregisteredinstructor1@gmail.tmt\", \"TEAMMATES Test Institute 1\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ______TS(\"Not enough parameters\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ______TS(\"account request does not exist\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String[] nonExistParams \u003d {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, \"non-existent@email\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, \"non existent institute\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EntityNotFoundException enfe \u003d verifyEntityNotFound(nonExistParams);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(\"Account request for email: non-existent@email and institute: non existent institute not found.\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"                enfe.getMessage());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        ______TS(\"typical success case\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String[] params \u003d new String[] {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, accountRequest.getEmail(),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, accountRequest.getInstitute(),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        GetAccountRequestAction a \u003d getAction(params);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonResult r \u003d getJsonResult(a);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AccountRequestData response \u003d (AccountRequestData) r.getOutput();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(response.getName(), accountRequest.getName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(response.getEmail(), accountRequest.getEmail());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(response.getRegistrationKey(), accountRequest.getRegistrationKey());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(response.getInstitute(), accountRequest.getInstitute());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertNull(accountRequest.getRegisteredAt());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    protected void testAccessControl() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":70,"kevin9foong":2}},{"path":"src/test/java/teammates/ui/webapi/GetNotificationActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.BeforeMethod;"},{"lineNumber":4,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Ignore;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * SUT: {@link GetNotificationAction}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"hhdqirui"},"content":"@Ignore"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class GetNotificationActionTest extends BaseActionTest\u003cGetNotificationAction\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.NOTIFICATION;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return GET;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @BeforeMethod"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void baseClassSetup() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected void testAccessControl() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected void testExecute() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // See independent test cases"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected void testExecute_withValidNotificationId_shouldReturnData() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        ______TS(\"Success: Get existing notification\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        NotificationAttributes notification \u003d typicalBundle.notifications.get(\"notification1\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        NotificationData expected \u003d new NotificationData(notification);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String[] requestParams \u003d new String[] {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                Const.ParamsNames.NOTIFICATION_ID, \"notification1\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        GetNotificationAction action \u003d getAction(requestParams);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        JsonResult jsonResult \u003d getJsonResult(action);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        NotificationData output \u003d (NotificationData) jsonResult.getOutput();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        verifyNotificationEquals(expected, output);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected void testExecute_withInvalidNotificationId_shouldThrowError() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        ______TS(\"Failure: Notification does not exist\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        GetNotificationAction action \u003d getAction(Const.ParamsNames.NOTIFICATION_ID, \"invalid-notif\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EntityNotFoundException enfe \u003d assertThrows(EntityNotFoundException.class, action::execute);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification does not exist.\", enfe.getMessage());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ______TS(\"Failure: Notification id is null\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        GetNotificationAction action2 \u003d getAction(Const.ParamsNames.NOTIFICATION_ID, null, new String[] {});"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        InvalidHttpParameterException ihpe \u003d assertThrows(InvalidHttpParameterException.class, action2::execute);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(\"The [notificationid] HTTP parameter is null.\", ihpe.getMessage());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void verifyNotificationEquals(NotificationData expected, NotificationData actual) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(expected.getNotificationId(), actual.getNotificationId());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(expected.getStyle(), actual.getStyle());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(expected.getTargetUser(), actual.getTargetUser());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(expected.getTitle(), actual.getTitle());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expected.getMessage(), actual.getMessage());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expected.getStartTimestamp(), actual.getStartTimestamp());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expected.getEndTimestamp(), actual.getEndTimestamp());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":82}},{"path":"src/test/java/teammates/ui/webapi/GetReadNotificationsActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Ignore;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.ui.output.ReadNotificationsData;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * SUT: {@link GetReadNotificationsAction}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"hhdqirui"},"content":"@Ignore"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class GetReadNotificationsActionTest extends BaseActionTest\u003cGetReadNotificationsAction\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.NOTIFICATION_READ;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return GET;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    protected void testExecute() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ______TS(\"Typical success case: User request to fetch read notifications\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructor.getGoogleId());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        GetReadNotificationsAction action \u003d getAction();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonResult jsonResult \u003d getJsonResult(action);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ReadNotificationsData output \u003d (ReadNotificationsData) jsonResult.getOutput();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e readNotificationsData \u003d output.getReadNotifications();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(readNotificationsData.contains(\"notification1\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(readNotificationsData.contains(\"notification3\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(2, readNotificationsData.size());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected void testAccessControl() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        verifyAnyLoggedInUserCanAccess();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":48}},{"path":"src/test/java/teammates/ui/webapi/MarkNotificationAsReadActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Ignore;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.InstructorAttributes;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.ui.output.ReadNotificationsData;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.ui.request.MarkNotificationAsReadRequest;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * SUT: {@link MarkNotificationAsReadAction}."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"hhdqirui"},"content":"@Ignore"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class MarkNotificationAsReadActionTest extends BaseActionTest\u003cMarkNotificationAsReadAction\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.NOTIFICATION_READ;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return POST;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        InstructorAttributes instructor1OfCourse1 \u003d typicalBundle.instructors.get(\"instructor1OfCourse1\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String instructorId \u003d instructor1OfCourse1.getGoogleId();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NotificationAttributes notification \u003d typicalBundle.notifications.get(\"notification5\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        loginAsInstructor(instructorId);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ______TS(\"Typical success case: mark a notification as read\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        MarkNotificationAsReadRequest reqBody \u003d new MarkNotificationAsReadRequest("},{"lineNumber":40,"author":{"gitId":"-"},"content":"                notification.getNotificationId(), notification.getEndTime().toEpochMilli());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        MarkNotificationAsReadAction action \u003d getAction(reqBody);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonResult actionOutput \u003d getJsonResult(action);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        ReadNotificationsData response \u003d (ReadNotificationsData) actionOutput.getOutput();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        List\u003cString\u003e readNotifications \u003d response.getReadNotifications();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(readNotifications.contains(notification.getNotificationId()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        ______TS(\"Invalid case: mark non-existent notification as read\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        reqBody \u003d new MarkNotificationAsReadRequest(\"invalid id\", notification.getEndTime().toEpochMilli());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        verifyEntityNotFound(reqBody);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ______TS(\"Invalid case: notification end time is zero\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        reqBody \u003d new MarkNotificationAsReadRequest(notification.getNotificationId(), 0L);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        verifyHttpRequestBodyFailure(reqBody);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        verifyAnyLoggedInUserCanAccess();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":59}},{"path":"src/test/java/teammates/ui/webapi/ResetAccountRequestActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.AccountRequestAttributes;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import teammates.common.util.EmailWrapper;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.ui.output.JoinLinkData;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * SUT: {@link ResetAccountRequestAction}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ResetAccountRequestActionTest extends BaseActionTest\u003cResetAccountRequestAction\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    protected String getActionUri() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.ACCOUNT_REQUEST_RESET;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    protected String getRequestMethod() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return PUT;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    protected void testExecute() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        AccountRequestAttributes accountRequest \u003d typicalBundle.accountRequests.get(\"instructor1OfCourse1\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        AccountRequestAttributes unregisteredAccountRequest \u003d typicalBundle.accountRequests.get(\"unregisteredInstructor1\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ______TS(\"Failure case: not enough parameters\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String[] params \u003d {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                // Const.ParamsNames.INSTRUCTOR_EMAIL,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, accountRequest.getInstitute(),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure(params);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, accountRequest.getEmail(),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                // Const.ParamNames.INSTRUCTOR_INSTITUTION,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure(params);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ______TS(\"Failure case: account request not found\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, \"not-found@gmail.tmt\","},{"lineNumber":55,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, \"not-found-institute\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        EntityNotFoundException enfe \u003d verifyEntityNotFound(params);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(\"Account request for instructor with email: not-found@gmail.tmt and institute: \""},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + \"not-found-institute does not exist.\", enfe.getMessage());"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        ______TS(\"Failure case: instructor is unregistered\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, unregisteredAccountRequest.getEmail(),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, unregisteredAccountRequest.getInstitute(),"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        InvalidOperationException ioe \u003d verifyInvalidOperation(params);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(\"Unable to reset account request as instructor is still unregistered.\", ioe.getMessage());"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        ______TS(\"typical success case\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        params \u003d new String[] {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_EMAIL, accountRequest.getEmail(),"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                Const.ParamsNames.INSTRUCTOR_INSTITUTION, accountRequest.getInstitute(),"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        ResetAccountRequestAction a \u003d getAction(params);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonResult r \u003d getJsonResult(a);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        accountRequest \u003d logic.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        JoinLinkData response \u003d (JoinLinkData) r.getOutput();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest.getRegistrationUrl(), response.getJoinLink());"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        AccountRequestAttributes updatedAccountRequest \u003d"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                logic.getAccountRequest(accountRequest.getEmail(), accountRequest.getInstitute());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertNull(updatedAccountRequest.getRegisteredAt());"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        verifyNumberOfEmailsSent(1);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        EmailWrapper emailSent \u003d mockEmailSender.getEmailsSent().get(0);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(String.format(EmailType.NEW_INSTRUCTOR_ACCOUNT.getSubject(), accountRequest.getName()),"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                emailSent.getSubject());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(accountRequest.getEmail(), emailSent.getRecipient());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(emailSent.getContent().contains(accountRequest.getRegistrationUrl()));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"kevin9foong"},"content":"    @Test(enabled \u003d false)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    protected void testAccessControl() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":103,"kevin9foong":2}},{"path":"src/test/java/teammates/ui/webapi/UpdateNotificationActionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package teammates.ui.webapi;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"hhdqirui"},"content":"import org.testng.annotations.Ignore;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.testng.annotations.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationStyle;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.NotificationTargetUser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import teammates.common.datatransfer.attributes.NotificationAttributes;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import teammates.common.util.Const;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import teammates.ui.output.NotificationData;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import teammates.ui.request.InvalidHttpRequestBodyException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import teammates.ui.request.NotificationUpdateRequest;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * SUT: {@link UpdateNotificationAction}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"hhdqirui"},"content":"@Ignore"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UpdateNotificationActionTest extends BaseActionTest\u003cUpdateNotificationAction\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    String getActionUri() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return Const.ResourceURIs.NOTIFICATION;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    String getRequestMethod() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return PUT;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected void testExecute() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NotificationAttributes testNotificationAttribute \u003d typicalBundle.notifications.get(\"notification1\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String[] requestParams \u003d new String[] {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                Const.ParamsNames.NOTIFICATION_ID, testNotificationAttribute.getNotificationId(),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        NotificationUpdateRequest req \u003d getTypicalUpdateRequest();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        NotificationStyle style \u003d req.getStyle();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        NotificationTargetUser targetUser \u003d req.getTargetUser();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String title \u003d req.getTitle();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String message \u003d req.getMessage();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String invalidNotificationId \u003d \"InvalidNotificationId\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        loginAsAdmin();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ______TS(\"Typical Case: Update notification successfully\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        UpdateNotificationAction action \u003d getAction(req, requestParams);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        NotificationData res \u003d (NotificationData) action.execute().getOutput();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        NotificationAttributes updatedNotification \u003d logic.getNotification(res.getNotificationId());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Verify that correctly updated in the DB"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(req.getStartTimestamp(), updatedNotification.getStartTime().toEpochMilli());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(req.getEndTimestamp(), updatedNotification.getEndTime().toEpochMilli());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(style, updatedNotification.getStyle());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(targetUser, updatedNotification.getTargetUser());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(title, updatedNotification.getTitle());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(message, updatedNotification.getMessage());"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ______TS(\"Parameters cannot be null\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        req.setStyle(null);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        InvalidHttpRequestBodyException ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification style cannot be null\", ex.getMessage());"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        req.setTargetUser(null);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification target user cannot be null\", ex.getMessage());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        req.setTitle(null);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification title cannot be null\", ex.getMessage());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        req.setMessage(null);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(\"Notification message cannot be null\", ex.getMessage());"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ______TS(\"Timestamps should be greater than 0\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        req.setStartTimestamp(-1);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(\"Start timestamp should be greater than zero\", ex.getMessage());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        req.setEndTimestamp(-1);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(\"End timestamp should be greater than zero\", ex.getMessage());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        ______TS(\"Start timestamp should not be after end timestamp\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        req.setEndTimestamp(req.getStartTimestamp() - 100);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        ex \u003d verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(\"The time when the notification will expire for this notification \""},{"lineNumber":102,"author":{"gitId":"-"},"content":"                + \"cannot be earlier than the time when the notification will be visible.\","},{"lineNumber":103,"author":{"gitId":"-"},"content":"                ex.getMessage());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        ______TS(\"Invalid parameter should throw an error\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        req.setTitle(invalidTitle);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        verifyHttpRequestBodyFailure(req, requestParams);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        ______TS(\"Non-existent notification should throw an error\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requestParams \u003d new String[] {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                Const.ParamsNames.NOTIFICATION_ID, invalidNotificationId,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        verifyEntityNotFound(req, requestParams);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        ______TS(\"Not enough request parameters should throw an error\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        req \u003d getTypicalUpdateRequest();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        verifyHttpParameterFailure(req);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    protected void testAccessControl() throws Exception {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        verifyOnlyAdminCanAccess();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private NotificationUpdateRequest getTypicalUpdateRequest() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        NotificationUpdateRequest req \u003d new NotificationUpdateRequest();"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        req.setStartTimestamp(Instant.now().toEpochMilli());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        req.setEndTimestamp(Instant.now().plus(5, ChronoUnit.DAYS).toEpochMilli());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        req.setStyle(NotificationStyle.INFO);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        req.setTargetUser(NotificationTargetUser.GENERAL);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        req.setTitle(\"New notification title\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        req.setMessage(\"New notification message\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return req;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hhdqirui":2,"-":138}},{"path":"src/web/app/components/progress-bar/progress-bar.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ProgressBarService } from \u0027../../../services/progress-bar.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * Progress bar used to show download progress."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  selector: \u0027tm-progress-bar\u0027,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./progress-bar.component.html\u0027,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"})"},{"lineNumber":11,"author":{"gitId":"-"},"content":"export class ProgressBarComponent implements OnInit {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"domlimm"},"content":"  progressPercentage: number \u003d 10;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  constructor(private progressBarService: ProgressBarService) { }"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  ngOnInit(): void {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    this.getProgress();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  getProgress(): void {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    this.progressBarService.progressPercentage.subscribe((progressPercentage: number) \u003d\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      this.progressPercentage \u003d progressPercentage;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":1,"-":25}},{"path":"src/web/app/components/question-edit-form/question-edit-form.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, EventEmitter, Input, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { NgbModalRef } from \u0027@ng-bootstrap/ng-bootstrap\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { CommonVisibilitySetting, FeedbackQuestionsService } from \u0027../../../services/feedback-questions.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { SimpleModalService } from \u0027../../../services/simple-modal.service\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { VisibilityStateMachine } from \u0027../../../services/visibility-state-machine\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  FeedbackParticipantType,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  FeedbackQuestionType,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  FeedbackTextQuestionDetails,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  FeedbackVisibilityType,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  NumberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"} from \u0027../../../types/api-output\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { VisibilityControl } from \u0027../../../types/visibility-control\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { SimpleModalType } from \u0027../simple-modal/simple-modal-type\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { collapseAnim } from \u0027../teammates-common/collapse-anim\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { QuestionEditFormMode, QuestionEditFormModel } from \u0027./question-edit-form-model\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"const FEEDBACK_PATH_PROPERTIES: Set\u003cstring\u003e \u003d new Set\u003cstring\u003e(["},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u0027giverType\u0027,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u0027recipientType\u0027,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u0027isUsingOtherFeedbackPath\u0027,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u0027numberOfEntitiesToGiveFeedbackToSetting\u0027,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  \u0027customNumberOfEntitiesToGiveFeedbackTo\u0027,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"]);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"const VISIBILITY_PROPERTIES: Set\u003cstring\u003e \u003d new Set\u003cstring\u003e(["},{"lineNumber":26,"author":{"gitId":"-"},"content":"  \u0027isUsingOtherVisibilitySetting\u0027,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  \u0027showResponsesTo\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u0027showGiverNameTo\u0027,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  \u0027showRecipientNameTo\u0027,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u0027commonVisibilitySettingName\u0027,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"]);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"const QUESTION_DETAIL_PROPERTIES: Set\u003cstring\u003e \u003d new Set\u003cstring\u003e(["},{"lineNumber":33,"author":{"gitId":"-"},"content":"  \u0027questionBrief\u0027,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u0027questionDescription\u0027,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u0027questionDetails\u0027,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u0027questionNumber\u0027,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"]);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * The question edit form component."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  selector: \u0027tm-question-edit-form\u0027,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./question-edit-form.component.html\u0027,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./question-edit-form.component.scss\u0027],"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  animations: [collapseAnim],"},{"lineNumber":47,"author":{"gitId":"-"},"content":"})"},{"lineNumber":48,"author":{"gitId":"-"},"content":"export class QuestionEditFormComponent {"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"  // enum"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  FeedbackQuestionType: typeof FeedbackQuestionType \u003d FeedbackQuestionType;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  QuestionEditFormMode: typeof QuestionEditFormMode \u003d QuestionEditFormMode;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  FeedbackParticipantType: typeof FeedbackParticipantType \u003d FeedbackParticipantType;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  NumberOfEntitiesToGiveFeedbackToSetting: typeof NumberOfEntitiesToGiveFeedbackToSetting \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      NumberOfEntitiesToGiveFeedbackToSetting;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  VisibilityControl: typeof VisibilityControl \u003d VisibilityControl;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  FeedbackVisibilityType: typeof FeedbackVisibilityType \u003d FeedbackVisibilityType;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  set formModel(model: QuestionEditFormModel) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    this.model \u003d model;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    this.commonFeedbackPaths \u003d this.feedbackQuestionsService.getCommonFeedbackPaths(model.questionType);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    this.allowedFeedbackPaths \u003d this.feedbackQuestionsService.getAllowedFeedbackPaths(model.questionType);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.visibilityStateMachine \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.getNewVisibilityStateMachine(model.giverType, model.recipientType);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    this.commonFeedbackVisibilitySettings \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.getCommonFeedbackVisibilitySettings("},{"lineNumber":69,"author":{"gitId":"-"},"content":"            this.visibilityStateMachine, model.questionType);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    const visibilitySetting: { [TKey in VisibilityControl]: FeedbackVisibilityType[] } \u003d {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      SHOW_RESPONSE: model.showResponsesTo,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      SHOW_GIVER_NAME: model.showGiverNameTo,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      SHOW_RECIPIENT_NAME: model.showRecipientNameTo,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    this.visibilityStateMachine.applyVisibilitySettings(visibilitySetting);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    if (!model.isUsingOtherFeedbackPath) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      // find if the feedback path is in the common feedback paths"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      this.model.isUsingOtherFeedbackPath \u003d true;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      if (this.commonFeedbackPaths.has(model.giverType)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion"},{"lineNumber":83,"author":{"gitId":"-"},"content":"          \u0026\u0026 this.commonFeedbackPaths.get(model.giverType)!.includes(model.recipientType)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.model.isUsingOtherFeedbackPath \u003d false;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    if (!model.commonVisibilitySettingName \u0026\u0026 !model.isUsingOtherVisibilitySetting) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"      // find if the visibility settings is in the common visibility settings"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      this.model.isUsingOtherVisibilitySetting \u003d true;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      for (const commonVisibilityOption of this.commonFeedbackVisibilitySettings) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (this.isSameSet(visibilitySetting.SHOW_RESPONSE, commonVisibilityOption.visibilitySettings.SHOW_RESPONSE)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            \u0026\u0026 this.isSameSet(visibilitySetting.SHOW_GIVER_NAME,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                commonVisibilityOption.visibilitySettings.SHOW_GIVER_NAME)"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u0026\u0026 this.isSameSet(visibilitySetting.SHOW_RECIPIENT_NAME,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                commonVisibilityOption.visibilitySettings.SHOW_RECIPIENT_NAME)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"          this.model.commonVisibilitySettingName \u003d commonVisibilityOption.name;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"          this.model.isUsingOtherVisibilitySetting \u003d false;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"          break;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"   * Returns whether setting the custom feedback visibility is allowed."},{"lineNumber":106,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  get isCustomFeedbackVisibilitySettingAllowed(): boolean {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    return this.feedbackQuestionsService.isCustomFeedbackVisibilitySettingAllowed(this.model.questionType);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  numOfQuestions: number \u003d 0;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  formMode: QuestionEditFormMode \u003d QuestionEditFormMode.EDIT;"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  // if true, the question edit form is used for displaying of the question edit form only"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  // no editing function will be available; the edit button will be hidden"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  isDisplayOnly: boolean \u003d false;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"cedricongjh"},"content":"  @Input()"},{"lineNumber":123,"author":{"gitId":"cedricongjh"},"content":"  isQuestionPublished: boolean \u003d false;"},{"lineNumber":124,"author":{"gitId":"cedricongjh"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"  model: QuestionEditFormModel \u003d {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    feedbackQuestionId: \u0027\u0027,"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    questionNumber: 0,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    questionBrief: \u0027\u0027,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    questionDescription: \u0027\u0027,"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    isQuestionHasResponses: false,"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    questionType: FeedbackQuestionType.TEXT,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    questionDetails: {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      questionType: FeedbackQuestionType.TEXT,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"      questionText: \u0027\u0027,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    } as FeedbackTextQuestionDetails,"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    giverType: FeedbackParticipantType.STUDENTS,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    recipientType: FeedbackParticipantType.STUDENTS_EXCLUDING_SELF,"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    numberOfEntitiesToGiveFeedbackToSetting: NumberOfEntitiesToGiveFeedbackToSetting.UNLIMITED,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    customNumberOfEntitiesToGiveFeedbackTo: 1,"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    showResponsesTo: [],"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    showGiverNameTo: [],"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    showRecipientNameTo: [],"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    commonVisibilitySettingName: \u0027\u0027,"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    isUsingOtherFeedbackPath: false,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    isUsingOtherVisibilitySetting: false,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    isDeleting: false,"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    isDuplicating: false,"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    isEditable: false,"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    isSaving: false,"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    isCollapsed: false,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    isVisibilityChanged: false,"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    isFeedbackPathChanged: false,"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    isQuestionDetailsChanged: false,"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  formModelChange: EventEmitter\u003cQuestionEditFormModel\u003e \u003d new EventEmitter();"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  saveExistingQuestionEvent: EventEmitter\u003cvoid\u003e \u003d new EventEmitter();"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  deleteCurrentQuestionEvent: EventEmitter\u003cvoid\u003e \u003d new EventEmitter();"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  duplicateCurrentQuestionEvent: EventEmitter\u003cvoid\u003e \u003d new EventEmitter();"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":177,"author":{"gitId":"-"},"content":"  discardExistingQuestionChangesEvent: EventEmitter\u003cvoid\u003e \u003d new EventEmitter();"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  discardNewQuestionEvent: EventEmitter\u003cvoid\u003e \u003d new EventEmitter();"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":183,"author":{"gitId":"-"},"content":"  createNewQuestionEvent: EventEmitter\u003cvoid\u003e \u003d new EventEmitter();"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"  commonFeedbackPaths: Map\u003cFeedbackParticipantType, FeedbackParticipantType[]\u003e \u003d new Map();"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"  allowedFeedbackPaths: Map\u003cFeedbackParticipantType, FeedbackParticipantType[]\u003e \u003d new Map();"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"  commonFeedbackVisibilitySettings: CommonVisibilitySetting[] \u003d [];"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"  visibilityStateMachine: VisibilityStateMachine;"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"  constructor(private feedbackQuestionsService: FeedbackQuestionsService,"},{"lineNumber":194,"author":{"gitId":"-"},"content":"              private simpleModalService: SimpleModalService) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    this.visibilityStateMachine \u003d"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.getNewVisibilityStateMachine("},{"lineNumber":197,"author":{"gitId":"-"},"content":"            this.model.giverType, this.model.recipientType);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"  private isSameSet(setA: FeedbackVisibilityType[], setB: FeedbackVisibilityType[]): boolean {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    return setA.length \u003d\u003d\u003d setB.length \u0026\u0026 setA.every((ele: FeedbackVisibilityType) \u003d\u003e setB.includes(ele));"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * Triggers the change of the model for the form."},{"lineNumber":206,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"  triggerModelChange(field: keyof QuestionEditFormModel,"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                     data: QuestionEditFormModel[keyof QuestionEditFormModel]): void {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    this.formModelChange.emit({"},{"lineNumber":210,"author":{"gitId":"-"},"content":"      ...this.model,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      [field]: data,"},{"lineNumber":212,"author":{"gitId":"-"},"content":"      ...(!this.model.isVisibilityChanged \u0026\u0026 VISIBILITY_PROPERTIES.has(field)"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        \u0026\u0026 { isVisibilityChanged: true }),"},{"lineNumber":214,"author":{"gitId":"-"},"content":"      ...(!this.model.isFeedbackPathChanged \u0026\u0026 FEEDBACK_PATH_PROPERTIES.has(field)"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        \u0026\u0026 { isFeedbackPathChanged: true }),"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      ...(!this.model.isQuestionDetailsChanged \u0026\u0026 QUESTION_DETAIL_PROPERTIES.has(field)"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        \u0026\u0026 { isQuestionDetailsChanged: true }),"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"   * Triggers the change of the model for the form."},{"lineNumber":223,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  triggerModelChangeBatch(obj: Partial\u003cQuestionEditFormModel\u003e): void {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    this.formModelChange.emit({"},{"lineNumber":226,"author":{"gitId":"-"},"content":"      ...this.model,"},{"lineNumber":227,"author":{"gitId":"-"},"content":"      ...obj,"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      ...(!this.model.isVisibilityChanged"},{"lineNumber":229,"author":{"gitId":"-"},"content":"          \u0026\u0026 Object.keys(obj).some((key: string) \u003d\u003e VISIBILITY_PROPERTIES.has(key))"},{"lineNumber":230,"author":{"gitId":"-"},"content":"          \u0026\u0026 { isVisibilityChanged: true }),"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      ...(!this.model.isFeedbackPathChanged"},{"lineNumber":232,"author":{"gitId":"-"},"content":"          \u0026\u0026 Object.keys(obj).some((key: string) \u003d\u003e FEEDBACK_PATH_PROPERTIES.has(key))"},{"lineNumber":233,"author":{"gitId":"-"},"content":"          \u0026\u0026 { isFeedbackPathChanged: true }),"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      ...(!this.model.isQuestionDetailsChanged"},{"lineNumber":235,"author":{"gitId":"-"},"content":"          \u0026\u0026 Object.keys(obj).some((key: string) \u003d\u003e QUESTION_DETAIL_PROPERTIES.has(key))"},{"lineNumber":236,"author":{"gitId":"-"},"content":"          \u0026\u0026 { isQuestionDetailsChanged: true }),"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":241,"author":{"gitId":"-"},"content":"   * Helper methods to create a range."},{"lineNumber":242,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  range(num: number): number[] {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const ranges: number[] \u003d [];"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    for (let i: number \u003d 0; i \u003c num; i +\u003d 1) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      ranges.push(i);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    return ranges;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   * Handle event to discard changes users made."},{"lineNumber":253,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  discardChangesHandler(isNewQuestion: boolean): void {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    if (!this.model.isVisibilityChanged"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      \u0026\u0026 !this.model.isFeedbackPathChanged"},{"lineNumber":257,"author":{"gitId":"-"},"content":"      \u0026\u0026 !this.model.isQuestionDetailsChanged) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"      this.discardChanges();"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    const modalRef: NgbModalRef \u003d this.simpleModalService.openConfirmationModal("},{"lineNumber":262,"author":{"gitId":"-"},"content":"        `Discard unsaved ${isNewQuestion ? \u0027question\u0027 : \u0027edits\u0027}?`, SimpleModalType.WARNING,"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u0027Warning: Any unsaved changes will be lost\u0027,"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        { cancelMessage: \u0027No, go back to editing\u0027 });"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    modalRef.result.then(() \u003d\u003e {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      this.discardChanges();"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }, () \u003d\u003e {});"},{"lineNumber":268,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"  private discardChanges(): void {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    if (this.formMode \u003d\u003d\u003d QuestionEditFormMode.EDIT) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      this.discardExistingQuestionChangesEvent.emit();"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    if (this.formMode \u003d\u003d\u003d QuestionEditFormMode.ADD) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"      this.discardNewQuestionEvent.emit();"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":280,"author":{"gitId":"-"},"content":"   * Saves the question."},{"lineNumber":281,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  saveQuestionHandler(): void {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    if (this.formMode \u003d\u003d\u003d QuestionEditFormMode.EDIT) {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      const doChangesNeedWarning: boolean \u003d this.model.isQuestionDetailsChanged"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        || this.model.isVisibilityChanged"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        || this.model.isFeedbackPathChanged;"},{"lineNumber":287,"author":{"gitId":"cedricongjh"},"content":"      if (!this.isQuestionPublished \u0026\u0026 (!this.model.isQuestionHasResponses || !doChangesNeedWarning)) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        this.saveExistingQuestionEvent.emit();"},{"lineNumber":289,"author":{"gitId":"-"},"content":"      } else if (this.model.isFeedbackPathChanged) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        // warn user that editing feedback path will delete all messages"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        const modalContent: string \u003d `"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            \u003cp\u003eYou seem to have changed the feedback path settings of this question. Please note that changing the"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            feedback path will cause \u003cb\u003eall existing responses to be deleted.\u003c/b\u003e Proceed?\u003c/p\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        `;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        const modalRef: NgbModalRef \u003d this.simpleModalService.openConfirmationModal("},{"lineNumber":296,"author":{"gitId":"-"},"content":"            \u0027Save the question?\u0027, SimpleModalType.DANGER, modalContent);"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        modalRef.result.then(() \u003d\u003e {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"          this.saveExistingQuestionEvent.emit();"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        }, () \u003d\u003e {});"},{"lineNumber":300,"author":{"gitId":"-"},"content":"      } else if (this.model.isQuestionDetailsChanged) {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        // alert user that editing question may result in deletion of responses"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        const modalContent: string \u003d `"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            \u003cp\u003eEditing question settings in a way that potentially affects the validity of existing responses \u003cb\u003e may"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            cause all the existing responses for this question to be deleted.\u003c/b\u003e Proceed?\u003c/p\u003e"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        `;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        const modalRef: NgbModalRef \u003d this.simpleModalService.openConfirmationModal("},{"lineNumber":307,"author":{"gitId":"-"},"content":"            \u0027Save the question?\u0027, SimpleModalType.DANGER, modalContent);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        modalRef.result.then(() \u003d\u003e {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"          this.saveExistingQuestionEvent.emit();"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        }, () \u003d\u003e {});"},{"lineNumber":311,"author":{"gitId":"-"},"content":"      } else if (this.model.isVisibilityChanged) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        // alert user that editing visibility options will not delete responses"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        const modalContent: string \u003d `"},{"lineNumber":314,"author":{"gitId":"-"},"content":"            \u003cp\u003eYou seem to have changed the visibility settings of this question. Please note that \u003cb\u003ethe existing"},{"lineNumber":315,"author":{"gitId":"-"},"content":"            responses will remain but their visibility will be changed as per the new visibility settings.\u003c/b\u003e"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            Proceed?\u003c/p\u003e"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        `;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        const modalRef: NgbModalRef \u003d this.simpleModalService.openConfirmationModal("},{"lineNumber":319,"author":{"gitId":"-"},"content":"            \u0027Save the question?\u0027, SimpleModalType.WARNING, modalContent);"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        modalRef.result.then(() \u003d\u003e {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"          this.saveExistingQuestionEvent.emit();"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        }, () \u003d\u003e {});"},{"lineNumber":323,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    if (this.formMode \u003d\u003d\u003d QuestionEditFormMode.ADD) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      this.createNewQuestionEvent.emit();"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":331,"author":{"gitId":"-"},"content":"   * Handles event for duplicating the current question."},{"lineNumber":332,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":333,"author":{"gitId":"-"},"content":"  duplicateCurrentQuestionHandler(): void {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    this.duplicateCurrentQuestionEvent.emit();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":338,"author":{"gitId":"-"},"content":"   * Handles event for deleting the current question."},{"lineNumber":339,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":340,"author":{"gitId":"-"},"content":"  deleteCurrentQuestionHandler(): void {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    this.deleteCurrentQuestionEvent.emit();"},{"lineNumber":342,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cedricongjh":4,"-":339}},{"path":"src/web/app/components/question-submission-form/question-submission-form.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"question-submission-form\" class\u003d\"card\"\u003e"},{"lineNumber":2,"author":{"gitId":"domlimm"},"content":"  \u003cdiv class\u003d\"card-header bg-primary text-white question-header\""},{"lineNumber":3,"author":{"gitId":"domlimm"},"content":"    [ngClass]\u003d\"isSaved ? \u0027bg-success\u0027 : \u0027bg-primary\u0027\"\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \u003ci class\u003d\"fas fa-check me-2\" *ngIf\u003d\"isSaved\"\u003e\u003c/i\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003cspan id\u003d\"question-details\"\u003e\u003cb\u003eQuestion {{ model.questionNumber }}: \u003c/b\u003e{{ model.questionBrief }}\u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"card-body\" *tmIsLoading\u003d\"model.isLoading\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"card mb-3\" *ngIf\u003d\"model.questionDescription\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"card-header\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        \u003cb\u003eMore details\u003c/b\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"question-description\" class\u003d\"card-body\" [innerHTML]\u003d\"model.questionDescription | safeHtml\"\u003e\u003c/div\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"card-body visibility-card\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cp class\u003d\"text-secondary\"\u003eOnly the following persons can see your responses: \u003c/p\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cul id\u003d\"visibility-list\" class\u003d\"text-secondary\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cli *ngIf\u003d\"model.recipientType \u003d\u003d\u003d FeedbackParticipantType.SELF\"\u003eYou can see your own feedback in the results page later on.\u003c/li\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cng-container *ngFor\u003d\"let visibilityType of FeedbackVisibilityType | enumToArray\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"          \u003cli *ngIf\u003d\"visibilityStateMachine.isVisibilityTypeApplicable(visibilityType) \u0026\u0026 visibilityStateMachine.hasAnyVisibilityControl(visibilityType)\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            {{ visibilityType | visibilityEntityName:model.recipientType:model.numberOfEntitiesToGiveFeedbackToSetting:model.customNumberOfEntitiesToGiveFeedbackTo }} {{ visibilityStateMachine.getVisibilityControlUnderVisibilityType(visibilityType) | visibilityCapability }}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003c/li\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003c/ng-container\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cli *ngIf\u003d\"!visibilityStateMachine.hasAnyVisibilityControlForAll()\"\u003eNo-one can see your responses\u003c/li\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003c/ul\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \u003ctm-contribution-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONTRIB\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"                                          [questionDetails]\u003d\"model.questionDetails\" [numOfRecipients]\u003d\"model.recipientSubmissionForms.length\"\u003e\u003c/tm-contribution-question-instruction\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u003ctm-text-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.TEXT\"\u003e\u003c/tm-text-question-instruction\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003ctm-num-scale-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.NUMSCALE\"\u003e\u003c/tm-num-scale-question-instruction\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003ctm-text-question-constraint *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.TEXT\"\u003e\u003c/tm-text-question-constraint\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003ctm-num-scale-question-constraint *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.NUMSCALE\"\u003e\u003c/tm-num-scale-question-constraint\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003ctm-rank-options-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.RANK_OPTIONS\" [questionDetails]\u003d\"model.questionDetails\"\u003e\u003c/tm-rank-options-question-instruction\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003ctm-msq-question-constraint *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.MSQ\" [questionDetails]\u003d\"model.questionDetails\"\u003e\u003c/tm-msq-question-constraint\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003ctm-rank-recipients-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.RANK_RECIPIENTS\" [questionDetails]\u003d\"model.questionDetails\"\u003e\u003c/tm-rank-recipients-question-instruction\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003ctm-constsum-options-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONSTSUM_OPTIONS\" [questionDetails]\u003d\"model.questionDetails\"\u003e\u003c/tm-constsum-options-question-instruction\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003ctm-constsum-recipients-question-instruction *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONSTSUM_RECIPIENTS\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"                                                 [questionDetails]\u003d\"model.questionDetails\" [numOfRecipients]\u003d\"model.recipientSubmissionForms.length\"\u003e\u003c/tm-constsum-recipients-question-instruction\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"form-row margin-top-30px margin-bottom-0px\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-2\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        \u003cp *ngIf\u003d\"model.recipientType !\u003d\u003d FeedbackParticipantType.NONE \u0026\u0026 model.recipientType !\u003d\u003d FeedbackParticipantType.SELF\" \u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cspan class\u003d\"ngb-tooltip-class font-bold\" ngbTooltip\u003d\"The party being evaluated or given feedback to\"\u003eEvaluee/Recipient\u003c/span\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003c/p\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"form-check\" *ngIf\u003d\"hasSectionTeam\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003cinput type\u003d\"checkbox\" id\u003d\"showSectionTeam\" name\u003d\"showSectionTeam\" value\u003d\"sectionTeam\" (change)\u003d\"toggleSectionTeam($event)\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003clabel class\u003d\"form-check-label ms-1\" for\u003d\"showSectionTeam\"\u003eShow Section/Team\u003c/label\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"alert alert-primary\" role\u003d\"alert\" *ngIf\u003d\"model.giverType \u003d\u003d\u003d FeedbackParticipantType.TEAMS\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      Please note that you are submitting this response on behalf of your team."},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"evaluee-col col-12\"\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"row\" *ngFor\u003d\"let recipientSubmissionFormModel of model.recipientSubmissionForms; let i \u003d index; trackBy: trackRecipientSubmissionFormByFn\"\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"col-md-5 col-xs-12 margin-top-20px\" *ngIf\u003d\"model.recipientType !\u003d\u003d FeedbackParticipantType.SELF \u0026\u0026 model.recipientType !\u003d\u003d FeedbackParticipantType.NONE\"\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \u003cdiv id\u003d\"recipient-name-{{ i }}\" *ngIf\u003d\"formMode \u003d\u003d\u003d QuestionSubmissionFormMode.FIXED_RECIPIENT\"\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"              \u003cb\u003e{{ getRecipientName(recipientSubmissionFormModel.recipientIdentifier) }} \u003c/b\u003e \u003cspan\u003e({{ model.recipientType | recipientTypeName:model.giverType }})\u003c/span\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            \u003cdiv class\u003d\"row evaluee-select align-items-center\" *ngIf\u003d\"formMode \u003d\u003d\u003d QuestionSubmissionFormMode.FLEXIBLE_RECIPIENT\"\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"              \u003cselect id\u003d\"recipient-dropdown\" class\u003d\"form-control form-select fw-bold col\" [ngModel]\u003d\"recipientSubmissionFormModel.recipientIdentifier\""},{"lineNumber":67,"author":{"gitId":"-"},"content":"                      (ngModelChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027recipientIdentifier\u0027, $event)\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"                      [disabled]\u003d\"isFormsDisabled\"\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u003coption value\u003d\"\"\u003e\u003c/option\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u003cng-container *ngFor\u003d\"let recipient of model.recipientList\"\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                  \u003coption *ngIf\u003d\"!isRecipientSelected(recipient) || recipientSubmissionFormModel.recipientIdentifier \u003d\u003d\u003d recipient.recipientIdentifier\" [ngValue]\u003d\"recipient.recipientIdentifier\"\u003e{{ getSelectionOptionLabel(recipient) }}\u003c/option\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u003c/ng-container\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"              \u003c/select\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"col-auto text-start\"\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                ({{ model.recipientType | recipientTypeName: model.giverType }})"},{"lineNumber":76,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"          \u003cdiv class\u003d\"margin-top-20px\" [ngClass]\u003d\"isMCQDropDownEnabled ? \u0027col-12\u0027 : \u0027col\u0027\"\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \u003ctm-contribution-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONTRIB\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":81,"author":{"gitId":"-"},"content":"                                                      [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":82,"author":{"gitId":"-"},"content":"                                                      [shouldShowHelpLink]\u003d\"i \u003d\u003d\u003d 0\""},{"lineNumber":83,"author":{"gitId":"-"},"content":"                                                      (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":84,"author":{"gitId":"-"},"content":"                                                      [isDisabled]\u003d\"isFormsDisabled\""},{"lineNumber":85,"author":{"gitId":"-"},"content":"            \u003e\u003c/tm-contribution-question-edit-answer-form\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \u003ctm-text-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.TEXT\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":87,"author":{"gitId":"-"},"content":"                                              [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":88,"author":{"gitId":"-"},"content":"                                              (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":89,"author":{"gitId":"-"},"content":"                                              [isDisabled]\u003d\"isFormsDisabled\""},{"lineNumber":90,"author":{"gitId":"-"},"content":"            \u003e\u003c/tm-text-question-edit-answer-form\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            \u003ctm-rank-options-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.RANK_OPTIONS\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":92,"author":{"gitId":"-"},"content":"                                                       [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":93,"author":{"gitId":"-"},"content":"                                                       (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":94,"author":{"gitId":"-"},"content":"                                                       [isDisabled]\u003d\"isFormsDisabled\"\u003e\u003c/tm-rank-options-question-edit-answer-form\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003ctm-rank-recipients-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.RANK_RECIPIENTS\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":96,"author":{"gitId":"-"},"content":"                                                          [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":97,"author":{"gitId":"-"},"content":"                                                          (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":98,"author":{"gitId":"-"},"content":"                                                          [isDisabled]\u003d\"isFormsDisabled\" [numOfRecipients]\u003d\"model.recipientSubmissionForms.length\"\u003e\u003c/tm-rank-recipients-question-edit-answer-form\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            \u003ctm-num-scale-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.NUMSCALE\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":100,"author":{"gitId":"-"},"content":"                                                    [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":101,"author":{"gitId":"-"},"content":"                                                    (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":102,"author":{"gitId":"-"},"content":"                                                    [isDisabled]\u003d\"isFormsDisabled\""},{"lineNumber":103,"author":{"gitId":"-"},"content":"            \u003e\u003c/tm-num-scale-question-edit-answer-form\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            \u003ctm-mcq-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.MCQ\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":105,"author":{"gitId":"-"},"content":"                                                    [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":106,"author":{"gitId":"-"},"content":"                                                    (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":107,"author":{"gitId":"-"},"content":"                                                    [isDisabled]\u003d\"isFormsDisabled\""},{"lineNumber":108,"author":{"gitId":"-"},"content":"                                                    [id]\u003d\"model.feedbackQuestionId + recipientSubmissionFormModel.recipientIdentifier\""},{"lineNumber":109,"author":{"gitId":"-"},"content":"                                                    (cssRefresh)\u003drefreshCssForDropdownMCQ($event)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            \u003e\u003c/tm-mcq-question-edit-answer-form\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            \u003ctm-msq-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.MSQ\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                              [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":113,"author":{"gitId":"-"},"content":"                                              (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":114,"author":{"gitId":"-"},"content":"                                              [isDisabled]\u003d\"isFormsDisabled\""},{"lineNumber":115,"author":{"gitId":"-"},"content":"            \u003e\u003c/tm-msq-question-edit-answer-form\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            \u003ctm-rubric-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.RUBRIC\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                                 [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                                 (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":119,"author":{"gitId":"-"},"content":"                                                 [isDisabled]\u003d\"isFormsDisabled\""},{"lineNumber":120,"author":{"gitId":"-"},"content":"                                                 [id]\u003d\"model.feedbackQuestionId + recipientSubmissionFormModel.recipientIdentifier\"\u003e\u003c/tm-rubric-question-edit-answer-form\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            \u003ctm-constsum-options-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONSTSUM_OPTIONS\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":122,"author":{"gitId":"-"},"content":"                                                           [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":123,"author":{"gitId":"-"},"content":"                                                           (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":124,"author":{"gitId":"-"},"content":"                                                           [isDisabled]\u003d\"isFormsDisabled\"\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            \u003c/tm-constsum-options-question-edit-answer-form\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            \u003ctm-constsum-recipients-question-edit-answer-form *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONSTSUM_RECIPIENTS\" [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":127,"author":{"gitId":"-"},"content":"                                                           [responseDetails]\u003d\"recipientSubmissionFormModel.responseDetails\""},{"lineNumber":128,"author":{"gitId":"-"},"content":"                                                           (responseDetailsChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027responseDetails\u0027, $event)\""},{"lineNumber":129,"author":{"gitId":"-"},"content":"                                                           [isDisabled]\u003d\"isFormsDisabled\"\u003e\u003c/tm-constsum-recipients-question-edit-answer-form\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"          \u003cdiv id\u003d\"comment-section\" *ngIf\u003d\"allowedToHaveParticipantComment\" class\u003d\"col-12 margin-bottom-20px margin-top-10px indent\"\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            \u003cdiv *ngIf\u003d\"recipientSubmissionFormModel.commentByGiver \u0026\u0026 recipientSubmissionFormModel.commentByGiver.originalComment else newComment\"\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":"              \u003ctm-comment-row [mode]\u003d\"CommentRowMode.EDIT\" [isVisibilityOptionEnabled]\u003d\"false\""},{"lineNumber":135,"author":{"gitId":"-"},"content":"                              [model]\u003d\"recipientSubmissionFormModel.commentByGiver\""},{"lineNumber":136,"author":{"gitId":"-"},"content":"                              (modelChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027commentByGiver\u0027, $event)\""},{"lineNumber":137,"author":{"gitId":"-"},"content":"                              [isFeedbackParticipantComment]\u003d\"true\""},{"lineNumber":138,"author":{"gitId":"-"},"content":"                              [questionShowResponsesTo]\u003d\"model.showResponsesTo\""},{"lineNumber":139,"author":{"gitId":"-"},"content":"                              [shouldHideSavingButton]\u003d\"true\""},{"lineNumber":140,"author":{"gitId":"-"},"content":"                              (deleteCommentEvent)\u003d\"triggerDeleteCommentEvent(i)\""},{"lineNumber":141,"author":{"gitId":"-"},"content":"                              (closeEditingEvent)\u003d\"discardEditedParticipantComment(i)\""},{"lineNumber":142,"author":{"gitId":"-"},"content":"                              [isDisabled]\u003d\"isFormsDisabled || isFeedbackResponseDetailsEmpty(recipientSubmissionFormModel.responseDetails)\"\u003e\u003c/tm-comment-row\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"              \u003cdiv class\u003d\"alert alert-warning margin-top-10px\" role\u003d\"alert\" *ngIf\u003d\"isFeedbackResponseDetailsEmpty(recipientSubmissionFormModel.responseDetails)\"\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                You must provide a valid response in order to give a comment or your comment will not be saved!"},{"lineNumber":145,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            \u003c/div\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            \u003cng-template #newComment\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":"              \u003cdiv style\u003d\"display: inline-block;\" [ngbTooltip]\u003d\"isFeedbackResponseDetailsEmpty(recipientSubmissionFormModel.responseDetails) ? \u0027Give a valid response in order to comment\u0027 : \u0027\u0027\"\u003e"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \u003cbutton id\u003d\"btn-add-comment\" *ngIf\u003d\"!recipientSubmissionFormModel.commentByGiver\" class\u003d\"btn btn-light btn-sm\""},{"lineNumber":150,"author":{"gitId":"-"},"content":"                        (click)\u003d\"addNewParticipantCommentToResponse(i)\""},{"lineNumber":151,"author":{"gitId":"-"},"content":"                        [disabled]\u003d\"isFormsDisabled || isFeedbackResponseDetailsEmpty(recipientSubmissionFormModel.responseDetails)\"\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                  \u003ci class\u003d\"fas fa-comment\"\u003e\u003c/i\u003e [Optional] Comment on your response"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                \u003c/button\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"              \u003cdiv *ngIf\u003d\"recipientSubmissionFormModel.commentByGiver\"\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u003ctm-comment-row [mode]\u003d\"CommentRowMode.ADD\" [isVisibilityOptionEnabled]\u003d\"false\""},{"lineNumber":157,"author":{"gitId":"-"},"content":"                                [isFeedbackParticipantComment]\u003d\"true\""},{"lineNumber":158,"author":{"gitId":"-"},"content":"                                [questionShowResponsesTo]\u003d\"model.showResponsesTo\""},{"lineNumber":159,"author":{"gitId":"-"},"content":"                                [shouldHideSavingButton]\u003d\"true\""},{"lineNumber":160,"author":{"gitId":"-"},"content":"                                [model]\u003d\"recipientSubmissionFormModel.commentByGiver\""},{"lineNumber":161,"author":{"gitId":"-"},"content":"                                (modelChange)\u003d\"triggerRecipientSubmissionFormChange(i, \u0027commentByGiver\u0027, $event)\""},{"lineNumber":162,"author":{"gitId":"-"},"content":"                                (closeEditingEvent)\u003d\"cancelAddingNewParticipantComment(i)\""},{"lineNumber":163,"author":{"gitId":"-"},"content":"                                [isDisabled]\u003d\"isFormsDisabled || isFeedbackResponseDetailsEmpty(recipientSubmissionFormModel.responseDetails)\"\u003e\u003c/tm-comment-row\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                \u003cdiv class\u003d\"alert alert-warning margin-top-10px\" role\u003d\"alert\" *ngIf\u003d\"isFeedbackResponseDetailsEmpty(recipientSubmissionFormModel.responseDetails)\"\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                  You must provide a valid response in order to give a comment or your comment will not be saved!"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                \u003c/div\u003e"},{"lineNumber":167,"author":{"gitId":"-"},"content":"              \u003c/div\u003e"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c/ng-template\u003e"},{"lineNumber":169,"author":{"gitId":"-"},"content":"          \u003c/div\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":171,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"col-12 constraint-margins\"\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      \u003ctm-contribution-question-constraint *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONTRIB\""},{"lineNumber":176,"author":{"gitId":"-"},"content":"                                           [recipientSubmissionForms]\u003d\"model.recipientSubmissionForms\""},{"lineNumber":177,"author":{"gitId":"-"},"content":"                                           [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":178,"author":{"gitId":"-"},"content":"                                           (isValidEvent)\u003d\"updateValidity($event)\""},{"lineNumber":179,"author":{"gitId":"-"},"content":"      \u003e\u003c/tm-contribution-question-constraint\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      \u003ctm-rank-recipients-question-constraint *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.RANK_RECIPIENTS\""},{"lineNumber":181,"author":{"gitId":"-"},"content":"                                              [recipientSubmissionForms]\u003d\"model.recipientSubmissionForms\""},{"lineNumber":182,"author":{"gitId":"-"},"content":"                                              [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":183,"author":{"gitId":"-"},"content":"                                              (isValidEvent)\u003d\"updateValidity($event)\""},{"lineNumber":184,"author":{"gitId":"-"},"content":"      \u003e\u003c/tm-rank-recipients-question-constraint\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":"      \u003ctm-constsum-recipients-question-constraint *ngIf\u003d\"model.questionType \u003d\u003d\u003d FeedbackQuestionType.CONSTSUM_RECIPIENTS\""},{"lineNumber":186,"author":{"gitId":"-"},"content":"                                                  [recipientSubmissionForms]\u003d\"model.recipientSubmissionForms\""},{"lineNumber":187,"author":{"gitId":"-"},"content":"                                                  [questionDetails]\u003d\"model.questionDetails\""},{"lineNumber":188,"author":{"gitId":"-"},"content":"                                                  (isValidEvent)\u003d\"updateValidity($event)\""},{"lineNumber":189,"author":{"gitId":"-"},"content":"      \u003e\u003c/tm-constsum-recipients-question-constraint\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"alert alert-warning\" role\u003d\"alert\" *ngIf\u003d\"!model.recipientList.length \u0026\u0026 model.isLoaded\"\u003e"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"model.recipientType \u003d\u003d\u003d FeedbackParticipantType.OWN_TEAM_MEMBERS\"\u003eThis question is for team members and you don\u0027t have any team members. Therefore, you will not be able to answer this question.\u003c/span\u003e"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"model.recipientType \u003d\u003d\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF\"\u003eThis question is for other teams in this course and this course doesn\u0027t have any other team. Therefore, you will not be able to answer this question.\u003c/span\u003e"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"model.recipientType \u003d\u003d\u003d FeedbackParticipantType.STUDENTS_EXCLUDING_SELF\"\u003eThis question is for other students in this course and this course doesn\u0027t have any other student. Therefore, you will not be able to answer this question.\u003c/span\u003e"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\" *ngIf\u003d\"model.recipientList.length \u003e 0\"\u003e"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-12 text-center\"\u003e"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        \u003cbutton id\u003d\"btn-submit-qn-{{ model.questionNumber }}\" type\u003d\"submit\" class\u003d\"btn btn-success\""},{"lineNumber":201,"author":{"gitId":"-"},"content":"                ngbTooltip\u003d\"You can save your responses for this question at any time and come back later to continue.\""},{"lineNumber":202,"author":{"gitId":"-"},"content":"                (click)\u003d\"saveFeedbackResponses()\" [disabled]\u003d\"isSavingResponses || isSubmissionDisabled\"\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":"          \u003ctm-ajax-loading *ngIf\u003d\"isSavingResponses\"\u003e\u003c/tm-ajax-loading\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":"          \u003cspan\u003e{{ isQuestionCountOne ? \"Submit Response\" : \"Submit Response for Question \" + model.questionNumber }}\u003c/span\u003e"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        \u003c/button\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"domlimm":2,"-":207}},{"path":"src/web/app/components/question-submission-form/question-submission-form.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { Component, DoCheck, EventEmitter, Input, Output } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { FeedbackQuestionsService } from \u0027../../../services/feedback-questions.service\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { FeedbackResponsesService } from \u0027../../../services/feedback-responses.service\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { VisibilityStateMachine } from \u0027../../../services/visibility-state-machine\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  FeedbackParticipantType,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  FeedbackQuestionType, FeedbackResponseDetails, FeedbackTextQuestionDetails,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  FeedbackVisibilityType,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  NumberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"} from \u0027../../../types/api-output\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { VisibilityControl } from \u0027../../../types/visibility-control\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { CommentRowModel } from \u0027../comment-box/comment-row/comment-row.component\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { CommentRowMode } from \u0027../comment-box/comment-row/comment-row.mode\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  FeedbackRecipientLabelType,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  FeedbackResponseRecipient,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  FeedbackResponseRecipientSubmissionFormModel,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  QuestionSubmissionFormMode,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  QuestionSubmissionFormModel,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"} from \u0027./question-submission-form-model\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The question submission form for a question."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  selector: \u0027tm-question-submission-form\u0027,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./question-submission-form.component.html\u0027,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./question-submission-form.component.scss\u0027],"},{"lineNumber":29,"author":{"gitId":"-"},"content":"})"},{"lineNumber":30,"author":{"gitId":"-"},"content":"export class QuestionSubmissionFormComponent implements DoCheck {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"  // enum"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  QuestionSubmissionFormMode: typeof QuestionSubmissionFormMode \u003d QuestionSubmissionFormMode;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  FeedbackQuestionType: typeof FeedbackQuestionType \u003d FeedbackQuestionType;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  FeedbackParticipantType: typeof FeedbackParticipantType \u003d FeedbackParticipantType;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  FeedbackVisibilityType: typeof FeedbackVisibilityType \u003d FeedbackVisibilityType;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  CommentRowMode: typeof CommentRowMode \u003d CommentRowMode;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  isMCQDropDownEnabled: boolean \u003d false;"},{"lineNumber":40,"author":{"gitId":"domlimm"},"content":"  isSaved: boolean \u003d false;"},{"lineNumber":41,"author":{"gitId":"domlimm"},"content":"  hasResponseChanged: boolean \u003d false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  formMode: QuestionSubmissionFormMode \u003d QuestionSubmissionFormMode.FIXED_RECIPIENT;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  isFormsDisabled: boolean \u003d false;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  isSubmissionDisabled: boolean \u003d false;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  isSavingResponses: boolean \u003d false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  set formModel(model: QuestionSubmissionFormModel) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    this.model \u003d model;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    this.visibilityStateMachine \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.getNewVisibilityStateMachine(model.giverType, model.recipientType);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    const visibilitySetting: { [TKey in VisibilityControl]: FeedbackVisibilityType[] } \u003d {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      SHOW_RESPONSE: model.showResponsesTo,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      SHOW_GIVER_NAME: model.showGiverNameTo,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      SHOW_RECIPIENT_NAME: model.showRecipientNameTo,"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    this.visibilityStateMachine.applyVisibilitySettings(visibilitySetting);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    this.allowedToHaveParticipantComment \u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.isAllowedToHaveParticipantComment(this.model.questionType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    this.recipientLabelType \u003d this.getSelectionLabelType(model.recipientType);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  @Input()"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  isQuestionCountOne: boolean \u003d false;"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"domlimm"},"content":"  @Input()"},{"lineNumber":75,"author":{"gitId":"domlimm"},"content":"  isSubmitAllClicked: boolean \u003d false;"},{"lineNumber":76,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":77,"author":{"gitId":"domlimm"},"content":"  @Output()"},{"lineNumber":78,"author":{"gitId":"domlimm"},"content":"  isSubmitAllClickedChange: EventEmitter\u003cboolean\u003e \u003d new EventEmitter\u003cboolean\u003e();"},{"lineNumber":79,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  formModelChange: EventEmitter\u003cQuestionSubmissionFormModel\u003e \u003d new EventEmitter();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  responsesSave: EventEmitter\u003cQuestionSubmissionFormModel\u003e \u003d new EventEmitter();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"  model: QuestionSubmissionFormModel \u003d {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    isLoading: false,"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    isLoaded: false,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    feedbackQuestionId: \u0027\u0027,"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    questionNumber: 0,"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    questionBrief: \u0027\u0027,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    questionDescription: \u0027\u0027,"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    giverType: FeedbackParticipantType.STUDENTS,"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    recipientType: FeedbackParticipantType.STUDENTS,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    recipientList: [],"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    recipientSubmissionForms: [],"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    questionType: FeedbackQuestionType.TEXT,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    questionDetails: {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"      questionText: \u0027\u0027,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"      questionType: FeedbackQuestionType.TEXT,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    } as FeedbackTextQuestionDetails,"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    numberOfEntitiesToGiveFeedbackToSetting: NumberOfEntitiesToGiveFeedbackToSetting.UNLIMITED,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    customNumberOfEntitiesToGiveFeedbackTo: 0,"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    showGiverNameTo: [],"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    showRecipientNameTo: [],"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    showResponsesTo: [],"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  recipientLabelType: FeedbackRecipientLabelType \u003d FeedbackRecipientLabelType.INCLUDE_NAME;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  isSectionTeamShown: boolean \u003d false;"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"  @Output()"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  deleteCommentEvent: EventEmitter\u003cnumber\u003e \u003d new EventEmitter();"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  visibilityStateMachine: VisibilityStateMachine;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  allowedToHaveParticipantComment: boolean \u003d false;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  isEveryRecipientSorted: boolean \u003d false;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"  constructor(private feedbackQuestionsService: FeedbackQuestionsService,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"              private feedbackResponseService: FeedbackResponsesService) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    this.visibilityStateMachine \u003d"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.getNewVisibilityStateMachine("},{"lineNumber":128,"author":{"gitId":"-"},"content":"            this.model.giverType, this.model.recipientType);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  get hasSectionTeam(): boolean {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    if (this.formMode \u003d\u003d\u003d QuestionSubmissionFormMode.FLEXIBLE_RECIPIENT) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      switch (this.recipientLabelType) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        case FeedbackRecipientLabelType.INCLUDE_SECTION:"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        case FeedbackRecipientLabelType.INCLUDE_TEAM:"},{"lineNumber":136,"author":{"gitId":"-"},"content":"          return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":138,"author":{"gitId":"-"},"content":"          return false;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"  ngDoCheck(): void {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    if (this.model.isLoaded \u0026\u0026 !this.isEveryRecipientSorted) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.sortRecipientsByName();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":149,"author":{"gitId":"domlimm"},"content":"    if (this.model.recipientSubmissionForms.some("},{"lineNumber":150,"author":{"gitId":"domlimm"},"content":"      (response) \u003d\u003e response.responseId.length \u003e 0) \u0026\u0026 !this.isSaved) {"},{"lineNumber":151,"author":{"gitId":"domlimm"},"content":"      this.isSaved \u003d true;"},{"lineNumber":152,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":154,"author":{"gitId":"domlimm"},"content":"    if (this.hasResponseChanged) {"},{"lineNumber":155,"author":{"gitId":"domlimm"},"content":"      this.isSaved \u003d false;"},{"lineNumber":156,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":158,"author":{"gitId":"domlimm"},"content":"    if (this.isSubmitAllClicked) {"},{"lineNumber":159,"author":{"gitId":"domlimm"},"content":"      if (this.model.recipientSubmissionForms.some((response) \u003d\u003e response.responseId.length \u003e 0)) {"},{"lineNumber":160,"author":{"gitId":"domlimm"},"content":"        this.isSaved \u003d true;"},{"lineNumber":161,"author":{"gitId":"domlimm"},"content":"      } else if (this.model.recipientSubmissionForms.every((form) \u003d\u003e form.responseId.length \u003d\u003d\u003d 0)) {"},{"lineNumber":162,"author":{"gitId":"domlimm"},"content":"        this.isSaved \u003d false;"},{"lineNumber":163,"author":{"gitId":"domlimm"},"content":"      }"},{"lineNumber":164,"author":{"gitId":"domlimm"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"  private compareByName(firstRecipient: FeedbackResponseRecipient,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     secondRecipient: FeedbackResponseRecipient): number {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    return firstRecipient.recipientName.localeCompare(secondRecipient.recipientName);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"  private compareBySection(firstRecipient: FeedbackResponseRecipient,"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     secondRecipient: FeedbackResponseRecipient): number {"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    if (firstRecipient.recipientSection \u0026\u0026 secondRecipient.recipientSection) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"      return firstRecipient.recipientSection.localeCompare(secondRecipient.recipientSection);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    if (firstRecipient.recipientSection) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      return -1;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    if (secondRecipient.recipientSection) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"      return 1;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    return 0;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  private compareByTeam(firstRecipient: FeedbackResponseRecipient,"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     secondRecipient: FeedbackResponseRecipient): number {"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    if (firstRecipient.recipientTeam \u0026\u0026 secondRecipient.recipientTeam) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      return firstRecipient.recipientTeam.localeCompare(secondRecipient.recipientTeam);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    if (firstRecipient.recipientTeam) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"      return -1;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    if (secondRecipient.recipientTeam) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      return 1;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    return 0;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"  private updateSubmissionFormIndexes(): void {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    const indexes: Map\u003cString, number\u003e \u003d new Map();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    this.model.recipientList.forEach((recipient: FeedbackResponseRecipient, index: number) \u003d\u003e {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      indexes.set(recipient.recipientIdentifier, index + 1);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    this.model.recipientSubmissionForms.sort((firstRecipient: FeedbackResponseRecipientSubmissionFormModel,"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      secondRecipient: FeedbackResponseRecipientSubmissionFormModel) \u003d\u003e {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      const firstRecipientIndex: number \u003d indexes.get(firstRecipient.recipientIdentifier) || Number.MAX_SAFE_INTEGER;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"      const secondRecipientIndex: number \u003d indexes.get(secondRecipient.recipientIdentifier) || Number.MAX_SAFE_INTEGER;"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"      return firstRecipientIndex - secondRecipientIndex;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    this.isEveryRecipientSorted \u003d true;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"  sortRecipientsByName(): void {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    this.model.recipientList.sort(this.compareByName);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    this.updateSubmissionFormIndexes();"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"  private sortRecipientsBySectionTeam(): void {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    if (this.recipientLabelType \u003d\u003d\u003d FeedbackRecipientLabelType.INCLUDE_SECTION) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      this.model.recipientList.sort((firstRecipient, secondRecipient) \u003d\u003e {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return this.compareBySection(firstRecipient, secondRecipient)"},{"lineNumber":233,"author":{"gitId":"-"},"content":"          || this.compareByTeam(firstRecipient, secondRecipient);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    } else if (this.recipientLabelType \u003d\u003d\u003d FeedbackRecipientLabelType.INCLUDE_TEAM) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"      this.model.recipientList.sort(this.compareByTeam);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    this.updateSubmissionFormIndexes();"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   * Tracks submission form for each recipient by the index in the array."},{"lineNumber":244,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":245,"author":{"gitId":"-"},"content":"   * @see https://angular.io/api/common/NgForOf#properties"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  trackRecipientSubmissionFormByFn(index: number): any {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    return index;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":252,"author":{"gitId":"-"},"content":"   * Gets recipient name in {@code FIXED_RECIPIENT} mode."},{"lineNumber":253,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  getRecipientName(recipientIdentifier: string): string {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    const recipient: FeedbackResponseRecipient | undefined \u003d"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        this.model.recipientList.find("},{"lineNumber":257,"author":{"gitId":"-"},"content":"            (r: FeedbackResponseRecipient) \u003d\u003e r.recipientIdentifier \u003d\u003d\u003d recipientIdentifier);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    return recipient ? recipient.recipientName : \u0027Unknown\u0027;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   * Checks whether the recipient is already selected in {@code FLEXIBLE_RECIPIENT} mode."},{"lineNumber":263,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  isRecipientSelected(recipient: FeedbackResponseRecipient): boolean {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    return this.model.recipientSubmissionForms.some("},{"lineNumber":266,"author":{"gitId":"-"},"content":"        (recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel) \u003d\u003e"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            recipientSubmissionFormModel.recipientIdentifier \u003d\u003d\u003d recipient.recipientIdentifier);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":271,"author":{"gitId":"-"},"content":"   * Triggers the change of the recipient submission form."},{"lineNumber":272,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":273,"author":{"gitId":"-"},"content":"  triggerRecipientSubmissionFormChange(index: number, field: string, data: any): void {"},{"lineNumber":274,"author":{"gitId":"domlimm"},"content":"    this.hasResponseChanged \u003d true;"},{"lineNumber":275,"author":{"gitId":"domlimm"},"content":"    this.isSubmitAllClickedChange.emit(false);"},{"lineNumber":276,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    const recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] \u003d"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        this.model.recipientSubmissionForms.slice();"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    recipientSubmissionForms[index] \u003d {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"      ...recipientSubmissionForms[index],"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      [field]: data,"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    this.formModelChange.emit({"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      ...this.model,"},{"lineNumber":286,"author":{"gitId":"-"},"content":"      recipientSubmissionForms,"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":288,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":291,"author":{"gitId":"-"},"content":"   * Triggers deletion of a participant comment associated with the response."},{"lineNumber":292,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  triggerDeleteCommentEvent(index: number): void {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    this.deleteCommentEvent.emit(index);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":298,"author":{"gitId":"-"},"content":"   * Add new participant comment to response with index."},{"lineNumber":299,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  addNewParticipantCommentToResponse(index: number): void {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    this.triggerRecipientSubmissionFormChange(index, \u0027commentByGiver\u0027, {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"      commentEditFormModel: {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        commentText: \u0027\u0027,"},{"lineNumber":304,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"      isEditing: true,"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":308,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":311,"author":{"gitId":"-"},"content":"   * Cancel adding new participant comment."},{"lineNumber":312,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":313,"author":{"gitId":"-"},"content":"  cancelAddingNewParticipantComment(index: number): void {"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    this.triggerRecipientSubmissionFormChange(index, \u0027commentByGiver\u0027, null);"},{"lineNumber":315,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":318,"author":{"gitId":"-"},"content":"   * Discards the current editing and restore the original comment."},{"lineNumber":319,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":320,"author":{"gitId":"-"},"content":"  discardEditedParticipantComment(index: number): void {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    const commentModel: CommentRowModel | undefined \u003d this.model.recipientSubmissionForms[index].commentByGiver;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    if (!commentModel || !commentModel.originalComment) {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    this.triggerRecipientSubmissionFormChange(index, \u0027commentByGiver\u0027,"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"          ...commentModel,"},{"lineNumber":328,"author":{"gitId":"-"},"content":"          commentEditFormModel: {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            commentText: commentModel.originalComment.commentText,"},{"lineNumber":330,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":331,"author":{"gitId":"-"},"content":"          isEditing: false,"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":333,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":336,"author":{"gitId":"-"},"content":"   * Checks whether the response is empty or not."},{"lineNumber":337,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":338,"author":{"gitId":"-"},"content":"  isFeedbackResponseDetailsEmpty(responseDetails: FeedbackResponseDetails): boolean {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    return this.feedbackResponseService.isFeedbackResponseDetailsEmpty("},{"lineNumber":340,"author":{"gitId":"-"},"content":"        this.model.questionType, responseDetails);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":344,"author":{"gitId":"-"},"content":"   * Updates validity of all responses in a question."},{"lineNumber":345,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":346,"author":{"gitId":"-"},"content":"  updateValidity(isValid: boolean): void {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    if (this.model.recipientSubmissionForms.length \u003d\u003d\u003d 0) { return; }"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    const recipientSubmissionForms: FeedbackResponseRecipientSubmissionFormModel[] \u003d"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        this.model.recipientSubmissionForms.slice().map("},{"lineNumber":350,"author":{"gitId":"-"},"content":"            (model: FeedbackResponseRecipientSubmissionFormModel) \u003d\u003e ({ ...model, isValid }));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    this.formModelChange.emit({"},{"lineNumber":352,"author":{"gitId":"-"},"content":"      ...this.model,"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      recipientSubmissionForms,"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":355,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":358,"author":{"gitId":"-"},"content":"   * Triggers saving of responses for the specific question."},{"lineNumber":359,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":360,"author":{"gitId":"-"},"content":"  saveFeedbackResponses(): void {"},{"lineNumber":361,"author":{"gitId":"domlimm"},"content":"    this.isSaved \u003d true;"},{"lineNumber":362,"author":{"gitId":"domlimm"},"content":"    this.hasResponseChanged \u003d false;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    this.responsesSave.emit(this.model);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"  getSelectionLabelType(recipientType: FeedbackParticipantType): FeedbackRecipientLabelType {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    switch (recipientType) {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"      case FeedbackParticipantType.STUDENTS:"},{"lineNumber":369,"author":{"gitId":"-"},"content":"      case FeedbackParticipantType.STUDENTS_EXCLUDING_SELF:"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        return FeedbackRecipientLabelType.INCLUDE_SECTION;"},{"lineNumber":371,"author":{"gitId":"-"},"content":"      case FeedbackParticipantType.STUDENTS_IN_SAME_SECTION:"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        return FeedbackRecipientLabelType.INCLUDE_TEAM;"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        return FeedbackRecipientLabelType.INCLUDE_NAME;"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"  getSelectionOptionLabel(recipient: FeedbackResponseRecipient): string {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    if (!this.isSectionTeamShown) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      return recipient.recipientName;"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"    if (recipient.recipientSection \u0026\u0026 recipient.recipientTeam) {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"      return `${recipient.recipientSection} / ${recipient.recipientTeam} | ${recipient.recipientName}`;"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"    if (recipient.recipientSection) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      return `${recipient.recipientSection} | ${recipient.recipientName}`;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"    if (recipient.recipientTeam) {"},{"lineNumber":392,"author":{"gitId":"-"},"content":"      return `${recipient.recipientTeam} | ${recipient.recipientName}`;"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"    return recipient.recipientName;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"  toggleSectionTeam(event: Event): void {"},{"lineNumber":399,"author":{"gitId":"-"},"content":"    const checkbox : HTMLInputElement \u003d event.target as HTMLInputElement;"},{"lineNumber":400,"author":{"gitId":"-"},"content":"    if (checkbox.checked) {"},{"lineNumber":401,"author":{"gitId":"-"},"content":"      this.isSectionTeamShown \u003d true;"},{"lineNumber":402,"author":{"gitId":"-"},"content":"      this.sortRecipientsBySectionTeam();"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":404,"author":{"gitId":"-"},"content":"      this.isSectionTeamShown \u003d false;"},{"lineNumber":405,"author":{"gitId":"-"},"content":"      this.sortRecipientsByName();"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":407,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":410,"author":{"gitId":"-"},"content":"   * Triggers adding a col-12 if MCQ Dropdown is enabled."},{"lineNumber":411,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":412,"author":{"gitId":"-"},"content":"  refreshCssForDropdownMCQ(add: boolean): void {"},{"lineNumber":413,"author":{"gitId":"-"},"content":"    this.isMCQDropDownEnabled \u003d add;"},{"lineNumber":414,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":415,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":30,"-":385}},{"path":"src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003ctm-loading-retry [shouldShowRetry]\u003d\"hasLoadingFeedbackSessionFailed\" [message]\u003d\"\u0027Failed to load feedback session\u0027\" (retryEvent)\u003d\"loadFeedbackSession()\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003ctm-session-edit-form *tmIsLoading\u003d\"isLoadingFeedbackSession\" [formMode]\u003d\"SessionEditFormMode.EDIT\" [(model)]\u003d\"sessionEditFormModel\" (editExistingSessionEvent)\u003d\"editExistingSessionHandler()\" (cancelEditingSessionEvent)\u003d\"cancelEditingSessionHandler()\""},{"lineNumber":3,"author":{"gitId":"-"},"content":"                      (deleteExistingSessionEvent)\u003d\"deleteExistingSessionHandler()\" (copyCurrentSessionEvent)\u003d\"copyCurrentSession()\"\u003e\u003c/tm-session-edit-form\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/tm-loading-retry\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ctm-loading-retry [shouldShowRetry]\u003d\"hasLoadingFeedbackQuestionsFailed\" [message]\u003d\"\u0027Failed to load feedback questions\u0027\" (retryEvent)\u003d\"loadFeedbackQuestions()\"\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cdiv *ngIf\u003d\"!isLoadingFeedbackQuestions \u0026\u0026 questionEditFormModels.length\" class\u003d\"offset-md-10 margin-vertical-20px\"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cbutton id\u003d\"btn-collapse-expand\" class\u003d\"btn expand-btn btn-light margin-top-30px\" (click)\u003d\"isAllCollapsed ? expandAll() : collapseAll()\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      {{isAllCollapsed ? \"Expand\" : \"Collapse\" }} All"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003c/button\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cdiv *tmIsLoading\u003d\"isLoadingFeedbackQuestions\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cdiv *ngFor\u003d\"let questionEditFormModel of questionEditFormModels; let i \u003d index; trackBy: trackQuestionEditFormByFn\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003ctm-question-edit-form [formMode]\u003d\"QuestionEditFormMode.EDIT\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"                             [numOfQuestions]\u003d\"questionEditFormModels.length\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"                             (saveExistingQuestionEvent)\u003d\"saveExistingQuestionHandler(i)\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"                             (discardExistingQuestionChangesEvent)\u003d\"discardExistingQuestionHandler(i)\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"                             (duplicateCurrentQuestionEvent)\u003d\"duplicateCurrentQuestionHandler(i)\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"                             (deleteCurrentQuestionEvent)\u003d\"deleteExistingQuestionHandler(i)\""},{"lineNumber":21,"author":{"gitId":"cedricongjh"},"content":"                             [(formModel)]\u003d\"questionEditFormModels[i]\""},{"lineNumber":22,"author":{"gitId":"cedricongjh"},"content":"                             [isQuestionPublished]\u003d\"sessionEditFormModel.publishStatus \u003d\u003d\u003d FeedbackSessionPublishStatus.PUBLISHED\"\u003e\u003c/tm-question-edit-form\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \u003ca class\u003d\"d-block text-end cursor-pointer\" (click)\u003d\"scrollToTopOfPage()\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      Back to Top \u003ci class\u003d\"fas fa-arrow-up\"\u003e\u003c/i\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/a\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003cdiv *tmIsLoading\u003d\"isAddingFromTemplate\"\u003e\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  \u003cbr/\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"card\" *ngIf\u003d\"!isLoadingFeedbackQuestions \u0026\u0026 !isAddingQuestionPanelExpanded\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \u003ctm-adding-question-panel (templateQuestionModalEvent)\u003d\"templateQuestionModalHandler()\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"                              (populateAndShowNewQuestionFormEvent)\u003d\"populateAndShowNewQuestionForm($event)\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"                              (copyQuestionsFromOtherSessionsEvent)\u003d\"copyQuestionsFromOtherSessionsHandler()\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"                              [isCopyingQuestion]\u003d\"isCopyingQuestion\"\u003e\u003c/tm-adding-question-panel\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003ctm-question-edit-form *ngIf\u003d\"isAddingQuestionPanelExpanded\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"                         [formMode]\u003d\"QuestionEditFormMode.ADD\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"                         [numOfQuestions]\u003d\"questionEditFormModels.length + 1\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"                         (discardNewQuestionEvent)\u003d\"isAddingQuestionPanelExpanded \u003d false\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"                         (createNewQuestionEvent)\u003d\"createNewQuestionHandler()\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"                         [(formModel)]\u003d\"newQuestionEditFormModel\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u003e\u003c/tm-question-edit-form\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003cbr/\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  \u003cdiv *ngIf\u003d\"!isLoadingFeedbackQuestions\" class\u003d\"card\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \u003ctm-preview-session-panel [courseId]\u003d\"courseId\" [feedbackSessionName]\u003d\"feedbackSessionName\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"                              [emailOfStudentToPreview]\u003d\"emailOfStudentToPreview\" [studentsOfCourse]\u003d\"studentsOfCourse\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"                              [instructorsCanBePreviewedAs]\u003d\"instructorsOfCourse\" [emailOfInstructorToPreview]\u003d\"emailOfInstructorToPreview\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003e\u003c/tm-preview-session-panel\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003c/tm-loading-retry\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cng-template #modifiedTimestampsModal\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003cp\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    The feedback session has been copied to all courses. However, changes are made to some session timings as the"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    existing timings are no longer valid in these courses: {{ this.coursesOfModifiedSession.join(\u0027, \u0027) }}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"    The changes are as follows:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  \u003c/p\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003ctable class\u003d\"table table-bordered\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \u003cthead\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003ctr\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      \u003cth\u003eSession Name\u003c/th\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u003cth\u003eTimings\u003c/th\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      \u003cth\u003eExisting\u003c/th\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      \u003cth\u003eModified\u003c/th\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \u003c/tr\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c/thead\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \u003ctbody\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003cng-container *ngFor\u003d\"let session of this.modifiedSession | keyvalue\"\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"      \u003ctr [ngClass]\u003d\"{\u0027text-color-lightgray\u0027 : session.value.oldTimestamp.submissionStartTimestamp \u003d\u003d\u003d session.value.newTimestamp.submissionStartTimestamp}\"\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        \u003ctd rowspan\u003d\"4\"\u003e{{ session.key }}\u003c/td\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003ctd\u003eSubmission opening time\u003c/td\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.oldTimestamp.submissionStartTimestamp }}\u003c/td\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.newTimestamp.submissionStartTimestamp }}\u003c/td\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \u003c/tr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      \u003ctr [ngClass]\u003d\"{\u0027text-color-lightgray\u0027 : session.value.oldTimestamp.submissionEndTimestamp \u003d\u003d\u003d session.value.newTimestamp.submissionEndTimestamp}\"\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        \u003ctd\u003eSubmission closing time\u003c/td\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.oldTimestamp.submissionEndTimestamp }}\u003c/td\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.newTimestamp.submissionEndTimestamp }}\u003c/td\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u003c/tr\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      \u003ctr [ngClass]\u003d\"{\u0027text-color-lightgray\u0027 : session.value.oldTimestamp.sessionVisibleTimestamp \u003d\u003d\u003d session.value.newTimestamp.sessionVisibleTimestamp}\"\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        \u003ctd\u003eSession visible time\u003c/td\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.oldTimestamp.sessionVisibleTimestamp }}\u003c/td\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.newTimestamp.sessionVisibleTimestamp }}\u003c/td\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"      \u003c/tr\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"      \u003ctr [ngClass]\u003d\"{\u0027text-color-lightgray\u0027 : session.value.oldTimestamp.responseVisibleTimestamp \u003d\u003d\u003d session.value.newTimestamp.responseVisibleTimestamp}\"\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        \u003ctd\u003eResponse visible time\u003c/td\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.oldTimestamp.responseVisibleTimestamp }}\u003c/td\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        \u003ctd\u003e{{ session.value.newTimestamp.responseVisibleTimestamp }}\u003c/td\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      \u003c/tr\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    \u003c/ng-container\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    \u003c/tbody\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  \u003c/table\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  \u003cbr\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003cp\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    Please modify the timings as necessary."},{"lineNumber":96,"author":{"gitId":"-"},"content":"  \u003c/p\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003c/ng-template\u003e"}],"authorContributionMap":{"cedricongjh":2,"-":95}},{"path":"src/web/app/pages-instructor/instructor-session-edit-page/instructor-session-edit-page.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { ChangeDetectorRef, Component, OnInit, TemplateRef, ViewChild } from \u0027@angular/core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { ActivatedRoute } from \u0027@angular/router\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { NgbModal, NgbModalRef } from \u0027@ng-bootstrap/ng-bootstrap\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { forkJoin, Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { concatMap, finalize } from \u0027rxjs/operators\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { CourseService } from \u0027../../../services/course.service\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { DateTimeService } from \u0027../../../services/datetime.service\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { DeadlineExtensionHelper } from \u0027../../../services/deadline-extension-helper\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  CommonVisibilitySetting,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  FeedbackQuestionsService,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  NewQuestionModel,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"} from \u0027../../../services/feedback-questions.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { FeedbackSessionActionsService } from \u0027../../../services/feedback-session-actions.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { FeedbackSessionsService } from \u0027../../../services/feedback-sessions.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { InstructorService } from \u0027../../../services/instructor.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { NavigationService } from \u0027../../../services/navigation.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { ProgressBarService } from \u0027../../../services/progress-bar.service\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { SimpleModalService } from \u0027../../../services/simple-modal.service\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { StatusMessageService } from \u0027../../../services/status-message.service\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { StudentService } from \u0027../../../services/student.service\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { TableComparatorService } from \u0027../../../services/table-comparator.service\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import { TimezoneService } from \u0027../../../services/timezone.service\u0027;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import { VisibilityStateMachine } from \u0027../../../services/visibility-state-machine\u0027;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  Course,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  Courses,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  FeedbackParticipantType,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  FeedbackQuestion,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  FeedbackQuestions,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  FeedbackQuestionType,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  FeedbackSession,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  FeedbackSessionPublishStatus,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  FeedbackSessions,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  FeedbackSessionSubmissionStatus,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  FeedbackTextQuestionDetails, FeedbackVisibilityType,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  HasResponses,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  Instructor,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  Instructors,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  NumberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  ResponseVisibleSetting,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  SessionVisibleSetting,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  Student,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  Students,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"} from \u0027../../../types/api-output\u0027;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import { Intent } from \u0027../../../types/api-request\u0027;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import { DateFormat, TimeFormat, getDefaultDateFormat, getLatestTimeFormat } from \u0027../../../types/datetime-const\u0027;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import { SortBy, SortOrder } from \u0027../../../types/sort-properties\u0027;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import { VisibilityControl } from \u0027../../../types/visibility-control\u0027;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import { CopySessionModalResult } from \u0027../../components/copy-session-modal/copy-session-modal-model\u0027;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import { CopySessionModalComponent } from \u0027../../components/copy-session-modal/copy-session-modal.component\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  ExtensionConfirmModalComponent,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  ExtensionModalType,"},{"lineNumber":55,"author":{"gitId":"-"},"content":"} from \u0027../../components/extension-confirm-modal/extension-confirm-modal.component\u0027;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  QuestionEditFormMode,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  QuestionEditFormModel,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"} from \u0027../../components/question-edit-form/question-edit-form-model\u0027;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  SessionEditFormMode,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  SessionEditFormModel,"},{"lineNumber":63,"author":{"gitId":"-"},"content":"} from \u0027../../components/session-edit-form/session-edit-form-model\u0027;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"import { SimpleModalType } from \u0027../../components/simple-modal/simple-modal-type\u0027;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"import { ErrorMessageOutput } from \u0027../../error-message-output\u0027;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"import { InstructorSessionBasePageComponent } from \u0027../instructor-session-base-page.component\u0027;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  InstructorExtensionTableColumnModel,"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  StudentExtensionTableColumnModel,"},{"lineNumber":70,"author":{"gitId":"-"},"content":"} from \u0027../instructor-session-individual-extension-page/extension-table-column-model\u0027;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  FeedbackSessionTabModel,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"} from \u0027./copy-questions-from-other-sessions-modal/copy-questions-from-other-sessions-modal-model\u0027;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  CopyQuestionsFromOtherSessionsModalComponent,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"} from \u0027./copy-questions-from-other-sessions-modal/copy-questions-from-other-sessions-modal.component\u0027;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"import { TemplateQuestionModalComponent } from \u0027./template-question-modal/template-question-modal.component\u0027;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":80,"author":{"gitId":"-"},"content":" * Instructor feedback session edit page."},{"lineNumber":81,"author":{"gitId":"-"},"content":" */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  selector: \u0027tm-instructor-session-edit-page\u0027,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./instructor-session-edit-page.component.html\u0027,"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./instructor-session-edit-page.component.scss\u0027],"},{"lineNumber":86,"author":{"gitId":"-"},"content":"})"},{"lineNumber":87,"author":{"gitId":"-"},"content":"export class InstructorSessionEditPageComponent extends InstructorSessionBasePageComponent implements OnInit {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"  // enum"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  SessionEditFormMode: typeof SessionEditFormMode \u003d SessionEditFormMode;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  QuestionEditFormMode: typeof QuestionEditFormMode \u003d QuestionEditFormMode;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  FeedbackQuestionType: typeof FeedbackQuestionType \u003d FeedbackQuestionType;"},{"lineNumber":93,"author":{"gitId":"cedricongjh"},"content":"  FeedbackSessionPublishStatus: typeof FeedbackSessionPublishStatus \u003d FeedbackSessionPublishStatus;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"  // url param"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  courseId: string \u003d \u0027\u0027;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  feedbackSessionName: string \u003d \u0027\u0027;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  isEditingMode: boolean \u003d false;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  courseName: string \u003d \u0027\u0027;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  // models"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  sessionEditFormModel: SessionEditFormModel \u003d {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    courseId: \u0027\u0027,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    timeZone: \u0027UTC\u0027,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    courseName: \u0027\u0027,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    feedbackSessionName: \u0027\u0027,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    instructions: \u0027\u0027,"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    submissionStartTime: getLatestTimeFormat(),"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    submissionStartDate: getDefaultDateFormat(),"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    submissionEndTime: getLatestTimeFormat(),"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    submissionEndDate: getDefaultDateFormat(),"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    gracePeriod: 0,"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    sessionVisibleSetting: SessionVisibleSetting.AT_OPEN,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    customSessionVisibleTime: getLatestTimeFormat(),"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    customSessionVisibleDate: getDefaultDateFormat(),"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    responseVisibleSetting: ResponseVisibleSetting.CUSTOM,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    customResponseVisibleTime: getLatestTimeFormat(),"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    customResponseVisibleDate: getDefaultDateFormat(),"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    submissionStatus: FeedbackSessionSubmissionStatus.OPEN,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    publishStatus: FeedbackSessionPublishStatus.NOT_PUBLISHED,"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    isClosingEmailEnabled: true,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    isPublishedEmailEnabled: true,"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    templateSessionName: \u0027\u0027,"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    isSaving: false,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    isEditable: false,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    isDeleting: false,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    isCopying: false,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    hasVisibleSettingsPanelExpanded: false,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    hasEmailSettingsPanelExpanded: false,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  studentDeadlines: Record\u003cstring, number\u003e \u003d {};"},{"lineNumber":140,"author":{"gitId":"-"},"content":"  instructorDeadlines: Record\u003cstring, number\u003e \u003d {};"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"  // to get the original session model on discard changes"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  feedbackSessionModelBeforeEditing: SessionEditFormModel \u003d JSON.parse(JSON.stringify(this.sessionEditFormModel));"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  // to get the original question model"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  feedbackQuestionModels: Map\u003cstring, FeedbackQuestion\u003e \u003d new Map();"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"  questionEditFormModels: QuestionEditFormModel[] \u003d [];"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"  newQuestionEditFormModel: QuestionEditFormModel \u003d {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    feedbackQuestionId: \u0027\u0027,"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    questionNumber: 0,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    questionBrief: \u0027\u0027,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    questionDescription: \u0027\u0027,"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    isQuestionHasResponses: false,"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    questionType: FeedbackQuestionType.TEXT,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    questionDetails: {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      questionType: FeedbackQuestionType.TEXT,"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      questionText: \u0027\u0027,"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    } as FeedbackTextQuestionDetails,"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    giverType: FeedbackParticipantType.STUDENTS,"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    recipientType: FeedbackParticipantType.STUDENTS_EXCLUDING_SELF,"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    numberOfEntitiesToGiveFeedbackToSetting: NumberOfEntitiesToGiveFeedbackToSetting.UNLIMITED,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    customNumberOfEntitiesToGiveFeedbackTo: 1,"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    showResponsesTo: [],"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    showGiverNameTo: [],"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    showRecipientNameTo: [],"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    isDeleting: false,"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    isDuplicating: false,"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    isEditable: true,"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    isSaving: false,"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    isCollapsed: false,"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    isVisibilityChanged: false,"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    isFeedbackPathChanged: false,"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    isQuestionDetailsChanged: false,"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  };"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"  isAddingFromTemplate: boolean \u003d false;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  isAddingQuestionPanelExpanded: boolean \u003d false;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  isLoadingFeedbackSession: boolean \u003d false;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  hasLoadingFeedbackSessionFailed: boolean \u003d false;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  isLoadingFeedbackQuestions: boolean \u003d false;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  hasLoadingFeedbackQuestionsFailed: boolean \u003d false;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  isCopyingQuestion: boolean \u003d false;"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"  // all students of the course"},{"lineNumber":193,"author":{"gitId":"-"},"content":"  studentsOfCourse: Student[] \u003d [];"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  emailOfStudentToPreview: string \u003d \u0027\u0027;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"  // all instructors of the course"},{"lineNumber":196,"author":{"gitId":"-"},"content":"  instructorsOfCourse: Instructor[] \u003d [];"},{"lineNumber":197,"author":{"gitId":"-"},"content":"  emailOfInstructorToPreview: string \u003d \u0027\u0027;"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"  get isAllCollapsed(): boolean {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    return this.questionEditFormModels.some((model: QuestionEditFormModel) \u003d\u003e {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      return model.isCollapsed;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"  @ViewChild(\u0027modifiedTimestampsModal\u0027) modifiedTimestampsModal!: TemplateRef\u003cany\u003e;"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"  constructor(instructorService: InstructorService,"},{"lineNumber":208,"author":{"gitId":"-"},"content":"              statusMessageService: StatusMessageService,"},{"lineNumber":209,"author":{"gitId":"-"},"content":"              navigationService: NavigationService,"},{"lineNumber":210,"author":{"gitId":"-"},"content":"              feedbackSessionsService: FeedbackSessionsService,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"              feedbackQuestionsService: FeedbackQuestionsService,"},{"lineNumber":212,"author":{"gitId":"-"},"content":"              tableComparatorService: TableComparatorService,"},{"lineNumber":213,"author":{"gitId":"-"},"content":"              ngbModal: NgbModal,"},{"lineNumber":214,"author":{"gitId":"-"},"content":"              simpleModalService: SimpleModalService,"},{"lineNumber":215,"author":{"gitId":"-"},"content":"              progressBarService: ProgressBarService,"},{"lineNumber":216,"author":{"gitId":"-"},"content":"              feedbackSessionActionsService: FeedbackSessionActionsService,"},{"lineNumber":217,"author":{"gitId":"-"},"content":"              timezoneService: TimezoneService,"},{"lineNumber":218,"author":{"gitId":"-"},"content":"              private datetimeService: DateTimeService,"},{"lineNumber":219,"author":{"gitId":"-"},"content":"              private studentService: StudentService,"},{"lineNumber":220,"author":{"gitId":"-"},"content":"              private courseService: CourseService,"},{"lineNumber":221,"author":{"gitId":"-"},"content":"              private route: ActivatedRoute,"},{"lineNumber":222,"author":{"gitId":"-"},"content":"              private changeDetectorRef: ChangeDetectorRef) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    super(instructorService, statusMessageService, navigationService,"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        feedbackSessionsService, feedbackQuestionsService, tableComparatorService,"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        ngbModal, simpleModalService, progressBarService, feedbackSessionActionsService, timezoneService);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"  ngOnInit(): void {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    this.route.queryParams.subscribe((queryParams: any) \u003d\u003e {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"      this.courseId \u003d queryParams.courseid;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      this.feedbackSessionName \u003d queryParams.fsname;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"      this.isEditingMode \u003d queryParams.editingMode \u003d\u003d\u003d \u0027true\u0027;"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"      this.loadFeedbackSession();"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      this.loadFeedbackQuestions();"},{"lineNumber":236,"author":{"gitId":"-"},"content":"      this.getAllStudentsOfCourse();"},{"lineNumber":237,"author":{"gitId":"-"},"content":"      this.getAllInstructors();"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":242,"author":{"gitId":"-"},"content":"   * Loads a feedback session."},{"lineNumber":243,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  loadFeedbackSession(): void {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    this.hasLoadingFeedbackSessionFailed \u003d false;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    this.isLoadingFeedbackSession \u003d true;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    // load the course of the feedback session first"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    this.courseService.getCourseAsInstructor(this.courseId).subscribe({"},{"lineNumber":249,"author":{"gitId":"-"},"content":"      next: (course: Course) \u003d\u003e {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        this.courseName \u003d course.courseName;"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"        this.feedbackSessionsService.getFeedbackSession({"},{"lineNumber":253,"author":{"gitId":"-"},"content":"          courseId: this.courseId,"},{"lineNumber":254,"author":{"gitId":"-"},"content":"          feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":255,"author":{"gitId":"-"},"content":"          intent: Intent.FULL_DETAIL,"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }).pipe(finalize(() \u003d\u003e {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"          this.isLoadingFeedbackSession \u003d false;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }))"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            .subscribe({"},{"lineNumber":260,"author":{"gitId":"-"},"content":"              next: (feedbackSession: FeedbackSession) \u003d\u003e {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                this.sessionEditFormModel \u003d this.getSessionEditFormModel(feedbackSession, this.isEditingMode);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                this.feedbackSessionModelBeforeEditing \u003d this.getSessionEditFormModel(feedbackSession);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"              },"},{"lineNumber":264,"author":{"gitId":"-"},"content":"              error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                this.hasLoadingFeedbackSessionFailed \u003d true;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":267,"author":{"gitId":"-"},"content":"              },"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":269,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        this.isLoadingFeedbackSession \u003d false;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        this.hasLoadingFeedbackSessionFailed \u003d true;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":279,"author":{"gitId":"-"},"content":"   * Copies the feedback session."},{"lineNumber":280,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  copyCurrentSession(): Promise\u003cvoid\u003e {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    // load course candidates first"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    return new Promise\u003cvoid\u003e((_resolve: any, reject: any) \u003d\u003e {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"      this.courseService.getInstructorCoursesThatAreActive()"},{"lineNumber":285,"author":{"gitId":"-"},"content":"      .pipe(finalize(() \u003d\u003e {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel.isCopying \u003d false;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      }))"},{"lineNumber":288,"author":{"gitId":"-"},"content":"      .subscribe((courses: Courses) \u003d\u003e {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        this.failedToCopySessions \u003d {};"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        this.coursesOfModifiedSession \u003d [];"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        this.modifiedSession \u003d {};"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        const modalRef: NgbModalRef \u003d this.ngbModal.open(CopySessionModalComponent);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        modalRef.componentInstance.newFeedbackSessionName \u003d this.feedbackSessionName;"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        modalRef.componentInstance.courseCandidates \u003d courses.courses;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        modalRef.componentInstance.sessionToCopyCourseId \u003d this.courseId;"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        modalRef.result.then((result: CopySessionModalResult) \u003d\u003e {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"          const requestList: Observable\u003cFeedbackSession\u003e[] \u003d this.createSessionCopyRequestsFromModal("},{"lineNumber":299,"author":{"gitId":"-"},"content":"              result, this.courseId, this.feedbackSessionName);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"          this.sessionEditFormModel.isCopying \u003d true;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"          if (requestList.length \u003d\u003d\u003d 1) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"            this.copySingleSession(requestList[0].pipe(finalize(() \u003d\u003e {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"              this.sessionEditFormModel.isCopying \u003d false;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            })), this.modifiedTimestampsModal);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":306,"author":{"gitId":"-"},"content":"          if (requestList.length \u003e 1) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            forkJoin(requestList)"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            .pipe(finalize(() \u003d\u003e {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"              this.sessionEditFormModel.isCopying \u003d false;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"            }))"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            .subscribe(() \u003d\u003e {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"              this.showCopyStatusMessage(this.modifiedTimestampsModal);"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":314,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        }, (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"          reject(resp);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"          this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        .catch(() \u003d\u003e {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"          this.sessionEditFormModel.isCopying \u003d false;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":322,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":324,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":327,"author":{"gitId":"-"},"content":"   * Gets the {@code sessionEditFormModel} with {@link FeedbackSession} entity."},{"lineNumber":328,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":329,"author":{"gitId":"-"},"content":"  getSessionEditFormModel(feedbackSession: FeedbackSession, isEditable: boolean \u003d false): SessionEditFormModel {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    const submissionStart: { date: DateFormat, time: TimeFormat } \u003d"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        this.datetimeService.getDateTimeAtTimezone(feedbackSession.submissionStartTimestamp,"},{"lineNumber":332,"author":{"gitId":"-"},"content":"          feedbackSession.timeZone, true);"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"    const submissionEnd: { date: DateFormat, time: TimeFormat } \u003d"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        this.datetimeService.getDateTimeAtTimezone(feedbackSession.submissionEndTimestamp,"},{"lineNumber":336,"author":{"gitId":"-"},"content":"          feedbackSession.timeZone, true);"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    const model: SessionEditFormModel \u003d {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      isEditable,"},{"lineNumber":340,"author":{"gitId":"-"},"content":"      courseId: feedbackSession.courseId,"},{"lineNumber":341,"author":{"gitId":"-"},"content":"      timeZone: feedbackSession.timeZone,"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      courseName: this.courseName,"},{"lineNumber":343,"author":{"gitId":"-"},"content":"      feedbackSessionName: feedbackSession.feedbackSessionName,"},{"lineNumber":344,"author":{"gitId":"-"},"content":"      instructions: feedbackSession.instructions,"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"      submissionStartTime: submissionStart.time,"},{"lineNumber":347,"author":{"gitId":"-"},"content":"      submissionStartDate: submissionStart.date,"},{"lineNumber":348,"author":{"gitId":"-"},"content":"      submissionEndTime: submissionEnd.time,"},{"lineNumber":349,"author":{"gitId":"-"},"content":"      submissionEndDate: submissionEnd.date,"},{"lineNumber":350,"author":{"gitId":"-"},"content":"      gracePeriod: feedbackSession.gracePeriod,"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"      sessionVisibleSetting: feedbackSession.sessionVisibleSetting,"},{"lineNumber":353,"author":{"gitId":"-"},"content":"      customSessionVisibleTime: getLatestTimeFormat(),"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      customSessionVisibleDate: getDefaultDateFormat(),"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"      responseVisibleSetting: feedbackSession.responseVisibleSetting,"},{"lineNumber":357,"author":{"gitId":"-"},"content":"      customResponseVisibleTime: getLatestTimeFormat(),"},{"lineNumber":358,"author":{"gitId":"-"},"content":"      customResponseVisibleDate: getDefaultDateFormat(),"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"      submissionStatus: feedbackSession.submissionStatus,"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      publishStatus: feedbackSession.publishStatus,"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"      templateSessionName: \u0027\u0027,"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"      isClosingEmailEnabled: feedbackSession.isClosingEmailEnabled,"},{"lineNumber":366,"author":{"gitId":"-"},"content":"      isPublishedEmailEnabled: feedbackSession.isPublishedEmailEnabled,"},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"      isSaving: false,"},{"lineNumber":369,"author":{"gitId":"-"},"content":"      isDeleting: false,"},{"lineNumber":370,"author":{"gitId":"-"},"content":"      isCopying: false,"},{"lineNumber":371,"author":{"gitId":"-"},"content":"      hasVisibleSettingsPanelExpanded: feedbackSession.sessionVisibleSetting !\u003d\u003d SessionVisibleSetting.AT_OPEN"},{"lineNumber":372,"author":{"gitId":"-"},"content":"          || feedbackSession.responseVisibleSetting !\u003d\u003d ResponseVisibleSetting.LATER,"},{"lineNumber":373,"author":{"gitId":"-"},"content":"      hasEmailSettingsPanelExpanded: !feedbackSession.isClosingEmailEnabled || !feedbackSession.isPublishedEmailEnabled,"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"    this.studentDeadlines \u003d feedbackSession.studentDeadlines;"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    this.instructorDeadlines \u003d feedbackSession.instructorDeadlines;"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"    if (feedbackSession.customSessionVisibleTimestamp) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      const customSessionVisible: { date: DateFormat, time: TimeFormat } \u003d"},{"lineNumber":381,"author":{"gitId":"-"},"content":"          this.datetimeService.getDateTimeAtTimezone(feedbackSession.customSessionVisibleTimestamp,"},{"lineNumber":382,"author":{"gitId":"-"},"content":"              feedbackSession.timeZone, true);"},{"lineNumber":383,"author":{"gitId":"-"},"content":"      model.customSessionVisibleTime \u003d customSessionVisible.time;"},{"lineNumber":384,"author":{"gitId":"-"},"content":"      model.customSessionVisibleDate \u003d customSessionVisible.date;"},{"lineNumber":385,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"    if (feedbackSession.customResponseVisibleTimestamp) {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"      const customResponseVisible: { date: DateFormat, time: TimeFormat } \u003d"},{"lineNumber":389,"author":{"gitId":"-"},"content":"          this.datetimeService.getDateTimeAtTimezone(feedbackSession.customResponseVisibleTimestamp,"},{"lineNumber":390,"author":{"gitId":"-"},"content":"              feedbackSession.timeZone, true);"},{"lineNumber":391,"author":{"gitId":"-"},"content":"      model.customResponseVisibleTime \u003d customResponseVisible.time;"},{"lineNumber":392,"author":{"gitId":"-"},"content":"      model.customResponseVisibleDate \u003d customResponseVisible.date;"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"    return model;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":399,"author":{"gitId":"-"},"content":"   * Handles editing existing session event."},{"lineNumber":400,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":401,"author":{"gitId":"-"},"content":"  editExistingSessionHandler(): void {"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    this.feedbackSessionModelBeforeEditing \u003d JSON.parse(JSON.stringify(this.sessionEditFormModel));"},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"    const submissionStartTime: number \u003d this.timezoneService.resolveLocalDateTime("},{"lineNumber":405,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel.submissionStartDate, this.sessionEditFormModel.submissionStartTime,"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel.timeZone, true);"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    const submissionEndTime: number \u003d this.timezoneService.resolveLocalDateTime("},{"lineNumber":408,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel.submissionEndDate, this.sessionEditFormModel.submissionEndTime,"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel.timeZone, true);"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    let sessionVisibleTime: number \u003d 0;"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    if (this.sessionEditFormModel.sessionVisibleSetting \u003d\u003d\u003d SessionVisibleSetting.CUSTOM) {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"      sessionVisibleTime \u003d this.timezoneService.resolveLocalDateTime("},{"lineNumber":413,"author":{"gitId":"-"},"content":"          this.sessionEditFormModel.customSessionVisibleDate, this.sessionEditFormModel.customSessionVisibleTime,"},{"lineNumber":414,"author":{"gitId":"-"},"content":"          this.sessionEditFormModel.timeZone, true);"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    let responseVisibleTime: number \u003d 0;"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    if (this.sessionEditFormModel.responseVisibleSetting \u003d\u003d\u003d ResponseVisibleSetting.CUSTOM) {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"      responseVisibleTime \u003d this.timezoneService.resolveLocalDateTime("},{"lineNumber":419,"author":{"gitId":"-"},"content":"          this.sessionEditFormModel.customResponseVisibleDate, this.sessionEditFormModel.customResponseVisibleTime,"},{"lineNumber":420,"author":{"gitId":"-"},"content":"          this.sessionEditFormModel.timeZone, true);"},{"lineNumber":421,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"-"},"content":""},{"lineNumber":423,"author":{"gitId":"-"},"content":"    this.deleteDeadlineExtensionsHandler(submissionEndTime).subscribe((isUpdateSession) \u003d\u003e {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"      if (isUpdateSession) {"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        this.updateFeedbackSession(submissionStartTime, submissionEndTime, sessionVisibleTime, responseVisibleTime);"},{"lineNumber":426,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":427,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":428,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"  updateFeedbackSession(submissionStartTime: number, submissionEndTime: number, sessionVisibleTime: number,"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    responseVisibleTime: number): void {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"    this.sessionEditFormModel.isSaving \u003d true;"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    this.sessionEditFormModel.isEditable \u003d false;"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    this.feedbackSessionsService.updateFeedbackSession(this.courseId, this.feedbackSessionName, {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"      instructions: this.sessionEditFormModel.instructions,"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"      submissionStartTimestamp: submissionStartTime,"},{"lineNumber":438,"author":{"gitId":"-"},"content":"      submissionEndTimestamp: submissionEndTime,"},{"lineNumber":439,"author":{"gitId":"-"},"content":"      gracePeriod: this.sessionEditFormModel.gracePeriod,"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"      sessionVisibleSetting: this.sessionEditFormModel.sessionVisibleSetting,"},{"lineNumber":442,"author":{"gitId":"-"},"content":"      customSessionVisibleTimestamp: sessionVisibleTime,"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"      responseVisibleSetting: this.sessionEditFormModel.responseVisibleSetting,"},{"lineNumber":445,"author":{"gitId":"-"},"content":"      customResponseVisibleTimestamp: responseVisibleTime,"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"      isClosingEmailEnabled: this.sessionEditFormModel.isClosingEmailEnabled,"},{"lineNumber":448,"author":{"gitId":"-"},"content":"      isPublishedEmailEnabled: this.sessionEditFormModel.isPublishedEmailEnabled,"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"      studentDeadlines: this.studentDeadlines,"},{"lineNumber":451,"author":{"gitId":"-"},"content":"      instructorDeadlines: this.instructorDeadlines,"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    }).pipe(finalize(() \u003d\u003e {"},{"lineNumber":453,"author":{"gitId":"-"},"content":"      this.sessionEditFormModel.isSaving \u003d false;"},{"lineNumber":454,"author":{"gitId":"-"},"content":"    })).subscribe({"},{"lineNumber":455,"author":{"gitId":"-"},"content":"      next: (feedbackSession: FeedbackSession) \u003d\u003e {"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel \u003d this.getSessionEditFormModel(feedbackSession);"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"        this.statusMessageService.showSuccessToast(\u0027The feedback session has been updated.\u0027);"},{"lineNumber":459,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":460,"author":{"gitId":"-"},"content":"      error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":462,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":464,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":467,"author":{"gitId":"-"},"content":"   * Prompts the user to delete individual extensions that are before or equal to the new session end time."},{"lineNumber":468,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":469,"author":{"gitId":"-"},"content":"  deleteDeadlineExtensionsHandler(submissionEndTimestamp: number): Observable\u003cboolean\u003e {"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    const [studentDeadlinesToDelete, instructorDeadlinesToDelete] \u003d this"},{"lineNumber":471,"author":{"gitId":"-"},"content":"      .getIndividualDeadlinesToDelete(submissionEndTimestamp);"},{"lineNumber":472,"author":{"gitId":"-"},"content":""},{"lineNumber":473,"author":{"gitId":"-"},"content":"    const isAllDeadlinesAfterUpdatedEndTime \u003d Object.values(studentDeadlinesToDelete).length \u003d\u003d\u003d 0"},{"lineNumber":474,"author":{"gitId":"-"},"content":"      \u0026\u0026 Object.values(instructorDeadlinesToDelete).length \u003d\u003d\u003d 0;"},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"    if (isAllDeadlinesAfterUpdatedEndTime) {"},{"lineNumber":477,"author":{"gitId":"-"},"content":"      return of(true); // no need to prompt for deletion"},{"lineNumber":478,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":479,"author":{"gitId":"-"},"content":""},{"lineNumber":480,"author":{"gitId":"-"},"content":"    const [affectedStudentModels, affectedInstructorModels] \u003d this"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      .getAffectedIndividualModels(submissionEndTimestamp, studentDeadlinesToDelete, instructorDeadlinesToDelete);"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"    const modalRef: NgbModalRef \u003d this.ngbModal.open(ExtensionConfirmModalComponent);"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    modalRef.componentInstance.modalType \u003d ExtensionModalType.SESSION_DELETE;"},{"lineNumber":485,"author":{"gitId":"-"},"content":"    modalRef.componentInstance.selectedStudents \u003d affectedStudentModels;"},{"lineNumber":486,"author":{"gitId":"-"},"content":"    modalRef.componentInstance.selectedInstructors \u003d affectedInstructorModels;"},{"lineNumber":487,"author":{"gitId":"-"},"content":"    modalRef.componentInstance.extensionTimestamp \u003d submissionEndTimestamp;"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    modalRef.componentInstance.feedbackSessionTimeZone \u003d this.sessionEditFormModel.timeZone;"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"    return new Observable((subscribeIsUserAccept) \u003d\u003e {"},{"lineNumber":491,"author":{"gitId":"-"},"content":"      modalRef.componentInstance.confirmExtensionCallbackEvent.subscribe(() \u003d\u003e {"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        this.removeDeadlines(affectedStudentModels, affectedInstructorModels);"},{"lineNumber":493,"author":{"gitId":"-"},"content":"        modalRef.componentInstance.isSubmitting \u003d false;"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        modalRef.close();"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        subscribeIsUserAccept.next(true);"},{"lineNumber":496,"author":{"gitId":"-"},"content":"      }, () \u003d\u003e {"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        subscribeIsUserAccept.next(false);"},{"lineNumber":498,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":500,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"  private getIndividualDeadlinesToDelete(submissionEndTimestamp: number): ["},{"lineNumber":503,"author":{"gitId":"-"},"content":"    Record\u003cstring, number\u003e, Record\u003cstring, number\u003e,"},{"lineNumber":504,"author":{"gitId":"-"},"content":"  ] {"},{"lineNumber":505,"author":{"gitId":"-"},"content":"    const studentDeadlinesToDelete \u003d DeadlineExtensionHelper.getDeadlinesBeforeOrEqualToEndTime("},{"lineNumber":506,"author":{"gitId":"-"},"content":"      this.studentDeadlines, submissionEndTimestamp);"},{"lineNumber":507,"author":{"gitId":"-"},"content":"    const instructorDeadlinesToDelete \u003d DeadlineExtensionHelper.getDeadlinesBeforeOrEqualToEndTime("},{"lineNumber":508,"author":{"gitId":"-"},"content":"      this.instructorDeadlines, submissionEndTimestamp);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    return [studentDeadlinesToDelete, instructorDeadlinesToDelete];"},{"lineNumber":510,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":513,"author":{"gitId":"-"},"content":"   * Get models for individuals whose deadline extensions are before or equal to the new session end time."},{"lineNumber":514,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":515,"author":{"gitId":"-"},"content":"  private getAffectedIndividualModels("},{"lineNumber":516,"author":{"gitId":"-"},"content":"    submissionEndTimestamp: number,"},{"lineNumber":517,"author":{"gitId":"-"},"content":"    affectedStudentDeadlines: Record\u003cstring, number\u003e,"},{"lineNumber":518,"author":{"gitId":"-"},"content":"    affectedInstructorDeadlines: Record\u003cstring, number\u003e,"},{"lineNumber":519,"author":{"gitId":"-"},"content":"  ): [StudentExtensionTableColumnModel[], InstructorExtensionTableColumnModel[]] {"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    const affectedStudents \u003d this.studentsOfCourse.filter((student) \u003d\u003e affectedStudentDeadlines[student.email]);"},{"lineNumber":521,"author":{"gitId":"-"},"content":"    const affectedInstructors \u003d this.instructorsOfCourse"},{"lineNumber":522,"author":{"gitId":"-"},"content":"      .filter((instructor) \u003d\u003e affectedInstructorDeadlines[instructor.email]);"},{"lineNumber":523,"author":{"gitId":"-"},"content":""},{"lineNumber":524,"author":{"gitId":"-"},"content":"    const affectedStudentModels \u003d DeadlineExtensionHelper.mapStudentsToStudentModels("},{"lineNumber":525,"author":{"gitId":"-"},"content":"      affectedStudents, affectedStudentDeadlines, submissionEndTimestamp,"},{"lineNumber":526,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    const affectedInstructorModels \u003d DeadlineExtensionHelper.mapInstructorsToInstructorModels("},{"lineNumber":528,"author":{"gitId":"-"},"content":"      affectedInstructors, affectedInstructorDeadlines, submissionEndTimestamp,"},{"lineNumber":529,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":530,"author":{"gitId":"-"},"content":"    return [affectedStudentModels, affectedInstructorModels];"},{"lineNumber":531,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"  private removeDeadlines(students: StudentExtensionTableColumnModel[],"},{"lineNumber":534,"author":{"gitId":"-"},"content":"    instructors: InstructorExtensionTableColumnModel[],"},{"lineNumber":535,"author":{"gitId":"-"},"content":"  ): void {"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    this.studentDeadlines \u003d DeadlineExtensionHelper"},{"lineNumber":537,"author":{"gitId":"-"},"content":"      .getUpdatedDeadlinesForDeletion(students, this.studentDeadlines);"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    this.instructorDeadlines \u003d DeadlineExtensionHelper"},{"lineNumber":539,"author":{"gitId":"-"},"content":"      .getUpdatedDeadlinesForDeletion(instructors, this.instructorDeadlines);"},{"lineNumber":540,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":541,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":542,"author":{"gitId":"-"},"content":"   * Handles canceling existing session event without saving changes."},{"lineNumber":543,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":544,"author":{"gitId":"-"},"content":"  cancelEditingSessionHandler(): void {"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    this.sessionEditFormModel \u003d JSON.parse(JSON.stringify(this.feedbackSessionModelBeforeEditing));"},{"lineNumber":546,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":547,"author":{"gitId":"-"},"content":""},{"lineNumber":548,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":549,"author":{"gitId":"-"},"content":"   * Handles deleting current feedback session."},{"lineNumber":550,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":551,"author":{"gitId":"-"},"content":"  deleteExistingSessionHandler(): void {"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    this.sessionEditFormModel.isDeleting \u003d true;"},{"lineNumber":553,"author":{"gitId":"-"},"content":"    this.feedbackSessionsService.moveSessionToRecycleBin(this.courseId, this.feedbackSessionName)"},{"lineNumber":554,"author":{"gitId":"-"},"content":"      .pipe(finalize(() \u003d\u003e {"},{"lineNumber":555,"author":{"gitId":"-"},"content":"        this.sessionEditFormModel.isDeleting \u003d false;"},{"lineNumber":556,"author":{"gitId":"-"},"content":"      }))"},{"lineNumber":557,"author":{"gitId":"-"},"content":"      .subscribe({"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        next: () \u003d\u003e {"},{"lineNumber":559,"author":{"gitId":"-"},"content":"          this.navigationService.navigateWithSuccessMessage(\u0027/web/instructor/sessions\u0027,"},{"lineNumber":560,"author":{"gitId":"-"},"content":"              \u0027The feedback session has been deleted. You can restore it from the deleted sessions table below.\u0027);"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":562,"author":{"gitId":"-"},"content":"        error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":563,"author":{"gitId":"-"},"content":"          this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":565,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":566,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":569,"author":{"gitId":"-"},"content":"   * Loads feedback questions."},{"lineNumber":570,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":571,"author":{"gitId":"-"},"content":"  loadFeedbackQuestions(): void {"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    this.questionEditFormModels \u003d [];"},{"lineNumber":573,"author":{"gitId":"-"},"content":"    this.hasLoadingFeedbackQuestionsFailed \u003d false;"},{"lineNumber":574,"author":{"gitId":"-"},"content":"    this.isLoadingFeedbackQuestions \u003d true;"},{"lineNumber":575,"author":{"gitId":"-"},"content":"    this.feedbackQuestionsService.getFeedbackQuestions({"},{"lineNumber":576,"author":{"gitId":"-"},"content":"      courseId: this.courseId,"},{"lineNumber":577,"author":{"gitId":"-"},"content":"      feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":578,"author":{"gitId":"-"},"content":"      intent: Intent.FULL_DETAIL,"},{"lineNumber":579,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":580,"author":{"gitId":"-"},"content":"        .pipe(finalize(() \u003d\u003e {"},{"lineNumber":581,"author":{"gitId":"-"},"content":"          this.isLoadingFeedbackQuestions \u003d false;"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        }))"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":584,"author":{"gitId":"-"},"content":"          next: (response: FeedbackQuestions) \u003d\u003e {"},{"lineNumber":585,"author":{"gitId":"-"},"content":"            response.questions.forEach((feedbackQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":586,"author":{"gitId":"-"},"content":"              const addedQuestionEditFormModel: QuestionEditFormModel \u003d this.getQuestionEditFormModel(feedbackQuestion);"},{"lineNumber":587,"author":{"gitId":"-"},"content":"              this.questionEditFormModels.push(addedQuestionEditFormModel);"},{"lineNumber":588,"author":{"gitId":"-"},"content":"              this.loadResponseStatusForQuestion(addedQuestionEditFormModel);"},{"lineNumber":589,"author":{"gitId":"-"},"content":"              this.feedbackQuestionModels.set(feedbackQuestion.feedbackQuestionId, feedbackQuestion);"},{"lineNumber":590,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":591,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":592,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":593,"author":{"gitId":"-"},"content":"            this.hasLoadingFeedbackQuestionsFailed \u003d true;"},{"lineNumber":594,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":595,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":597,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":600,"author":{"gitId":"-"},"content":"   * Tracks the question edit form by feedback question id."},{"lineNumber":601,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":602,"author":{"gitId":"-"},"content":"   * @see https://angular.io/api/common/NgForOf#properties"},{"lineNumber":603,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":604,"author":{"gitId":"-"},"content":"  trackQuestionEditFormByFn(_: any, item: QuestionEditFormModel): any {"},{"lineNumber":605,"author":{"gitId":"-"},"content":"    return item.feedbackQuestionId;"},{"lineNumber":606,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":607,"author":{"gitId":"-"},"content":""},{"lineNumber":608,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":609,"author":{"gitId":"-"},"content":"   * Converts feedback question to the question edit form model."},{"lineNumber":610,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":611,"author":{"gitId":"-"},"content":"  private getQuestionEditFormModel(feedbackQuestion: FeedbackQuestion): QuestionEditFormModel {"},{"lineNumber":612,"author":{"gitId":"-"},"content":"    return {"},{"lineNumber":613,"author":{"gitId":"-"},"content":"      feedbackQuestionId: feedbackQuestion.feedbackQuestionId,"},{"lineNumber":614,"author":{"gitId":"-"},"content":""},{"lineNumber":615,"author":{"gitId":"-"},"content":"      questionNumber: feedbackQuestion.questionNumber,"},{"lineNumber":616,"author":{"gitId":"-"},"content":"      questionBrief: feedbackQuestion.questionBrief,"},{"lineNumber":617,"author":{"gitId":"-"},"content":"      questionDescription: feedbackQuestion.questionDescription,"},{"lineNumber":618,"author":{"gitId":"-"},"content":""},{"lineNumber":619,"author":{"gitId":"-"},"content":"      isQuestionHasResponses: false,"},{"lineNumber":620,"author":{"gitId":"-"},"content":""},{"lineNumber":621,"author":{"gitId":"-"},"content":"      questionType: feedbackQuestion.questionType,"},{"lineNumber":622,"author":{"gitId":"-"},"content":"      questionDetails: this.deepCopy(feedbackQuestion.questionDetails),"},{"lineNumber":623,"author":{"gitId":"-"},"content":""},{"lineNumber":624,"author":{"gitId":"-"},"content":"      giverType: feedbackQuestion.giverType,"},{"lineNumber":625,"author":{"gitId":"-"},"content":"      recipientType: feedbackQuestion.recipientType,"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":"      numberOfEntitiesToGiveFeedbackToSetting: feedbackQuestion.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":628,"author":{"gitId":"-"},"content":"      customNumberOfEntitiesToGiveFeedbackTo: feedbackQuestion.customNumberOfEntitiesToGiveFeedbackTo"},{"lineNumber":629,"author":{"gitId":"-"},"content":"          ? feedbackQuestion.customNumberOfEntitiesToGiveFeedbackTo : 1,"},{"lineNumber":630,"author":{"gitId":"-"},"content":""},{"lineNumber":631,"author":{"gitId":"-"},"content":"      showResponsesTo: feedbackQuestion.showResponsesTo,"},{"lineNumber":632,"author":{"gitId":"-"},"content":"      showGiverNameTo: feedbackQuestion.showGiverNameTo,"},{"lineNumber":633,"author":{"gitId":"-"},"content":"      showRecipientNameTo: feedbackQuestion.showRecipientNameTo,"},{"lineNumber":634,"author":{"gitId":"-"},"content":""},{"lineNumber":635,"author":{"gitId":"-"},"content":"      isDeleting: false,"},{"lineNumber":636,"author":{"gitId":"-"},"content":"      isDuplicating: false,"},{"lineNumber":637,"author":{"gitId":"-"},"content":"      isEditable: false,"},{"lineNumber":638,"author":{"gitId":"-"},"content":"      isSaving: false,"},{"lineNumber":639,"author":{"gitId":"-"},"content":"      isCollapsed: false,"},{"lineNumber":640,"author":{"gitId":"-"},"content":""},{"lineNumber":641,"author":{"gitId":"-"},"content":"      isVisibilityChanged: false,"},{"lineNumber":642,"author":{"gitId":"-"},"content":"      isFeedbackPathChanged: false,"},{"lineNumber":643,"author":{"gitId":"-"},"content":"      isQuestionDetailsChanged: false,"},{"lineNumber":644,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":645,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":648,"author":{"gitId":"-"},"content":"   * Loads the isQuestionHasResponses value for a question edit for model."},{"lineNumber":649,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":650,"author":{"gitId":"-"},"content":"  private loadResponseStatusForQuestion(model: QuestionEditFormModel): void {"},{"lineNumber":651,"author":{"gitId":"-"},"content":"    this.feedbackSessionsService.hasResponsesForQuestion(model.feedbackQuestionId)"},{"lineNumber":652,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":653,"author":{"gitId":"-"},"content":"          next: (resp: HasResponses) \u003d\u003e {"},{"lineNumber":654,"author":{"gitId":"-"},"content":"            model.isQuestionHasResponses \u003d resp.hasResponses;"},{"lineNumber":655,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":656,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":657,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":658,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":659,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":660,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":661,"author":{"gitId":"-"},"content":""},{"lineNumber":662,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":663,"author":{"gitId":"-"},"content":"   * Saves the existing question."},{"lineNumber":664,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":665,"author":{"gitId":"-"},"content":"  saveExistingQuestionHandler(index: number): void {"},{"lineNumber":666,"author":{"gitId":"-"},"content":"    const questionEditFormModel: QuestionEditFormModel \u003d this.questionEditFormModels[index];"},{"lineNumber":667,"author":{"gitId":"-"},"content":"    const originalQuestionNumber: number \u003d"},{"lineNumber":668,"author":{"gitId":"-"},"content":"        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion"},{"lineNumber":669,"author":{"gitId":"-"},"content":"        this.feedbackQuestionModels.get(questionEditFormModel.feedbackQuestionId)!.questionNumber;"},{"lineNumber":670,"author":{"gitId":"-"},"content":""},{"lineNumber":671,"author":{"gitId":"-"},"content":"    questionEditFormModel.isSaving \u003d true;"},{"lineNumber":672,"author":{"gitId":"-"},"content":"    this.feedbackQuestionsService.saveFeedbackQuestion(questionEditFormModel.feedbackQuestionId, {"},{"lineNumber":673,"author":{"gitId":"-"},"content":"      questionNumber: questionEditFormModel.questionNumber,"},{"lineNumber":674,"author":{"gitId":"-"},"content":"      questionBrief: questionEditFormModel.questionBrief,"},{"lineNumber":675,"author":{"gitId":"-"},"content":"      questionDescription: questionEditFormModel.questionDescription,"},{"lineNumber":676,"author":{"gitId":"-"},"content":""},{"lineNumber":677,"author":{"gitId":"-"},"content":"      questionDetails: questionEditFormModel.questionDetails,"},{"lineNumber":678,"author":{"gitId":"-"},"content":"      questionType: questionEditFormModel.questionType,"},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"      giverType: questionEditFormModel.giverType,"},{"lineNumber":681,"author":{"gitId":"-"},"content":"      recipientType: questionEditFormModel.recipientType,"},{"lineNumber":682,"author":{"gitId":"-"},"content":""},{"lineNumber":683,"author":{"gitId":"-"},"content":"      numberOfEntitiesToGiveFeedbackToSetting: questionEditFormModel.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":684,"author":{"gitId":"-"},"content":"      customNumberOfEntitiesToGiveFeedbackTo: questionEditFormModel.customNumberOfEntitiesToGiveFeedbackTo,"},{"lineNumber":685,"author":{"gitId":"-"},"content":""},{"lineNumber":686,"author":{"gitId":"-"},"content":"      showResponsesTo: questionEditFormModel.showResponsesTo,"},{"lineNumber":687,"author":{"gitId":"-"},"content":"      showGiverNameTo: questionEditFormModel.showGiverNameTo,"},{"lineNumber":688,"author":{"gitId":"-"},"content":"      showRecipientNameTo: questionEditFormModel.showRecipientNameTo,"},{"lineNumber":689,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        .pipe("},{"lineNumber":691,"author":{"gitId":"-"},"content":"            finalize(() \u003d\u003e {"},{"lineNumber":692,"author":{"gitId":"-"},"content":"              questionEditFormModel.isSaving \u003d false;"},{"lineNumber":693,"author":{"gitId":"-"},"content":"            }),"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":696,"author":{"gitId":"-"},"content":"          next: (updatedQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":697,"author":{"gitId":"-"},"content":"            this.questionEditFormModels[index] \u003d this.getQuestionEditFormModel(updatedQuestion);"},{"lineNumber":698,"author":{"gitId":"-"},"content":"            this.feedbackQuestionModels.set(updatedQuestion.feedbackQuestionId, updatedQuestion);"},{"lineNumber":699,"author":{"gitId":"-"},"content":"            this.loadResponseStatusForQuestion(this.questionEditFormModels[index]);"},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"            // shift question if needed"},{"lineNumber":702,"author":{"gitId":"-"},"content":"            if (originalQuestionNumber !\u003d\u003d updatedQuestion.questionNumber) {"},{"lineNumber":703,"author":{"gitId":"-"},"content":"              // move question form"},{"lineNumber":704,"author":{"gitId":"-"},"content":"              this.moveQuestionForm("},{"lineNumber":705,"author":{"gitId":"-"},"content":"                  originalQuestionNumber - 1, updatedQuestion.questionNumber - 1);"},{"lineNumber":706,"author":{"gitId":"-"},"content":"              this.normalizeQuestionNumberInQuestionForms();"},{"lineNumber":707,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":708,"author":{"gitId":"-"},"content":""},{"lineNumber":709,"author":{"gitId":"-"},"content":"            this.statusMessageService.showSuccessToast(\u0027The changes to the question have been updated.\u0027);"},{"lineNumber":710,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":711,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":712,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":713,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":714,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":715,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":716,"author":{"gitId":"-"},"content":""},{"lineNumber":717,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":718,"author":{"gitId":"-"},"content":"   * Moves question edit form from the original position to the new position."},{"lineNumber":719,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":720,"author":{"gitId":"-"},"content":"  private moveQuestionForm(originalPosition: number, newPosition: number): void {"},{"lineNumber":721,"author":{"gitId":"-"},"content":"    this.questionEditFormModels.splice(newPosition, 0,"},{"lineNumber":722,"author":{"gitId":"-"},"content":"        this.questionEditFormModels.splice(originalPosition, 1)[0]);"},{"lineNumber":723,"author":{"gitId":"-"},"content":""},{"lineNumber":724,"author":{"gitId":"-"},"content":"    // all expanded questions that were moved upwards must be re-expanded to reload rich text editor"},{"lineNumber":725,"author":{"gitId":"-"},"content":"    const start: number \u003d Math.min(originalPosition, newPosition);"},{"lineNumber":726,"author":{"gitId":"-"},"content":"    const movedExpandedQuestions: QuestionEditFormModel[] \u003d this.questionEditFormModels"},{"lineNumber":727,"author":{"gitId":"-"},"content":"      .slice(start, newPosition + 1)"},{"lineNumber":728,"author":{"gitId":"-"},"content":"      .filter((model: QuestionEditFormModel) \u003d\u003e !model.isCollapsed);"},{"lineNumber":729,"author":{"gitId":"-"},"content":"    movedExpandedQuestions.forEach((model: QuestionEditFormModel) \u003d\u003e {"},{"lineNumber":730,"author":{"gitId":"-"},"content":"      model.isCollapsed \u003d true;"},{"lineNumber":731,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":732,"author":{"gitId":"-"},"content":"    this.changeDetectorRef.detectChanges();"},{"lineNumber":733,"author":{"gitId":"-"},"content":"    movedExpandedQuestions.forEach((model: QuestionEditFormModel) \u003d\u003e {"},{"lineNumber":734,"author":{"gitId":"-"},"content":"      model.isCollapsed \u003d false;"},{"lineNumber":735,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":736,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":737,"author":{"gitId":"-"},"content":""},{"lineNumber":738,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":739,"author":{"gitId":"-"},"content":"   * Normalizes question number in question forms by setting question number in sequence (i.e. 1, 2, 3, 4 ...)."},{"lineNumber":740,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":741,"author":{"gitId":"-"},"content":"  private normalizeQuestionNumberInQuestionForms(): void {"},{"lineNumber":742,"author":{"gitId":"-"},"content":"    for (let i: number \u003d 1; i \u003c\u003d this.questionEditFormModels.length; i +\u003d 1) {"},{"lineNumber":743,"author":{"gitId":"-"},"content":"      const questionEditFormModel: QuestionEditFormModel \u003d this.questionEditFormModels[i - 1];"},{"lineNumber":744,"author":{"gitId":"-"},"content":"      questionEditFormModel.questionNumber \u003d i;"},{"lineNumber":745,"author":{"gitId":"-"},"content":"      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion"},{"lineNumber":746,"author":{"gitId":"-"},"content":"      this.feedbackQuestionModels.get(questionEditFormModel.feedbackQuestionId)!.questionNumber \u003d i;"},{"lineNumber":747,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":748,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":749,"author":{"gitId":"-"},"content":""},{"lineNumber":750,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":751,"author":{"gitId":"-"},"content":"   * Discards the changes made to the existing question."},{"lineNumber":752,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":753,"author":{"gitId":"-"},"content":"  discardExistingQuestionHandler(index: number): void {"},{"lineNumber":754,"author":{"gitId":"-"},"content":"    const questionEditFormModel: QuestionEditFormModel \u003d this.questionEditFormModels[index];"},{"lineNumber":755,"author":{"gitId":"-"},"content":"    const feedbackQuestion: FeedbackQuestion \u003d"},{"lineNumber":756,"author":{"gitId":"-"},"content":"        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion"},{"lineNumber":757,"author":{"gitId":"-"},"content":"        this.feedbackQuestionModels.get(questionEditFormModel.feedbackQuestionId)!;"},{"lineNumber":758,"author":{"gitId":"-"},"content":"    this.questionEditFormModels[index] \u003d this.getQuestionEditFormModel(feedbackQuestion);"},{"lineNumber":759,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":760,"author":{"gitId":"-"},"content":""},{"lineNumber":761,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":762,"author":{"gitId":"-"},"content":"   * Duplicates the question."},{"lineNumber":763,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":764,"author":{"gitId":"-"},"content":"  duplicateCurrentQuestionHandler(index: number): void {"},{"lineNumber":765,"author":{"gitId":"-"},"content":"    const questionEditFormModel: QuestionEditFormModel \u003d this.questionEditFormModels[index];"},{"lineNumber":766,"author":{"gitId":"-"},"content":""},{"lineNumber":767,"author":{"gitId":"-"},"content":"    questionEditFormModel.isDuplicating \u003d true;"},{"lineNumber":768,"author":{"gitId":"-"},"content":"    this.feedbackQuestionsService.createFeedbackQuestion(this.courseId, this.feedbackSessionName, {"},{"lineNumber":769,"author":{"gitId":"-"},"content":"      questionNumber: this.questionEditFormModels.length + 1, // add the duplicated question at the end"},{"lineNumber":770,"author":{"gitId":"-"},"content":"      questionBrief: questionEditFormModel.questionBrief,"},{"lineNumber":771,"author":{"gitId":"-"},"content":"      questionDescription: questionEditFormModel.questionDescription,"},{"lineNumber":772,"author":{"gitId":"-"},"content":""},{"lineNumber":773,"author":{"gitId":"-"},"content":"      questionDetails: questionEditFormModel.questionDetails,"},{"lineNumber":774,"author":{"gitId":"-"},"content":"      questionType: questionEditFormModel.questionType,"},{"lineNumber":775,"author":{"gitId":"-"},"content":""},{"lineNumber":776,"author":{"gitId":"-"},"content":"      giverType: questionEditFormModel.giverType,"},{"lineNumber":777,"author":{"gitId":"-"},"content":"      recipientType: questionEditFormModel.recipientType,"},{"lineNumber":778,"author":{"gitId":"-"},"content":""},{"lineNumber":779,"author":{"gitId":"-"},"content":"      numberOfEntitiesToGiveFeedbackToSetting: questionEditFormModel.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":780,"author":{"gitId":"-"},"content":"      customNumberOfEntitiesToGiveFeedbackTo: questionEditFormModel.customNumberOfEntitiesToGiveFeedbackTo,"},{"lineNumber":781,"author":{"gitId":"-"},"content":""},{"lineNumber":782,"author":{"gitId":"-"},"content":"      showResponsesTo: questionEditFormModel.showResponsesTo,"},{"lineNumber":783,"author":{"gitId":"-"},"content":"      showGiverNameTo: questionEditFormModel.showGiverNameTo,"},{"lineNumber":784,"author":{"gitId":"-"},"content":"      showRecipientNameTo: questionEditFormModel.showRecipientNameTo,"},{"lineNumber":785,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":786,"author":{"gitId":"-"},"content":"        .pipe("},{"lineNumber":787,"author":{"gitId":"-"},"content":"            finalize(() \u003d\u003e {"},{"lineNumber":788,"author":{"gitId":"-"},"content":"              questionEditFormModel.isDuplicating \u003d false;"},{"lineNumber":789,"author":{"gitId":"-"},"content":"            }),"},{"lineNumber":790,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":791,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":792,"author":{"gitId":"-"},"content":"          next: (newQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":793,"author":{"gitId":"-"},"content":"            this.questionEditFormModels.push(this.getQuestionEditFormModel(newQuestion));"},{"lineNumber":794,"author":{"gitId":"-"},"content":"            this.feedbackQuestionModels.set(newQuestion.feedbackQuestionId, newQuestion);"},{"lineNumber":795,"author":{"gitId":"-"},"content":"            this.statusMessageService.showSuccessToast(\u0027The question has been duplicated below.\u0027);"},{"lineNumber":796,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":797,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":798,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":799,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":800,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":801,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":802,"author":{"gitId":"-"},"content":""},{"lineNumber":803,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":804,"author":{"gitId":"-"},"content":"   * Deletes the existing question."},{"lineNumber":805,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":806,"author":{"gitId":"-"},"content":"  deleteExistingQuestionHandler(index: number): void {"},{"lineNumber":807,"author":{"gitId":"-"},"content":"    const modalRef: NgbModalRef \u003d this.simpleModalService.openConfirmationModal("},{"lineNumber":808,"author":{"gitId":"-"},"content":"        \u0027Delete the question?\u0027, SimpleModalType.DANGER,"},{"lineNumber":809,"author":{"gitId":"-"},"content":"        \u0027Warning: Deleted question cannot be recovered. \u0027"},{"lineNumber":810,"author":{"gitId":"-"},"content":"        + \u0027\u003cb\u003eAll existing responses for this question to be deleted.\u003c/b\u003e\u0027);"},{"lineNumber":811,"author":{"gitId":"-"},"content":"    modalRef.result.then(() \u003d\u003e {"},{"lineNumber":812,"author":{"gitId":"-"},"content":"      const questionEditFormModel: QuestionEditFormModel \u003d this.questionEditFormModels[index];"},{"lineNumber":813,"author":{"gitId":"-"},"content":"      questionEditFormModel.isDeleting \u003d true;"},{"lineNumber":814,"author":{"gitId":"-"},"content":"      this.feedbackQuestionsService.deleteFeedbackQuestion(questionEditFormModel.feedbackQuestionId)"},{"lineNumber":815,"author":{"gitId":"-"},"content":"          .pipe(finalize(() \u003d\u003e {"},{"lineNumber":816,"author":{"gitId":"-"},"content":"            questionEditFormModel.isDeleting \u003d false;"},{"lineNumber":817,"author":{"gitId":"-"},"content":"          }))"},{"lineNumber":818,"author":{"gitId":"-"},"content":"          .subscribe({"},{"lineNumber":819,"author":{"gitId":"-"},"content":"            next: () \u003d\u003e {"},{"lineNumber":820,"author":{"gitId":"-"},"content":"              // remove form model"},{"lineNumber":821,"author":{"gitId":"-"},"content":"              this.feedbackQuestionModels.delete(questionEditFormModel.feedbackQuestionId);"},{"lineNumber":822,"author":{"gitId":"-"},"content":"              this.questionEditFormModels.splice(index, 1);"},{"lineNumber":823,"author":{"gitId":"-"},"content":"              this.normalizeQuestionNumberInQuestionForms();"},{"lineNumber":824,"author":{"gitId":"-"},"content":""},{"lineNumber":825,"author":{"gitId":"-"},"content":"              this.statusMessageService.showSuccessToast(\u0027The question has been deleted.\u0027);"},{"lineNumber":826,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":827,"author":{"gitId":"-"},"content":"            error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":828,"author":{"gitId":"-"},"content":"              this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":829,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":830,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":831,"author":{"gitId":"-"},"content":"    }, () \u003d\u003e {});"},{"lineNumber":832,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":833,"author":{"gitId":"-"},"content":""},{"lineNumber":834,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":835,"author":{"gitId":"-"},"content":"   * Handles display of template question modal."},{"lineNumber":836,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":837,"author":{"gitId":"-"},"content":"  templateQuestionModalHandler(): void {"},{"lineNumber":838,"author":{"gitId":"-"},"content":"    const windowClass: string \u003d \u0027modal-large\u0027;"},{"lineNumber":839,"author":{"gitId":"-"},"content":"    this.ngbModal.open(TemplateQuestionModalComponent, { windowClass }).result.then((questions: FeedbackQuestion[]) \u003d\u003e {"},{"lineNumber":840,"author":{"gitId":"-"},"content":"      let questionNumber: number \u003d this.questionEditFormModels.length; // append the questions at the end"},{"lineNumber":841,"author":{"gitId":"-"},"content":"      this.isAddingFromTemplate \u003d true;"},{"lineNumber":842,"author":{"gitId":"-"},"content":"      of(...questions).pipe("},{"lineNumber":843,"author":{"gitId":"-"},"content":"          concatMap((question: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":844,"author":{"gitId":"-"},"content":"            questionNumber +\u003d 1;"},{"lineNumber":845,"author":{"gitId":"-"},"content":"            return this.feedbackQuestionsService.createFeedbackQuestion(this.courseId, this.feedbackSessionName, {"},{"lineNumber":846,"author":{"gitId":"-"},"content":"              questionNumber,"},{"lineNumber":847,"author":{"gitId":"-"},"content":"              questionBrief: question.questionBrief,"},{"lineNumber":848,"author":{"gitId":"-"},"content":"              questionDescription: question.questionDescription,"},{"lineNumber":849,"author":{"gitId":"-"},"content":""},{"lineNumber":850,"author":{"gitId":"-"},"content":"              questionDetails: question.questionDetails,"},{"lineNumber":851,"author":{"gitId":"-"},"content":"              questionType: question.questionType,"},{"lineNumber":852,"author":{"gitId":"-"},"content":""},{"lineNumber":853,"author":{"gitId":"-"},"content":"              giverType: question.giverType,"},{"lineNumber":854,"author":{"gitId":"-"},"content":"              recipientType: question.recipientType,"},{"lineNumber":855,"author":{"gitId":"-"},"content":""},{"lineNumber":856,"author":{"gitId":"-"},"content":"              numberOfEntitiesToGiveFeedbackToSetting: question.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":857,"author":{"gitId":"-"},"content":"              customNumberOfEntitiesToGiveFeedbackTo: question.customNumberOfEntitiesToGiveFeedbackTo,"},{"lineNumber":858,"author":{"gitId":"-"},"content":""},{"lineNumber":859,"author":{"gitId":"-"},"content":"              showResponsesTo: question.showResponsesTo,"},{"lineNumber":860,"author":{"gitId":"-"},"content":"              showGiverNameTo: question.showGiverNameTo,"},{"lineNumber":861,"author":{"gitId":"-"},"content":"              showRecipientNameTo: question.showRecipientNameTo,"},{"lineNumber":862,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":863,"author":{"gitId":"-"},"content":"          }),"},{"lineNumber":864,"author":{"gitId":"-"},"content":"      ).pipe("},{"lineNumber":865,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e {"},{"lineNumber":866,"author":{"gitId":"-"},"content":"          this.isAddingFromTemplate \u003d false;"},{"lineNumber":867,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":868,"author":{"gitId":"-"},"content":"      ).subscribe({"},{"lineNumber":869,"author":{"gitId":"-"},"content":"        next: (newQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":870,"author":{"gitId":"-"},"content":"          this.questionEditFormModels.push(this.getQuestionEditFormModel(newQuestion));"},{"lineNumber":871,"author":{"gitId":"-"},"content":"          this.feedbackQuestionModels.set(newQuestion.feedbackQuestionId, newQuestion);"},{"lineNumber":872,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":873,"author":{"gitId":"-"},"content":"        error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":874,"author":{"gitId":"-"},"content":"          this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":875,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":876,"author":{"gitId":"-"},"content":"        complete: () \u003d\u003e {"},{"lineNumber":877,"author":{"gitId":"-"},"content":"          if (questions.length \u003d\u003d\u003d 1) {"},{"lineNumber":878,"author":{"gitId":"-"},"content":"            this.statusMessageService.showSuccessToast(\u0027The question has been added to this feedback session.\u0027);"},{"lineNumber":879,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":880,"author":{"gitId":"-"},"content":"            this.statusMessageService.showSuccessToast(\u0027The questions have been added to this feedback session.\u0027);"},{"lineNumber":881,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":882,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":883,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":884,"author":{"gitId":"-"},"content":"    }, () \u003d\u003e {});"},{"lineNumber":885,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":886,"author":{"gitId":"-"},"content":""},{"lineNumber":887,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":888,"author":{"gitId":"-"},"content":"   * Populates and shows new question edit form."},{"lineNumber":889,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":890,"author":{"gitId":"-"},"content":"  populateAndShowNewQuestionForm(type: FeedbackQuestionType): void {"},{"lineNumber":891,"author":{"gitId":"-"},"content":"    this.isAddingQuestionPanelExpanded \u003d true;"},{"lineNumber":892,"author":{"gitId":"-"},"content":""},{"lineNumber":893,"author":{"gitId":"-"},"content":"    const newQuestionModel: NewQuestionModel \u003d"},{"lineNumber":894,"author":{"gitId":"-"},"content":"        this.feedbackQuestionsService.getNewQuestionModel(type);"},{"lineNumber":895,"author":{"gitId":"-"},"content":""},{"lineNumber":896,"author":{"gitId":"-"},"content":"    this.newQuestionEditFormModel \u003d {"},{"lineNumber":897,"author":{"gitId":"-"},"content":"      feedbackQuestionId: \u0027\u0027,"},{"lineNumber":898,"author":{"gitId":"-"},"content":"      questionNumber: this.questionEditFormModels.length + 1,"},{"lineNumber":899,"author":{"gitId":"-"},"content":"      questionBrief: newQuestionModel.questionBrief,"},{"lineNumber":900,"author":{"gitId":"-"},"content":"      questionDescription: newQuestionModel.questionDescription,"},{"lineNumber":901,"author":{"gitId":"-"},"content":""},{"lineNumber":902,"author":{"gitId":"-"},"content":"      isQuestionHasResponses: false,"},{"lineNumber":903,"author":{"gitId":"-"},"content":""},{"lineNumber":904,"author":{"gitId":"-"},"content":"      questionType: newQuestionModel.questionType,"},{"lineNumber":905,"author":{"gitId":"-"},"content":"      questionDetails: newQuestionModel.questionDetails,"},{"lineNumber":906,"author":{"gitId":"-"},"content":""},{"lineNumber":907,"author":{"gitId":"-"},"content":"      giverType: newQuestionModel.giverType,"},{"lineNumber":908,"author":{"gitId":"-"},"content":"      recipientType: newQuestionModel.recipientType,"},{"lineNumber":909,"author":{"gitId":"-"},"content":""},{"lineNumber":910,"author":{"gitId":"-"},"content":"      numberOfEntitiesToGiveFeedbackToSetting: newQuestionModel.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":911,"author":{"gitId":"-"},"content":"      customNumberOfEntitiesToGiveFeedbackTo: newQuestionModel.customNumberOfEntitiesToGiveFeedbackTo"},{"lineNumber":912,"author":{"gitId":"-"},"content":"          ? newQuestionModel.customNumberOfEntitiesToGiveFeedbackTo : 1,"},{"lineNumber":913,"author":{"gitId":"-"},"content":""},{"lineNumber":914,"author":{"gitId":"-"},"content":"      showResponsesTo: newQuestionModel.showResponsesTo,"},{"lineNumber":915,"author":{"gitId":"-"},"content":"      showGiverNameTo: newQuestionModel.showGiverNameTo,"},{"lineNumber":916,"author":{"gitId":"-"},"content":"      showRecipientNameTo: newQuestionModel.showRecipientNameTo,"},{"lineNumber":917,"author":{"gitId":"-"},"content":""},{"lineNumber":918,"author":{"gitId":"-"},"content":"      isDeleting: false,"},{"lineNumber":919,"author":{"gitId":"-"},"content":"      isDuplicating: false,"},{"lineNumber":920,"author":{"gitId":"-"},"content":"      isEditable: true,"},{"lineNumber":921,"author":{"gitId":"-"},"content":"      isSaving: false,"},{"lineNumber":922,"author":{"gitId":"-"},"content":"      isCollapsed: false,"},{"lineNumber":923,"author":{"gitId":"-"},"content":""},{"lineNumber":924,"author":{"gitId":"-"},"content":"      isVisibilityChanged: false,"},{"lineNumber":925,"author":{"gitId":"-"},"content":"      isFeedbackPathChanged: false,"},{"lineNumber":926,"author":{"gitId":"-"},"content":"      isQuestionDetailsChanged: false,"},{"lineNumber":927,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":928,"author":{"gitId":"-"},"content":""},{"lineNumber":929,"author":{"gitId":"-"},"content":"    // inherit some settings from the last question"},{"lineNumber":930,"author":{"gitId":"-"},"content":"    if (this.questionEditFormModels.length \u003e 0) {"},{"lineNumber":931,"author":{"gitId":"-"},"content":"      const lastQuestionEditFormModel: QuestionEditFormModel \u003d"},{"lineNumber":932,"author":{"gitId":"-"},"content":"          this.questionEditFormModels[this.questionEditFormModels.length - 1];"},{"lineNumber":933,"author":{"gitId":"-"},"content":""},{"lineNumber":934,"author":{"gitId":"-"},"content":"      const newQuestionAllowedFeedbackPaths: Map\u003cFeedbackParticipantType, FeedbackParticipantType[]\u003e \u003d"},{"lineNumber":935,"author":{"gitId":"-"},"content":"          this.feedbackQuestionsService.getAllowedFeedbackPaths(type);"},{"lineNumber":936,"author":{"gitId":"-"},"content":"      // inherit feedback path if applicable"},{"lineNumber":937,"author":{"gitId":"-"},"content":"      if (newQuestionAllowedFeedbackPaths.has(lastQuestionEditFormModel.giverType)"},{"lineNumber":938,"author":{"gitId":"-"},"content":"          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion"},{"lineNumber":939,"author":{"gitId":"-"},"content":"          \u0026\u0026 newQuestionAllowedFeedbackPaths.get(lastQuestionEditFormModel.giverType)!"},{"lineNumber":940,"author":{"gitId":"-"},"content":"              .indexOf(lastQuestionEditFormModel.recipientType) !\u003d\u003d -1) {"},{"lineNumber":941,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.giverType \u003d lastQuestionEditFormModel.giverType;"},{"lineNumber":942,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.recipientType \u003d lastQuestionEditFormModel.recipientType;"},{"lineNumber":943,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.numberOfEntitiesToGiveFeedbackToSetting \u003d"},{"lineNumber":944,"author":{"gitId":"-"},"content":"          lastQuestionEditFormModel.numberOfEntitiesToGiveFeedbackToSetting;"},{"lineNumber":945,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.customNumberOfEntitiesToGiveFeedbackTo \u003d"},{"lineNumber":946,"author":{"gitId":"-"},"content":"          lastQuestionEditFormModel.customNumberOfEntitiesToGiveFeedbackTo;"},{"lineNumber":947,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":948,"author":{"gitId":"-"},"content":""},{"lineNumber":949,"author":{"gitId":"-"},"content":"      const newQuestionVisibilityStateMachine: VisibilityStateMachine \u003d"},{"lineNumber":950,"author":{"gitId":"-"},"content":"          this.feedbackQuestionsService.getNewVisibilityStateMachine("},{"lineNumber":951,"author":{"gitId":"-"},"content":"              this.newQuestionEditFormModel.giverType, this.newQuestionEditFormModel.recipientType);"},{"lineNumber":952,"author":{"gitId":"-"},"content":"      // inherit visibility settings if applicable, the state machine will automatically filter out invalid choices"},{"lineNumber":953,"author":{"gitId":"-"},"content":"      newQuestionVisibilityStateMachine.applyVisibilitySettings({"},{"lineNumber":954,"author":{"gitId":"-"},"content":"        SHOW_RESPONSE: lastQuestionEditFormModel.showResponsesTo,"},{"lineNumber":955,"author":{"gitId":"-"},"content":"        SHOW_GIVER_NAME: lastQuestionEditFormModel.showGiverNameTo,"},{"lineNumber":956,"author":{"gitId":"-"},"content":"        SHOW_RECIPIENT_NAME: lastQuestionEditFormModel.showRecipientNameTo,"},{"lineNumber":957,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":958,"author":{"gitId":"-"},"content":"      const newQuestionShowResponsesTo: FeedbackVisibilityType[] \u003d"},{"lineNumber":959,"author":{"gitId":"-"},"content":"          newQuestionVisibilityStateMachine.getVisibilityTypesUnderVisibilityControl(VisibilityControl.SHOW_RESPONSE);"},{"lineNumber":960,"author":{"gitId":"-"},"content":"      const newQuestionShowGiverNameTo: FeedbackVisibilityType[] \u003d"},{"lineNumber":961,"author":{"gitId":"-"},"content":"          newQuestionVisibilityStateMachine.getVisibilityTypesUnderVisibilityControl(VisibilityControl.SHOW_GIVER_NAME);"},{"lineNumber":962,"author":{"gitId":"-"},"content":"      const newQuestionShowRecipientNameTo: FeedbackVisibilityType[] \u003d"},{"lineNumber":963,"author":{"gitId":"-"},"content":"          newQuestionVisibilityStateMachine"},{"lineNumber":964,"author":{"gitId":"-"},"content":"              .getVisibilityTypesUnderVisibilityControl(VisibilityControl.SHOW_RECIPIENT_NAME);"},{"lineNumber":965,"author":{"gitId":"-"},"content":""},{"lineNumber":966,"author":{"gitId":"-"},"content":"      let isAllowedToUseInheritedVisibility: boolean \u003d false;"},{"lineNumber":967,"author":{"gitId":"-"},"content":"      if (this.feedbackQuestionsService"},{"lineNumber":968,"author":{"gitId":"-"},"content":"          .isCustomFeedbackVisibilitySettingAllowed(this.newQuestionEditFormModel.questionType)) {"},{"lineNumber":969,"author":{"gitId":"-"},"content":"        isAllowedToUseInheritedVisibility \u003d true;"},{"lineNumber":970,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":971,"author":{"gitId":"-"},"content":"        const commonFeedbackVisibilitySettings: CommonVisibilitySetting[] \u003d"},{"lineNumber":972,"author":{"gitId":"-"},"content":"            this.feedbackQuestionsService.getCommonFeedbackVisibilitySettings("},{"lineNumber":973,"author":{"gitId":"-"},"content":"                newQuestionVisibilityStateMachine, this.newQuestionEditFormModel.questionType);"},{"lineNumber":974,"author":{"gitId":"-"},"content":"        // new question is only allowed to have common visibility settings"},{"lineNumber":975,"author":{"gitId":"-"},"content":"        // check whether the inherited settings fall into that or not"},{"lineNumber":976,"author":{"gitId":"-"},"content":"        for (const commonVisibilityOption of commonFeedbackVisibilitySettings) {"},{"lineNumber":977,"author":{"gitId":"-"},"content":"          if (this.isSameSet(newQuestionShowResponsesTo, commonVisibilityOption.visibilitySettings.SHOW_RESPONSE)"},{"lineNumber":978,"author":{"gitId":"-"},"content":"              \u0026\u0026 this.isSameSet(newQuestionShowGiverNameTo,"},{"lineNumber":979,"author":{"gitId":"-"},"content":"                  commonVisibilityOption.visibilitySettings.SHOW_GIVER_NAME)"},{"lineNumber":980,"author":{"gitId":"-"},"content":"              \u0026\u0026 this.isSameSet(newQuestionShowRecipientNameTo,"},{"lineNumber":981,"author":{"gitId":"-"},"content":"                  commonVisibilityOption.visibilitySettings.SHOW_RECIPIENT_NAME)) {"},{"lineNumber":982,"author":{"gitId":"-"},"content":"            isAllowedToUseInheritedVisibility \u003d true;"},{"lineNumber":983,"author":{"gitId":"-"},"content":"            break;"},{"lineNumber":984,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":985,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":986,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":987,"author":{"gitId":"-"},"content":""},{"lineNumber":988,"author":{"gitId":"-"},"content":"      if (isAllowedToUseInheritedVisibility) {"},{"lineNumber":989,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.showResponsesTo \u003d newQuestionShowResponsesTo;"},{"lineNumber":990,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.showGiverNameTo \u003d newQuestionShowGiverNameTo;"},{"lineNumber":991,"author":{"gitId":"-"},"content":"        this.newQuestionEditFormModel.showRecipientNameTo \u003d newQuestionShowRecipientNameTo;"},{"lineNumber":992,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":993,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":994,"author":{"gitId":"-"},"content":""},{"lineNumber":995,"author":{"gitId":"-"},"content":"    this.scrollToNewEditForm();"},{"lineNumber":996,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":997,"author":{"gitId":"-"},"content":""},{"lineNumber":998,"author":{"gitId":"-"},"content":"  private isSameSet(setA: FeedbackVisibilityType[], setB: FeedbackVisibilityType[]): boolean {"},{"lineNumber":999,"author":{"gitId":"-"},"content":"    return setA.length \u003d\u003d\u003d setB.length \u0026\u0026 setA.every((ele: FeedbackVisibilityType) \u003d\u003e setB.includes(ele));"},{"lineNumber":1000,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1001,"author":{"gitId":"-"},"content":""},{"lineNumber":1002,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"   * Creates a new question."},{"lineNumber":1004,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":1005,"author":{"gitId":"-"},"content":"  createNewQuestionHandler(): void {"},{"lineNumber":1006,"author":{"gitId":"-"},"content":"    this.newQuestionEditFormModel.isSaving \u003d true;"},{"lineNumber":1007,"author":{"gitId":"-"},"content":"    this.feedbackQuestionsService.createFeedbackQuestion(this.courseId, this.feedbackSessionName, {"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"      questionNumber: this.newQuestionEditFormModel.questionNumber,"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"      questionBrief: this.newQuestionEditFormModel.questionBrief,"},{"lineNumber":1010,"author":{"gitId":"-"},"content":"      questionDescription: this.newQuestionEditFormModel.questionDescription,"},{"lineNumber":1011,"author":{"gitId":"-"},"content":""},{"lineNumber":1012,"author":{"gitId":"-"},"content":"      questionDetails: this.newQuestionEditFormModel.questionDetails,"},{"lineNumber":1013,"author":{"gitId":"-"},"content":"      questionType: this.newQuestionEditFormModel.questionType,"},{"lineNumber":1014,"author":{"gitId":"-"},"content":""},{"lineNumber":1015,"author":{"gitId":"-"},"content":"      giverType: this.newQuestionEditFormModel.giverType,"},{"lineNumber":1016,"author":{"gitId":"-"},"content":"      recipientType: this.newQuestionEditFormModel.recipientType,"},{"lineNumber":1017,"author":{"gitId":"-"},"content":""},{"lineNumber":1018,"author":{"gitId":"-"},"content":"      numberOfEntitiesToGiveFeedbackToSetting: this.newQuestionEditFormModel.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"      customNumberOfEntitiesToGiveFeedbackTo: this.newQuestionEditFormModel.customNumberOfEntitiesToGiveFeedbackTo,"},{"lineNumber":1020,"author":{"gitId":"-"},"content":""},{"lineNumber":1021,"author":{"gitId":"-"},"content":"      showResponsesTo: this.newQuestionEditFormModel.showResponsesTo,"},{"lineNumber":1022,"author":{"gitId":"-"},"content":"      showGiverNameTo: this.newQuestionEditFormModel.showGiverNameTo,"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"      showRecipientNameTo: this.newQuestionEditFormModel.showRecipientNameTo,"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"        .pipe("},{"lineNumber":1026,"author":{"gitId":"-"},"content":"            finalize(() \u003d\u003e {"},{"lineNumber":1027,"author":{"gitId":"-"},"content":"              this.newQuestionEditFormModel.isSaving \u003d false;"},{"lineNumber":1028,"author":{"gitId":"-"},"content":"            }),"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"          next: (newQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":1032,"author":{"gitId":"-"},"content":"            this.questionEditFormModels.push(this.getQuestionEditFormModel(newQuestion));"},{"lineNumber":1033,"author":{"gitId":"-"},"content":"            this.feedbackQuestionModels.set(newQuestion.feedbackQuestionId, newQuestion);"},{"lineNumber":1034,"author":{"gitId":"-"},"content":""},{"lineNumber":1035,"author":{"gitId":"-"},"content":"            this.moveQuestionForm("},{"lineNumber":1036,"author":{"gitId":"-"},"content":"                this.questionEditFormModels.length - 1, newQuestion.questionNumber - 1);"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"            this.normalizeQuestionNumberInQuestionForms();"},{"lineNumber":1038,"author":{"gitId":"-"},"content":"            this.isAddingQuestionPanelExpanded \u003d false;"},{"lineNumber":1039,"author":{"gitId":"-"},"content":""},{"lineNumber":1040,"author":{"gitId":"-"},"content":"            this.statusMessageService.showSuccessToast(\u0027The question has been added to this feedback session.\u0027);"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":1044,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":1045,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1046,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1047,"author":{"gitId":"-"},"content":""},{"lineNumber":1048,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"   * Handles \u0027Copy Question\u0027 click event."},{"lineNumber":1050,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":1051,"author":{"gitId":"-"},"content":"  copyQuestionsFromOtherSessionsHandler(): void {"},{"lineNumber":1052,"author":{"gitId":"-"},"content":"    this.isCopyingQuestion \u003d true;"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"    const feedbackSessionTabModels: FeedbackSessionTabModel[] \u003d [];"},{"lineNumber":1054,"author":{"gitId":"-"},"content":""},{"lineNumber":1055,"author":{"gitId":"-"},"content":"    this.feedbackSessionsService.getFeedbackSessionsForInstructor().pipe("},{"lineNumber":1056,"author":{"gitId":"-"},"content":"      finalize(() \u003d\u003e {"},{"lineNumber":1057,"author":{"gitId":"-"},"content":"        this.isCopyingQuestion \u003d false;"},{"lineNumber":1058,"author":{"gitId":"-"},"content":"      }),"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"    ).subscribe({"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"      next: (response: FeedbackSessions) \u003d\u003e {"},{"lineNumber":1061,"author":{"gitId":"-"},"content":"        response.feedbackSessions.forEach((feedbackSession: FeedbackSession) \u003d\u003e {"},{"lineNumber":1062,"author":{"gitId":"-"},"content":"          const model: FeedbackSessionTabModel \u003d {"},{"lineNumber":1063,"author":{"gitId":"-"},"content":"            courseId: feedbackSession.courseId,"},{"lineNumber":1064,"author":{"gitId":"-"},"content":"            feedbackSessionName: feedbackSession.feedbackSessionName,"},{"lineNumber":1065,"author":{"gitId":"-"},"content":"            createdAtTimestamp: feedbackSession.createdAtTimestamp,"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"            questionsTableRowModels: [],"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"            isTabExpanded: false,"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"            hasQuestionsLoaded: false,"},{"lineNumber":1069,"author":{"gitId":"-"},"content":"            hasLoadingFailed: false,"},{"lineNumber":1070,"author":{"gitId":"-"},"content":"            questionsTableRowModelsSortBy: SortBy.NONE,"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"            questionsTableRowModelsSortOrder: SortOrder.ASC,"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"          };"},{"lineNumber":1073,"author":{"gitId":"-"},"content":"          feedbackSessionTabModels.push(model);"},{"lineNumber":1074,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"      error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"        this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":1078,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":1079,"author":{"gitId":"-"},"content":"      complete: () \u003d\u003e {"},{"lineNumber":1080,"author":{"gitId":"-"},"content":"        const ref: NgbModalRef \u003d this.ngbModal.open(CopyQuestionsFromOtherSessionsModalComponent);"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"        ref.componentInstance.feedbackSessionTabModels \u003d feedbackSessionTabModels;"},{"lineNumber":1082,"author":{"gitId":"-"},"content":""},{"lineNumber":1083,"author":{"gitId":"-"},"content":"        ref.result.then((questionsToCopy: FeedbackQuestion[]) \u003d\u003e {"},{"lineNumber":1084,"author":{"gitId":"-"},"content":"          this.isCopyingQuestion \u003d true;"},{"lineNumber":1085,"author":{"gitId":"-"},"content":"          of(...questionsToCopy).pipe("},{"lineNumber":1086,"author":{"gitId":"-"},"content":"              concatMap((questionToCopy: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"                return this.feedbackQuestionsService.createFeedbackQuestion(this.courseId, this.feedbackSessionName, {"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"                  questionNumber: this.questionEditFormModels.length + 1, // add the copied question at the end"},{"lineNumber":1089,"author":{"gitId":"-"},"content":"                  questionBrief: questionToCopy.questionBrief,"},{"lineNumber":1090,"author":{"gitId":"-"},"content":"                  questionDescription: questionToCopy.questionDescription,"},{"lineNumber":1091,"author":{"gitId":"-"},"content":""},{"lineNumber":1092,"author":{"gitId":"-"},"content":"                  questionDetails: questionToCopy.questionDetails,"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"                  questionType: questionToCopy.questionType,"},{"lineNumber":1094,"author":{"gitId":"-"},"content":""},{"lineNumber":1095,"author":{"gitId":"-"},"content":"                  giverType: questionToCopy.giverType,"},{"lineNumber":1096,"author":{"gitId":"-"},"content":"                  recipientType: questionToCopy.recipientType,"},{"lineNumber":1097,"author":{"gitId":"-"},"content":""},{"lineNumber":1098,"author":{"gitId":"-"},"content":"                  numberOfEntitiesToGiveFeedbackToSetting: questionToCopy.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":1099,"author":{"gitId":"-"},"content":"                  customNumberOfEntitiesToGiveFeedbackTo: questionToCopy.customNumberOfEntitiesToGiveFeedbackTo,"},{"lineNumber":1100,"author":{"gitId":"-"},"content":""},{"lineNumber":1101,"author":{"gitId":"-"},"content":"                  showResponsesTo: questionToCopy.showResponsesTo,"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"                  showGiverNameTo: questionToCopy.showGiverNameTo,"},{"lineNumber":1103,"author":{"gitId":"-"},"content":"                  showRecipientNameTo: questionToCopy.showRecipientNameTo,"},{"lineNumber":1104,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":1105,"author":{"gitId":"-"},"content":"              }),"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"              finalize(() \u003d\u003e {"},{"lineNumber":1107,"author":{"gitId":"-"},"content":"                this.isCopyingQuestion \u003d false;"},{"lineNumber":1108,"author":{"gitId":"-"},"content":"              }),"},{"lineNumber":1109,"author":{"gitId":"-"},"content":"          ).subscribe({"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"            next: (newQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":1111,"author":{"gitId":"-"},"content":"              this.questionEditFormModels.push(this.getQuestionEditFormModel(newQuestion));"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"              this.feedbackQuestionModels.set(newQuestion.feedbackQuestionId, newQuestion);"},{"lineNumber":1113,"author":{"gitId":"-"},"content":"              this.statusMessageService.showSuccessToast("},{"lineNumber":1114,"author":{"gitId":"-"},"content":"                  \u0027The selected question(s) have been added to this feedback session.\u0027,"},{"lineNumber":1115,"author":{"gitId":"-"},"content":"              );"},{"lineNumber":1116,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1117,"author":{"gitId":"-"},"content":"            error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"              this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":1119,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":1120,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1122,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":1123,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":1124,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1125,"author":{"gitId":"-"},"content":""},{"lineNumber":1126,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"   * Gets all students of a course."},{"lineNumber":1128,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":1129,"author":{"gitId":"-"},"content":"  getAllStudentsOfCourse(): void {"},{"lineNumber":1130,"author":{"gitId":"-"},"content":"    this.studentService.getStudentsFromCourse({ courseId: this.courseId })"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"          next: (students: Students) \u003d\u003e {"},{"lineNumber":1133,"author":{"gitId":"-"},"content":"            this.studentsOfCourse \u003d students.students;"},{"lineNumber":1134,"author":{"gitId":"-"},"content":""},{"lineNumber":1135,"author":{"gitId":"-"},"content":"            // sort the student list based on team name and student name"},{"lineNumber":1136,"author":{"gitId":"-"},"content":"            this.studentsOfCourse.sort((a: Student, b: Student): number \u003d\u003e {"},{"lineNumber":1137,"author":{"gitId":"-"},"content":"              const teamNameCompare: number \u003d a.teamName.localeCompare(b.teamName);"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"              if (teamNameCompare \u003d\u003d\u003d 0) {"},{"lineNumber":1139,"author":{"gitId":"-"},"content":"                return a.name.localeCompare(b.name);"},{"lineNumber":1140,"author":{"gitId":"-"},"content":"              }"},{"lineNumber":1141,"author":{"gitId":"-"},"content":"              return teamNameCompare;"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":1143,"author":{"gitId":"-"},"content":""},{"lineNumber":1144,"author":{"gitId":"-"},"content":"            // select the first student"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"            if (this.studentsOfCourse.length \u003e\u003d 1) {"},{"lineNumber":1146,"author":{"gitId":"-"},"content":"              this.emailOfStudentToPreview \u003d this.studentsOfCourse[0].email;"},{"lineNumber":1147,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1148,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":1149,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":1150,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1154,"author":{"gitId":"-"},"content":""},{"lineNumber":1155,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":1156,"author":{"gitId":"-"},"content":"   * Gets all instructors of a course."},{"lineNumber":1157,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"  getAllInstructors(): void {"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"    this.instructorService.loadInstructors({"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"      courseId: this.courseId,"},{"lineNumber":1161,"author":{"gitId":"-"},"content":"      intent: Intent.FULL_DETAIL,"},{"lineNumber":1162,"author":{"gitId":"-"},"content":"    })"},{"lineNumber":1163,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":1164,"author":{"gitId":"-"},"content":"          next: (instructors: Instructors) \u003d\u003e {"},{"lineNumber":1165,"author":{"gitId":"-"},"content":"            this.instructorsOfCourse \u003d instructors.instructors;"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"            // TODO use privilege API to filter instructors who has INSTRUCTOR_PERMISSION_SUBMIT_SESSION_IN_SECTIONS"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"            // in the feedback session"},{"lineNumber":1168,"author":{"gitId":"-"},"content":""},{"lineNumber":1169,"author":{"gitId":"-"},"content":"            // sort the instructor list based on name"},{"lineNumber":1170,"author":{"gitId":"-"},"content":"            this.instructorsOfCourse.sort((a: Instructor, b: Instructor): number \u003d\u003e {"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"              return a.name.localeCompare(b.name);"},{"lineNumber":1172,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":1173,"author":{"gitId":"-"},"content":""},{"lineNumber":1174,"author":{"gitId":"-"},"content":"            // select the first instructor"},{"lineNumber":1175,"author":{"gitId":"-"},"content":"            if (this.instructorsOfCourse.length \u003e\u003d 1) {"},{"lineNumber":1176,"author":{"gitId":"-"},"content":"              this.emailOfInstructorToPreview \u003d this.instructorsOfCourse[0].email;"},{"lineNumber":1177,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":1178,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":1179,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":1180,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":1181,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":1182,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1184,"author":{"gitId":"-"},"content":""},{"lineNumber":1185,"author":{"gitId":"-"},"content":"  expandAll(): void {"},{"lineNumber":1186,"author":{"gitId":"-"},"content":"    this.questionEditFormModels.forEach(((model: QuestionEditFormModel): void \u003d\u003e {"},{"lineNumber":1187,"author":{"gitId":"-"},"content":"      model.isCollapsed \u003d false;"},{"lineNumber":1188,"author":{"gitId":"-"},"content":"    }));"},{"lineNumber":1189,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1190,"author":{"gitId":"-"},"content":""},{"lineNumber":1191,"author":{"gitId":"-"},"content":"  collapseAll(): void {"},{"lineNumber":1192,"author":{"gitId":"-"},"content":"    this.questionEditFormModels.forEach(((model: QuestionEditFormModel): void \u003d\u003e {"},{"lineNumber":1193,"author":{"gitId":"-"},"content":"      model.isCollapsed \u003d true;"},{"lineNumber":1194,"author":{"gitId":"-"},"content":"    }));"},{"lineNumber":1195,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1196,"author":{"gitId":"-"},"content":""},{"lineNumber":1197,"author":{"gitId":"-"},"content":"  private deepCopy\u003cT\u003e(obj: T): T {"},{"lineNumber":1198,"author":{"gitId":"-"},"content":"    return JSON.parse(JSON.stringify(obj));"},{"lineNumber":1199,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1200,"author":{"gitId":"-"},"content":""},{"lineNumber":1201,"author":{"gitId":"-"},"content":"  private scrollToNewEditForm(): void {"},{"lineNumber":1202,"author":{"gitId":"-"},"content":"    setTimeout(() \u003d\u003e {"},{"lineNumber":1203,"author":{"gitId":"-"},"content":"      const allEditForms: NodeListOf\u003cElement\u003e \u003d document.querySelectorAll(\u0027tm-question-edit-form\u0027);"},{"lineNumber":1204,"author":{"gitId":"-"},"content":"      const newEditForm: Element \u003d allEditForms[allEditForms.length - 1];"},{"lineNumber":1205,"author":{"gitId":"-"},"content":"      const yOffset: number \u003d -70; // Need offset because of the navBar"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"      const y: number \u003d newEditForm.getBoundingClientRect().top + window.scrollY + yOffset;"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"      window.scrollTo({ top: y, behavior: \u0027smooth\u0027 });"},{"lineNumber":1208,"author":{"gitId":"-"},"content":"    }, 0);"},{"lineNumber":1209,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1210,"author":{"gitId":"-"},"content":""},{"lineNumber":1211,"author":{"gitId":"-"},"content":"  scrollToTopOfPage(): void {"},{"lineNumber":1212,"author":{"gitId":"-"},"content":"    window.scrollTo({ top: 0, behavior: \u0027smooth\u0027 });"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1214,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"cedricongjh":1,"-":1213}},{"path":"src/web/app/pages-session/session-submission-page/session-submission-page.component.html","fileType":"html","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"bg-light\" *ngIf\u003d\"moderatedPerson\"\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-12 text-center text-break\"\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \u003ch5\u003eYou are moderating responses for"},{"lineNumber":4,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"intent \u003d\u003d\u003d Intent.STUDENT_SUBMISSION\"\u003estudent\u003c/span\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"intent \u003d\u003d\u003d Intent.INSTRUCTOR_SUBMISSION\"\u003einstructor\u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      {{ personName }} ({{ moderatedPerson }})"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \u003cbutton type\u003d\"button\" class\u003d\"btn btn-link\" *ngIf\u003d\"!isModerationHintExpanded\" (click)\u003d\"isModerationHintExpanded \u003d true\"\u003e[More]\u003c/button\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \u003cbutton type\u003d\"button\" class\u003d\"btn btn-link\" *ngIf\u003d\"isModerationHintExpanded\" (click)\u003d\"isModerationHintExpanded \u003d false\"\u003e[Less]\u003c/button\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003c/h5\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cdiv *ngIf\u003d\"isModerationHintExpanded\" class\u003d\"text-start\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      \u003cp\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        The page below resembles the submission page as seen by the respondent {{ personName }} ({{ moderatedPerson }})."},{"lineNumber":13,"author":{"gitId":"-"},"content":"        You can use it to moderate responses submitted by the respondent or submit responses on behalf of the respondent."},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003c/p\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cp\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        Note that due to visibility settings, questions that are not supposed to show responses to instructors (i.e you) are not shown in the page below."},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003c/p\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"bg-light\" *ngIf\u003d\"previewAsPerson\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-12 text-center text-break\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003ch4\u003ePreviewing Session as"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"intent \u003d\u003d\u003d Intent.STUDENT_SUBMISSION\"\u003estudent\u003c/span\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cspan *ngIf\u003d\"intent \u003d\u003d\u003d Intent.INSTRUCTOR_SUBMISSION\"\u003einstructor\u003c/span\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      {{ personName }} ({{ previewAsPerson }})"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \u003c/h4\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"row\" *ngIf\u003d\"regKey\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"alert alert-primary\" role\u003d\"alert\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"loggedInUser\"\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        You are submitting feedback as \u003cmark\u003e\u003cb\u003e{{ personName }}\u003c/b\u003e\u003c/mark\u003e. If you wish to link your Google account ({{ loggedInUser }}) with this user,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003ca href\u003d\"#\" (click)\u003d\"joinCourseForUnregisteredEntity(); $event.preventDefault()\"\u003eclick here\u003c/a\u003e."},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      \u003cdiv *ngIf\u003d\"!loggedInUser\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        You are submitting feedback as \u003cmark\u003e\u003cb\u003e{{ personName }}\u003c/b\u003e\u003c/mark\u003e. You may submit feedback for sessions that are currently open and view results without logging in."},{"lineNumber":39,"author":{"gitId":"-"},"content":"        To access other features you need to \u003ca href\u003d\"#\" (click)\u003d\"joinCourseForUnregisteredEntity(); $event.preventDefault()\"\u003elogin using a Google account\u003c/a\u003e (optional)."},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"row mobile-invisible\" *ngIf\u003d\"feedbackSessionSubmissionStatus \u003d\u003d\u003d FeedbackSessionSubmissionStatus.OPEN\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-12\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"alert alert-primary\" role\u003d\"alert\"\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003ci class\u003d\"fas fa-exclamation-circle\"\u003e\u003c/i\u003e Notes:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"      \u003cul\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cli\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          You can use the \u003cb\u003eSubmit Response for Question _\u003c/b\u003e buttons to submit one-response-at-a-time."},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003cbr\u003eAlternatively, you can submit all responses in one go using the \u003cb\u003eSubmit Responses for All Questions\u003c/b\u003e button at the bottom of this page."},{"lineNumber":52,"author":{"gitId":"-"},"content":"        \u003c/li\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        \u003cli\u003eYou may edit your submission any number of times before the closing time of this session.\u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      \u003c/ul\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"card card-plain\" *tmIsLoading\u003d\"isCourseLoading || isFeedbackSessionLoading\"\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"card-body\"\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eCourse ID:\u003c/label\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"course-id\" class\u003d\"col-md-10 text-md-start\"\u003e{{ courseId }}\u003c/div\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\" *ngIf\u003d\"courseName\"\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eCourse name:\u003c/label\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"course-name\" class\u003d\"col-md-10 text-md-start\"\u003e{{ courseName }}\u003c/div\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\" *ngIf\u003d\"courseInstitute\"\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eCourse institute:\u003c/label\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"course-institute\" class\u003d\"col-md-10 text-md-start\"\u003e{{ courseInstitute }}\u003c/div\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eSession:\u003c/label\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"fs-name\" class\u003d\"col-md-10 text-md-start\"\u003e{{ feedbackSessionName }}\u003c/div\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eOpening time:\u003c/label\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"opening-time\" class\u003d\"col-md-10 text-md-start\"\u003e{{ formattedSessionOpeningTime }}\u003c/div\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eClosing time:\u003c/label\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"closing-time\" class\u003d\"col-md-10 text-md-start\"\u003e{{ formattedSessionClosingTime }}\u003c/div\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row text-center\"\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"      \u003clabel class\u003d\"col-md-2 text-md-end\"\u003eInstructions:\u003c/label\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"      \u003cdiv id\u003d\"instructions\" class\u003d\"col-md-10 text-md-start\" [innerHTML]\u003d\"feedbackSessionInstructions | safeHtml\"\u003e\u003c/div\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003ctm-loading-retry [shouldShowRetry]\u003d\"hasFeedbackSessionQuestionsLoadingFailed\" [message]\u003d\"\u0027Failed to load questions\u0027\" (retryEvent)\u003d\"retryLoadingFeedbackSessionQuestions()\"\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  \u003cdiv *tmIsLoading\u003d\"isFeedbackSessionQuestionsLoading\"\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    \u003ctm-question-submission-form *ngFor\u003d\"let questionSubmissionForm of questionSubmissionForms; let i \u003d index; trackBy: trackQuestionSubmissionFormByFn\""},{"lineNumber":95,"author":{"gitId":"-"},"content":"                                 [attr.id]\u003d\"questionSubmissionForm.feedbackQuestionId\""},{"lineNumber":96,"author":{"gitId":"-"},"content":"                                 inViewport (inViewportAction)\u003d\"loadRecipientsAndResponses($event, questionSubmissionForm)\""},{"lineNumber":97,"author":{"gitId":"-"},"content":"                                 [(formModel)]\u003d\"questionSubmissionForms[i]\" [formMode]\u003d\"getQuestionSubmissionFormMode(questionSubmissionForm)\""},{"lineNumber":98,"author":{"gitId":"-"},"content":"                                 [isSubmissionDisabled]\u003d\"isSubmissionFormsDisabled\" [isFormsDisabled]\u003d\"isSubmissionFormsDisabled \u0026\u0026 !this.previewAsPerson\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"                                 [isSavingResponses]\u003d\"isSavingResponses\" (responsesSave)\u003d\"saveFeedbackResponses([$event])\""},{"lineNumber":100,"author":{"gitId":"-"},"content":"                                 (deleteCommentEvent)\u003d\"deleteParticipantComment(i, $event)\""},{"lineNumber":101,"author":{"gitId":"-"},"content":"                                 [isQuestionCountOne]\u003d\"isQuestionCountOne\""},{"lineNumber":102,"author":{"gitId":"domlimm"},"content":"                                 [(isSubmitAllClicked)]\u003d\"isSubmitAllClicked\""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    \u003e\u003c/tm-question-submission-form\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\" *ngIf\u003d\"questionsNeedingSubmission.length \u003d\u003d\u003d 0\"\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-12 text-center\"\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        \u003cdiv class\u003d\"alert alert-info\" role\u003d\"alert\"\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"          There are no questions for you to answer here!"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        \u003c/div\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    \u003c!-- Do not display if only one question can be answered, as a button to submit individual response exists --\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"row\" *ngIf\u003d\"questionsNeedingSubmission.length \u003e 1\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"col-12 text-center\"\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        \u003cbutton id\u003d\"btn-submit\" type\u003d\"submit\" class\u003d\"btn btn-success\""},{"lineNumber":116,"author":{"gitId":"-"},"content":"                ngbTooltip\u003d\"You can save your responses at any time and come back later to continue.\""},{"lineNumber":117,"author":{"gitId":"-"},"content":"                (click)\u003d\"saveFeedbackResponses(questionSubmissionForms)\" [disabled]\u003d\"isSavingResponses || isSubmissionFormsDisabled\""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        \u003e\u003ctm-ajax-loading *ngIf\u003d\"isSavingResponses\"\u003e\u003c/tm-ajax-loading\u003eSubmit Responses for All Questions\u003c/button\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"      \u003c/div\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \u003c/div\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"\u003c/tm-loading-retry\u003e"}],"authorContributionMap":{"domlimm":1,"-":121}},{"path":"src/web/app/pages-session/session-submission-page/session-submission-page.component.ts","fileType":"ts","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { DOCUMENT } from \u0027@angular/common\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import { AfterViewInit, Component, Inject, OnInit } from \u0027@angular/core\u0027;"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import { ActivatedRoute } from \u0027@angular/router\u0027;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import { NgbModal, NgbModalRef } from \u0027@ng-bootstrap/ng-bootstrap\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import { PageScrollService } from \u0027ngx-page-scroll-core\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import { forkJoin, Observable, of } from \u0027rxjs\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import { catchError, finalize, switchMap, tap } from \u0027rxjs/operators\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import { environment } from \u0027../../../environments/environment\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import { AuthService } from \u0027../../../services/auth.service\u0027;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import { CourseService } from \u0027../../../services/course.service\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import { DeadlineExtensionHelper } from \u0027../../../services/deadline-extension-helper\u0027;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import { FeedbackQuestionsService } from \u0027../../../services/feedback-questions.service\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import { FeedbackResponseCommentService } from \u0027../../../services/feedback-response-comment.service\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import { FeedbackResponsesResponse, FeedbackResponsesService } from \u0027../../../services/feedback-responses.service\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import { FeedbackSessionsService } from \u0027../../../services/feedback-sessions.service\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import { InstructorService } from \u0027../../../services/instructor.service\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import { LogService } from \u0027../../../services/log.service\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import { NavigationService } from \u0027../../../services/navigation.service\u0027;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import { SimpleModalService } from \u0027../../../services/simple-modal.service\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import { StatusMessageService } from \u0027../../../services/status-message.service\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import { StudentService } from \u0027../../../services/student.service\u0027;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import { TimezoneService } from \u0027../../../services/timezone.service\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  AuthInfo,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  Course,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  FeedbackParticipantType,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  FeedbackQuestion,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  FeedbackQuestionRecipient,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  FeedbackQuestionRecipients,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  FeedbackResponse,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  FeedbackResponseComment,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  FeedbackResponses,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  FeedbackSession,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  FeedbackSessionLogType,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  FeedbackSessionSubmissionStatus,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  Instructor,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  NumberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  RegkeyValidity,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  Student,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"} from \u0027../../../types/api-output\u0027;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import { FeedbackResponseRequest, Intent } from \u0027../../../types/api-request\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import { Milliseconds } from \u0027../../../types/datetime-const\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import { DEFAULT_NUMBER_OF_RETRY_ATTEMPTS } from \u0027../../../types/default-retry-attempts\u0027;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import { CommentRowModel } from \u0027../../components/comment-box/comment-row/comment-row.component\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import { ErrorReportComponent } from \u0027../../components/error-report/error-report.component\u0027;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  FeedbackResponseRecipient,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  FeedbackResponseRecipientSubmissionFormModel,"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  QuestionSubmissionFormMode,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  QuestionSubmissionFormModel,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"} from \u0027../../components/question-submission-form/question-submission-form-model\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import { SimpleModalType } from \u0027../../components/simple-modal/simple-modal-type\u0027;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import { ErrorMessageOutput } from \u0027../../error-message-output\u0027;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import { SavingCompleteModalComponent } from \u0027./saving-complete-modal/saving-complete-modal.component\u0027;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"interface FeedbackQuestionsResponse {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  questions: FeedbackQuestion[];"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":61,"author":{"gitId":"-"},"content":" * Feedback session submission page."},{"lineNumber":62,"author":{"gitId":"-"},"content":" */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"@Component({"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  selector: \u0027tm-session-submission-page\u0027,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  templateUrl: \u0027./session-submission-page.component.html\u0027,"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  styleUrls: [\u0027./session-submission-page.component.scss\u0027],"},{"lineNumber":67,"author":{"gitId":"-"},"content":"})"},{"lineNumber":68,"author":{"gitId":"-"},"content":"export class SessionSubmissionPageComponent implements OnInit, AfterViewInit {"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  // enum"},{"lineNumber":71,"author":{"gitId":"-"},"content":"  FeedbackSessionSubmissionStatus: typeof FeedbackSessionSubmissionStatus \u003d FeedbackSessionSubmissionStatus;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  Intent: typeof Intent \u003d Intent;"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  courseId: string \u003d \u0027\u0027;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  feedbackSessionName: string \u003d \u0027\u0027;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"  regKey: string \u003d \u0027\u0027;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  entityType: string \u003d \u0027student\u0027;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  loggedInUser: string \u003d \u0027\u0027;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  moderatedPerson: string \u003d \u0027\u0027;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  previewAsPerson: string \u003d \u0027\u0027;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  // the name of the person involved"},{"lineNumber":83,"author":{"gitId":"-"},"content":"  // (e.g. the student name for unregistered student, the name of instructor being moderated)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  personName: string \u003d \u0027\u0027;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  personEmail: string \u003d \u0027\u0027;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"  courseName: string \u003d \u0027\u0027;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  courseInstitute: string \u003d \u0027\u0027;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  formattedSessionOpeningTime: string \u003d \u0027\u0027;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  formattedSessionClosingTime: string \u003d \u0027\u0027;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  feedbackSessionInstructions: string \u003d \u0027\u0027;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"  feedbackSessionTimezone: string \u003d \u0027\u0027;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"  feedbackSessionSubmissionStatus: FeedbackSessionSubmissionStatus \u003d FeedbackSessionSubmissionStatus.OPEN;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"  intent: Intent \u003d Intent.STUDENT_SUBMISSION;"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  questionSubmissionForms: QuestionSubmissionFormModel[] \u003d [];"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  isSavingResponses: boolean \u003d false;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  isSubmissionFormsDisabled: boolean \u003d false;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  isModerationHintExpanded: boolean \u003d false;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  moderatedQuestionId: string \u003d \u0027\u0027;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  isCourseLoading: boolean \u003d true;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  isFeedbackSessionLoading: boolean \u003d true;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  isFeedbackSessionQuestionsLoading: boolean \u003d true;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  hasFeedbackSessionQuestionsLoadingFailed: boolean \u003d false;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  retryAttempts: number \u003d DEFAULT_NUMBER_OF_RETRY_ATTEMPTS;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  isQuestionCountOne: boolean \u003d false;"},{"lineNumber":112,"author":{"gitId":"domlimm"},"content":"  isSubmitAllClicked: boolean \u003d false;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  private backendUrl: string \u003d environment.backendUrl;"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"  constructor(private route: ActivatedRoute,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"              private statusMessageService: StatusMessageService,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"              private timezoneService: TimezoneService,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"              private feedbackQuestionsService: FeedbackQuestionsService,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"              private feedbackResponsesService: FeedbackResponsesService,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"              private feedbackSessionsService: FeedbackSessionsService,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"              private studentService: StudentService,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"              private instructorService: InstructorService,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"              private courseService: CourseService,"},{"lineNumber":125,"author":{"gitId":"-"},"content":"              private ngbModal: NgbModal,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"              private simpleModalService: SimpleModalService,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"              private pageScrollService: PageScrollService,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"              private authService: AuthService,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"              private navigationService: NavigationService,"},{"lineNumber":130,"author":{"gitId":"-"},"content":"              private commentService: FeedbackResponseCommentService,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"              private logService: LogService,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"              @Inject(DOCUMENT) private document: any) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    this.timezoneService.getTzVersion(); // import timezone service to load timezone data"},{"lineNumber":134,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"  ngOnInit(): void {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    this.route.data.pipe("},{"lineNumber":138,"author":{"gitId":"-"},"content":"        tap((data: any) \u003d\u003e {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"          this.intent \u003d data.intent;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"          this.entityType \u003d data.intent \u003d\u003d\u003d Intent.INSTRUCTOR_SUBMISSION ? \u0027instructor\u0027 : this.entityType;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        switchMap(() \u003d\u003e this.route.queryParams),"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    ).subscribe((queryParams: any) \u003d\u003e {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"      this.courseId \u003d queryParams.courseid;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"      this.feedbackSessionName \u003d queryParams.fsname;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      this.regKey \u003d queryParams.key ? queryParams.key : \u0027\u0027;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      this.moderatedPerson \u003d queryParams.moderatedperson ? queryParams.moderatedperson : \u0027\u0027;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      this.previewAsPerson \u003d queryParams.previewas ? queryParams.previewas : \u0027\u0027;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      if (queryParams.entitytype \u003d\u003d\u003d \u0027instructor\u0027) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        this.entityType \u003d \u0027instructor\u0027;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        this.intent \u003d Intent.INSTRUCTOR_SUBMISSION;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      this.moderatedQuestionId \u003d queryParams.moderatedquestionId ? queryParams.moderatedquestionId : \u0027\u0027;"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"      if (this.previewAsPerson) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // disable submission in the preview mode"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        this.isSubmissionFormsDisabled \u003d true;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"      const nextUrl: string \u003d `${window.location.pathname}${window.location.search.replace(/\u0026/g, \u0027%26\u0027)}`;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      this.authService.getAuthUser(undefined, nextUrl).subscribe({"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        next: (auth: AuthInfo) \u003d\u003e {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"          const isPreviewOrModeration: boolean \u003d !!(auth.user \u0026\u0026 (this.moderatedPerson || this.previewAsPerson));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"          if (auth.user) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            this.loggedInUser \u003d auth.user.id;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"          if (this.regKey \u0026\u0026 !isPreviewOrModeration) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.authService.getAuthRegkeyValidity(this.regKey, this.intent).subscribe({"},{"lineNumber":169,"author":{"gitId":"-"},"content":"              next: (resp: RegkeyValidity) \u003d\u003e {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                if (resp.isAllowedAccess) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                  if (resp.isUsed) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                    // The logged in user matches the registration key; redirect to the logged in URL"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                    this.navigationService.navigateByURLWithParamEncoding("},{"lineNumber":174,"author":{"gitId":"-"},"content":"                        `/web/${this.entityType}/sessions/submission`,"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                        { courseid: this.courseId, fsname: this.feedbackSessionName });"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                  } else {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                    // Valid, unused registration key; load information based on the key"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                    this.loadCourseInfo();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                    this.loadPersonName();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                    this.loadFeedbackSession(false, auth);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                  }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                } else if (resp.isValid) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                  // At this point, registration key must already be used, otherwise access would be granted"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                  if (this.loggedInUser) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                    // Registration key belongs to another user who is not the logged in user"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                    this.navigationService.navigateWithErrorMessage(\u0027/web/front\u0027,"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                        `You are trying to access TEAMMATES using the Google account ${this.loggedInUser}, which"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                        is not linked to this TEAMMATES account. If you used a different Google account to"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                        join/access TEAMMATES before, please use that Google account to access TEAMMATES. If you"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                        cannot remember which Google account you used before, please email us at"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                        ${environment.supportEmail} for help.`);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                  } else {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                    this.loadFeedbackSession(true, auth);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                  }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                  // The registration key is invalid"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                  this.navigationService.navigateWithErrorMessage(\u0027/web/front\u0027,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                      \u0027You are not authorized to view this page.\u0027);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"              },"},{"lineNumber":201,"author":{"gitId":"-"},"content":"              error: () \u003d\u003e {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                this.navigationService.navigateWithErrorMessage(\u0027/web/front\u0027,"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                    \u0027You are not authorized to view this page.\u0027);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"              },"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":206,"author":{"gitId":"-"},"content":"          } else if (this.loggedInUser) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            // Load information based on logged in user"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            // This will also cover moderation/preview cases"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            this.loadCourseInfo();"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            this.loadPersonName();"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.loadFeedbackSession(false, auth);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            this.navigationService.navigateWithErrorMessage(\u0027/web/front\u0027,"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                \u0027You are not authorized to view this page.\u0027);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        error: () \u003d\u003e {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"          this.navigationService.navigateWithErrorMessage(\u0027/web/front\u0027,"},{"lineNumber":219,"author":{"gitId":"-"},"content":"              \u0027You are not authorized to view this page.\u0027);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"  // Solution for checking partial element visibility adapted from"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  // https://stackoverflow.com/questions/30943662/check-if-element-is-partially-in-viewport"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":228,"author":{"gitId":"-"},"content":"   * Checks if a given element is in view."},{"lineNumber":229,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":230,"author":{"gitId":"-"},"content":"   * @param e element to perform check for"},{"lineNumber":231,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  isInViewport(e: HTMLElement): boolean {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    const rect \u003d e.getBoundingClientRect();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    const windowHeight: number \u003d (window.innerHeight || document.documentElement.clientHeight);"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    return !("},{"lineNumber":237,"author":{"gitId":"-"},"content":"      Math.floor(100 - (((rect.top \u003e\u003d 0 ? 0 : rect.top) / +-rect.height) * 100)) \u003c 1"},{"lineNumber":238,"author":{"gitId":"-"},"content":"      || Math.floor(100 - ((rect.bottom - windowHeight) / rect.height) * 100) \u003c 1"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   * Scrolls to the question based on its given question id."},{"lineNumber":244,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  scrollToQuestion(): void {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    const div: HTMLElement | null \u003d document.getElementById(this.moderatedQuestionId);"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    // continue scrolling as long as the element to scroll to is yet to be found or not in view"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    if (div \u003d\u003d null || !(this.isInViewport(div))) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"      setTimeout(() \u003d\u003e {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        this.pageScrollService.scroll({"},{"lineNumber":252,"author":{"gitId":"-"},"content":"          document: this.document,"},{"lineNumber":253,"author":{"gitId":"-"},"content":"          scrollTarget: `#${this.moderatedQuestionId}`,"},{"lineNumber":254,"author":{"gitId":"-"},"content":"          scrollOffset: 70,"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        this.scrollToQuestion();"},{"lineNumber":257,"author":{"gitId":"-"},"content":"      }, 500);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"  ngAfterViewInit(): void {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    if (!this.moderatedQuestionId) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    this.scrollToQuestion();"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"  private loadCourseInfo(): void {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    this.isCourseLoading \u003d true;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    let request: Observable\u003cCourse\u003e;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    switch (this.intent) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"      case Intent.STUDENT_SUBMISSION:"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        if (this.moderatedPerson || this.previewAsPerson) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"          request \u003d this.courseService.getCourseAsInstructor(this.courseId);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"          request \u003d this.courseService.getCourseAsStudent(this.courseId, this.regKey);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      case Intent.INSTRUCTOR_SUBMISSION:"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        request \u003d this.courseService.getCourseAsInstructor(this.courseId, this.regKey);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        this.isCourseLoading \u003d false;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        return;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    request.subscribe({"},{"lineNumber":287,"author":{"gitId":"-"},"content":"      next: (resp: Course) \u003d\u003e {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        this.courseName \u003d resp.courseName;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        this.courseInstitute \u003d resp.institute;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        this.isCourseLoading \u003d false;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":292,"author":{"gitId":"-"},"content":"      error: () \u003d\u003e {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        this.isCourseLoading \u003d false;"},{"lineNumber":294,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":296,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":299,"author":{"gitId":"-"},"content":"   * Loads the name of the person involved in the submission."},{"lineNumber":300,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":301,"author":{"gitId":"-"},"content":"  loadPersonName(): void {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    switch (this.intent) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      case Intent.STUDENT_SUBMISSION:"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        this.studentService.getStudent("},{"lineNumber":305,"author":{"gitId":"-"},"content":"            this.courseId,"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            this.moderatedPerson || this.previewAsPerson,"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            this.regKey,"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        ).subscribe((student: Student) \u003d\u003e {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"          this.personName \u003d student.name;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"          this.personEmail \u003d student.email;"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"          this.logService.createFeedbackSessionLog({"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            courseId: this.courseId,"},{"lineNumber":314,"author":{"gitId":"-"},"content":"            feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":315,"author":{"gitId":"-"},"content":"            studentEmail: this.personEmail,"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            logType: FeedbackSessionLogType.ACCESS,"},{"lineNumber":317,"author":{"gitId":"-"},"content":"          }).subscribe({"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            next: () \u003d\u003e {},"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            error: () \u003d\u003e {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"              this.statusMessageService.showWarningToast(\u0027Failed to log feedback session access\u0027);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"            },"},{"lineNumber":322,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      case Intent.INSTRUCTOR_SUBMISSION:"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        this.instructorService.getInstructor({"},{"lineNumber":328,"author":{"gitId":"-"},"content":"          courseId: this.courseId,"},{"lineNumber":329,"author":{"gitId":"-"},"content":"          feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":330,"author":{"gitId":"-"},"content":"          intent: this.intent,"},{"lineNumber":331,"author":{"gitId":"-"},"content":"          key: this.regKey,"},{"lineNumber":332,"author":{"gitId":"-"},"content":"          moderatedPerson: this.moderatedPerson,"},{"lineNumber":333,"author":{"gitId":"-"},"content":"          previewAs: this.previewAsPerson,"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        }).subscribe((instructor: Instructor) \u003d\u003e {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"          this.personName \u003d instructor.name;"},{"lineNumber":336,"author":{"gitId":"-"},"content":"          this.personEmail \u003d instructor.email;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        break;"},{"lineNumber":339,"author":{"gitId":"-"},"content":"      default:"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":344,"author":{"gitId":"-"},"content":"   * Redirects to join course link for unregistered student/instructor."},{"lineNumber":345,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":346,"author":{"gitId":"-"},"content":"  joinCourseForUnregisteredEntity(): void {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    this.navigationService.navigateByURL(\u0027/web/join\u0027, { entitytype: this.entityType, key: this.regKey });"},{"lineNumber":348,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":351,"author":{"gitId":"-"},"content":"   * Loads the feedback session information."},{"lineNumber":352,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":353,"author":{"gitId":"-"},"content":"  loadFeedbackSession(loginRequired: boolean, auth: AuthInfo): void {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    this.isFeedbackSessionLoading \u003d true;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    const TIME_FORMAT: string \u003d \u0027ddd, DD MMM, YYYY, hh:mm A zz\u0027;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    this.feedbackSessionsService.getFeedbackSession({"},{"lineNumber":357,"author":{"gitId":"-"},"content":"      courseId: this.courseId,"},{"lineNumber":358,"author":{"gitId":"-"},"content":"      feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":359,"author":{"gitId":"-"},"content":"      intent: this.intent,"},{"lineNumber":360,"author":{"gitId":"-"},"content":"      key: this.regKey,"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      moderatedPerson: this.moderatedPerson,"},{"lineNumber":362,"author":{"gitId":"-"},"content":"      previewAs: this.previewAsPerson,"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }).pipe(finalize(() \u003d\u003e {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"      this.isFeedbackSessionLoading \u003d false;"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }))"},{"lineNumber":366,"author":{"gitId":"-"},"content":"      .subscribe({"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        next: (feedbackSession: FeedbackSession) \u003d\u003e {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"          this.feedbackSessionInstructions \u003d feedbackSession.instructions;"},{"lineNumber":369,"author":{"gitId":"-"},"content":"          this.formattedSessionOpeningTime \u003d this.timezoneService"},{"lineNumber":370,"author":{"gitId":"-"},"content":"              .formatToString(feedbackSession.submissionStartTimestamp, feedbackSession.timeZone, TIME_FORMAT);"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"          this.formattedSessionClosingTime \u003d this.getformattedSessionClosingTime(feedbackSession, TIME_FORMAT);"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"          this.feedbackSessionSubmissionStatus \u003d feedbackSession.submissionStatus;"},{"lineNumber":375,"author":{"gitId":"-"},"content":"          this.feedbackSessionTimezone \u003d feedbackSession.timeZone;"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"          // don\u0027t show alert modal in moderation"},{"lineNumber":378,"author":{"gitId":"-"},"content":"          if (!this.moderatedPerson) {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"            let modalContent: string;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"            switch (feedbackSession.submissionStatus) {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"              case FeedbackSessionSubmissionStatus.VISIBLE_NOT_OPEN:"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                this.isSubmissionFormsDisabled \u003d true;"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                modalContent \u003d `\u003cp\u003e\u003cstrong\u003eThe feedback session is currently not open for submissions.\u003c/strong\u003e\u003c/p\u003e"},{"lineNumber":384,"author":{"gitId":"-"},"content":"                \u003cp\u003eYou can view the questions and any submitted responses"},{"lineNumber":385,"author":{"gitId":"-"},"content":"                for this feedback session but cannot submit new responses.\u003c/p\u003e`;"},{"lineNumber":386,"author":{"gitId":"-"},"content":"                this.simpleModalService.openInformationModal("},{"lineNumber":387,"author":{"gitId":"-"},"content":"                    \u0027Feedback Session Not Open\u0027, SimpleModalType.WARNING, modalContent);"},{"lineNumber":388,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"              case FeedbackSessionSubmissionStatus.OPEN:"},{"lineNumber":390,"author":{"gitId":"-"},"content":"                if (this.isFeedbackEndingLessThanFifteenMinutes(feedbackSession)) {"},{"lineNumber":391,"author":{"gitId":"-"},"content":"                  modalContent \u003d \u0027Warning: you have less than 15 minutes before the submission deadline expires!\u0027;"},{"lineNumber":392,"author":{"gitId":"-"},"content":"                  this.simpleModalService.openInformationModal("},{"lineNumber":393,"author":{"gitId":"-"},"content":"                      \u0027Feedback Session Will Be Closing Soon!\u0027, SimpleModalType.WARNING, modalContent);"},{"lineNumber":394,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":395,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"              case FeedbackSessionSubmissionStatus.CLOSED:"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                this.isSubmissionFormsDisabled \u003d true;"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                modalContent \u003d `\u003cp\u003e\u003cstrong\u003eFeedback Session is Closed\u003c/strong\u003e\u003c/p\u003e"},{"lineNumber":399,"author":{"gitId":"-"},"content":"                \u003cp\u003eYou can view the questions and any submitted responses"},{"lineNumber":400,"author":{"gitId":"-"},"content":"                for this feedback session but cannot submit new responses.\u003c/p\u003e`;"},{"lineNumber":401,"author":{"gitId":"-"},"content":"                this.simpleModalService.openInformationModal("},{"lineNumber":402,"author":{"gitId":"-"},"content":"                    \u0027Feedback Session Closed\u0027, SimpleModalType.WARNING, modalContent);"},{"lineNumber":403,"author":{"gitId":"-"},"content":"                break;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"              case FeedbackSessionSubmissionStatus.GRACE_PERIOD:"},{"lineNumber":405,"author":{"gitId":"-"},"content":"              default:"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":407,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"          this.loadFeedbackQuestions();"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"          // Display note on submission on mobile device"},{"lineNumber":412,"author":{"gitId":"-"},"content":"          const mobileDeviceWidth: number \u003d 768;"},{"lineNumber":413,"author":{"gitId":"-"},"content":"          if (this.feedbackSessionSubmissionStatus \u003d\u003d\u003d FeedbackSessionSubmissionStatus.OPEN"},{"lineNumber":414,"author":{"gitId":"-"},"content":"              \u0026\u0026 window.innerWidth \u003c mobileDeviceWidth) {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"            const modalContent: string \u003d `Note that you can use the Submit button to save responses already entered,"},{"lineNumber":416,"author":{"gitId":"-"},"content":"              and continue to answer remaining questions after that."},{"lineNumber":417,"author":{"gitId":"-"},"content":"              You may also edit your submission any number of times before the closing time of this session.`;"},{"lineNumber":418,"author":{"gitId":"-"},"content":"            this.simpleModalService.openInformationModal("},{"lineNumber":419,"author":{"gitId":"-"},"content":"                \u0027Note On Submission\u0027, SimpleModalType.INFO, modalContent);"},{"lineNumber":420,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"          if (resp.status \u003d\u003d\u003d 404) {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"            const message \u003d \u0027The session does not exist \u0027"},{"lineNumber":425,"author":{"gitId":"-"},"content":"                + \u0027(most likely deleted by an instructor after the submission link was sent).\u0027;"},{"lineNumber":426,"author":{"gitId":"-"},"content":"            this.simpleModalService.openInformationModal(\u0027Feedback Session Does Not Exist!\u0027, SimpleModalType.DANGER,"},{"lineNumber":427,"author":{"gitId":"-"},"content":"                message,"},{"lineNumber":428,"author":{"gitId":"-"},"content":"                {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"                  onClosed: () \u003d\u003e this.navigationService.navigateByURL("},{"lineNumber":430,"author":{"gitId":"-"},"content":"                      this.loggedInUser ? `/web/${this.entityType}/home` : \u0027/web/front/home\u0027),"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                },"},{"lineNumber":432,"author":{"gitId":"-"},"content":"                { backdrop: \u0027static\u0027 });"},{"lineNumber":433,"author":{"gitId":"-"},"content":"          } else if (resp.status \u003d\u003d\u003d 403) {"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            if (loginRequired \u0026\u0026 !auth.user) {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"              // There is no logged in user for a valid, used registration key, redirect to login page"},{"lineNumber":436,"author":{"gitId":"-"},"content":"              if (this.entityType \u003d\u003d\u003d \u0027student\u0027) {"},{"lineNumber":437,"author":{"gitId":"-"},"content":"                window.location.href \u003d `${this.backendUrl}${auth.studentLoginUrl}`;"},{"lineNumber":438,"author":{"gitId":"-"},"content":"              } else if (this.entityType \u003d\u003d\u003d \u0027instructor\u0027) {"},{"lineNumber":439,"author":{"gitId":"-"},"content":"                window.location.href \u003d `${this.backendUrl}${auth.instructorLoginUrl}`;"},{"lineNumber":440,"author":{"gitId":"-"},"content":"              }"},{"lineNumber":441,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":442,"author":{"gitId":"-"},"content":"              this.simpleModalService.openInformationModal(\u0027Not Authorised To Access!\u0027, SimpleModalType.DANGER,"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                  resp.error.message,"},{"lineNumber":444,"author":{"gitId":"-"},"content":"                  {"},{"lineNumber":445,"author":{"gitId":"-"},"content":"                    onClosed: () \u003d\u003e this.navigationService.navigateByURL("},{"lineNumber":446,"author":{"gitId":"-"},"content":"                        this.loggedInUser ? `/web/${this.entityType}/home` : \u0027/web/front/home\u0027),"},{"lineNumber":447,"author":{"gitId":"-"},"content":"                  },"},{"lineNumber":448,"author":{"gitId":"-"},"content":"                  { backdrop: \u0027static\u0027 });"},{"lineNumber":449,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":450,"author":{"gitId":"-"},"content":"          } else {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"            this.navigationService.navigateWithErrorMessage("},{"lineNumber":452,"author":{"gitId":"-"},"content":"                `/web/${this.entityType}/home`, resp.error.message);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":455,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":456,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":459,"author":{"gitId":"-"},"content":"   * Loads feedback questions to submit."},{"lineNumber":460,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":461,"author":{"gitId":"-"},"content":"  loadFeedbackQuestions(): void {"},{"lineNumber":462,"author":{"gitId":"-"},"content":"    this.isFeedbackSessionQuestionsLoading \u003d true;"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    this.questionSubmissionForms \u003d [];"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    this.feedbackQuestionsService.getFeedbackQuestions({"},{"lineNumber":465,"author":{"gitId":"-"},"content":"      courseId: this.courseId,"},{"lineNumber":466,"author":{"gitId":"-"},"content":"      feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":467,"author":{"gitId":"-"},"content":"      intent: this.intent,"},{"lineNumber":468,"author":{"gitId":"-"},"content":"      key: this.regKey,"},{"lineNumber":469,"author":{"gitId":"-"},"content":"      moderatedPerson: this.moderatedPerson,"},{"lineNumber":470,"author":{"gitId":"-"},"content":"      previewAs: this.previewAsPerson,"},{"lineNumber":471,"author":{"gitId":"-"},"content":"    }).pipe(finalize(() \u003d\u003e {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"      this.isFeedbackSessionQuestionsLoading \u003d false;"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    }))"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":475,"author":{"gitId":"-"},"content":"          next: (response: FeedbackQuestionsResponse) \u003d\u003e {"},{"lineNumber":476,"author":{"gitId":"-"},"content":"            response.questions.forEach((feedbackQuestion: FeedbackQuestion) \u003d\u003e {"},{"lineNumber":477,"author":{"gitId":"-"},"content":"              const model: QuestionSubmissionFormModel \u003d {"},{"lineNumber":478,"author":{"gitId":"-"},"content":"                isLoading: false,"},{"lineNumber":479,"author":{"gitId":"-"},"content":"                isLoaded: false,"},{"lineNumber":480,"author":{"gitId":"-"},"content":"                feedbackQuestionId: feedbackQuestion.feedbackQuestionId,"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"                questionNumber: feedbackQuestion.questionNumber,"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                questionBrief: feedbackQuestion.questionBrief,"},{"lineNumber":484,"author":{"gitId":"-"},"content":"                questionDescription: feedbackQuestion.questionDescription,"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"                giverType: feedbackQuestion.giverType,"},{"lineNumber":487,"author":{"gitId":"-"},"content":"                recipientType: feedbackQuestion.recipientType,"},{"lineNumber":488,"author":{"gitId":"-"},"content":"                recipientList: [],"},{"lineNumber":489,"author":{"gitId":"-"},"content":"                recipientSubmissionForms: [],"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"                questionType: feedbackQuestion.questionType,"},{"lineNumber":492,"author":{"gitId":"-"},"content":"                questionDetails: feedbackQuestion.questionDetails,"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"                numberOfEntitiesToGiveFeedbackToSetting: feedbackQuestion.numberOfEntitiesToGiveFeedbackToSetting,"},{"lineNumber":495,"author":{"gitId":"-"},"content":"                customNumberOfEntitiesToGiveFeedbackTo: feedbackQuestion.customNumberOfEntitiesToGiveFeedbackTo"},{"lineNumber":496,"author":{"gitId":"-"},"content":"                    ? feedbackQuestion.customNumberOfEntitiesToGiveFeedbackTo : 0,"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"                showGiverNameTo: feedbackQuestion.showGiverNameTo,"},{"lineNumber":499,"author":{"gitId":"-"},"content":"                showRecipientNameTo: feedbackQuestion.showRecipientNameTo,"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                showResponsesTo: feedbackQuestion.showResponsesTo,"},{"lineNumber":501,"author":{"gitId":"-"},"content":"              };"},{"lineNumber":502,"author":{"gitId":"-"},"content":"              this.questionSubmissionForms.push(model);"},{"lineNumber":503,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"            this.isQuestionCountOne \u003d this.questionSubmissionForms.length \u003d\u003d\u003d 1;"},{"lineNumber":506,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":507,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":508,"author":{"gitId":"-"},"content":"            this.handleError(resp);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":510,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":511,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":514,"author":{"gitId":"-"},"content":"   * Tracks the question submission form by feedback question id."},{"lineNumber":515,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":516,"author":{"gitId":"-"},"content":"   * @see https://angular.io/api/common/NgForOf#properties"},{"lineNumber":517,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":518,"author":{"gitId":"-"},"content":"  trackQuestionSubmissionFormByFn(_: any, item: QuestionSubmissionFormModel): any {"},{"lineNumber":519,"author":{"gitId":"-"},"content":"    return item.feedbackQuestionId;"},{"lineNumber":520,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":523,"author":{"gitId":"-"},"content":"   * Loads the feedback question recipients for the question."},{"lineNumber":524,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":525,"author":{"gitId":"-"},"content":"  loadFeedbackQuestionRecipientsForQuestion(model: QuestionSubmissionFormModel): void {"},{"lineNumber":526,"author":{"gitId":"-"},"content":"    this.feedbackQuestionsService.loadFeedbackQuestionRecipients({"},{"lineNumber":527,"author":{"gitId":"-"},"content":"      questionId: model.feedbackQuestionId,"},{"lineNumber":528,"author":{"gitId":"-"},"content":"      intent: this.intent,"},{"lineNumber":529,"author":{"gitId":"-"},"content":"      key: this.regKey,"},{"lineNumber":530,"author":{"gitId":"-"},"content":"      moderatedPerson: this.moderatedPerson,"},{"lineNumber":531,"author":{"gitId":"-"},"content":"      previewAs: this.previewAsPerson,"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    }).subscribe({"},{"lineNumber":533,"author":{"gitId":"-"},"content":"      next: (response: FeedbackQuestionRecipients) \u003d\u003e {"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        response.recipients.forEach((recipient: FeedbackQuestionRecipient) \u003d\u003e {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"          model.recipientList.push({"},{"lineNumber":536,"author":{"gitId":"-"},"content":"            recipientIdentifier: recipient.identifier,"},{"lineNumber":537,"author":{"gitId":"-"},"content":"            recipientName: recipient.name,"},{"lineNumber":538,"author":{"gitId":"-"},"content":"            recipientSection: recipient.section,"},{"lineNumber":539,"author":{"gitId":"-"},"content":"            recipientTeam: recipient.team,"},{"lineNumber":540,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":"        if (this.previewAsPerson) {"},{"lineNumber":544,"author":{"gitId":"-"},"content":"          // don\u0027t load responses in preview mode"},{"lineNumber":545,"author":{"gitId":"-"},"content":"          // generate a list of empty response box"},{"lineNumber":546,"author":{"gitId":"-"},"content":"          const formMode: QuestionSubmissionFormMode \u003d this.getQuestionSubmissionFormMode(model);"},{"lineNumber":547,"author":{"gitId":"-"},"content":"          model.recipientList.forEach((recipient: FeedbackResponseRecipient) \u003d\u003e {"},{"lineNumber":548,"author":{"gitId":"-"},"content":"            if (formMode \u003d\u003d\u003d QuestionSubmissionFormMode.FLEXIBLE_RECIPIENT"},{"lineNumber":549,"author":{"gitId":"-"},"content":"                \u0026\u0026 model.recipientSubmissionForms.length \u003e\u003d model.customNumberOfEntitiesToGiveFeedbackTo) {"},{"lineNumber":550,"author":{"gitId":"-"},"content":"              return;"},{"lineNumber":551,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":552,"author":{"gitId":"-"},"content":""},{"lineNumber":553,"author":{"gitId":"-"},"content":"            let recipientIdentifier: string \u003d \u0027\u0027;"},{"lineNumber":554,"author":{"gitId":"-"},"content":"            if (formMode !\u003d\u003d QuestionSubmissionFormMode.FLEXIBLE_RECIPIENT) {"},{"lineNumber":555,"author":{"gitId":"-"},"content":"              recipientIdentifier \u003d recipient.recipientIdentifier;"},{"lineNumber":556,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":557,"author":{"gitId":"-"},"content":""},{"lineNumber":558,"author":{"gitId":"-"},"content":"            model.recipientSubmissionForms.push({"},{"lineNumber":559,"author":{"gitId":"-"},"content":"              recipientIdentifier,"},{"lineNumber":560,"author":{"gitId":"-"},"content":"              responseDetails: this.feedbackResponsesService.getDefaultFeedbackResponseDetails(model.questionType),"},{"lineNumber":561,"author":{"gitId":"-"},"content":"              responseId: \u0027\u0027,"},{"lineNumber":562,"author":{"gitId":"-"},"content":"              isValid: true,"},{"lineNumber":563,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":564,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":565,"author":{"gitId":"-"},"content":"          model.isLoading \u003d false;"},{"lineNumber":566,"author":{"gitId":"-"},"content":"          model.isLoaded \u003d true;"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":568,"author":{"gitId":"-"},"content":"          this.loadFeedbackResponses(model);"},{"lineNumber":569,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":570,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":571,"author":{"gitId":"-"},"content":"      error: (resp: ErrorMessageOutput) \u003d\u003e this.statusMessageService.showErrorToast(resp.error.message),"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":573,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":574,"author":{"gitId":"-"},"content":""},{"lineNumber":575,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":576,"author":{"gitId":"-"},"content":"   * Gets the form mode of the question submission form."},{"lineNumber":577,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":578,"author":{"gitId":"-"},"content":"  getQuestionSubmissionFormMode(model: QuestionSubmissionFormModel): QuestionSubmissionFormMode {"},{"lineNumber":579,"author":{"gitId":"-"},"content":"    const isNumberOfEntitiesToGiveFeedbackToSettingLimited: boolean \u003d"},{"lineNumber":580,"author":{"gitId":"-"},"content":"        (model.recipientType \u003d\u003d\u003d FeedbackParticipantType.STUDENTS"},{"lineNumber":581,"author":{"gitId":"-"},"content":"            || model.recipientType \u003d\u003d\u003d FeedbackParticipantType.STUDENTS_EXCLUDING_SELF"},{"lineNumber":582,"author":{"gitId":"-"},"content":"            || model.recipientType \u003d\u003d\u003d FeedbackParticipantType.STUDENTS_IN_SAME_SECTION"},{"lineNumber":583,"author":{"gitId":"-"},"content":"            || model.recipientType \u003d\u003d\u003d FeedbackParticipantType.TEAMS"},{"lineNumber":584,"author":{"gitId":"-"},"content":"            || model.recipientType \u003d\u003d\u003d FeedbackParticipantType.TEAMS_EXCLUDING_SELF"},{"lineNumber":585,"author":{"gitId":"-"},"content":"            || model.recipientType \u003d\u003d\u003d FeedbackParticipantType.TEAMS_IN_SAME_SECTION"},{"lineNumber":586,"author":{"gitId":"-"},"content":"            || model.recipientType \u003d\u003d\u003d FeedbackParticipantType.INSTRUCTORS)"},{"lineNumber":587,"author":{"gitId":"-"},"content":"        \u0026\u0026 model.numberOfEntitiesToGiveFeedbackToSetting \u003d\u003d\u003d NumberOfEntitiesToGiveFeedbackToSetting.CUSTOM"},{"lineNumber":588,"author":{"gitId":"-"},"content":"        \u0026\u0026 model.recipientList.length \u003e model.customNumberOfEntitiesToGiveFeedbackTo;"},{"lineNumber":589,"author":{"gitId":"-"},"content":""},{"lineNumber":590,"author":{"gitId":"-"},"content":"    return isNumberOfEntitiesToGiveFeedbackToSettingLimited"},{"lineNumber":591,"author":{"gitId":"-"},"content":"        ? QuestionSubmissionFormMode.FLEXIBLE_RECIPIENT : QuestionSubmissionFormMode.FIXED_RECIPIENT;"},{"lineNumber":592,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":595,"author":{"gitId":"-"},"content":"   * Loads the responses of the feedback question to {@recipientSubmissionForms} in the model."},{"lineNumber":596,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":597,"author":{"gitId":"-"},"content":"  loadFeedbackResponses(model: QuestionSubmissionFormModel): void {"},{"lineNumber":598,"author":{"gitId":"-"},"content":"    this.feedbackResponsesService.getFeedbackResponse({"},{"lineNumber":599,"author":{"gitId":"-"},"content":"      questionId: model.feedbackQuestionId,"},{"lineNumber":600,"author":{"gitId":"-"},"content":"      intent: this.intent,"},{"lineNumber":601,"author":{"gitId":"-"},"content":"      key: this.regKey,"},{"lineNumber":602,"author":{"gitId":"-"},"content":"      moderatedPerson: this.moderatedPerson,"},{"lineNumber":603,"author":{"gitId":"-"},"content":"    }).pipe(finalize(() \u003d\u003e {"},{"lineNumber":604,"author":{"gitId":"-"},"content":"      model.isLoading \u003d false;"},{"lineNumber":605,"author":{"gitId":"-"},"content":"      model.isLoaded \u003d true;"},{"lineNumber":606,"author":{"gitId":"-"},"content":"    }))"},{"lineNumber":607,"author":{"gitId":"-"},"content":"      .subscribe({"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        next: (existingResponses: FeedbackResponsesResponse) \u003d\u003e {"},{"lineNumber":609,"author":{"gitId":"-"},"content":"          if (this.getQuestionSubmissionFormMode(model) \u003d\u003d\u003d QuestionSubmissionFormMode.FIXED_RECIPIENT) {"},{"lineNumber":610,"author":{"gitId":"-"},"content":"            // need to generate a full list of submission forms"},{"lineNumber":611,"author":{"gitId":"-"},"content":"            model.recipientList.forEach((recipient: FeedbackResponseRecipient) \u003d\u003e {"},{"lineNumber":612,"author":{"gitId":"-"},"content":"              const matchedExistingResponse: FeedbackResponse | undefined \u003d"},{"lineNumber":613,"author":{"gitId":"-"},"content":"                  existingResponses.responses.find("},{"lineNumber":614,"author":{"gitId":"-"},"content":"                      (response: FeedbackResponse) \u003d\u003e response.recipientIdentifier \u003d\u003d\u003d recipient.recipientIdentifier);"},{"lineNumber":615,"author":{"gitId":"-"},"content":"              const submissionForm: FeedbackResponseRecipientSubmissionFormModel \u003d {"},{"lineNumber":616,"author":{"gitId":"-"},"content":"                recipientIdentifier: recipient.recipientIdentifier,"},{"lineNumber":617,"author":{"gitId":"-"},"content":"                responseDetails: matchedExistingResponse"},{"lineNumber":618,"author":{"gitId":"-"},"content":"                    ? matchedExistingResponse.responseDetails"},{"lineNumber":619,"author":{"gitId":"-"},"content":"                    : this.feedbackResponsesService.getDefaultFeedbackResponseDetails(model.questionType),"},{"lineNumber":620,"author":{"gitId":"-"},"content":"                responseId: matchedExistingResponse ? matchedExistingResponse.feedbackResponseId : \u0027\u0027,"},{"lineNumber":621,"author":{"gitId":"-"},"content":"                isValid: true,"},{"lineNumber":622,"author":{"gitId":"-"},"content":"              };"},{"lineNumber":623,"author":{"gitId":"-"},"content":"              if (matchedExistingResponse \u0026\u0026 matchedExistingResponse.giverComment) {"},{"lineNumber":624,"author":{"gitId":"-"},"content":"                submissionForm.commentByGiver \u003d this.getCommentModel("},{"lineNumber":625,"author":{"gitId":"-"},"content":"                    matchedExistingResponse.giverComment, recipient.recipientIdentifier);"},{"lineNumber":626,"author":{"gitId":"-"},"content":"              }"},{"lineNumber":627,"author":{"gitId":"-"},"content":"              model.recipientSubmissionForms.push(submissionForm);"},{"lineNumber":628,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":629,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":630,"author":{"gitId":"-"},"content":""},{"lineNumber":631,"author":{"gitId":"-"},"content":"          if (this.getQuestionSubmissionFormMode(model) \u003d\u003d\u003d QuestionSubmissionFormMode.FLEXIBLE_RECIPIENT) {"},{"lineNumber":632,"author":{"gitId":"-"},"content":"            // need to generate limited number of submission forms"},{"lineNumber":633,"author":{"gitId":"-"},"content":"            let numberOfRecipientSubmissionFormsNeeded: number \u003d"},{"lineNumber":634,"author":{"gitId":"-"},"content":"                model.customNumberOfEntitiesToGiveFeedbackTo - existingResponses.responses.length;"},{"lineNumber":635,"author":{"gitId":"-"},"content":""},{"lineNumber":636,"author":{"gitId":"-"},"content":"            existingResponses.responses.forEach((response: FeedbackResponse) \u003d\u003e {"},{"lineNumber":637,"author":{"gitId":"-"},"content":"              const submissionForm: FeedbackResponseRecipientSubmissionFormModel \u003d {"},{"lineNumber":638,"author":{"gitId":"-"},"content":"                recipientIdentifier: response.recipientIdentifier,"},{"lineNumber":639,"author":{"gitId":"-"},"content":"                responseDetails: response.responseDetails,"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                responseId: response.feedbackResponseId,"},{"lineNumber":641,"author":{"gitId":"-"},"content":"                isValid: true,"},{"lineNumber":642,"author":{"gitId":"-"},"content":"              };"},{"lineNumber":643,"author":{"gitId":"-"},"content":"              if (response.giverComment) {"},{"lineNumber":644,"author":{"gitId":"-"},"content":"                submissionForm.commentByGiver \u003d this.getCommentModel("},{"lineNumber":645,"author":{"gitId":"-"},"content":"                    response.giverComment, response.recipientIdentifier);"},{"lineNumber":646,"author":{"gitId":"-"},"content":"              }"},{"lineNumber":647,"author":{"gitId":"-"},"content":"              model.recipientSubmissionForms.push(submissionForm);"},{"lineNumber":648,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":649,"author":{"gitId":"-"},"content":""},{"lineNumber":650,"author":{"gitId":"-"},"content":"            // generate empty submission forms"},{"lineNumber":651,"author":{"gitId":"-"},"content":"            while (numberOfRecipientSubmissionFormsNeeded \u003e 0) {"},{"lineNumber":652,"author":{"gitId":"-"},"content":"              model.recipientSubmissionForms.push({"},{"lineNumber":653,"author":{"gitId":"-"},"content":"                recipientIdentifier: \u0027\u0027,"},{"lineNumber":654,"author":{"gitId":"-"},"content":"                responseDetails: this.feedbackResponsesService.getDefaultFeedbackResponseDetails(model.questionType),"},{"lineNumber":655,"author":{"gitId":"-"},"content":"                responseId: \u0027\u0027,"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                isValid: true,"},{"lineNumber":657,"author":{"gitId":"-"},"content":"              });"},{"lineNumber":658,"author":{"gitId":"-"},"content":"              numberOfRecipientSubmissionFormsNeeded -\u003d 1;"},{"lineNumber":659,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":660,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        error: (resp: ErrorMessageOutput) \u003d\u003e this.statusMessageService.showErrorToast(resp.error.message),"},{"lineNumber":663,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":664,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":667,"author":{"gitId":"-"},"content":"   * Gets the comment model for a given comment."},{"lineNumber":668,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":669,"author":{"gitId":"-"},"content":"  getCommentModel(comment: FeedbackResponseComment, recipientIdentifier: string): CommentRowModel {"},{"lineNumber":670,"author":{"gitId":"-"},"content":"    return {"},{"lineNumber":671,"author":{"gitId":"-"},"content":"      originalComment: comment,"},{"lineNumber":672,"author":{"gitId":"-"},"content":"      originalRecipientIdentifier: recipientIdentifier,"},{"lineNumber":673,"author":{"gitId":"-"},"content":"      commentEditFormModel: {"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        commentText: comment.commentText,"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        // the participant comment shall not use custom visibilities"},{"lineNumber":676,"author":{"gitId":"-"},"content":"        isUsingCustomVisibilities: false,"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        showCommentTo: [],"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        showGiverNameTo: [],"},{"lineNumber":679,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":680,"author":{"gitId":"-"},"content":"      timezone: this.feedbackSessionTimezone,"},{"lineNumber":681,"author":{"gitId":"-"},"content":"      isEditing: false,"},{"lineNumber":682,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":683,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":686,"author":{"gitId":"-"},"content":"   * Checks whether there is any submission forms in the current page."},{"lineNumber":687,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":688,"author":{"gitId":"-"},"content":"  get questionsNeedingSubmission(): QuestionSubmissionFormModel[] {"},{"lineNumber":689,"author":{"gitId":"-"},"content":"    return this.questionSubmissionForms"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        .filter((model: QuestionSubmissionFormModel) \u003d\u003e model.recipientSubmissionForms.length !\u003d\u003d 0);"},{"lineNumber":691,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":692,"author":{"gitId":"-"},"content":""},{"lineNumber":693,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":694,"author":{"gitId":"-"},"content":"   * Saves the feedback responses for the specific questions."},{"lineNumber":695,"author":{"gitId":"-"},"content":"   *"},{"lineNumber":696,"author":{"gitId":"-"},"content":"   * \u003cp\u003eAll empty feedback response will be deleted; For non-empty responses, update/create them if necessary."},{"lineNumber":697,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":698,"author":{"gitId":"-"},"content":"  saveFeedbackResponses(questionSubmissionForms: QuestionSubmissionFormModel[]): void {"},{"lineNumber":699,"author":{"gitId":"domlimm"},"content":"    this.isSubmitAllClicked \u003d true;"},{"lineNumber":700,"author":{"gitId":"domlimm"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"    const notYetAnsweredQuestions: Set\u003cnumber\u003e \u003d new Set();"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    const requestIds: Record\u003cstring, string\u003e \u003d {};"},{"lineNumber":703,"author":{"gitId":"-"},"content":"    const answers: Record\u003cstring, FeedbackResponse[]\u003e \u003d {};"},{"lineNumber":704,"author":{"gitId":"-"},"content":"    const failToSaveQuestions: Record\u003cnumber, string\u003e \u003d {}; // Map of question number to error message"},{"lineNumber":705,"author":{"gitId":"-"},"content":"    const savingRequests: Observable\u003cany\u003e[] \u003d [];"},{"lineNumber":706,"author":{"gitId":"-"},"content":""},{"lineNumber":707,"author":{"gitId":"-"},"content":"    this.logService.createFeedbackSessionLog({"},{"lineNumber":708,"author":{"gitId":"-"},"content":"      courseId: this.courseId,"},{"lineNumber":709,"author":{"gitId":"-"},"content":"      feedbackSessionName: this.feedbackSessionName,"},{"lineNumber":710,"author":{"gitId":"-"},"content":"      studentEmail: this.personEmail,"},{"lineNumber":711,"author":{"gitId":"-"},"content":"      logType: FeedbackSessionLogType.SUBMISSION,"},{"lineNumber":712,"author":{"gitId":"-"},"content":"    }).subscribe({"},{"lineNumber":713,"author":{"gitId":"-"},"content":"      next: () \u003d\u003e {},"},{"lineNumber":714,"author":{"gitId":"-"},"content":"      error: () \u003d\u003e {"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        this.statusMessageService.showWarningToast(\u0027Failed to log feedback session submission\u0027);"},{"lineNumber":716,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":717,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":718,"author":{"gitId":"-"},"content":""},{"lineNumber":719,"author":{"gitId":"-"},"content":"    questionSubmissionForms.forEach((questionSubmissionFormModel: QuestionSubmissionFormModel) \u003d\u003e {"},{"lineNumber":720,"author":{"gitId":"-"},"content":"      let isQuestionFullyAnswered: boolean \u003d true;"},{"lineNumber":721,"author":{"gitId":"-"},"content":""},{"lineNumber":722,"author":{"gitId":"-"},"content":"      const responses: FeedbackResponseRequest[] \u003d [];"},{"lineNumber":723,"author":{"gitId":"-"},"content":""},{"lineNumber":724,"author":{"gitId":"-"},"content":"      questionSubmissionFormModel.recipientSubmissionForms"},{"lineNumber":725,"author":{"gitId":"-"},"content":"          .forEach((recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel) \u003d\u003e {"},{"lineNumber":726,"author":{"gitId":"-"},"content":"            if (!recipientSubmissionFormModel.isValid) {"},{"lineNumber":727,"author":{"gitId":"-"},"content":"              failToSaveQuestions[questionSubmissionFormModel.questionNumber] \u003d"},{"lineNumber":728,"author":{"gitId":"-"},"content":"                  \u0027Invalid responses provided. Please check question constraints.\u0027;"},{"lineNumber":729,"author":{"gitId":"-"},"content":"              return;"},{"lineNumber":730,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":731,"author":{"gitId":"-"},"content":"            const isFeedbackResponseDetailsEmpty: boolean \u003d"},{"lineNumber":732,"author":{"gitId":"-"},"content":"                this.feedbackResponsesService.isFeedbackResponseDetailsEmpty("},{"lineNumber":733,"author":{"gitId":"-"},"content":"                    questionSubmissionFormModel.questionType, recipientSubmissionFormModel.responseDetails);"},{"lineNumber":734,"author":{"gitId":"-"},"content":"            isQuestionFullyAnswered \u003d isQuestionFullyAnswered \u0026\u0026 !isFeedbackResponseDetailsEmpty;"},{"lineNumber":735,"author":{"gitId":"-"},"content":""},{"lineNumber":736,"author":{"gitId":"-"},"content":"            if (!isFeedbackResponseDetailsEmpty) {"},{"lineNumber":737,"author":{"gitId":"-"},"content":"              responses.push({"},{"lineNumber":738,"author":{"gitId":"-"},"content":"                recipient: recipientSubmissionFormModel.recipientIdentifier,"},{"lineNumber":739,"author":{"gitId":"-"},"content":"                responseDetails: recipientSubmissionFormModel.responseDetails,"},{"lineNumber":740,"author":{"gitId":"-"},"content":"              });"},{"lineNumber":741,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":742,"author":{"gitId":"-"},"content":"          });"},{"lineNumber":743,"author":{"gitId":"-"},"content":""},{"lineNumber":744,"author":{"gitId":"-"},"content":"      if (!failToSaveQuestions[questionSubmissionFormModel.questionNumber]) {"},{"lineNumber":745,"author":{"gitId":"-"},"content":"        savingRequests.push("},{"lineNumber":746,"author":{"gitId":"-"},"content":"            this.feedbackResponsesService.submitFeedbackResponses(questionSubmissionFormModel.feedbackQuestionId, {"},{"lineNumber":747,"author":{"gitId":"-"},"content":"              responses,"},{"lineNumber":748,"author":{"gitId":"-"},"content":"            }, {"},{"lineNumber":749,"author":{"gitId":"-"},"content":"              intent: this.intent,"},{"lineNumber":750,"author":{"gitId":"-"},"content":"              key: this.regKey,"},{"lineNumber":751,"author":{"gitId":"-"},"content":"              moderatedperson: this.moderatedPerson,"},{"lineNumber":752,"author":{"gitId":"-"},"content":"            }).pipe("},{"lineNumber":753,"author":{"gitId":"-"},"content":"                tap((resp: FeedbackResponses) \u003d\u003e {"},{"lineNumber":754,"author":{"gitId":"-"},"content":"                  const responsesMap: Record\u003cstring, FeedbackResponse\u003e \u003d {};"},{"lineNumber":755,"author":{"gitId":"-"},"content":"                  resp.responses.forEach((response: FeedbackResponse) \u003d\u003e {"},{"lineNumber":756,"author":{"gitId":"-"},"content":"                    responsesMap[response.recipientIdentifier] \u003d response;"},{"lineNumber":757,"author":{"gitId":"-"},"content":"                    answers[questionSubmissionFormModel.feedbackQuestionId] \u003d"},{"lineNumber":758,"author":{"gitId":"-"},"content":"                        answers[questionSubmissionFormModel.feedbackQuestionId] || [];"},{"lineNumber":759,"author":{"gitId":"-"},"content":"                    answers[questionSubmissionFormModel.feedbackQuestionId].push(response);"},{"lineNumber":760,"author":{"gitId":"-"},"content":"                  });"},{"lineNumber":761,"author":{"gitId":"-"},"content":"                  requestIds[questionSubmissionFormModel.feedbackQuestionId] \u003d resp.requestId || \u0027\u0027;"},{"lineNumber":762,"author":{"gitId":"-"},"content":""},{"lineNumber":763,"author":{"gitId":"-"},"content":"                  questionSubmissionFormModel.recipientSubmissionForms"},{"lineNumber":764,"author":{"gitId":"-"},"content":"                      .forEach((recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel) \u003d\u003e {"},{"lineNumber":765,"author":{"gitId":"-"},"content":"                        if (responsesMap[recipientSubmissionFormModel.recipientIdentifier]) {"},{"lineNumber":766,"author":{"gitId":"-"},"content":"                          const correspondingResp: FeedbackResponse \u003d"},{"lineNumber":767,"author":{"gitId":"-"},"content":"                              responsesMap[recipientSubmissionFormModel.recipientIdentifier];"},{"lineNumber":768,"author":{"gitId":"-"},"content":"                          recipientSubmissionFormModel.responseId \u003d correspondingResp.feedbackResponseId;"},{"lineNumber":769,"author":{"gitId":"-"},"content":"                          recipientSubmissionFormModel.responseDetails \u003d correspondingResp.responseDetails;"},{"lineNumber":770,"author":{"gitId":"-"},"content":"                          recipientSubmissionFormModel.recipientIdentifier \u003d correspondingResp.recipientIdentifier;"},{"lineNumber":771,"author":{"gitId":"-"},"content":"                        } else {"},{"lineNumber":772,"author":{"gitId":"-"},"content":"                          recipientSubmissionFormModel.responseId \u003d \u0027\u0027;"},{"lineNumber":773,"author":{"gitId":"-"},"content":"                          recipientSubmissionFormModel.commentByGiver \u003d undefined;"},{"lineNumber":774,"author":{"gitId":"-"},"content":"                        }"},{"lineNumber":775,"author":{"gitId":"-"},"content":"                      });"},{"lineNumber":776,"author":{"gitId":"-"},"content":"                }),"},{"lineNumber":777,"author":{"gitId":"-"},"content":"                switchMap(() \u003d\u003e"},{"lineNumber":778,"author":{"gitId":"-"},"content":"                    forkJoin(questionSubmissionFormModel.recipientSubmissionForms"},{"lineNumber":779,"author":{"gitId":"-"},"content":"                        .map((recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel) \u003d\u003e"},{"lineNumber":780,"author":{"gitId":"-"},"content":"                            this.createCommentRequest(recipientSubmissionFormModel))),"},{"lineNumber":781,"author":{"gitId":"-"},"content":"                ),"},{"lineNumber":782,"author":{"gitId":"-"},"content":"                catchError((error: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":783,"author":{"gitId":"-"},"content":"                  failToSaveQuestions[questionSubmissionFormModel.questionNumber] \u003d error.error.message;"},{"lineNumber":784,"author":{"gitId":"-"},"content":"                  return of(error);"},{"lineNumber":785,"author":{"gitId":"-"},"content":"                }),"},{"lineNumber":786,"author":{"gitId":"-"},"content":"            ),"},{"lineNumber":787,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":788,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":789,"author":{"gitId":"-"},"content":""},{"lineNumber":790,"author":{"gitId":"-"},"content":"      if (!isQuestionFullyAnswered) {"},{"lineNumber":791,"author":{"gitId":"-"},"content":"        notYetAnsweredQuestions.add(questionSubmissionFormModel.questionNumber);"},{"lineNumber":792,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":793,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":794,"author":{"gitId":"-"},"content":""},{"lineNumber":795,"author":{"gitId":"-"},"content":"    this.isSavingResponses \u003d true;"},{"lineNumber":796,"author":{"gitId":"-"},"content":"    forkJoin(savingRequests).pipe("},{"lineNumber":797,"author":{"gitId":"-"},"content":"        finalize(() \u003d\u003e {"},{"lineNumber":798,"author":{"gitId":"-"},"content":"          this.isSavingResponses \u003d false;"},{"lineNumber":799,"author":{"gitId":"-"},"content":""},{"lineNumber":800,"author":{"gitId":"-"},"content":"          const modalRef: NgbModalRef \u003d this.ngbModal.open(SavingCompleteModalComponent);"},{"lineNumber":801,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.requestIds \u003d requestIds;"},{"lineNumber":802,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.courseId \u003d this.courseId;"},{"lineNumber":803,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.feedbackSessionName \u003d this.feedbackSessionName;"},{"lineNumber":804,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.feedbackSessionTimezone \u003d this.feedbackSessionTimezone;"},{"lineNumber":805,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.personEmail \u003d this.personEmail;"},{"lineNumber":806,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.personName \u003d this.personName;"},{"lineNumber":807,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.questions \u003d questionSubmissionForms;"},{"lineNumber":808,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.answers \u003d answers;"},{"lineNumber":809,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.notYetAnsweredQuestions \u003d Array.from(notYetAnsweredQuestions.values());"},{"lineNumber":810,"author":{"gitId":"-"},"content":"          modalRef.componentInstance.failToSaveQuestions \u003d failToSaveQuestions;"},{"lineNumber":811,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":812,"author":{"gitId":"-"},"content":"    ).subscribe();"},{"lineNumber":813,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":814,"author":{"gitId":"-"},"content":""},{"lineNumber":815,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":816,"author":{"gitId":"-"},"content":"   * Creates comment request."},{"lineNumber":817,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":818,"author":{"gitId":"-"},"content":"  createCommentRequest(recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel): Observable\u003cany\u003e {"},{"lineNumber":819,"author":{"gitId":"-"},"content":"    if (!recipientSubmissionFormModel.responseId) {"},{"lineNumber":820,"author":{"gitId":"-"},"content":"      // responseId not set, cannot set comment"},{"lineNumber":821,"author":{"gitId":"-"},"content":"      return of({});"},{"lineNumber":822,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":823,"author":{"gitId":"-"},"content":"    if (!recipientSubmissionFormModel.commentByGiver) {"},{"lineNumber":824,"author":{"gitId":"-"},"content":"      // comment not given, do nothing"},{"lineNumber":825,"author":{"gitId":"-"},"content":"      return of({});"},{"lineNumber":826,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":827,"author":{"gitId":"-"},"content":""},{"lineNumber":828,"author":{"gitId":"-"},"content":"    const isSameRecipient \u003d recipientSubmissionFormModel.recipientIdentifier"},{"lineNumber":829,"author":{"gitId":"-"},"content":"        \u003d\u003d\u003d recipientSubmissionFormModel.commentByGiver.originalRecipientIdentifier;"},{"lineNumber":830,"author":{"gitId":"-"},"content":""},{"lineNumber":831,"author":{"gitId":"-"},"content":"    if (!recipientSubmissionFormModel.commentByGiver.originalComment || !isSameRecipient) {"},{"lineNumber":832,"author":{"gitId":"-"},"content":"      // comment is new or original comment deleted because recipient has changed"},{"lineNumber":833,"author":{"gitId":"-"},"content":""},{"lineNumber":834,"author":{"gitId":"-"},"content":"      if (recipientSubmissionFormModel.commentByGiver.commentEditFormModel.commentText \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":835,"author":{"gitId":"-"},"content":"        // new comment is empty"},{"lineNumber":836,"author":{"gitId":"-"},"content":"        recipientSubmissionFormModel.commentByGiver \u003d undefined;"},{"lineNumber":837,"author":{"gitId":"-"},"content":"        return of({});"},{"lineNumber":838,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":839,"author":{"gitId":"-"},"content":""},{"lineNumber":840,"author":{"gitId":"-"},"content":"      // create new comment"},{"lineNumber":841,"author":{"gitId":"-"},"content":"      return this.commentService.createComment({"},{"lineNumber":842,"author":{"gitId":"-"},"content":"        commentText: recipientSubmissionFormModel.commentByGiver.commentEditFormModel.commentText,"},{"lineNumber":843,"author":{"gitId":"-"},"content":"        // we ignore the fields in comment edit model as participant comment"},{"lineNumber":844,"author":{"gitId":"-"},"content":"        // will follow visibilities from question by design"},{"lineNumber":845,"author":{"gitId":"-"},"content":"        showCommentTo: [],"},{"lineNumber":846,"author":{"gitId":"-"},"content":"        showGiverNameTo: [],"},{"lineNumber":847,"author":{"gitId":"-"},"content":"      }, recipientSubmissionFormModel.responseId, this.intent, {"},{"lineNumber":848,"author":{"gitId":"-"},"content":"        key: this.regKey,"},{"lineNumber":849,"author":{"gitId":"-"},"content":"        moderatedperson: this.moderatedPerson,"},{"lineNumber":850,"author":{"gitId":"-"},"content":"      }).pipe("},{"lineNumber":851,"author":{"gitId":"-"},"content":"          tap((comment: FeedbackResponseComment) \u003d\u003e {"},{"lineNumber":852,"author":{"gitId":"-"},"content":"            recipientSubmissionFormModel.commentByGiver \u003d this.getCommentModel("},{"lineNumber":853,"author":{"gitId":"-"},"content":"                comment, recipientSubmissionFormModel.recipientIdentifier);"},{"lineNumber":854,"author":{"gitId":"-"},"content":"          }),"},{"lineNumber":855,"author":{"gitId":"-"},"content":"      );"},{"lineNumber":856,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":857,"author":{"gitId":"-"},"content":""},{"lineNumber":858,"author":{"gitId":"-"},"content":"    // existing comment"},{"lineNumber":859,"author":{"gitId":"-"},"content":""},{"lineNumber":860,"author":{"gitId":"-"},"content":"    if (recipientSubmissionFormModel.commentByGiver.commentEditFormModel.commentText \u003d\u003d\u003d \u0027\u0027) {"},{"lineNumber":861,"author":{"gitId":"-"},"content":"      // comment is empty, create delete request"},{"lineNumber":862,"author":{"gitId":"-"},"content":"      return this.commentService.deleteComment("},{"lineNumber":863,"author":{"gitId":"-"},"content":"          recipientSubmissionFormModel.commentByGiver.originalComment.feedbackResponseCommentId, this.intent, {"},{"lineNumber":864,"author":{"gitId":"-"},"content":"            key: this.regKey,"},{"lineNumber":865,"author":{"gitId":"-"},"content":"            moderatedperson: this.moderatedPerson,"},{"lineNumber":866,"author":{"gitId":"-"},"content":"          })"},{"lineNumber":867,"author":{"gitId":"-"},"content":"          .pipe("},{"lineNumber":868,"author":{"gitId":"-"},"content":"              tap(() \u003d\u003e {"},{"lineNumber":869,"author":{"gitId":"-"},"content":"                recipientSubmissionFormModel.commentByGiver \u003d undefined;"},{"lineNumber":870,"author":{"gitId":"-"},"content":"              }));"},{"lineNumber":871,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":872,"author":{"gitId":"-"},"content":""},{"lineNumber":873,"author":{"gitId":"-"},"content":"    // update comment"},{"lineNumber":874,"author":{"gitId":"-"},"content":"    return this.commentService.updateComment({"},{"lineNumber":875,"author":{"gitId":"-"},"content":"      commentText: recipientSubmissionFormModel.commentByGiver.commentEditFormModel.commentText,"},{"lineNumber":876,"author":{"gitId":"-"},"content":"      // we ignore the fields in comment edit model as participant comment"},{"lineNumber":877,"author":{"gitId":"-"},"content":"      // will follow visibilities from question by design"},{"lineNumber":878,"author":{"gitId":"-"},"content":"      showCommentTo: [],"},{"lineNumber":879,"author":{"gitId":"-"},"content":"      showGiverNameTo: [],"},{"lineNumber":880,"author":{"gitId":"-"},"content":"    }, recipientSubmissionFormModel.commentByGiver.originalComment.feedbackResponseCommentId, this.intent, {"},{"lineNumber":881,"author":{"gitId":"-"},"content":"      key: this.regKey,"},{"lineNumber":882,"author":{"gitId":"-"},"content":"      moderatedperson: this.moderatedPerson,"},{"lineNumber":883,"author":{"gitId":"-"},"content":"    }).pipe("},{"lineNumber":884,"author":{"gitId":"-"},"content":"        tap((comment: FeedbackResponseComment) \u003d\u003e {"},{"lineNumber":885,"author":{"gitId":"-"},"content":"          recipientSubmissionFormModel.commentByGiver \u003d this.getCommentModel("},{"lineNumber":886,"author":{"gitId":"-"},"content":"              comment, recipientSubmissionFormModel.recipientIdentifier);"},{"lineNumber":887,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":888,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":889,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":890,"author":{"gitId":"-"},"content":""},{"lineNumber":891,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":892,"author":{"gitId":"-"},"content":"   * Deletes a comment by participants."},{"lineNumber":893,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":894,"author":{"gitId":"-"},"content":"  deleteParticipantComment(questionIndex: number, responseIdx: number): void {"},{"lineNumber":895,"author":{"gitId":"-"},"content":"    const recipientSubmissionFormModel: FeedbackResponseRecipientSubmissionFormModel \u003d"},{"lineNumber":896,"author":{"gitId":"-"},"content":"        this.questionSubmissionForms[questionIndex].recipientSubmissionForms[responseIdx];"},{"lineNumber":897,"author":{"gitId":"-"},"content":""},{"lineNumber":898,"author":{"gitId":"-"},"content":"    if (!recipientSubmissionFormModel.commentByGiver || !recipientSubmissionFormModel.commentByGiver.originalComment) {"},{"lineNumber":899,"author":{"gitId":"-"},"content":"      return;"},{"lineNumber":900,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":901,"author":{"gitId":"-"},"content":""},{"lineNumber":902,"author":{"gitId":"-"},"content":"    this.commentService.deleteComment("},{"lineNumber":903,"author":{"gitId":"-"},"content":"        recipientSubmissionFormModel.commentByGiver.originalComment.feedbackResponseCommentId, this.intent, {"},{"lineNumber":904,"author":{"gitId":"-"},"content":"          key: this.regKey,"},{"lineNumber":905,"author":{"gitId":"-"},"content":"          moderatedperson: this.moderatedPerson,"},{"lineNumber":906,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":907,"author":{"gitId":"-"},"content":"        .subscribe({"},{"lineNumber":908,"author":{"gitId":"-"},"content":"          next: () \u003d\u003e {"},{"lineNumber":909,"author":{"gitId":"-"},"content":"            recipientSubmissionFormModel.commentByGiver \u003d undefined;"},{"lineNumber":910,"author":{"gitId":"-"},"content":"            this.statusMessageService.showSuccessToast(\u0027Your comment has been deleted!\u0027);"},{"lineNumber":911,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":912,"author":{"gitId":"-"},"content":"          error: (resp: ErrorMessageOutput) \u003d\u003e {"},{"lineNumber":913,"author":{"gitId":"-"},"content":"            this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":914,"author":{"gitId":"-"},"content":"          },"},{"lineNumber":915,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":916,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":917,"author":{"gitId":"-"},"content":""},{"lineNumber":918,"author":{"gitId":"-"},"content":"  retryLoadingFeedbackSessionQuestions(): void {"},{"lineNumber":919,"author":{"gitId":"-"},"content":"    this.hasFeedbackSessionQuestionsLoadingFailed \u003d false;"},{"lineNumber":920,"author":{"gitId":"-"},"content":"    if (this.retryAttempts \u003e\u003d 0) {"},{"lineNumber":921,"author":{"gitId":"-"},"content":"      this.retryAttempts -\u003d 1;"},{"lineNumber":922,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":923,"author":{"gitId":"-"},"content":"    this.loadFeedbackQuestions();"},{"lineNumber":924,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":925,"author":{"gitId":"-"},"content":""},{"lineNumber":926,"author":{"gitId":"-"},"content":"  handleError(resp: ErrorMessageOutput): void {"},{"lineNumber":927,"author":{"gitId":"-"},"content":"    this.hasFeedbackSessionQuestionsLoadingFailed \u003d true;"},{"lineNumber":928,"author":{"gitId":"-"},"content":"    if (this.retryAttempts \u003c 0) {"},{"lineNumber":929,"author":{"gitId":"-"},"content":"      const report: NgbModalRef \u003d this.ngbModal.open(ErrorReportComponent);"},{"lineNumber":930,"author":{"gitId":"-"},"content":"      report.componentInstance.requestId \u003d resp.error.requestId;"},{"lineNumber":931,"author":{"gitId":"-"},"content":"      report.componentInstance.errorMessage \u003d resp.error.message;"},{"lineNumber":932,"author":{"gitId":"-"},"content":"    } else {"},{"lineNumber":933,"author":{"gitId":"-"},"content":"      this.statusMessageService.showErrorToast(resp.error.message);"},{"lineNumber":934,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":935,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":936,"author":{"gitId":"-"},"content":""},{"lineNumber":937,"author":{"gitId":"-"},"content":"  loadRecipientsAndResponses(event: any, questionSubmissionForm: QuestionSubmissionFormModel): void {"},{"lineNumber":938,"author":{"gitId":"-"},"content":"    if (event \u0026\u0026 event.visible \u0026\u0026 !questionSubmissionForm.isLoaded \u0026\u0026 !questionSubmissionForm.isLoading) {"},{"lineNumber":939,"author":{"gitId":"-"},"content":"      questionSubmissionForm.isLoading \u003d true;"},{"lineNumber":940,"author":{"gitId":"-"},"content":"      this.loadFeedbackQuestionRecipientsForQuestion(questionSubmissionForm);"},{"lineNumber":941,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":942,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":943,"author":{"gitId":"-"},"content":""},{"lineNumber":944,"author":{"gitId":"-"},"content":"  private getformattedSessionClosingTime(feedbackSession: FeedbackSession, TIME_FORMAT: string): string {"},{"lineNumber":945,"author":{"gitId":"-"},"content":"    const userSessionEndingTime \u003d DeadlineExtensionHelper.getUserFeedbackSessionEndingTimestamp(feedbackSession);"},{"lineNumber":946,"author":{"gitId":"-"},"content":"    let formattedString \u003d this.timezoneService.formatToString("},{"lineNumber":947,"author":{"gitId":"-"},"content":"      userSessionEndingTime, feedbackSession.timeZone, TIME_FORMAT);"},{"lineNumber":948,"author":{"gitId":"-"},"content":"    if (DeadlineExtensionHelper.hasUserExtension(feedbackSession)) {"},{"lineNumber":949,"author":{"gitId":"-"},"content":"      formattedString +\u003d \u0027 (Extension given)\u0027;"},{"lineNumber":950,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":951,"author":{"gitId":"-"},"content":"    return formattedString;"},{"lineNumber":952,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":953,"author":{"gitId":"-"},"content":""},{"lineNumber":954,"author":{"gitId":"-"},"content":"  private isFeedbackEndingLessThanFifteenMinutes(feedbackSession: FeedbackSession): boolean {"},{"lineNumber":955,"author":{"gitId":"-"},"content":"    const userSessionEndingTime \u003d DeadlineExtensionHelper.getOngoingUserFeedbackSessionEndingTimestamp(feedbackSession);"},{"lineNumber":956,"author":{"gitId":"-"},"content":"    return (userSessionEndingTime - Date.now()) \u003c Milliseconds.IN_FIFTEEN_MINUTES;"},{"lineNumber":957,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":958,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"domlimm":3,"-":955}}]
