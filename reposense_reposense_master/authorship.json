[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027idea\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    id \u0027com.liferay.node\u0027 version \u00277.2.18\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    id \u0027com.github.psxpaul.execfork\u0027 version \u00270.2.0\u0027"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    id \u0027com.palantir.git-version\u0027 version \u00270.13.0\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"OperatingSystem os \u003d DefaultNativePlatform.currentOperatingSystem;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027reposense.RepoSense\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"node.nodeVersion \u003d \u002714.20.1\u0027"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_1_8"},{"lineNumber":22,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_1_8"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"configurations {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    systemtestImplementation.extendsFrom testImplementation"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    systemtestRuntime.extendsFrom testRuntime"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.8.2\u0027"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    implementation  group: \u0027com.google.code.gson\u0027 ,name: \u0027gson\u0027, version:\u00272.9.0\u0027"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    implementation  group: \u0027net.freeutils\u0027, name: \u0027jlhttp\u0027, version: \u00272.6\u0027"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    implementation  group: \u0027net.sourceforge.argparse4j\u0027, name: \u0027argparse4j\u0027, version: \u00270.9.0\u0027"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.ant\u0027, name: \u0027ant\u0027, version: \u00271.10.12\u0027"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.commons\u0027, name: \u0027commons-csv\u0027, version: \u00271.9.0\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.9\u0027"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00272.4.0\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"sourceSets {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    systemtest {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        compileClasspath +\u003d main.output + test.output"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        runtimeClasspath +\u003d main.output + test.output"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        java.srcDir file(\u0027src/systemtest/java\u0027)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        resources.srcDir file(\u0027src/systemtest/resources\u0027)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"wrapper {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    gradleVersion \u003d \u00277.4.2\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"def installFrontend \u003d tasks.register(\u0027installFrontend\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":62,"author":{"gitId":"MarcusTXK"},"content":"    args \u003d [\u0027ci\u0027]"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"def buildFrontend \u003d tasks.register(\u0027buildFrontend\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    dependsOn installFrontend"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    args \u003d [\u0027run\u0027, \u0027devbuild\u0027]"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"def zipReport \u003d tasks.register(\u0027zipReport\u0027, Zip) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    dependsOn buildFrontend"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    from \u0027frontend/build/\u0027"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \u0027templateZip\u0027"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    destinationDirectory \u003d file(\u0027src/main/resources\u0027)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"def compileJava \u003d tasks.compileJava"},{"lineNumber":79,"author":{"gitId":"-"},"content":"def classes \u003d tasks.classes"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"tasks.named(\"processSystemtestResources\").configure {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    duplicatesStrategy \u003d DuplicatesStrategy.INCLUDE"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"tasks.run.dependsOn(zipReport);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    //the second arguments indicates the default value associated with the property."},{"lineNumber":89,"author":{"gitId":"-"},"content":"    tasks.compileJava.mustRunAfter(zipReport)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    args System.getProperty(\u0027args\u0027, \u0027\u0027).split()"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    systemProperty \"version\", getRepoSenseVersion()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00279.3\u0027"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    getConfigDirectory().set(file(\"$rootProject.projectDir/config/checkstyle\"))"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"idea {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    module {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        sourceSets.systemtest.allSource.srcDirs.each { srcDir -\u003e module.testSourceDirs +\u003d srcDir }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    environment(\"REPOSENSE_ENVIRONMENT\", \"TEST\")"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d true"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    doFirst {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    doLast {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"tasks.shadowJar.dependsOn(zipReport);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    tasks.compileJava.mustRunAfter(zipReport)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    tasks.processResources.mustRunAfter(zipReport)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027RepoSense.jar\u0027"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    destinationDirectory \u003d file(\"${buildDir}/jar/\")"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    manifest {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        attributes \u0027Implementation-Version\u0027: getRepoSenseVersion()"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"tasks.register(\u0027lintFrontend\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    dependsOn installFrontend"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    args \u003d [\u0027run\u0027, \u0027lint\u0027]"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"def checkstyleMain \u003d tasks.checkstyleMain"},{"lineNumber":144,"author":{"gitId":"-"},"content":"def checkstyleTest \u003d tasks.checkstyleTest"},{"lineNumber":145,"author":{"gitId":"-"},"content":"def checkstyleSystemtest \u003d tasks.checkstyleSystemtest"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"tasks.register(\u0027checkstyleAll\u0027, Checkstyle) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    dependsOn checkstyleMain, checkstyleTest, checkstyleSystemtest"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    tasks.checkstyleTest.mustRunAfter(\u0027checkstyleMain\u0027)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    tasks.checkstyleSystemtest.mustRunAfter(\u0027checkstyleTest\u0027)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"tasks.register(\u0027systemtest\u0027, Test) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    testClassesDirs \u003d sourceSets.systemtest.output.classesDirs"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    classpath \u003d sourceSets.systemtest.runtimeClasspath"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    environment(\"REPOSENSE_ENVIRONMENT\", \"TEST\")"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d true"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    doFirst {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    doLast {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"def serveTestReportInBackground \u003d tasks.register(\u0027serveTestReportInBackground\u0027, com.github.psxpaul.task.JavaExecFork) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    dependsOn zipReport, compileJava, processResources, classes"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    tasks.compileJava.mustRunAfter(zipReport)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    tasks.processResources.mustRunAfter(zipReport)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    main \u003d mainClassName"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    classpath \u003d sourceSets.main.runtimeClasspath"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    args \u003d [\u0027--config\u0027, \u0027./frontend/cypress/config\u0027, \u0027--since\u0027, \u0027d1\u0027, \u0027--view\u0027]"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    String versionJvmArgs \u003d \u0027-Dversion\u003d\u0027 + getRepoSenseVersion()"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    jvmArgs \u003d [ versionJvmArgs ]"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    killDescendants \u003d false // Kills descendants of started process using methods only found in Java 9 and beyond."},{"lineNumber":184,"author":{"gitId":"-"},"content":"    // Above flag is set to true by default but is incompatible with Java 8. It should be removed from this file if we fully migrate to Java 11."},{"lineNumber":185,"author":{"gitId":"-"},"content":"    waitForPort \u003d 9000"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"def installCypress \u003d tasks.register(\u0027installCypress\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/cypress/\u0027"},{"lineNumber":190,"author":{"gitId":"MarcusTXK"},"content":"    args \u003d [\u0027ci\u0027]"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"tasks.register(\u0027cypress\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    dependsOn installCypress, serveTestReportInBackground"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    tasks.serveTestReportInBackground.mustRunAfter(installCypress)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    workingDir \u003d file(\u0027frontend/cypress/\u0027)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    args \u003d [\"run-script\", \"debug\"]"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"tasks.register(\u0027frontendTest\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    dependsOn installCypress, serveTestReportInBackground"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    tasks.serveTestReportInBackground.mustRunAfter(installCypress)"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    workingDir \u003d file(\u0027frontend/cypress/\u0027)"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    args \u003d [\"run-script\", \"tests\"]"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    // Run tests in CI without slow motion"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    if (project.hasProperty(\u0027ci\u0027)) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        args \u003d [\"run-script\", \"ci\"]"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"tasks.withType(Copy) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    includeEmptyDirs \u003d true"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"jacoco {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    toolVersion \u003d \"0.8.7\""},{"lineNumber":220,"author":{"gitId":"-"},"content":"}"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"jacocoTestReport {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        html.required \u003d true"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        xml.required \u003d true"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        csv.required \u003d false"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        html.destination file(\"${buildDir}/jacocoHtml\")"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"    executionData systemtest, frontendTest"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"tasks.register(\u0027coverage\u0027, JacocoReport)"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"coverage.configure {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        html.required \u003d true"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        xml.required \u003d true"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"String getRepoSenseVersion() {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    String repoSenseVersion \u003d project.property(\"version\")"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    if (repoSenseVersion.equals(\"unspecified\")) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        repoSenseVersion \u003d versionDetails().commitDistance \u003d\u003d 0 ? versionDetails().lastTag : versionDetails().gitHash"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    return repoSenseVersion"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"def syncFrontendPublic \u003d tasks.register(\u0027syncFrontendPublic\u0027, Sync) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    from \u0027reposense-report\u0027"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    into \u0027frontend/public/\u0027"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    include \u0027**/*.json\u0027"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    includeEmptyDirs \u003d false"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    preserve {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        include \u0027index.html\u0027"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        include \u0027favicon.ico\u0027"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"def macHotReloadFrontend \u003d tasks.register(\u0027macHotReloadFrontend\u0027, Exec) {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    dependsOn installFrontend"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    onlyIf {os.isMacOsX()}"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    commandLine \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"def windowsHotReloadFrontend \u003d tasks.register(\u0027windowsHotReloadFrontend\u0027, Exec) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    dependsOn installFrontend"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    onlyIf {os.isWindows()}"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    commandLine \u0027cmd\u0027,\u0027/c\u0027, \u0027START\u0027, \u0027\"hotreload RepoSense frontend\"\u0027, \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"def linuxHotReloadFrontend \u003d tasks.register(\u0027linuxHotReloadFrontend\u0027, Exec) {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    dependsOn installFrontend"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    onlyIf {os.isLinux()}"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    commandLine \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"tasks.register(\u0027hotReloadFrontend\u0027) {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    dependsOn syncFrontendPublic"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    finalizedBy windowsHotReloadFrontend"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    finalizedBy macHotReloadFrontend"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    finalizedBy linuxHotReloadFrontend"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}"},{"lineNumber":298,"author":{"gitId":"-"},"content":"// End of hot reload Tasks"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"void deleteReposAddressDirectory() {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    final String REPOS_ADDRESS \u003d \"repos\""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    def reposDirectory \u003d new File(REPOS_ADDRESS)"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    reposDirectory.deleteDir()"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027build\u0027, \u0027systemtest\u0027, \u0027frontendTest\u0027, \u0027coverage\u0027"}],"authorContributionMap":{"MarcusTXK":2,"-":304}},{"path":"docs/_markbind/variables.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_announcement\"\u003e\u003cmd\u003e:fas-bell:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_book\"\u003e\u003cmd\u003e:fas-book:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_calendar\"\u003e\u003cmd\u003e:fas-calendar-alt:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_dislike\"\u003e\u003cmd\u003e:fas-thumbs-down:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_example\"\u003e\u003cmd\u003e:fas-cube:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_embedding\"\u003e\u003cmd\u003e:glyphicon-log-in:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_exercise\"\u003e\u003cmd\u003e:fas-dumbbell:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":8,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_extra\"\u003e\u003cspan class\u003d\u0027badge rounded-pill bg-secondary\u0027\u003e\u003cmd\u003e:fas-plus: extra\u003c/md\u003e\u003c/span\u003e\u003c/span\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_info\"\u003e\u003cmd\u003e:fas-info-circle:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_like\"\u003e\u003cmd\u003e:fas-thumbs-up:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_linux\"\u003e\u003cmd\u003e:fab-linux:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":12,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_level_basic\"\u003e\u003cmd\u003e\u003cspan class\u003d\"badge rounded-pill bg-danger\"\u003e:far-star:\u003c/span\u003e\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":13,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_level_intermediate\"\u003e\u003cmd\u003e\u003cspan class\u003d\"badge rounded-pill bg-warning text-white\"\u003e:far-star::far-star:\u003c/span\u003e\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":14,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_level_advanced\"\u003e\u003cmd\u003e\u003cspan class\u003d\"badge rounded-pill bg-success\"\u003e:far-star::far-star::far-star:\u003c/span\u003e\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_important_big_red\"\u003e\u003cfont color\u003d\"red\"\u003e\u003cbig\u003e:glyphicon-exclamation-sign:\u003c/big\u003e\u003c/font\u003e\u003c/span\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_important\"\u003e\u003cmd\u003e:glyphicon-exclamation-sign:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_new_window\"\u003e\u003cmd\u003e:glyphicon-new-window:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_outcome\"\u003e\u003cmd\u003e:fas-trophy:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_output\"\u003e\u003cmd\u003e:fas-arrow-down:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_output_right\"\u003e\u003cmd\u003e:fas-arrow-right:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_print\"\u003e\u003cmd\u003e:glyphicon-print:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_prereq\"\u003e\u003cmd\u003e:glyphicon-education:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_preview\"\u003e\u003cmd\u003e:glyphicon-eye-open:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":24,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_pro_tip\"\u003e\u003cspan class\u003d\"badge rounded-pill bg-warning\"\u003e:fas-lightbulb: PRO TIP\u003c/span\u003e\u003c/span\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_Q\"\u003e\u003cmd\u003e:glyphicon-question-sign:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_Q_A\"\u003e{{ icon_Q | safe }}:glyphicon-ok-sign:\u003c/span\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_resource\"\u003e\u003cmd\u003e:fas-paperclip:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":28,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_terminal\"\u003e\u003csmal\u003e\u003cspan class\u003d\"badge bg-secondary\"\u003e\u0026gt;_\u003c/span\u003e\u003c/smal\u003e\u003c/span\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_text\"\u003e\u003cmd\u003e:far-file-alt:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_tick\"\u003e\u003cmd\u003e:fas-check:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":31,"author":{"gitId":"sikai00"},"content":"\u003cspan id\u003d\"icon_tip\"\u003e\u003cspan class\u003d\"badge rounded-pill bg-warning\"\u003e:fas-lightbulb:\u003c/span\u003e\u003c/span\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_tick_green\"\u003e\u003cspan style\u003d\"color:green\"\u003e{{ icon_tick | safe }}\u003c/span\u003e\u003c/span\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_todo\"\u003e\u003cmd\u003e:glyphicon-check:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_slides\"\u003e\u003cmd\u003e:far-images:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_video\"\u003e\u003cmd\u003e:glyphicon-facetime-video:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_windows\"\u003e\u003cmd\u003e:fab-windows:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_x\"\u003e\u003cmd\u003e:fas-times:\u003c/md\u003e\u003c/span\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"icon_x_red\"\u003e\u003cspan style\u003d\"color:red\"\u003e{{ icon_x | safe }}\u003c/span\u003e\u003c/span\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"bad\"\u003e\u003cfont color\u003d\"red\"\u003e\u003cmd\u003e**{{ icon_dislike | safe }} Bad**\u003c/md\u003e\u003c/font\u003e\u003c/span\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"good\"\u003e\u003cfont color\u003d\"green\"\u003e\u003cmd\u003e**{{ icon_like | safe }} Good**\u003c/md\u003e\u003c/font\u003e\u003c/span\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003cvariable from\u003d\"variables.json\" /\u003e"}],"authorContributionMap":{"sikai00":7,"-":35}},{"path":"docs/dg/styleGuides.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Style guides\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Our coding standards are mostly based on those at [se-education.org/guides](https://se-education.org/guides)."},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* [**CSS** coding standard](https://se-education.org/guides/conventions/css.html)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* [**Files/folders** naming conventions](https://se-education.org/guides/conventions/files.html)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* [**HTML** coding standard](https://se-education.org/guides/conventions/html.html)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* [**Markdown/MarkBind** coding standard](https://se-education.org/guides/conventions/markdown.html)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* [**Java** coding standard](https://se-education.org/guides/conventions/java/index.html)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* [**JavaScript** coding standard](https://se-education.org/guides/conventions/javascript.html)"},{"lineNumber":19,"author":{"gitId":"vvidday"},"content":"* **Vue Components**: Follow the [**Vue style guide**](https://vuejs.org/style-guide/), up to the **Recommended** section."},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Documentation**: Follow the [**Google developer documentation style guide**](https://developers.google.com/style)."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"## Note on Ternary Operators:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Ternary operators can be used to shorten if-else blocks such as this:"},{"lineNumber":24,"author":{"gitId":"-"},"content":"```"},{"lineNumber":25,"author":{"gitId":"-"},"content":"LocalDateTime min \u003d ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(zoneId).toLocalDateTime();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"if (!commitInfos.isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    min \u003d commitInfos.get(0).getTime();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":"return min;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"```"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"The result would look something like this:"},{"lineNumber":33,"author":{"gitId":"-"},"content":"```"},{"lineNumber":34,"author":{"gitId":"-"},"content":"return (commitInfos.isEmpty())"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ? ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(zoneId).toLocalDateTime()"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        : commitInfos.get(0).getTime();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"```"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"To preserve readability, it is recommended that if-else blocks should only be "},{"lineNumber":40,"author":{"gitId":"-"},"content":"converted to ternary operators if the resultant code can be kept at most 3 lines long"},{"lineNumber":41,"author":{"gitId":"-"},"content":"(in accordance to the coding standard)."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"## Additional Javadoc requirements:"},{"lineNumber":44,"author":{"gitId":"-"},"content":"In addition to what has been mentioned in the [**Java** coding standard (SE-EDU)](https://se-education.org/guides/conventions/java/index.html) and [**Google Java Style Guide**](https://google.github.io/styleguide/javaguide.html), we also stipulate the following standards for Javadoc:"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* If Javadoc is written for a method, all input parameters should be described in the Javadoc, either in the description with `@code tags` or through `@param` block tags."},{"lineNumber":46,"author":{"gitId":"-"},"content":"  * If `@param` block tags are used, they must be used for all parameters."},{"lineNumber":47,"author":{"gitId":"-"},"content":"  * This is not necessary (although still recommended) for methods with `@Override` annotations if Javadoc is used. However, if the method that is being overriden is part of your code and has Javadoc, all parameters must be described."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"Negative Examples:"},{"lineNumber":50,"author":{"gitId":"-"},"content":"```"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Not okay (Only mentions zoneId parameter):"},{"lineNumber":52,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":53,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object adjusted for timezone given by {@code zoneId}."},{"lineNumber":54,"author":{"gitId":"-"},"content":" */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Not okay (@param tag used only for zoneId)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":61,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":62,"author":{"gitId":"-"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":63,"author":{"gitId":"-"},"content":" *"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * @param zoneId The timezone ID to adjust the sinceDate to."},{"lineNumber":65,"author":{"gitId":"-"},"content":" */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Positive Example #1:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"```"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Okay (No @param tags):"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":75,"author":{"gitId":"-"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":76,"author":{"gitId":"-"},"content":" */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Positive Example #2:"},{"lineNumber":82,"author":{"gitId":"-"},"content":"```"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Okay (@param tags used for all inputs):"},{"lineNumber":84,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":85,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":86,"author":{"gitId":"-"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":87,"author":{"gitId":"-"},"content":" * "},{"lineNumber":88,"author":{"gitId":"-"},"content":" * @param sinceDate The date prior to the timezone conversion."},{"lineNumber":89,"author":{"gitId":"-"},"content":" * @param zoneId The timezone ID to adjust the sinceDate to."},{"lineNumber":90,"author":{"gitId":"-"},"content":" */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    //Code here"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"```"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"* Within the main code, if an exception is thrown in a method (both header and body) for which Javadoc is written, a `@throws` tag must be used to describe how the exception is likely to arise."},{"lineNumber":97,"author":{"gitId":"-"},"content":"  * This requirement does not apply to test code."},{"lineNumber":98,"author":{"gitId":"-"},"content":"  * One `@throws` tag per unique exception."},{"lineNumber":99,"author":{"gitId":"-"},"content":"  * The order of exceptions in the `@throws` tag block should match that of the method\u0027s `throws` statement."},{"lineNumber":100,"author":{"gitId":"-"},"content":"```"},{"lineNumber":101,"author":{"gitId":"-"},"content":"Not okay (order of exceptions in tag block and method signature do not match):"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object from {@code dateString}."},{"lineNumber":104,"author":{"gitId":"-"},"content":" * "},{"lineNumber":105,"author":{"gitId":"-"},"content":" * @throws ParseException if {@code dateString} cannot be parsed."},{"lineNumber":106,"author":{"gitId":"-"},"content":" * @throws NullPointerException if {@code dateString} is null."},{"lineNumber":107,"author":{"gitId":"-"},"content":" */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"public LocalDateTime parseDate(String dateString) throws NullPointerException, ParseException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    String trimmedString \u003d dateString.toUpperCase(); // NullPointerException may happen here."},{"lineNumber":110,"author":{"gitId":"-"},"content":"    // Code here"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"Should be:"},{"lineNumber":114,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":115,"author":{"gitId":"-"},"content":" * Returns a {@link LocalDateTime} object from {@code dateString}."},{"lineNumber":116,"author":{"gitId":"-"},"content":" * "},{"lineNumber":117,"author":{"gitId":"-"},"content":" * @throws NullPointerException if {@code dateString} is null."},{"lineNumber":118,"author":{"gitId":"-"},"content":" * @throws ParseException if {@code dateString} cannot be parsed."},{"lineNumber":119,"author":{"gitId":"-"},"content":" */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"public LocalDateTime parseDate(String dateString) throws NullPointerException, ParseException {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    String trimmedString \u003d dateString.toUpperCase(); // NullPointerException may happen here."},{"lineNumber":122,"author":{"gitId":"-"},"content":"    // Code here"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"},{"lineNumber":124,"author":{"gitId":"-"},"content":"```"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"vvidday":1,"-":125}},{"path":"docs/ug/configFiles.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Config files format\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"sikai00"},"content":"{% set mandatory %}\u003cspan class\u003d\"badge bg-danger\"\u003emandatory\u003c/span\u003e{% endset %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Given below are the details of the various config files used by RepoSense."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"**RepoSense ignores the order of column headers in the CSV config files. However, the spelling of the column headers must match the specified headers exactly, or the column would be ignored by RepoSense.**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**A value in a config file is optional to provide unless it is specified as {{ mandatory }}**."},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## `repo-config.csv`"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"**`repo-config.csv` file contains repo-level config data.** Each row represents a repository\u0027s configuration ([example](repo-config.csv))."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"| Column Name | Explanation |"},{"lineNumber":33,"author":{"gitId":"-"},"content":"|-------------|-------------|"},{"lineNumber":34,"author":{"gitId":"-"},"content":"| Repository\u0027s Location {{ mandatory }} | The `Remote Repo URL` or `Disk Path` to the git repository e.g., `https://github.com/foo/bar.git` or `C:\\Users\\user\\Desktop\\GitHub\\foo\\bar` |"},{"lineNumber":35,"author":{"gitId":"-"},"content":"| Branch | The branch to analyze in the target repository e.g., `master`. Default: the default branch of the repo |"},{"lineNumber":36,"author":{"gitId":"-"},"content":"| File formats\u003csup\u003e*+\u003c/sup\u003e | The file extensions to analyze. Binary file formats, such as `png` and `jpg`, will be automatically labelled as the file type `binary` in the generated report. Default: all file formats |"},{"lineNumber":37,"author":{"gitId":"-"},"content":"| Find Previous Authors | Enter **`yes`** to utilize Git blame\u0027s ignore revisions functionality, RepoSense will attempt to blame the line changes caused by commits in the ignore commit list to the previous authors who altered those lines (if available). |"},{"lineNumber":38,"author":{"gitId":"-"},"content":"| Ignore Glob List\u003csup\u003e*+\u003c/sup\u003e | The list of file path globs to ignore during analysis for each author e.g., `test/**;temp/**`. Refer to the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) for the path glob syntax. |"},{"lineNumber":39,"author":{"gitId":"-"},"content":"| Ignore standalone config | To ignore the standalone config file (if any) in target repository, enter **`yes`**. If the cell is empty, the standalone config file in the repo (if any) will take precedence over configurations provided in the csv files. |"},{"lineNumber":40,"author":{"gitId":"-"},"content":"| Ignore Commits List\u003csup\u003e*+\u003c/sup\u003e | The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash. Additionally, a range of commits can be specified using the `..` notation e.g. `abc123..def456` (both inclusive). |"},{"lineNumber":41,"author":{"gitId":"-"},"content":"| Ignore Authors List\u003csup\u003e*+\u003c/sup\u003e | The list of authors to ignore during analysis. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name). |"},{"lineNumber":42,"author":{"gitId":"-"},"content":"| Shallow Cloning | Enter **`yes`** to clone the repository using Git\u0027s shallow cloning functionality. This option can significantly reduce the time taken to clone large repositories. However, the option should ideally be disabled for smaller repositories where the `.git` file is smaller than 500 MB, as it would create overhead. |"},{"lineNumber":43,"author":{"gitId":"-"},"content":"| File Size Limit\u003csup\u003e+\u003c/sup\u003e | Enter a file size limit for the repository in bytes as a single number without units (for a size limit of 1MB for example, enter 1000000). This file size limit will override the default file size limit (500KB). Files exceeding the file size limit will be marked as ignored and only the file name and line count will be reflected in the report. |"},{"lineNumber":44,"author":{"gitId":"-"},"content":"| Ignore File Size Limit | Enter **`yes`** to ignore both the default file size limit and the file size limit possibly set by the user in `repo-config.csv`. |"},{"lineNumber":45,"author":{"gitId":"-"},"content":"| Skip Ignored File Analysis | Enter **`yes`** to ignore analysis of files exceeding the file size limit entirely. If file analysis is skipped, all information about the file will be omitted from the generated report. This option can significantly improve report generation time. |"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"The Shallow Cloning option is incompatible with the \"--last-modified-date\" CLI flag."},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"If Ignore File Size Limit is yes, the File Size Limit and Skip Ignored File Analysis columns are ignored."},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e\u003c/br\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003csup\u003e+ **Overrideable column**: prepend with `override:` to use entered value(s) instead of value(s) from standalone config.\u003c/sup\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"When using [standalone config](#config-json-standalone-config-file) (if it is not ignored), it is possible to override specific values from the standalone config by prepending the entered value with `override:`."},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"## `author-config.csv`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Optionally, you can use an `author-config.csv` (which should be in the same directory as the `repo-config.csv` file) to provide more details about the authors to analyze ([example](author-config.csv)). It should contain the following columns:"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"| Column Name | Explanation |"},{"lineNumber":70,"author":{"gitId":"-"},"content":"|-------------|-------------|"},{"lineNumber":71,"author":{"gitId":"-"},"content":"| Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv` |"},{"lineNumber":72,"author":{"gitId":"-"},"content":"| Branch | The branch to analyze for this author, e.g., `master`. Default: the author will be bound to all the repos in `repo-config.csv` that has the same repo\u0027s location, regardless of branch. |"},{"lineNumber":73,"author":{"gitId":"-"},"content":"| Author\u0027s Git Host ID\u003csup\u003e#\u003c/sup\u003e {{ mandatory }} | Username of the target author\u0027s profile on GitHub, GitLab or Bitbucket, e.g.`JohnDoe`. |  "},{"lineNumber":74,"author":{"gitId":"-"},"content":"| Author\u0027s Emails\u003csup\u003e*\u003c/sup\u003e | Associated emails of the author. For GitHub users, this can be found in your [GitHub settings](https://github.com/settings/emails). |"},{"lineNumber":75,"author":{"gitId":"-"},"content":"| Author\u0027s Display Name | The name to display for the author. Default: author\u0027s username. |"},{"lineNumber":76,"author":{"gitId":"-"},"content":"| Author\u0027s Git Author Name\u003csup\u003e*\u003c/sup\u003e | The meaning of _Git Author Name_ is explained in [_A note about git author name_](#a-note-about-git-author-name). |"},{"lineNumber":77,"author":{"gitId":"-"},"content":"| Ignore Glob List\u003csup\u003e*\u003c/sup\u003e | Files to ignore for this author, in addition to files ignored by the patterns specified in `repo-config.csv`. The path glob syntax is the same as that of Ignore Glob List in `repo-config.csv`. |"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"\u003c/br\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003csup\u003e# For backward compatibility, `Author\u0027s GitHub ID` is still accepted as the header in place of `Author\u0027s Git Host ID`.\u003c/sup\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"If `author-config.csv` is not given and the repo has not provided author details in a standalone config file, all the authors of the repositories within the date range specified (if any) will be analyzed."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"## `group-config.csv`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Optionally, you can provide a `group-config.csv`(which should be in the same directory as `repo-config.csv` file) to provide details on any custom groupings for files in specified repositories ([example](group-config.csv)). It should contain the following columns:"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"| Column Name | Explanation |"},{"lineNumber":92,"author":{"gitId":"-"},"content":"|-------------|-------------|"},{"lineNumber":93,"author":{"gitId":"-"},"content":"| Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv` |"},{"lineNumber":94,"author":{"gitId":"-"},"content":"| Group Name {{ mandatory }} | Name of the group, e.g.,`test`. |"},{"lineNumber":95,"author":{"gitId":"-"},"content":"| Globs * {{ mandatory }} | The list of file path globs to include for specified group, e.g.,`**/test/*;**.java`. |"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"Note that a file in a given repository should only be tagged to one group. \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"e.g.: `example.java` in `example-repo` can either be in the `test` group or the `code` group, but not in both `test` and `code` group. If multiple groups are specified for a given file, the latter group (i.e., `code` group) is set for the file."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"## `report-config.json`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"You can optionally use `report-config.json` to customize report generation by providing the following information. ([example](report-config.json))"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"**Fields to provide**:"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* `title`: Title of the generated report, which is also the title of the deployed dashboard. Default: \"RepoSense Report\""},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-standalone\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"## `config.json` (standalone config file)"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Repo owners can provide the following additional information to RepoSense using a config file that we call the **_standalone config file_**:"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* which files/authors/commits to analyze/omit"},{"lineNumber":119,"author":{"gitId":"-"},"content":"* which git and git host usernames belong to which authors"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* the display of an author"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"To use this feature, add a `_reposense/config.json` to the root of your repo using the format in the example below ([another example](https://github.com/reposense/RepoSense/blob/master/_reposense/config.json)) and **commit it** (reason: RepoSense can see committed code only):"},{"lineNumber":123,"author":{"gitId":"-"},"content":"```json {.no-line-numbers}"},{"lineNumber":124,"author":{"gitId":"-"},"content":"{"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  \"ignoreGlobList\": [\"about-us/**\", \"**index.html\"],"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  \"formats\": [\"html\", \"css\"],"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  \"ignoreCommitList\": [\"90018e49f129ce7e0abdc8b18e91c9813588c601\", \"67890def\", \"abc123..def456\"],"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  \"ignoreAuthorList\": [\"charlie\"],"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  \"authors\":"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  ["},{"lineNumber":131,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      \"githubId\": \"alice\","},{"lineNumber":133,"author":{"gitId":"-"},"content":"      \"emails\": [\"alice@example.com\", \"alicet@example.com\"],"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \"displayName\": \"Alice T.\","},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \"authorNames\": [\"AT\", \"A\"],"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \"ignoreGlobList\": [\"**.css\"]"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \"githubId\": \"bob\""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"},{"lineNumber":143,"author":{"gitId":"-"},"content":"```"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Note: all fields are optional unless specified otherwise."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"**Fields to provide _repository-level_ info**:"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"* `ignoreGlobList`: Folders/files to ignore, specified using the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob)."},{"lineNumber":149,"author":{"gitId":"-"},"content":"* `formats`: File formats to analyze. Binary file formats, such as `png` and `jpg`, will be automatically labelled as the file type `binary` in the generated report. Default: all file formats"},{"lineNumber":150,"author":{"gitId":"-"},"content":"* `ignoreCommitList`: The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash. Additionally, a range of commits can be specified using the `..` notation e.g. `abc123..def456` (both inclusive)."},{"lineNumber":151,"author":{"gitId":"-"},"content":"* `ignoreAuthorList`: The list of authors to ignore during analysis. Authors specified in `authors` field or `author-config.csv` will be also be omitted if they are in this list. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name)."},{"lineNumber":152,"author":{"gitId":"-"},"content":"* `fileSizeLimit`: A file size limit for the repository in bytes as a single number without units, that will override the default file size limit. If not specified, the default file size limit will continue to be used."},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"**Fields to provide _author-level_ info**:\u003cbr\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Note: `authors` field should contain _all_ authors that should be captured in the analysis."},{"lineNumber":156,"author":{"gitId":"-"},"content":"* `githubId`: Username of the author. {{ mandatory }} field."},{"lineNumber":157,"author":{"gitId":"-"},"content":"* `emails`: Associated git emails of the author. For GitHub, this can be found in your [GitHub settings](https://github.com/settings/emails)."},{"lineNumber":158,"author":{"gitId":"-"},"content":"* `displayName`: Name to display on the report for this author."},{"lineNumber":159,"author":{"gitId":"-"},"content":"* `authorNames`: Git Author Name(s) used in the author\u0027s commits. By default, RepoSense assumes an author would use her GitHub username as the Git username too. The meaning of _Git Author Name_ is explained in [_A note about git author name_](#a-note-about-git-author-name)."},{"lineNumber":160,"author":{"gitId":"-"},"content":"* `ignoreGlobList`: _Additional_ (i.e. on top of the repo-level `ignoreGlobList`) folders/files to ignore for a specific author. The path glob syntax is specified by the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob). In the example above, the actual `ignoreGlobList` for `alice` would be `[\"about-us/**\", \"**index.html\", \"**.css\"]`."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"To verify your standalone configuration is as intended, add the `_reposense/config.json` to your local copy of repo and run RepoSense against it as follows:\u003cbr\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Format: `java -jar RepoSense.jar --repo LOCAL_REPO_LOCATION` \u003cbr\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Example: `java -jar RepoSense.jar --repo c:/myRepose/foo/bar`\u003cbr\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"After that, view the report to see if the configuration you specified in the config file is being reflected correctly in the report."},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"## A note about git author name"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"`Git Author Name` refers to the customizable author\u0027s display name set in the local `.gitconfig` file. For example, in the Git Log\u0027s display:"},{"lineNumber":170,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":171,"author":{"gitId":"-"},"content":"..."},{"lineNumber":172,"author":{"gitId":"-"},"content":"commit cd7f610e0becbdf331d5231887d8010a689f87c7"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Author: ConfiguredAuthorName \u003cauthor@example.com\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Date:   Fri Feb 9 19:14:41 2018 +0800"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    Make some changes to show my new author\u0027s name"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"commit e3f699fd4ef128eebce98d5b4e5b3bb06a512f49"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Author: ActualGitHostId \u003cauthor@example.com\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":"Date:   Fri Feb 9 19:13:13 2018 +0800"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    Initial commit"},{"lineNumber":183,"author":{"gitId":"-"},"content":" ..."},{"lineNumber":184,"author":{"gitId":"-"},"content":"```"},{"lineNumber":185,"author":{"gitId":"-"},"content":"`ActualGitHostId` and `ConfiguredAuthorName` are both `Git Author Name` of the same author.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"To find the author name that you are currently using for your current git repository, run the following command within your git repository:"},{"lineNumber":187,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":188,"author":{"gitId":"-"},"content":"git config user.name"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```"},{"lineNumber":190,"author":{"gitId":"-"},"content":"To set the author name to the value you want (e.g., to set it to your GitHub username) for your current git repository, you can use the following command ([more info](https://www.git-tower.com/learn/git/faq/change-author-name-email)):"},{"lineNumber":191,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":192,"author":{"gitId":"-"},"content":"git config user.name \"YOUR_AUTHOR_NAME”"},{"lineNumber":193,"author":{"gitId":"-"},"content":"```"},{"lineNumber":194,"author":{"gitId":"-"},"content":"To set the author name to use a default value you want for future git repositories, you can use the following command:"},{"lineNumber":195,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":196,"author":{"gitId":"-"},"content":"git config --global user.name \"YOUR_AUTHOR_NAME”"},{"lineNumber":197,"author":{"gitId":"-"},"content":"```"},{"lineNumber":198,"author":{"gitId":"-"},"content":"RepoSense expects the Git Author Name to be the same as author\u0027s username on the Git hosting platform (GitHub, GitLab, BitBucket). If an author\u0027s `Git Author Name` is different from their username on the Git hosting platform, the `Git Author Name` needs to be specified in the standalone config file. If the author has more than one `Git Author Name`, multiple values can be entered too."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"Note: Symbols such as `\"`, `!`, `/` etc. in your author name will be omitted, which may reduce the accuracy of the analysis if 2 names in the repository are approximately similar."},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"sikai00":1,"-":204}},{"path":"docs/ug/usingAuthorTags.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Using `@@author` tags\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed, step with context %}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"`@@author` tags is a rather invasive but sometimes necessary way to provide more information to RepoSense, by annotating the code being analyzed."},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"If you want to override the code authorship deduced by RepoSense (which is based on Git blame/log data), you can use `@@author` tags to specify certain code segments that should be credited to a certain author irrespective of git history. An example scenario where this is useful is when a method was originally written by one author but a second author did some minor refactoring to it; in this case, RepoSense might attribute the code to the second author while you may want to attribute the code to the first author."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"There are 2 types of `@@author` tags:"},{"lineNumber":18,"author":{"gitId":"sikai00"},"content":"- Start Tags (format: `@@author AUTHOR_GIT_AUTHOR_NAME`): A start tag indicates the start of a code segment written by the author identified by the `AUTHOR_GIT_AUTHOR_NAME`."},{"lineNumber":19,"author":{"gitId":"sikai00"},"content":"- End Tags (format: `@@author`): Optional. An end tag indicates the end of a code segment written by the author identified by the `AUTHOR_GIT_AUTHOR_NAME` of the start tag."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"If an end tag is not provided, the code till the next start tag (or the end of the file) will be attributed to the author specified in the start tag above. Use only when necessary to minimize polluting your code with these extra tags."},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"If an end tag is provided without a corresponding start tag, the code until the next start tag, the next end tag, or the end of the file, will not be attributed to any author. This should only be used if the code should not be attributed to any author."},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"sikai00"},"content":"The `@@author` tags should be enclosed within a single-line comment, using the comment syntax of the file in concern. Below are some examples:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"![author tags](../images/add-author-tags.png)"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Currently, the following comment formats are supported:"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cul\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003cli\u003e// @@author authorName\u003c/li\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cli\u003e/* @@author authorName */\u003c/li\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003cli\u003e/* @@author authorName\u003c/li\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003cli\u003e# @@author authorName\u003c/li\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cli\u003e% @@author authorName\u003c/li\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u0026lt!-- @@author authorName --\u0026gt\u003c/li\u003e"},{"lineNumber":43,"author":{"gitId":"parth-io"},"content":"    \u003cli\u003e\u0026lt!--- @@author authorName ---\u0026gt\u003c/li\u003e"},{"lineNumber":44,"author":{"gitId":"parth-io"},"content":"    \u003cli\u003e[//]: # (@@author authorName)\u003c/li\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c/ul\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"sikai00"},"content":"RepoSense checks whether the line matches the supported comment formats. If the line does not match the formats,"},{"lineNumber":50,"author":{"gitId":"sikai00"},"content":"RepoSense treats it as a normal line. "},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"sikai00"},"content":"The code until the next start tag, the end tag, or the end of file will be attributed to that author."},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Note: Remember to **commit** the files after the changes. (reason: RepoSense can see committed code only)"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Special thanks to [Collate project](https://github.com/se-edu/collate) for providing the inspiration for this functionality."}],"authorContributionMap":{"parth-io":2,"sikai00":6,"-":49}},{"path":"frontend/cypress/tests/codeView/codeView_hideFileDetails.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027hide all file details\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check hide all file details hides the content of all the files\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the code panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":5,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    // the contents of all the files should be visible"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    // hide the details of all the files"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // the contents of all the files should be hidden"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  it(\u0027check details of one file are shown, rest are hidden\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    // should show \u0027show all file details\u0027 only"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline a\u0027)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        .should(\u0027not.contain.text\u0027, \u0027hide all file details\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        .should(\u0027contain.text\u0027, \u0027show all file details\u0027);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    // open contents of the first file"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .title .caret\u0027)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // should show both \u0027show/hide all file details\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline a\u0027)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        .should(\u0027contain.text\u0027, \u0027hide all file details\u0027)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        .should(\u0027contain.text\u0027, \u0027show all file details\u0027);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // contents of the first file should be visible"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // contents of the last file should be hidden"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        .last()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  it(\u0027check show all file details shows the content of all the files\u0027, () \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    // hide the content of all the files"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    // show the content of all the files"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .toolbar--multiline\u0027)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":97,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":98,"author":{"gitId":"vvidday"},"content":"  it(\u0027check collapsed file persists after sort\u0027, () \u003d\u003e {"},{"lineNumber":99,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027.icon-button.fa-code\u0027)"},{"lineNumber":100,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":101,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":102,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":103,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":104,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-authorship .files\u0027, { timeout: 90000 })"},{"lineNumber":105,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":106,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":107,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":108,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":109,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":110,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":111,"author":{"gitId":"vvidday"},"content":"    // hide contents of the first file"},{"lineNumber":112,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-authorship .title .caret\u0027)"},{"lineNumber":113,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":114,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":115,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":116,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":117,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-authorship .file-content \u0027)"},{"lineNumber":118,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":119,"author":{"gitId":"vvidday"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":120,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":121,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-authorship .title .path\u0027)"},{"lineNumber":122,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":123,"author":{"gitId":"vvidday"},"content":"        .invoke(\u0027text\u0027)"},{"lineNumber":124,"author":{"gitId":"vvidday"},"content":"        // keep track of first file by file path so test doesn\u0027t rely on correctness of sort"},{"lineNumber":125,"author":{"gitId":"vvidday"},"content":"        .then((filePath) \u003d\u003e {"},{"lineNumber":126,"author":{"gitId":"vvidday"},"content":"          // change sort by"},{"lineNumber":127,"author":{"gitId":"vvidday"},"content":"          cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":128,"author":{"gitId":"vvidday"},"content":"              .select(\u0027Path\u0027)"},{"lineNumber":129,"author":{"gitId":"vvidday"},"content":"              .should(\u0027have.value\u0027, \u0027path\u0027);"},{"lineNumber":130,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":131,"author":{"gitId":"vvidday"},"content":"          // wait until loading is finished"},{"lineNumber":132,"author":{"gitId":"vvidday"},"content":"          cy.get(\u0027[aria-label\u003d\"Loading\"]\u0027)"},{"lineNumber":133,"author":{"gitId":"vvidday"},"content":"              .should(\u0027not.be.visible\u0027);"},{"lineNumber":134,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":135,"author":{"gitId":"vvidday"},"content":"          // contents of file should still be hidden"},{"lineNumber":136,"author":{"gitId":"vvidday"},"content":"          cy.contains(\u0027#tab-authorship .file\u0027, filePath.trim())"},{"lineNumber":137,"author":{"gitId":"vvidday"},"content":"              .children(\u0027.file-content\u0027)"},{"lineNumber":138,"author":{"gitId":"vvidday"},"content":"              .should(\u0027not.be.visible\u0027);"},{"lineNumber":139,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":140,"author":{"gitId":"vvidday"},"content":"          // change sort order"},{"lineNumber":141,"author":{"gitId":"vvidday"},"content":"          cy.get(\u0027#tab-authorship \u003e .title \u003e .contribution \u003e .sorting \u003e .sort-order \u003e select\u0027)"},{"lineNumber":142,"author":{"gitId":"vvidday"},"content":"              .select(\u0027Ascending\u0027)"},{"lineNumber":143,"author":{"gitId":"vvidday"},"content":"              .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":144,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":145,"author":{"gitId":"vvidday"},"content":"          // wait until loading is finished"},{"lineNumber":146,"author":{"gitId":"vvidday"},"content":"          cy.get(\u0027[aria-label\u003d\"Loading\"]\u0027)"},{"lineNumber":147,"author":{"gitId":"vvidday"},"content":"              .should(\u0027not.be.visible\u0027);"},{"lineNumber":148,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":149,"author":{"gitId":"vvidday"},"content":"          // contents of file should still be hidden"},{"lineNumber":150,"author":{"gitId":"vvidday"},"content":"          cy.contains(\u0027#tab-authorship .file\u0027, filePath.trim())"},{"lineNumber":151,"author":{"gitId":"vvidday"},"content":"              .children(\u0027.file-content\u0027)"},{"lineNumber":152,"author":{"gitId":"vvidday"},"content":"              .should(\u0027not.be.visible\u0027);"},{"lineNumber":153,"author":{"gitId":"vvidday"},"content":"        });"},{"lineNumber":154,"author":{"gitId":"vvidday"},"content":"  });"},{"lineNumber":155,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vvidday":58,"-":97}},{"path":"frontend/cypress/tests/zoomView/zoomView_hideCommitMessages.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"describe(\u0027hide all commit messages \u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  it(\u0027check hide all commit messages hides the commit messages\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":5,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":7,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    // the messages of all the commits should be visible"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    // hides all the commit messages"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027)"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // the messages of all the commits should be hidden"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"  it(\u0027check show all commit messages show the commit messages\u0027, () \u003d\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // open the commit panel"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        .first()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    // hides all the commit messages"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // the messages of all the commits should be hidden"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // show the messages of all the commits"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        .click();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  });"},{"lineNumber":56,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":57,"author":{"gitId":"vvidday"},"content":"  it(\u0027should only display hide all commit messages when none are hidden\u0027, () \u003d\u003e {"},{"lineNumber":58,"author":{"gitId":"vvidday"},"content":"    // open the commit panel"},{"lineNumber":59,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":60,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":61,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":62,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":63,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":64,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":65,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":66,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":67,"author":{"gitId":"vvidday"},"content":"    // should only display \u0027hide all commit messages\u0027"},{"lineNumber":68,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":69,"author":{"gitId":"vvidday"},"content":"        .children()"},{"lineNumber":70,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.length\u0027, 1);"},{"lineNumber":71,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":72,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":73,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027hide all commit messages\u0027);"},{"lineNumber":74,"author":{"gitId":"vvidday"},"content":"  });"},{"lineNumber":75,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":76,"author":{"gitId":"vvidday"},"content":"  it(\u0027should only display show all commit messages when all are hidden\u0027, () \u003d\u003e {"},{"lineNumber":77,"author":{"gitId":"vvidday"},"content":"    // open the commit panel"},{"lineNumber":78,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":79,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":80,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":81,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":82,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":83,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":84,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":85,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":86,"author":{"gitId":"vvidday"},"content":"    // hides all the commit messages"},{"lineNumber":87,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":88,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":89,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":90,"author":{"gitId":"vvidday"},"content":"    // should only display \u0027show all commit messages\u0027"},{"lineNumber":91,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":92,"author":{"gitId":"vvidday"},"content":"        .children()"},{"lineNumber":93,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.length\u0027, 1);"},{"lineNumber":94,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":95,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":96,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027show all commit messages\u0027);"},{"lineNumber":97,"author":{"gitId":"vvidday"},"content":"  });"},{"lineNumber":98,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":99,"author":{"gitId":"vvidday"},"content":"  it(\u0027should display both show and hide all commit messages when some are hidden\u0027, () \u003d\u003e {"},{"lineNumber":100,"author":{"gitId":"vvidday"},"content":"    // open the commit panel"},{"lineNumber":101,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":102,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":103,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":104,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":105,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":106,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":107,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":108,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":109,"author":{"gitId":"vvidday"},"content":"    // hide the message body of the first commit"},{"lineNumber":110,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message \u003e a .tooltip\u0027)"},{"lineNumber":111,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":112,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":113,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":114,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":115,"author":{"gitId":"vvidday"},"content":"    // should now display both \u0027hide all \u0026 show all commit messages\u0027"},{"lineNumber":116,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":117,"author":{"gitId":"vvidday"},"content":"        .children()"},{"lineNumber":118,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.length\u0027, 2);"},{"lineNumber":119,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":120,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":121,"author":{"gitId":"vvidday"},"content":"        .eq(0)"},{"lineNumber":122,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027show all commit messages\u0027);"},{"lineNumber":123,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":124,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":125,"author":{"gitId":"vvidday"},"content":"        .eq(1)"},{"lineNumber":126,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027hide all commit messages\u0027);"},{"lineNumber":127,"author":{"gitId":"vvidday"},"content":"  });"},{"lineNumber":128,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":129,"author":{"gitId":"vvidday"},"content":"  it(\u0027check show all and hide all commit messages only toggle current commits\u0027, () \u003d\u003e {"},{"lineNumber":130,"author":{"gitId":"vvidday"},"content":"    // Assumptions: the third commit (19e3294) of the first author of the first repo"},{"lineNumber":131,"author":{"gitId":"vvidday"},"content":"    // contains changes in only .java files."},{"lineNumber":132,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":133,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":134,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":135,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":136,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":137,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":138,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":139,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":140,"author":{"gitId":"vvidday"},"content":"    // uncheck java file type"},{"lineNumber":141,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":142,"author":{"gitId":"vvidday"},"content":"        .uncheck()"},{"lineNumber":143,"author":{"gitId":"vvidday"},"content":"        .should(\u0027not.be.checked\u0027);"},{"lineNumber":144,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":145,"author":{"gitId":"vvidday"},"content":"    // hides all the commit messages"},{"lineNumber":146,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":147,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":148,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":149,"author":{"gitId":"vvidday"},"content":"    // should only display \u0027show all commit messages\u0027"},{"lineNumber":150,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":151,"author":{"gitId":"vvidday"},"content":"        .children()"},{"lineNumber":152,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.length\u0027, 1);"},{"lineNumber":153,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":154,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":155,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027show all commit messages\u0027);"},{"lineNumber":156,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":157,"author":{"gitId":"vvidday"},"content":"    // check java file type"},{"lineNumber":158,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .fileTypes input[value\u003d\"java\"]\u0027)"},{"lineNumber":159,"author":{"gitId":"vvidday"},"content":"        .check()"},{"lineNumber":160,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.checked\u0027);"},{"lineNumber":161,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":162,"author":{"gitId":"vvidday"},"content":"    // commit body of the third commit should be visible"},{"lineNumber":163,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":164,"author":{"gitId":"vvidday"},"content":"        .eq(2)"},{"lineNumber":165,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":166,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":167,"author":{"gitId":"vvidday"},"content":"    // should now display both \u0027hide all \u0026 show all commit messages\u0027"},{"lineNumber":168,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline\u0027)"},{"lineNumber":169,"author":{"gitId":"vvidday"},"content":"        .children()"},{"lineNumber":170,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.length\u0027, 2);"},{"lineNumber":171,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":172,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":173,"author":{"gitId":"vvidday"},"content":"        .eq(0)"},{"lineNumber":174,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027show all commit messages\u0027);"},{"lineNumber":175,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":176,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .toolbar--multiline \u003e a\u0027)"},{"lineNumber":177,"author":{"gitId":"vvidday"},"content":"        .eq(1)"},{"lineNumber":178,"author":{"gitId":"vvidday"},"content":"        .should(\u0027have.text\u0027, \u0027hide all commit messages\u0027);"},{"lineNumber":179,"author":{"gitId":"vvidday"},"content":"  });"},{"lineNumber":180,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":181,"author":{"gitId":"vvidday"},"content":"  it(\u0027check hidden commit message persists after sort\u0027, () \u003d\u003e {"},{"lineNumber":182,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027.icon-button.fa-list-ul\u0027)"},{"lineNumber":183,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":184,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":185,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":186,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":187,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message\u0027, { timeout: 90000 })"},{"lineNumber":188,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027);"},{"lineNumber":189,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":190,"author":{"gitId":"vvidday"},"content":"    // hide the message body of the first commit"},{"lineNumber":191,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message \u003e a .tooltip\u0027)"},{"lineNumber":192,"author":{"gitId":"vvidday"},"content":"        .should(\u0027be.visible\u0027)"},{"lineNumber":193,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":194,"author":{"gitId":"vvidday"},"content":"        .click();"},{"lineNumber":195,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":196,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message .body\u0027)"},{"lineNumber":197,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":198,"author":{"gitId":"vvidday"},"content":"        .should(\u0027not.be.visible\u0027);"},{"lineNumber":199,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":200,"author":{"gitId":"vvidday"},"content":"    cy.get(\u0027#tab-zoom .commit-message .hash\u0027)"},{"lineNumber":201,"author":{"gitId":"vvidday"},"content":"        .first()"},{"lineNumber":202,"author":{"gitId":"vvidday"},"content":"        .invoke(\u0027text\u0027)"},{"lineNumber":203,"author":{"gitId":"vvidday"},"content":"        // keep track of first commit by hash so test doesn\u0027t rely on correctness of sort"},{"lineNumber":204,"author":{"gitId":"vvidday"},"content":"        .then((hash) \u003d\u003e {"},{"lineNumber":205,"author":{"gitId":"vvidday"},"content":"          // change sort by"},{"lineNumber":206,"author":{"gitId":"vvidday"},"content":"          cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-by \u003e select\u0027)"},{"lineNumber":207,"author":{"gitId":"vvidday"},"content":"              .select(\u0027LoC\u0027)"},{"lineNumber":208,"author":{"gitId":"vvidday"},"content":"              .should(\u0027have.value\u0027, \u0027lineOfCode\u0027);"},{"lineNumber":209,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":210,"author":{"gitId":"vvidday"},"content":"          // message body should still be hidden"},{"lineNumber":211,"author":{"gitId":"vvidday"},"content":"          cy.contains(\u0027#tab-zoom .commit-message\u0027, hash)"},{"lineNumber":212,"author":{"gitId":"vvidday"},"content":"              .children(\u0027.body\u0027)"},{"lineNumber":213,"author":{"gitId":"vvidday"},"content":"              .should(\u0027not.be.visible\u0027);"},{"lineNumber":214,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":215,"author":{"gitId":"vvidday"},"content":"          // change sort order"},{"lineNumber":216,"author":{"gitId":"vvidday"},"content":"          cy.get(\u0027#tab-zoom \u003e .sorting \u003e .sort-order \u003e select:visible\u0027)"},{"lineNumber":217,"author":{"gitId":"vvidday"},"content":"              .select(\u0027Ascending\u0027)"},{"lineNumber":218,"author":{"gitId":"vvidday"},"content":"              .should(\u0027have.value\u0027, \u0027false\u0027);"},{"lineNumber":219,"author":{"gitId":"vvidday"},"content":""},{"lineNumber":220,"author":{"gitId":"vvidday"},"content":"          // message body should still be hidden"},{"lineNumber":221,"author":{"gitId":"vvidday"},"content":"          cy.contains(\u0027#tab-zoom .commit-message\u0027, hash)"},{"lineNumber":222,"author":{"gitId":"vvidday"},"content":"              .children(\u0027.body\u0027)"},{"lineNumber":223,"author":{"gitId":"vvidday"},"content":"              .should(\u0027not.be.visible\u0027);"},{"lineNumber":224,"author":{"gitId":"vvidday"},"content":"        });"},{"lineNumber":225,"author":{"gitId":"vvidday"},"content":"  });"},{"lineNumber":226,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vvidday":170,"-":56}},{"path":"frontend/package-lock.json","fileType":"json","isIgnored":true,"lines":[],"authorContributionMap":{"MarcusTXK":24934,"-":88}},{"path":"frontend/src/store/store.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { createStore } from \u0027vuex\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"export default createStore({"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  state: {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    tabAuthorshipInfo: {},"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    tabZoomInfo: {},"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    summaryDates: {},"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mergedGroups: [],"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    fileTypeColors: {},"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    loadingOverlayCount: 0,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    loadingOverlayMessage: \u0027\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    isTabActive: true,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  mutations: {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    updateTabZoomInfo(state, info) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      state.tabZoomInfo \u003d info;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    updateTabAuthorshipInfo(state, info) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      state.tabAuthorshipInfo \u003d info;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    updateSummaryDates(state, info) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      state.summaryDates \u003d info;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    updateFileTypeColors(state, info) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      state.fileTypeColors \u003d info;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    updateMergedGroup(state, info) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      state.mergedGroups \u003d info;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    incrementLoadingOverlayCount(state, increment) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      state.loadingOverlayCount +\u003d increment;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      if (state.loadingOverlayCount \u003d\u003d\u003d 0) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        state.loadingOverlayMessage \u003d \u0027Loading. Please wait...\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    updateLoadingOverlayMessage(state, message) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      state.loadingOverlayMessage \u003d message;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    updateTabState(state, isTabOpen) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      state.isTabActive \u003d isTabOpen;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      window.addHash(\u0027tabOpen\u0027, isTabOpen);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      if (!isTabOpen) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        window.removeHash(\u0027tabType\u0027);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      window.encodeHash();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":47,"author":{"gitId":"vvidday"},"content":"    toggleZoomCommitMessageBody(_, slice) {"},{"lineNumber":48,"author":{"gitId":"vvidday"},"content":"      if (slice.isOpen !\u003d\u003d undefined) {"},{"lineNumber":49,"author":{"gitId":"vvidday"},"content":"        slice.isOpen \u003d !slice.isOpen;"},{"lineNumber":50,"author":{"gitId":"vvidday"},"content":"      }"},{"lineNumber":51,"author":{"gitId":"vvidday"},"content":"    },"},{"lineNumber":52,"author":{"gitId":"vvidday"},"content":"    setAllZoomCommitMessageBody(_, { isOpen, commits }) {"},{"lineNumber":53,"author":{"gitId":"vvidday"},"content":"      commits.forEach((commit) \u003d\u003e {"},{"lineNumber":54,"author":{"gitId":"vvidday"},"content":"        commit.commitResults.forEach((slice) \u003d\u003e {"},{"lineNumber":55,"author":{"gitId":"vvidday"},"content":"          if (slice.isOpen !\u003d\u003d undefined) {"},{"lineNumber":56,"author":{"gitId":"vvidday"},"content":"            slice.isOpen \u003d isOpen;"},{"lineNumber":57,"author":{"gitId":"vvidday"},"content":"          }"},{"lineNumber":58,"author":{"gitId":"vvidday"},"content":"        });"},{"lineNumber":59,"author":{"gitId":"vvidday"},"content":"      });"},{"lineNumber":60,"author":{"gitId":"vvidday"},"content":"    },"},{"lineNumber":61,"author":{"gitId":"vvidday"},"content":"    updateTabAuthorshipFiles(state, files) {"},{"lineNumber":62,"author":{"gitId":"vvidday"},"content":"      state.tabAuthorshipInfo.files.splice(0, state.tabAuthorshipInfo.files.length, ...files);"},{"lineNumber":63,"author":{"gitId":"vvidday"},"content":"    },"},{"lineNumber":64,"author":{"gitId":"vvidday"},"content":"    toggleAuthorshipFileActiveProperty(_, file) {"},{"lineNumber":65,"author":{"gitId":"vvidday"},"content":"      file.active \u003d !file.active;"},{"lineNumber":66,"author":{"gitId":"vvidday"},"content":"      file.wasCodeLoaded \u003d file.wasCodeLoaded || file.active;"},{"lineNumber":67,"author":{"gitId":"vvidday"},"content":"    },"},{"lineNumber":68,"author":{"gitId":"vvidday"},"content":"    setAllAuthorshipFileActiveProperty(_, { isActive, files }) {"},{"lineNumber":69,"author":{"gitId":"vvidday"},"content":"      files.forEach((file) \u003d\u003e {"},{"lineNumber":70,"author":{"gitId":"vvidday"},"content":"        file.active \u003d isActive;"},{"lineNumber":71,"author":{"gitId":"vvidday"},"content":"        file.wasCodeLoaded \u003d file.wasCodeLoaded || file.active;"},{"lineNumber":72,"author":{"gitId":"vvidday"},"content":"      });"},{"lineNumber":73,"author":{"gitId":"vvidday"},"content":"    },"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  actions: {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    // Actions are called with dispatch"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    async incrementLoadingOverlayCountForceReload({ commit }, increment) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      commit(\u0027incrementLoadingOverlayCount\u0027, increment);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      await new Promise(window.requestAnimationFrame);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      await new Promise(window.requestAnimationFrame);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      // Needed as browsers render lazily by default"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      // https://stackoverflow.com/a/44146560"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":86,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"vvidday":27,"-":59}},{"path":"frontend/src/utils/api.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"ckcherry23"},"content":"import User from \u0027./user.ts\u0027;"},{"lineNumber":2,"author":{"gitId":"ckcherry23"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"// utility functions //"},{"lineNumber":4,"author":{"gitId":"-"},"content":"window.$ \u003d (id) \u003d\u003e document.getElementById(id);"},{"lineNumber":5,"author":{"gitId":"-"},"content":"window.enquery \u003d (key, val) \u003d\u003e `${key}\u003d${encodeURIComponent(val)}`;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"window.REPOSENSE_REPO_URL \u003d \u0027https://github.com/reposense/RepoSense\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"window.HOME_PAGE_URL \u003d \u0027https://reposense.org\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"window.UNSUPPORTED_INDICATOR \u003d \u0027UNSUPPORTED\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"window.DAY_IN_MS \u003d (1000 * 60 * 60 * 24);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"window.HASH_DELIMITER \u003d \u0027~\u0027;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"window.REPOS \u003d {};"},{"lineNumber":12,"author":{"gitId":"-"},"content":"window.hashParams \u003d {};"},{"lineNumber":13,"author":{"gitId":"-"},"content":"window.isMacintosh \u003d navigator.platform.includes(\u0027Mac\u0027);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"window.REPORT_ZIP \u003d null;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"const HASH_ANCHOR \u003d \u0027?\u0027;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"const REPORT_DIR \u003d \u0027.\u0027;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"window.deactivateAllOverlays \u003d function deactivateAllOverlays() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  document.querySelectorAll(\u0027.summary-chart__ramp .overlay\u0027)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      .forEach((x) \u003d\u003e {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        x.className \u003d \u0027overlay\u0027;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":24,"author":{"gitId":"-"},"content":"};"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"window.getDateStr \u003d function getDateStr(date) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  return (new Date(date)).toISOString().split(\u0027T\u0027)[0];"},{"lineNumber":28,"author":{"gitId":"-"},"content":"};"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"window.getHexToRGB \u003d function getHexToRGB(color) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  // to convert color from hex code to rgb format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  const arr \u003d /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  return arr.slice(1).map((val) \u003d\u003e parseInt(val, 16));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"};"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"window.getFontColor \u003d function getFontColor(color) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  const result \u003d window.getHexToRGB(color);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  const red \u003d result[0];"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  const green \u003d result[1];"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  const blue \u003d result[2];"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  const luminosity \u003d 0.2126 * red + 0.7152 * green + 0.0722 * blue; // per ITU-R BT.709"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"  return luminosity \u003c 120 ? \u0027#ffffff\u0027 : \u0027#000000\u0027;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"};"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"window.addHash \u003d function addHash(newKey, newVal) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  window.hashParams[newKey] \u003d newVal;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"};"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"window.removeHash \u003d function removeHash(key) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  delete window.hashParams[key];"},{"lineNumber":53,"author":{"gitId":"-"},"content":"};"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"window.encodeHash \u003d function encodeHash() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  const { hashParams } \u003d window;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"  const hash \u003d Object.keys(hashParams)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      .map((key) \u003d\u003e `${key}\u003d${encodeURIComponent(hashParams[key])}`)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      .join(\u0027\u0026\u0027);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"  const newUrl \u003d `${window.location.protocol}//${window.location.host}${window.location.pathname}${HASH_ANCHOR}${hash}`;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  window.history.replaceState(null, \u0027\u0027, newUrl);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"};"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"window.decodeHash \u003d function decodeHash() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  const hashParams \u003d {};"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  const hashIndex \u003d window.location.href.indexOf(HASH_ANCHOR);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  const parameterString \u003d hashIndex \u003d\u003d\u003d -1 ? \u0027\u0027 : window.location.href.slice(hashIndex + 1);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"  parameterString.split(\u0027\u0026\u0027)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"      .forEach((param) \u003d\u003e {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        const [key, val] \u003d param.split(\u0027\u003d\u0027);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (key) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          try {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            hashParams[key] \u003d decodeURIComponent(val);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          } catch (error) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            this.userUpdated \u003d false;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            this.isLoading \u003d false;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":84,"author":{"gitId":"-"},"content":"  window.hashParams \u003d hashParams;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"};"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"window.comparator \u003d (fn, sortingOption \u003d \u0027\u0027) \u003d\u003e function compare(a, b) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  let a1;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  let b1;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  if (sortingOption) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    a1 \u003d fn(a, sortingOption).toLowerCase"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        ? fn(a, sortingOption).toLowerCase()"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        : fn(a, sortingOption);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    b1 \u003d fn(b, sortingOption).toLowerCase"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        ? fn(b, sortingOption).toLowerCase()"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        : fn(b, sortingOption);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    a1 \u003d fn(a).toLowerCase ? fn(a).toLowerCase() : fn(a);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    b1 \u003d fn(b).toLowerCase ? fn(b).toLowerCase() : fn(b);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  if (a1 \u003d\u003d\u003d b1) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    return 0;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  } if (a1 \u003c b1) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    return -1;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  return 1;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"};"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"window.filterUnsupported \u003d function filterUnsupported(string) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  // checks for a pre-defined unsupported tag"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  return string.includes(window.UNSUPPORTED_INDICATOR) ? undefined : string;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"};"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"window.getAuthorLink \u003d function getAuthorLink(repoId, author) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  return window.filterUnsupported(`${window.DOMAIN_URL_MAP[domainName].BASE_URL}${author}`);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"};"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"window.getRepoLinkUnfiltered \u003d function getRepoLink(repoId) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  // abstraction for repo link construction. Not supposed to be used by other files"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  return window.DOMAIN_URL_MAP[domainName].REPO_URL"},{"lineNumber":123,"author":{"gitId":"-"},"content":"      .replace(\u0027$ORGANIZATION\u0027, window.REPOS[repoId].location.organization)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      .replace(\u0027$REPO_NAME\u0027, window.REPOS[repoId].location.repoName);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"};"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"window.getRepoLink \u003d function getRepoLink(repoId) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  return window.filterUnsupported(window.getRepoLinkUnfiltered(repoId));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"};"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"window.getBranchLink \u003d function getBranchLink(repoId, branch) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  return window.filterUnsupported(`${window.getRepoLinkUnfiltered(repoId)}${window.DOMAIN_URL_MAP[domainName].BRANCH}`"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      .replace(\u0027$BRANCH\u0027, branch));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"};"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"window.getCommitLink \u003d function getCommitLink(repoId, commitHash) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  return window.filterUnsupported(`${window.getRepoLinkUnfiltered(repoId)}${window.DOMAIN_URL_MAP[domainName]"},{"lineNumber":140,"author":{"gitId":"-"},"content":"      .COMMIT_PATH}`"},{"lineNumber":141,"author":{"gitId":"-"},"content":"      .replace(\u0027$COMMIT_HASH\u0027, commitHash));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"};"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"window.getBlameLink \u003d function getBlameLink(repoId, branch, filepath) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"  return window.filterUnsupported(`${window.getRepoLinkUnfiltered(repoId)}${window.DOMAIN_URL_MAP[domainName]"},{"lineNumber":147,"author":{"gitId":"-"},"content":"      .BLAME_PATH}`"},{"lineNumber":148,"author":{"gitId":"-"},"content":"      .replace(\u0027$BRANCH\u0027, branch)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      .replace(\u0027$FILE_PATH\u0027, filepath));"},{"lineNumber":150,"author":{"gitId":"-"},"content":"};"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"window.getHistoryLink \u003d function getHistoryLink(repoId, branch, filepath) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"  return window.filterUnsupported(`${window.getRepoLinkUnfiltered(repoId)}${window.DOMAIN_URL_MAP[domainName]"},{"lineNumber":155,"author":{"gitId":"-"},"content":"      .HISTORY_PATH}`"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      .replace(\u0027$BRANCH\u0027, branch)"},{"lineNumber":157,"author":{"gitId":"-"},"content":"      .replace(\u0027$FILE_PATH\u0027, filepath));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"};"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"window.getGroupName \u003d function getGroupName(group, filterGroupSelection) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"  switch (filterGroupSelection) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"  case \u0027groupByRepos\u0027:"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    return group[0].repoName;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  case \u0027groupByAuthors\u0027:"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    return group[0].name;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  default:"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    return \u0027\u0027;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"};"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"window.getAuthorDisplayName \u003d function getAuthorDisplayName(authorRepos) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  return authorRepos.reduce((displayName, user) \u003d\u003e ("},{"lineNumber":173,"author":{"gitId":"-"},"content":"    user.displayName \u003e displayName ? user.displayName : displayName"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  ), authorRepos[0].displayName);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"};"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"window.api \u003d {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  async loadJSON(fname) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    if (window.REPORT_ZIP) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"      const zipObject \u003d window.REPORT_ZIP.file(fname);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"      if (zipObject) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"          return JSON.parse(await zipObject.async(\u0027text\u0027));"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        } catch (e) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"          throw new Error(\u0027Uploaded JSON is invalid.\u0027);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Uploaded zip file is invalid.\u0027);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      const response \u003d await fetch(`${REPORT_DIR}/${fname}`);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      // Not directly returned in case response is not actually json."},{"lineNumber":194,"author":{"gitId":"-"},"content":"      const json \u003d await response.json();"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      return json;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    } catch (e) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"      throw new Error(`Unable to read ${fname}.`);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  async loadSummary() {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    window.REPOS \u003d {};"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    let data \u003d {};"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      data \u003d await this.loadJSON(\u0027summary.json\u0027);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    } catch (error) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"      if (error.message \u003d\u003d\u003d \u0027Unable to read summary.json.\u0027) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"      throw error;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    const { reportGeneratedTime, reportGenerationTime } \u003d data;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    window.sinceDate \u003d data.sinceDate;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    window.untilDate \u003d data.untilDate;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    window.repoSenseVersion \u003d data.repoSenseVersion;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    window.isSinceDateProvided \u003d data.isSinceDateProvided;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    window.isUntilDateProvided \u003d data.isUntilDateProvided;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    document.title \u003d data.reportTitle || document.title;"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"    const errorMessages \u003d {};"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    Object.entries(data.errorSet).forEach(([repoName, message]) \u003d\u003e {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      errorMessages[repoName] \u003d message;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    window.DOMAIN_URL_MAP \u003d data.supportedDomainUrlMap;"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    const names \u003d [];"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    data.repos.forEach((repo) \u003d\u003e {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"      const repoName \u003d `${repo.displayName}`;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"      window.REPOS[repoName] \u003d repo;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"      names.push(repoName);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    return {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      creationDate: reportGeneratedTime,"},{"lineNumber":234,"author":{"gitId":"-"},"content":"      reportGenerationTime,"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      errorMessages,"},{"lineNumber":236,"author":{"gitId":"-"},"content":"      names,"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"  async loadCommits(repoName) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    const folderName \u003d window.REPOS[repoName].outputFolderName;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    const commits \u003d await this.loadJSON(`${folderName}/commits.json`);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    const res \u003d [];"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    const repo \u003d window.REPOS[repoName];"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    Object.keys(commits.authorDisplayNameMap).forEach((author) \u003d\u003e {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      if (author) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        const obj \u003d {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"          name: author,"},{"lineNumber":250,"author":{"gitId":"-"},"content":"          repoId: repoName,"},{"lineNumber":251,"author":{"gitId":"-"},"content":"          variance: commits.authorContributionVariance[author],"},{"lineNumber":252,"author":{"gitId":"-"},"content":"          displayName: commits.authorDisplayNameMap[author],"},{"lineNumber":253,"author":{"gitId":"-"},"content":"          dailyCommits: commits.authorDailyContributionsMap[author],"},{"lineNumber":254,"author":{"gitId":"-"},"content":"          fileTypeContribution: commits.authorFileTypeContributionMap[author],"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"        this.setContributionOfCommitResultsAndInsertRepoId(obj.dailyCommits, obj.repoId);"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        const searchParams \u003d ["},{"lineNumber":260,"author":{"gitId":"-"},"content":"            repo.displayName,"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            obj.displayName, author,"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        ];"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"        obj.searchPath \u003d searchParams.join(\u0027_\u0027).toLowerCase();"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        obj.repoName \u003d `${repo.displayName}`;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        obj.location \u003d `${repo.location.location}`;"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"ckcherry23"},"content":"        const user \u003d new User(obj);"},{"lineNumber":269,"author":{"gitId":"ckcherry23"},"content":"        res.push(user);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    repo.commits \u003d commits;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    repo.users \u003d res;"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"    return res;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"  loadAuthorship(repoName) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    const folderName \u003d window.REPOS[repoName].outputFolderName;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    return this.loadJSON(`${folderName}/authorship.json`)"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        .then((files) \u003d\u003e {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"          window.REPOS[repoName].files \u003d files;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"          return files;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"  // calculate and set the contribution of each commitResult and insert repoId into commitResult,"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  // since not provided in json file"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  setContributionOfCommitResultsAndInsertRepoId(dailyCommits, repoId) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    dailyCommits.forEach((commit) \u003d\u003e {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"      commit.commitResults.forEach((result) \u003d\u003e {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        result.repoId \u003d repoId;"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        result.insertions \u003d Object.values(result.fileTypesAndContributionMap)"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            .reduce((acc, fileType) \u003d\u003e acc + fileType.insertions, 0);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        result.deletions \u003d Object.values(result.fileTypesAndContributionMap)"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            .reduce((acc, fileType) \u003d\u003e acc + fileType.deletions, 0);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":301,"author":{"gitId":"-"},"content":"};"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"export default \u0027test\u0027;"}],"authorContributionMap":{"ckcherry23":4,"-":299}},{"path":"src/main/java/reposense/authorship/analyzer/AnnotatorAnalyzer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.analyzer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Analyzes the authorship of a {@code FileInfo} using the given annotations on the file."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Only the lines with the format (START OF LINE) COMMENT_SYMBOL @@author ONE_STRING_WITH_NO_SPACE (END OF LINE)"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * will be analyzed. Otherwise, the line will be ignored and treated as normal lines."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * If the line is analyzed, and the string following the author tag is a valid git id, and there is no author config"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * file, then the code will be attributed to the author with that git id. Otherwise, the code will be attributed to"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * unknown author."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AnnotatorAnalyzer {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_TAG \u003d \"@@author\";"},{"lineNumber":24,"author":{"gitId":"sikai00"},"content":"    private static final String REGEX_AUTHOR_TAG_FORMAT \u003d \"@@author(\\\\s+.*)?\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String[][] COMMENT_FORMATS \u003d {"},{"lineNumber":27,"author":{"gitId":"sikai00"},"content":"            {\"//\", null},"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            {\"/\\\\*\", \"\\\\*/\"},"},{"lineNumber":29,"author":{"gitId":"sikai00"},"content":"            {\"#\", null},"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            {\"\u003c!--\", \"--\u003e\"},"},{"lineNumber":31,"author":{"gitId":"sikai00"},"content":"            {\"%\", null},"},{"lineNumber":32,"author":{"gitId":"parth-io"},"content":"            {\"\\\\[.*]:\\\\s*#\\\\s*\\\\(\", \"\\\\)\"},"},{"lineNumber":33,"author":{"gitId":"parth-io"},"content":"            {\"\u003c!---\", \"---\u003e\"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Pattern[] COMMENT_PATTERNS \u003d {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[0][0], COMMENT_FORMATS[0][1])),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[1][0], COMMENT_FORMATS[1][1])),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[2][0], COMMENT_FORMATS[2][1])),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[3][0], COMMENT_FORMATS[3][1])),"},{"lineNumber":41,"author":{"gitId":"parth-io"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[4][0], COMMENT_FORMATS[4][1])),"},{"lineNumber":42,"author":{"gitId":"parth-io"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[5][0], COMMENT_FORMATS[5][1])),"},{"lineNumber":43,"author":{"gitId":"parth-io"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[6][0], COMMENT_FORMATS[6][1]))"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Overrides the authorship information in {@code fileInfo} based on annotations given on the file."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param fileInfo FileInfo to be further analyzed with author annotations."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @param authorConfig AuthorConfiguration for current analysis."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void aggregateAnnotationAuthorInfo(FileInfo fileInfo, AuthorConfiguration authorConfig) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Optional\u003cAuthor\u003e currentAnnotatedAuthor \u003d Optional.empty();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Path filePath \u003d Paths.get(fileInfo.getPath());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        for (LineInfo lineInfo : fileInfo.getLines()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            String lineContent \u003d lineInfo.getContent();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            if (lineContent.contains(AUTHOR_TAG) \u0026\u0026 isValidCommentLine(lineContent)) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                Optional\u003cAuthor\u003e newAnnotatedAuthor \u003d findAuthorInLine(lineContent, authorConfig);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                boolean isEndOfAnnotatedSegment \u003d currentAnnotatedAuthor.isPresent() \u0026\u0026 !newAnnotatedAuthor.isPresent();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                boolean isUnknownAuthorSegment \u003d !currentAnnotatedAuthor.isPresent() \u0026\u0026 !newAnnotatedAuthor.isPresent();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"                if (isEndOfAnnotatedSegment) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                    lineInfo.setAuthor(currentAnnotatedAuthor.get());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    currentAnnotatedAuthor \u003d Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                } else if (isUnknownAuthorSegment) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    currentAnnotatedAuthor \u003d Optional.of(Author.UNKNOWN_AUTHOR);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                    currentAnnotatedAuthor \u003d newAnnotatedAuthor.filter(author -\u003e !author.isIgnoringFile(filePath));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            currentAnnotatedAuthor.ifPresent(lineInfo::setAuthor);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns an optional {@code Author} corresponding to the @@author tag in {@code line}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * It looks for the corresponding {@code Author} object in the {@code authorAliasMap} inside"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code authorConfig} and returns it. If an author config file is specified and the"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * author name found is not in it, then it returns {@code Author#UNKNOWN_AUTHOR} instead."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param line Line to be analyzed."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param authorConfig AuthorConfiguration for the analysis of this repo."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @return Optional {@code Author} found in the line."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static Optional\u003cAuthor\u003e findAuthorInLine(String line, AuthorConfiguration authorConfig) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Optional\u003cString\u003e optionalName \u003d extractAuthorName(line);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        optionalName.filter(name -\u003e !authorConfig.containsName(name) \u0026\u0026 !AuthorConfiguration.hasAuthorConfigFile())"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .ifPresent(name -\u003e authorConfig.addAuthor(new Author(name)));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return optionalName.map(name -\u003e authorConfig.getAuthor(name, name));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Extracts the {@link Author} name that follows the specific format from {@code line} at {@code formatIndex}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param line Line to extract the author\u0027s name from."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @return An optional string containing the author\u0027s name."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static Optional\u003cString\u003e extractAuthorName(String line) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return Optional.of(line)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                // gets component after AUTHOR_TAG"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .map(l -\u003e l.split(AUTHOR_TAG))"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .filter(array -\u003e array.length \u003e\u003d 2)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                // separates by end-comment format to obtain the author\u0027s name at the zeroth index"},{"lineNumber":106,"author":{"gitId":"sikai00"},"content":"                .map(array -\u003e COMMENT_FORMATS[getCommentTypeIndex(line)][1] !\u003d null"},{"lineNumber":107,"author":{"gitId":"sikai00"},"content":"                        ? array[1].trim().split(COMMENT_FORMATS[getCommentTypeIndex(line)][1])"},{"lineNumber":108,"author":{"gitId":"sikai00"},"content":"                        : new String[]{ array[1].trim() })"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .filter(array -\u003e array.length \u003e 0)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .map(array -\u003e array[0].trim())"},{"lineNumber":111,"author":{"gitId":"sikai00"},"content":"                // checks if the author name is not empty"},{"lineNumber":112,"author":{"gitId":"sikai00"},"content":"                .filter(trimmedParameters -\u003e !trimmedParameters.isEmpty());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Generates regex for valid comment formats in which author tag is found, with {@code REGEX_AUTHOR_TAG_FORMAT}"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * flanked by {@code commentStart} and {@code commentEnd}."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private static String generateCommentRegex(String commentStart, String commentEnd) {"},{"lineNumber":120,"author":{"gitId":"sikai00"},"content":"        if (commentEnd \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitId":"sikai00"},"content":"            return \"^[\\\\s]*\" + commentStart + \"[\\\\s]*\" + REGEX_AUTHOR_TAG_FORMAT + \"[\\\\s]*$\";"},{"lineNumber":122,"author":{"gitId":"sikai00"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return \"^[\\\\s]*\" + commentStart + \"[\\\\s]*\" + REGEX_AUTHOR_TAG_FORMAT + \"[\\\\s]*(\" + commentEnd + \")?[\\\\s]*$\";"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Returns the index in {@code COMMENT_FORMATS} representing the type of comment the @@author tag line is."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @param line The line to be checked"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @return The index of the comment syntax type if the comment pattern matches, -1 if no match could be found"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static int getCommentTypeIndex(String line) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c COMMENT_PATTERNS.length; i++) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            Pattern commentPattern \u003d COMMENT_PATTERNS[i];"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            Matcher matcher \u003d commentPattern.matcher(line);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            if (matcher.find()) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                return i;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return -1;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Returns true if line is one of the supported comment types."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * @param line Line to be checked."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @return True if line is a valid comment line."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private static boolean isValidCommentLine(String line) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return getCommentTypeIndex(line) \u003e\u003d 0;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"parth-io":5,"sikai00":12,"-":135}},{"path":"src/main/java/reposense/util/TimeUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":8,"author":{"gitId":"MarcusTXK"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.parser.ParseException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":14,"author":{"gitId":"MarcusTXK"},"content":"import reposense.system.LogsManager;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains time related functionalities."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class TimeUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static Long startTime;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String DATE_FORMAT_REGEX \u003d"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"^((0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[012])\\\\/(19|2[0-9])[0-9]{2})\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // \"uuuu\" is used for year since \"yyyy\" does not work with ResolverStyle.STRICT"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter CLI_ARGS_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu HH:mm:ss\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" cannot be later than \\\"Until Date\\\".\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" must not be later than today\u0027s date.\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"MarcusTXK"},"content":"    private static final String EARLIEST_VALID_DATE \u003d \"1970-01-01T00:00:00\";"},{"lineNumber":32,"author":{"gitId":"MarcusTXK"},"content":"    private static final String LATEST_VALID_DATE \u003d \"2099-12-31T23:59:59\";"},{"lineNumber":33,"author":{"gitId":"MarcusTXK"},"content":"    private static final String MESSAGE_SINCE_DATE_EARLIER_THAN_EARLIEST_VALID_DATE \u003d"},{"lineNumber":34,"author":{"gitId":"MarcusTXK"},"content":"            \"Date of %s must not be earlier than \""},{"lineNumber":35,"author":{"gitId":"MarcusTXK"},"content":"            + String.format(\"%s, resetting it to earliest valid date\", EARLIEST_VALID_DATE);"},{"lineNumber":36,"author":{"gitId":"MarcusTXK"},"content":"    private static final String MESSAGE_UNTIL_DATE_LATER_THAN_LATEST_VALID_DATE \u003d"},{"lineNumber":37,"author":{"gitId":"MarcusTXK"},"content":"            \"Date of %s must not be later than \""},{"lineNumber":38,"author":{"gitId":"MarcusTXK"},"content":"            + String.format(\"%s, resetting it to latest valid date\", LATEST_VALID_DATE);"},{"lineNumber":39,"author":{"gitId":"MarcusTXK"},"content":""},{"lineNumber":40,"author":{"gitId":"MarcusTXK"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(TimeUtil.class);"},{"lineNumber":41,"author":{"gitId":"MarcusTXK"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code startTime} to be the current time."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static void startTimer() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        startTime \u003d System.nanoTime();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static String getElapsedTime() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        long endTime \u003d System.nanoTime();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        double elapsedTime \u003d (double) (endTime - startTime) / 1_000_000_000.0;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        int elapsedHours \u003d (int) elapsedTime / 3600;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        int elapsedMinutes \u003d (int) (elapsedTime % 3600) / 60;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        double elapsedSeconds \u003d elapsedTime % 60;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String formattedElapsedTime \u003d \"\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (elapsedHours \u003e 0) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d hour(s)\", elapsedHours);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (elapsedMinutes \u003e 0) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d minute(s)\", elapsedMinutes);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        formattedElapsedTime +\u003d String.format(\" %.2f second(s)\", elapsedSeconds);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return formattedElapsedTime;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * with an additional explanatory string."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static String getElapsedTimeMessage() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return \"Elapsed processing time:\" + getElapsedTime();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"MarcusTXK"},"content":"     * Returns a valid {@link LocalDateTime} that is set to midnight for the given {@code sinceDate}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static LocalDateTime getSinceDate(LocalDateTime sinceDate) {"},{"lineNumber":84,"author":{"gitId":"MarcusTXK"},"content":"        return getValidDate(sinceDate).withHour(0).withMinute(0).withSecond(0);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"MarcusTXK"},"content":"     * Returns a valid {@link LocalDateTime} that is set to 23:59:59 for the given {@code untilDate}."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static LocalDateTime getUntilDate(LocalDateTime untilDate) {"},{"lineNumber":91,"author":{"gitId":"MarcusTXK"},"content":"        return getValidDate(untilDate).withHour(23).withMinute(59).withSecond(59);"},{"lineNumber":92,"author":{"gitId":"MarcusTXK"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"MarcusTXK"},"content":""},{"lineNumber":94,"author":{"gitId":"MarcusTXK"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"MarcusTXK"},"content":"     * Returns a valid {@link LocalDateTime} that is within {@value EARLIEST_VALID_DATE} and {@value LATEST_VALID_DATE}."},{"lineNumber":96,"author":{"gitId":"MarcusTXK"},"content":"     * Resets {@code date} passed the closest valid date if it exceeds the date range."},{"lineNumber":97,"author":{"gitId":"MarcusTXK"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"MarcusTXK"},"content":"    public static LocalDateTime getValidDate(LocalDateTime date) {"},{"lineNumber":99,"author":{"gitId":"MarcusTXK"},"content":"        if (date.isBefore(LocalDateTime.parse(EARLIEST_VALID_DATE))) {"},{"lineNumber":100,"author":{"gitId":"MarcusTXK"},"content":"            logger.warning(String.format(MESSAGE_SINCE_DATE_EARLIER_THAN_EARLIEST_VALID_DATE, date));"},{"lineNumber":101,"author":{"gitId":"MarcusTXK"},"content":"            return LocalDateTime.parse(EARLIEST_VALID_DATE);"},{"lineNumber":102,"author":{"gitId":"MarcusTXK"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"MarcusTXK"},"content":""},{"lineNumber":104,"author":{"gitId":"MarcusTXK"},"content":"        if (date.isAfter(LocalDateTime.parse(LATEST_VALID_DATE))) {"},{"lineNumber":105,"author":{"gitId":"MarcusTXK"},"content":"            logger.warning(String.format(MESSAGE_UNTIL_DATE_LATER_THAN_LATEST_VALID_DATE, date));"},{"lineNumber":106,"author":{"gitId":"MarcusTXK"},"content":"            return LocalDateTime.parse(LATEST_VALID_DATE);"},{"lineNumber":107,"author":{"gitId":"MarcusTXK"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"MarcusTXK"},"content":"        return date;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns a {@link LocalDateTime} that is one month before {@code cliUntilDate} (if present) or one month"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * before report generation date otherwise."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDateMinusAMonth(LocalDateTime cliUntilDate) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return getSinceDate(cliUntilDate.minusMonths(1));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Returns a {@link LocalDateTime} that is {@code numOfDays} before {@code cliUntilDate} (if present) or one month"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * before report generation date otherwise."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDateMinusNDays(LocalDateTime cliUntilDate, int numOfDays) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return getSinceDate(cliUntilDate.minusDays(numOfDays));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Returns a {@link LocalDateTime} that is {@code numOfDays} after {@code cliSinceDate} (if present)."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static LocalDateTime getDatePlusNDays(LocalDateTime cliSinceDate, int numOfDays) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return getUntilDate(cliSinceDate.plusDays(numOfDays));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Returns current date with time set to 23:59:59. The time zone is adjusted to the given {@code zoneId}."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static LocalDateTime getCurrentDate(ZoneId zoneId) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return LocalDateTime.now(zoneId).withHour(23).withMinute(59).withSecond(59).withNano(0);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Returns the {@link LocalDateTime} of {@code ARBITRARY_FIRST_COMMIT_DATE} in the UTC time zone."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateLocal() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return SinceDateArgumentType.getArbitraryFirstCommitDateLocal();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Returns the {@link LocalDateTime} of {@code ARBITRARY_FIRST_COMMIT_DATE} adjusted for the time zone based on"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * {@code toZoneId}."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateConverted(ZoneId toZoneId) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return SinceDateArgumentType.getArbitraryFirstCommitDateConverted(toZoneId);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Checks whether the given {@code dateTime} is the {@code ARBITRARY_FIRST_COMMIT_DATE} in UTC time."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public static boolean isEqualToArbitraryFirstDateUtc(LocalDateTime dateTime) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return dateTime.equals(getArbitraryFirstCommitDateLocal());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Checks whether the given {@code dateTime} is the {@code ARBITRARY_FIRST_COMMIT_DATE} in the time zone given by"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * {@code zoneId}."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public static boolean isEqualToArbitraryFirstDateConverted(LocalDateTime dateTime, ZoneId zoneId) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return dateTime.equals(getArbitraryFirstCommitDateConverted(zoneId));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Verifies that {@code sinceDate} is earlier than {@code untilDate}."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code sinceDate} supplied is later than {@code untilDate}."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public static void verifyDatesRangeIsCorrect(LocalDateTime sinceDate, LocalDateTime untilDate)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        if (sinceDate.compareTo(untilDate) \u003e 0) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Verifies that {@code sinceDate} is no later than the date of report generation, given by {@code currentDate}."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code sinceDate} supplied is later than date of report generation."},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public static void verifySinceDateIsValid(LocalDateTime sinceDate, LocalDateTime currentDate)"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        if (sinceDate.compareTo(currentDate) \u003e 0) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * Extracts the first substring of {@code date} string that matches the {@code DATE_FORMAT_REGEX}."},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public static String extractDate(String date) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Matcher matcher \u003d Pattern.compile(DATE_FORMAT_REGEX).matcher(date);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        String extractedDate \u003d date;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        if (matcher.find()) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            extractedDate \u003d matcher.group(1);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return extractedDate;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Parses the given {@code date} string as a {@link LocalDateTime} based on the {@code CLI_ARGS_DATE_FORMAT}."},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Uses {@link ResolverStyle#STRICT} to avoid unexpected dates like 31/02/2020."},{"lineNumber":210,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * @throws java.text.ParseException if date cannot be parsed by the required format."},{"lineNumber":212,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    public static LocalDateTime parseDate(String date) throws java.text.ParseException {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return LocalDateTime.parse(date, CLI_ARGS_DATE_FORMAT.withResolverStyle(ResolverStyle.STRICT));"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            throw new java.text.ParseException(String.format("},{"lineNumber":218,"author":{"gitId":"-"},"content":"                    \"Exception message: %s\\n\", e.getMessage()), e.getErrorIndex());"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MarcusTXK":34,"-":187}},{"path":"src/systemtest/java/reposense/LocalRepoSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterAll;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.parallel.Execution;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.parallel.ExecutionMode;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.SupportedDomainUrlMap;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.SystemTestUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"@Execution(ExecutionMode.SAME_THREAD)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LocalRepoSystemTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_ONE_PARENT \u003d \"parent1\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_TWO_PARENT \u003d \"parent2\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_ONE \u003d \"parent1/test-repo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String LOCAL_DIRECTORY_TWO \u003d \"parent2/test-repo\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"sikai00"},"content":"    private static final String LAST_COMMIT_DATE \u003d \"31/01/2023\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String OUTPUT_DIRECTORY \u003d \"local-test\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String TIME_ZONE \u003d \"UTC+08\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path REPORT_DIRECTORY_PATH \u003d Paths.get(OUTPUT_DIRECTORY, \"reposense-report\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @BeforeAll"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static void setupLocalRepos() throws Exception {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        TestRepoCloner.clone(new RepoConfiguration(new RepoLocation(\"https://github.com/reposense/testrepo-Alpha\")),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                Paths.get(\".\"), LOCAL_DIRECTORY_ONE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        TestRepoCloner.clone(new RepoConfiguration(new RepoLocation(\"https://github.com/reposense/testrepo-Alpha\")),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                Paths.get(\".\"), LOCAL_DIRECTORY_TWO);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setupLocalTest() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        SupportedDomainUrlMap.clearAccessedSet();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void deleteReportDirectory() throws Exception {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @AfterAll"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static void deleteClonedLocalRepos() throws Exception {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(LOCAL_DIRECTORY_ONE_PARENT);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(LOCAL_DIRECTORY_TWO_PARENT);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void testSameFinalDirectory() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder()"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .addRepos(LOCAL_DIRECTORY_ONE, LOCAL_DIRECTORY_TWO)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .addUntilDate(LAST_COMMIT_DATE)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .addOutput(Paths.get(OUTPUT_DIRECTORY))"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .addTimezone(TIME_ZONE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, \"LocalRepoSystemTest/testSameFinalDirectory\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void testRelativePathing() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String relativePathForTesting \u003d \"parent1/../parent1/./test-repo\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder()"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .addRepos(relativePathForTesting)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .addUntilDate(LAST_COMMIT_DATE)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .addOutput(Paths.get(OUTPUT_DIRECTORY))"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .addTimezone(TIME_ZONE);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        runTest(inputBuilder, \"LocalRepoSystemTest/testRelativePathing\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Runs RepoSense with {@code inputBuilder} and tests it against the expected"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * files in {@code expectedFilesPathString}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void runTest(InputBuilder inputBuilder, String expectedFilesPathString) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        RepoSense.main(translateCommandline(inputBuilder.build()));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Path expectedFilesPath \u003d loadResource(getClass(), expectedFilesPathString);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        SystemTestUtil.verifyReportJsonFiles(expectedFilesPath, REPORT_DIRECTORY_PATH);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sikai00":1,"-":99}},{"path":"src/test/java/reposense/authorship/AnnotatorAnalyzerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.model.Author.UNKNOWN_AUTHOR;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Month;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.analyzer.AnnotatorAnalyzer;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AnnotatorAnalyzerTest extends GitTestTemplate {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final LocalDateTime SINCE_DATE \u003d TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 8);"},{"lineNumber":25,"author":{"gitId":"sikai00"},"content":"    private static final LocalDateTime UNTIL_DATE \u003d TestUtil.getUntilDate(2023, Month.JANUARY.getValue(), 31);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST \u003d {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":30,"author":{"gitId":"sikai00"},"content":"            UNCONVENTIONAL_AUTHOR, UNCONVENTIONAL_AUTHOR, UNCONVENTIONAL_AUTHOR, UNCONVENTIONAL_AUTHOR,"},{"lineNumber":31,"author":{"gitId":"sikai00"},"content":"            UNCONVENTIONAL_AUTHOR,"},{"lineNumber":32,"author":{"gitId":"sikai00"},"content":"            FAKE_AUTHOR,"},{"lineNumber":33,"author":{"gitId":"sikai00"},"content":"            WHITESPACE_AUTHOR, WHITESPACE_AUTHOR, WHITESPACE_AUTHOR,"},{"lineNumber":34,"author":{"gitId":"sikai00"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_DISOWN_CODE_TEST \u003d {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"},{"lineNumber":41,"author":{"gitId":"sikai00"},"content":"            FAKE_AUTHOR,"},{"lineNumber":42,"author":{"gitId":"sikai00"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"},{"lineNumber":43,"author":{"gitId":"sikai00"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private RepoConfiguration config;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        config \u003d configs.get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        config.setSinceDate(SINCE_DATE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        config.setUntilDate(UNTIL_DATE);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(AuthorConfiguration.DEFAULT_HAS_AUTHOR_CONFIG_FILE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        super.after();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(AuthorConfiguration.DEFAULT_HAS_AUTHOR_CONFIG_FILE);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void analyzeAnnotation_authorNamePresentInConfig_overrideAuthorship() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e(Arrays.asList(FAKE_AUTHOR)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void analyzeAnnotation_authorNameNotInConfigAndNoAuthorConfigFile_acceptTaggedAuthor() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e(Arrays.asList(FAKE_AUTHOR)));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void analyzeAnnotation_authorNameNotInConfigAndHaveAuthorConfigFile_disownCode() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e(Arrays.asList(FAKE_AUTHOR)));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(true);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_DISOWN_CODE_TEST));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern0_returnAuthorName() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        int index \u003d 0;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        line \u003d \"//@@author fakeAuthor\";"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        line \u003d \"// @@author fakeauthor  \";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        line \u003d \"  //  @@author   fake-4u-th0r  \";"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":103,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":104,"author":{"gitId":"sikai00"},"content":"        line \u003d \"// @@author   fake 4u-th0r\";"},{"lineNumber":105,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":106,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake 4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":107,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":108,"author":{"gitId":"sikai00"},"content":"        line \u003d \"// @@author   --fake4u-th0r--\";"},{"lineNumber":109,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":110,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"--fake4u-th0r--\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":111,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":112,"author":{"gitId":"sikai00"},"content":"        line \u003d \"// @@author   --fake--  __4u-th0r--   \";"},{"lineNumber":113,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":114,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"--fake--  __4u-th0r--\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern1_returnAuthorName() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        int index \u003d 1;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author fakeAuthor\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        line \u003d \"/* @@author fakeauthor  \";"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        line \u003d \"  /*  @@author   fake-4u-th0r  \";"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author fakeAuthor*/\";"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        line \u003d \"/* @@author fakeauthor */\";"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        line \u003d \"  /*  @@author   fake-4u-th0r  */  \";"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":144,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":145,"author":{"gitId":"sikai00"},"content":"        line \u003d \"/*  @@author   fake  4u-th0r  */\";"},{"lineNumber":146,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":147,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake  4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":148,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":149,"author":{"gitId":"sikai00"},"content":"        line \u003d \"/*  @@author   --_fake4u-th0r  */\";"},{"lineNumber":150,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":151,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"--_fake4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern2_returnAuthorName() {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        int index \u003d 2;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        line \u003d \"#@@author fakeAuthor\";"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        line \u003d \"# @@author fakeauthor  \";"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        line \u003d \"  #  @@author   fake-4u-th0r  \";"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":169,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":170,"author":{"gitId":"sikai00"},"content":"        line \u003d \"#  @@author   fake  4u-th0r\";"},{"lineNumber":171,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":172,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake  4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":173,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":174,"author":{"gitId":"sikai00"},"content":"        line \u003d \"#  @@author   fake -4u-th0r     \";"},{"lineNumber":175,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":176,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake -4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern3_returnAuthorName() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        int index \u003d 3;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!--@@author fakeAuthor\";"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!-- @@author fakeauthor  \";"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"sikai00"},"content":"        line \u003d \"\u003c!-- @@author fake  author  \";"},{"lineNumber":192,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":193,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake  author\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":194,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        line \u003d \"  \u003c!--  @@author   fake-4u-th0r  \";"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!--@@author fakeAuthor--\u003e\";"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!-- @@author fakeauthor --\u003e\";"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        line \u003d \"  \u003c!--  @@author   fake-4u-th0r  --\u003e  \";"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":210,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":211,"author":{"gitId":"sikai00"},"content":"        line \u003d \"  \u003c!--  @@author   fake-4u-th0r--\u003e  --\u003e  \";"},{"lineNumber":212,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":213,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":214,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":215,"author":{"gitId":"sikai00"},"content":"        line \u003d \"  \u003c!--  @@author   fake-4u-th0r---\u003e  --\u003e  \";"},{"lineNumber":216,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":217,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"fake-4u-th0r-\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern4_returnAuthorName() {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        int index \u003d 4;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        line \u003d \"%@@author fakeAuthor\";"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        line \u003d \"% @@author fakeauthor  \";"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        line \u003d \" % @@author fake-4u-th0r\";"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":235,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        line \u003d \"  %  @@author   fake-4u-th0r  \";"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":239,"author":{"gitId":"sikai00"},"content":""},{"lineNumber":240,"author":{"gitId":"sikai00"},"content":"        line \u003d \"  %  @@author   *()fake-4u-th0r-- %%  \";"},{"lineNumber":241,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":242,"author":{"gitId":"sikai00"},"content":"        Assertions.assertEquals(\"*()fake-4u-th0r-- %%\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"parth-io"},"content":"    @Test"},{"lineNumber":246,"author":{"gitId":"parth-io"},"content":"    public void extractAuthorName_matchMarkdownCommentPattern5_returnAuthorName() {"},{"lineNumber":247,"author":{"gitId":"parth-io"},"content":"        int index \u003d 5;"},{"lineNumber":248,"author":{"gitId":"parth-io"},"content":"        String line;"},{"lineNumber":249,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":250,"author":{"gitId":"parth-io"},"content":"        line \u003d \"[//]:#(@@author fakeAuthor\";"},{"lineNumber":251,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":252,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":253,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":254,"author":{"gitId":"parth-io"},"content":"        line \u003d \"[//]: # (@@author fakeAuthor\";"},{"lineNumber":255,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":256,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":257,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":258,"author":{"gitId":"parth-io"},"content":"        line \u003d \"[//]: # (@@author fakeauthor   \";"},{"lineNumber":259,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":260,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":261,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":262,"author":{"gitId":"parth-io"},"content":"        line \u003d \"  [//]:   #   (@@author    fake-4u-th0r  \";"},{"lineNumber":263,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":264,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":265,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":266,"author":{"gitId":"parth-io"},"content":"        line \u003d \"[//]: # (@@author fakeAuthor)\";"},{"lineNumber":267,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":268,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":269,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":270,"author":{"gitId":"parth-io"},"content":"        line \u003d \"[//]: # (@@author fakeauthor   )\";"},{"lineNumber":271,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":272,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":273,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":274,"author":{"gitId":"parth-io"},"content":"        line \u003d \"   [//]:   #   (@@author fake-4u-th0r   )  \";"},{"lineNumber":275,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":276,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":277,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":278,"author":{"gitId":"parth-io"},"content":"        line \u003d \"   [fake inner text 123+%^\u0026!@#$(`]:   #   (@@author fake-4u-th0r   )  \";"},{"lineNumber":279,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":280,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":281,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":282,"author":{"gitId":"parth-io"},"content":"        line \u003d \"   [    space   separated   inner   text   ]:   #   (  @@author fake-4u-th0r   )  \";"},{"lineNumber":283,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":284,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":285,"author":{"gitId":"parth-io"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":287,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":288,"author":{"gitId":"parth-io"},"content":"    @Test"},{"lineNumber":289,"author":{"gitId":"parth-io"},"content":"    public void extractAuthorName_matchCommentPattern6_returnAuthorName() {"},{"lineNumber":290,"author":{"gitId":"parth-io"},"content":"        int index \u003d 6;"},{"lineNumber":291,"author":{"gitId":"parth-io"},"content":"        String line;"},{"lineNumber":292,"author":{"gitId":"parth-io"},"content":"        line \u003d \"\u003c!---@@author fakeAuthor\";"},{"lineNumber":293,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":294,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":295,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":296,"author":{"gitId":"parth-io"},"content":"        line \u003d \"\u003c!--- @@author fakeauthor  \";"},{"lineNumber":297,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":298,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":299,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":300,"author":{"gitId":"parth-io"},"content":"        line \u003d \"  \u003c!---  @@author   fake-4u-th0r  \";"},{"lineNumber":301,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":302,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":303,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":304,"author":{"gitId":"parth-io"},"content":"        line \u003d \"\u003c!---@@author fakeAuthor---\u003e\";"},{"lineNumber":305,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":306,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":307,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":308,"author":{"gitId":"parth-io"},"content":"        line \u003d \"\u003c!--- @@author fakeauthor ---\u003e\";"},{"lineNumber":309,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":310,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":311,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":312,"author":{"gitId":"parth-io"},"content":"        line \u003d \"  \u003c!---  @@author   fake-4u-th0r  ---\u003e  \";"},{"lineNumber":313,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":314,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    public void extractAuthorName_noAuthorName_returnNull() {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"        line \u003d \"//@@author\";"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author \";"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"        line \u003d \"/* @@author*/ \";"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":332,"author":{"gitId":"-"},"content":""},{"lineNumber":333,"author":{"gitId":"-"},"content":"        line \u003d \"#@@author \";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"        line \u003d \"  \u003c!--@@author --\u003e \";"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"        line \u003d \"% @@author \";"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"parth-io"},"content":"        line \u003d \"[//]: # (@@author)\";"},{"lineNumber":346,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(5, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"parth-io"},"content":"        line \u003d \"  \u003c!---@@author ---\u003e \";"},{"lineNumber":350,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(6, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    public void getCommentType_matchCommentPattern0_success() {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"//@@author fakeAuthor\"));"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"// @@author fakeAuthor\"));"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"   // @@author fakeAuthor\"));"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"   //    @@author  fakeAuthor     \"));"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    public void getCommentType_matchCommentPattern1_success() {"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"/*@@author fakeAuthor\"));"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"/* @@author fakeAuthor\"));"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"   /* @@author fakeAuthor*/\"));"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"   /*  @@author  fakeAuthor  */  \"));"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    public void getCommentType_matchCommentPattern2_success() {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"#@@author fakeAuthor\"));"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"# @@author fakeAuthor\"));"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"   # @@author fakeAuthor\"));"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"   #    @@author  fakeAuthor     \"));"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    public void getCommentType_matchCommentPattern3_success() {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!--@@author fakeAuthor\"));"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!-- @@author fakeAuthor\"));"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"   \u003c!-- @@author fakeAuthor--\u003e\"));"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"   \u003c!--  @@author  fakeAuthor  --\u003e  \"));"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    public void getCommentType_matchCommentPattern4_success() {"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"%@@author fakeAuthor\"));"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"% @@author fakeAuthor\"));"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"   % @@author fakeAuthor\"));"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"   %    @@author  fakeAuthor     \"));"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"parth-io"},"content":"    @Test"},{"lineNumber":395,"author":{"gitId":"parth-io"},"content":"    public void getCommentType_matchCommentPattern5_success() {"},{"lineNumber":396,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(5, AnnotatorAnalyzer.getCommentTypeIndex(\"[//]:#(@@author fakeAuthor)\"));"},{"lineNumber":397,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(5, AnnotatorAnalyzer.getCommentTypeIndex(\"[//]: # (@@author fakeAuthor)\"));"},{"lineNumber":398,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(5, AnnotatorAnalyzer.getCommentTypeIndex(\"   [//]:  #  (@@author fakeAuthor)  \"));"},{"lineNumber":399,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(5, AnnotatorAnalyzer.getCommentTypeIndex(\"   [//]:  #  (  @@author   fakeAuthor  )  \"));"},{"lineNumber":400,"author":{"gitId":"parth-io"},"content":"    }"},{"lineNumber":401,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":402,"author":{"gitId":"parth-io"},"content":"    @Test"},{"lineNumber":403,"author":{"gitId":"parth-io"},"content":"    public void getCommentType_matchCommentPattern6_success() {"},{"lineNumber":404,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(6, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!---@@author fakeAuthor\"));"},{"lineNumber":405,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(6, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!--- @@author fakeAuthor\"));"},{"lineNumber":406,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(6, AnnotatorAnalyzer.getCommentTypeIndex(\"   \u003c!--- @@author fakeAuthor---\u003e\"));"},{"lineNumber":407,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(6, AnnotatorAnalyzer.getCommentTypeIndex(\"   \u003c!---  @@author  fakeAuthor  ---\u003e  \"));"},{"lineNumber":408,"author":{"gitId":"parth-io"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    public void getCommentType_invalidCommentPattern_returnMinus1() {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"@@author fakeAuthor\"));"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"/@@author fakeAuthor\"));"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"@@author fakeAuthor */\"));"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"# something @@author fakeAuthor\"));"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"something % @@author fakeAuthor\"));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!--@@authorfakeAuthor--\u003e\"));"},{"lineNumber":418,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":419,"author":{"gitId":"parth-io"},"content":""},{"lineNumber":420,"author":{"gitId":"parth-io"},"content":"    @Test"},{"lineNumber":421,"author":{"gitId":"parth-io"},"content":"    public void getCommentType_invalidMarkdownCommentPattern_returnMinus1() {"},{"lineNumber":422,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"@@author fakeAuthor\"));"},{"lineNumber":423,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"/@@author fakeAuthor\"));"},{"lineNumber":424,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"@@author fakeAuthor */\"));"},{"lineNumber":425,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"# something @@author fakeAuthor\"));"},{"lineNumber":426,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"something % @@author fakeAuthor\"));"},{"lineNumber":427,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!--@@authorfakeAuthor--\u003e\"));"},{"lineNumber":428,"author":{"gitId":"parth-io"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"[//]: # (@@authorfakeAuthor)\"));"},{"lineNumber":429,"author":{"gitId":"parth-io"},"content":"    }"},{"lineNumber":430,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"parth-io":101,"sikai00":54,"-":275}},{"path":"src/test/java/reposense/git/GitLogTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":16,"author":{"gitId":"MarcusTXK"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class GitLogTest extends GitTestTemplate {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private RepoConfiguration config;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        config \u003d configs.get();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void gitLog_existingFormats_hasContent() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Assertions.assertFalse(content.isEmpty());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void gitLog_nonExistingFormats_noContent() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"py\")));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void gitLog_includeAllJavaFiles_success() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"java\")));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":44,"author":{"gitId":"sikai00"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(12, content));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void gitLog_fakeAuthorNameOnly_success() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Author fakeAuthorName \u003d new Author(FAKE_AUTHOR_NAME);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, fakeAuthorName);"},{"lineNumber":52,"author":{"gitId":"sikai00"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(8, content));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void gitLog_authorNameIncorrectCase_success() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Author fakeAuthorName \u003d new Author(FAKE_AUTHOR_NAME.toUpperCase());"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, fakeAuthorName);"},{"lineNumber":60,"author":{"gitId":"sikai00"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(8, content));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void gitLog_fakeAuthorNameWithSpecialCharacter_success() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Author fakeAuthorWithSpecialCharacter \u003d new Author(FAKE_AUTHOR_NAME.replace(\"fake\", \"#()!\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, fakeAuthorWithSpecialCharacter);"},{"lineNumber":68,"author":{"gitId":"sikai00"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(8, content));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void gitLog_includeAllJavaFilesAuthorIgnoreMovedFile_success() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"java\")));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Author ignoreMovedFileAuthor \u003d getAlphaAllAliasAuthor();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ignoreMovedFileAuthor.setIgnoreGlobList(Collections.singletonList(\"**movedFile.java\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, ignoreMovedFileAuthor);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(4, content));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void gitLog_authorIgnoreAllJavaFiles_success() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"java\")));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Author ignoreAllJavaFilesAuthor \u003d getAlphaAllAliasAuthor();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ignoreAllJavaFilesAuthor.setIgnoreGlobList(Collections.singletonList(\"*.java\"));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, ignoreAllJavaFilesAuthor);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(0, content));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void gitLog_validIgnoreGlobs_success() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Author author \u003d getAlphaAllAliasAuthor();"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"annotationTest.java\"));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(6, content));"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"**Test**\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(5, content));"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"README.md\"));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(6, content));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"**.java\"));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(1, content));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"./newPos\"));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(6, content));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void gitLog_invalidIgnoreGlobs_filtered() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Author author \u003d getAlphaAllAliasAuthor();"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"../testrepo-Alpha\"));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"../*.java\"));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"/newPos\"));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"..\"));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void gitLog_authorWithAllCharactersRegexAlias_emptyResult() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Author authorWithAllCharactersRegexAlias \u003d new Author(\"none\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        authorWithAllCharactersRegexAlias.setAuthorAliases(Collections.singletonList(\".*\"));"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, authorWithAllCharactersRegexAlias);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void gitLog_sinceDateInFuture_noContent() {"},{"lineNumber":148,"author":{"gitId":"MarcusTXK"},"content":"        LocalDateTime date \u003d TimeUtil.getSinceDate("},{"lineNumber":149,"author":{"gitId":"MarcusTXK"},"content":"                LocalDateTime.of(2050, Month.JANUARY, 1, 0, 0));"},{"lineNumber":150,"author":{"gitId":"MarcusTXK"},"content":"        config.setSinceDate(date);"},{"lineNumber":151,"author":{"gitId":"MarcusTXK"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":152,"author":{"gitId":"MarcusTXK"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":153,"author":{"gitId":"MarcusTXK"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"MarcusTXK"},"content":""},{"lineNumber":155,"author":{"gitId":"MarcusTXK"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"MarcusTXK"},"content":"    public void gitLog_invalidSinceDateInFuture_noContent() {"},{"lineNumber":157,"author":{"gitId":"MarcusTXK"},"content":"        LocalDateTime date \u003d TimeUtil.getSinceDate("},{"lineNumber":158,"author":{"gitId":"MarcusTXK"},"content":"                LocalDateTime.of(2100, Month.JANUARY, 1, 0, 0));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        config.setSinceDate(date);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void gitLog_untilDateBeforeAnyCommit_noContent() {"},{"lineNumber":166,"author":{"gitId":"MarcusTXK"},"content":"        LocalDateTime date \u003d TimeUtil.getUntilDate("},{"lineNumber":167,"author":{"gitId":"MarcusTXK"},"content":"                LocalDateTime.of(2010, Month.JANUARY, 1, 0, 0));"},{"lineNumber":168,"author":{"gitId":"MarcusTXK"},"content":"        config.setUntilDate(date);"},{"lineNumber":169,"author":{"gitId":"MarcusTXK"},"content":"        config.setSinceDate(null);"},{"lineNumber":170,"author":{"gitId":"MarcusTXK"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":171,"author":{"gitId":"MarcusTXK"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":172,"author":{"gitId":"MarcusTXK"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"MarcusTXK"},"content":""},{"lineNumber":174,"author":{"gitId":"MarcusTXK"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"MarcusTXK"},"content":"    public void gitLog_invalidUntilDateBeforeAnyCommit_noContent() {"},{"lineNumber":176,"author":{"gitId":"MarcusTXK"},"content":"        LocalDateTime date \u003d TimeUtil.getUntilDate("},{"lineNumber":177,"author":{"gitId":"MarcusTXK"},"content":"                LocalDateTime.of(1969, Month.JANUARY, 1, 0, 0));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        config.setUntilDate(date);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        config.setSinceDate(null);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void gitLog_emailWithAdditionOperator_success() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, author);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(1, content));"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"MarcusTXK":24,"sikai00":4,"-":166}},{"path":"src/test/java/reposense/git/GitShortlogTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.Month;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class GitShortlogTest extends GitTestTemplate {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private RepoConfiguration config;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        config \u003d configs.get();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void getAuthors_validRepoNoDateRange_success() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"Eugene Peh\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"FH-30\"));"},{"lineNumber":30,"author":{"gitId":"sikai00"},"content":"        expectedAuthorList.add(new Author(\"HCY123902\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"WANG CHAO\"));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"chan-j-d\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"eugenepeh\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"fakeAuthor\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"harryggg\"));"},{"lineNumber":36,"author":{"gitId":"sikai00"},"content":"        expectedAuthorList.add(new Author(\"sikai00\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthorList.size(), actualAuthorList.size());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthorList, actualAuthorList);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void getAuthors_validRepoDateRange_success() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"eugenepeh\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        config.setSinceDate(TestUtil.getSinceDate(2018, Month.MAY.getValue(), 5));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        config.setUntilDate(TestUtil.getUntilDate(2018, Month.MAY.getValue(), 10));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthorList.size(), actualAuthorList.size());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedAuthorList, actualAuthorList);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void getAuthors_validRepoDateOutOfRange_success() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        config.setSinceDate(TestUtil.getSinceDate(2018, Month.JUNE.getValue(), 1));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        config.setUntilDate(TestUtil.getUntilDate(2018, Month.JUNE.getValue(), 20));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Assertions.assertTrue(actualAuthorList.isEmpty());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sikai00":2,"-":65}},{"path":"src/test/java/reposense/template/GitTestTemplate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.template;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoAnalyzer;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoExtractor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Contains templates for git testing."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class GitTestTemplate {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    protected static final String IGNORE_REVS_FILE_NAME \u003d \".git-blame-ignore-revs\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH \u003d \"1565-find-previous-authors\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected static final String FIRST_COMMIT_HASH \u003d \"7d7584f\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected static final String ROOT_COMMIT_HASH \u003d \"fd425072e12004b71d733a58d819d845509f8db3\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH \u003d \"2fb6b9b\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_LONG \u003d \"2fb6b9b2dd9fa40bf0f9815da2cb0ae8731436c7\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_PARENT \u003d \"c5a6dc774e22099cd9ddeb0faff1e75f9cf4f151\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_NAME \u003d \"harryggg\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_NAME \u003d \"fakeAuthor\";"},{"lineNumber":49,"author":{"gitId":"sikai00"},"content":"    protected static final String UNCONVENTIONAL_AUTHOR_NAME \u003d \"-unconventional_author-\";"},{"lineNumber":50,"author":{"gitId":"sikai00"},"content":"    protected static final String WHITESPACE_AUTHOR_NAME \u003d \"whitespace author\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected static final String IGNORED_AUTHOR_NAME \u003d \"FH-30\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_NAME \u003d \"eugenepeh\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected static final String YONG_AUTHOR_NAME \u003d \"Yong Hao TENG\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected static final String MINGYI_AUTHOR_NAME \u003d \"myteo\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected static final String JAMES_AUTHOR_NAME \u003d \"jamessspanggg\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    protected static final String JAMES_ALTERNATIVE_AUTHOR_NAME \u003d \"James Pang\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected static final String JINYAO_AUTHOR_NAME \u003d \"jylee-git\";"},{"lineNumber":58,"author":{"gitId":"sikai00"},"content":"    protected static final String LATEST_COMMIT_HASH \u003d \"abbd5888d5cd4e411c6a8e58e661b0eafdae1335\";"},{"lineNumber":59,"author":{"gitId":"sikai00"},"content":"    protected static final String LATEST_COMMIT_HASH_PARENT \u003d \"f768b9b1d9d1478f8ac8cf3b4c7f868479edc07a\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    protected static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING \u003d"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \"2d87a431fcbb8f73a731b6df0fcbee962c85c250\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    protected static final CommitHash EUGENE_AUTHOR_README_FILE_COMMIT_07052018 \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            new CommitHash(EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    protected static final CommitHash FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING \u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    protected static final CommitHash MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018 \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    protected static final String AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \"1d29339e7d16eb5b2bc8fb542e08acedd3d4b0eb\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    protected static final CommitHash AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021 \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            new CommitHash(AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \"7d7584fc204922cc5ff3bd5ca073cad6bed2c46a\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING \u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            \"8e4ca1da5d413e9ab84a1e8d1474918afa97f7a1\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING \u003d"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018 \u003d Arrays.asList("},{"lineNumber":86,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING),"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING),"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e AUTHOR_TO_IGNORE_BLAME_COMMIT_LIST_07082021 \u003d Collections.singletonList("},{"lineNumber":91,"author":{"gitId":"-"},"content":"            new CommitHash(AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    protected static final String NONEXISTENT_COMMIT_HASH \u003d \"nonExistentCommitHash\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    protected static final ZoneId TIME_ZONE_ID \u003d ZoneId.of(\"Asia/Singapore\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    protected static final Author MAIN_AUTHOR \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    protected static final Author FAKE_AUTHOR \u003d new Author(FAKE_AUTHOR_NAME);"},{"lineNumber":98,"author":{"gitId":"sikai00"},"content":"    protected static final Author UNCONVENTIONAL_AUTHOR \u003d new Author(UNCONVENTIONAL_AUTHOR_NAME);"},{"lineNumber":99,"author":{"gitId":"sikai00"},"content":"    protected static final Author WHITESPACE_AUTHOR \u003d new Author(WHITESPACE_AUTHOR_NAME);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    protected static ThreadLocal\u003cRepoConfiguration\u003e configs \u003d ThreadLocal.withInitial(() -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return newRepoConfiguration();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private static final Supplier\u003cString\u003e EXTRA_OUTPUT_FOLDER_NAME_SUPPLIER \u003d () -\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            String.valueOf(Thread.currentThread().getId());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d newRepoConfiguration();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(getAlphaAllAliasAuthor()));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        config.setIsLastModifiedDateIncluded(false);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        configs.set(config);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @BeforeAll"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void beforeClass() throws Exception {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d newRepoConfiguration();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        configs.set(config);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        TestRepoCloner.cloneAndBranch(config, EXTRA_OUTPUT_FOLDER_NAME_SUPPLIER.get());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @AfterEach"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(configs.get().getRepoRoot(), \"master\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private static RepoConfiguration newRepoConfiguration() throws Exception {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\","},{"lineNumber":139,"author":{"gitId":"-"},"content":"                EXTRA_OUTPUT_FOLDER_NAME_SUPPLIER.get());"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Generates the .git-blame-ignore-revs file containing {@link CommitHash}es"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * from {@code toIgnore} for the test repo."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public List\u003cCommitHash\u003e createTestIgnoreRevsFile(List\u003cCommitHash\u003e toIgnore) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        String repoRoot \u003d configs.get().getRepoRoot();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e expandedIgnoreCommitList \u003d toIgnore.stream()"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                .map(commitHash -\u003e {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                        return GitShow.getExpandedCommitHash(repoRoot, commitHash);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    } catch (CommitNotFoundException e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                        return new CommitHash(commitHash);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                })"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        String fileLocation \u003d repoRoot + IGNORE_REVS_FILE_NAME;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        FileUtil.writeIgnoreRevsFile(fileLocation, expandedIgnoreCommitList);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return expandedIgnoreCommitList;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void removeTestIgnoreRevsFile() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        String fileLocation \u003d configs.get().getRepoRoot() + IGNORE_REVS_FILE_NAME;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        new File(fileLocation).delete();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * For each line in {@link FileResult}, assert that it is attributed to the expected author provided by"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * {@code expectedLineAuthors}."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void assertFileAnalysisCorrectness(FileResult fileResult, List\u003cAuthor\u003e expectedLineAuthors) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        List\u003cLineInfo\u003e lines \u003d fileResult.getLines();"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertEquals(expectedLineAuthors.size(), lines.size());"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        Iterator\u003cAuthor\u003e lineAuthorsItr \u003d expectedLineAuthors.iterator();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Iterator\u003cLineInfo\u003e linesItr \u003d lines.iterator();"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        while (linesItr.hasNext() \u0026\u0026 lineAuthorsItr.hasNext()) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            assertEquals(lineAuthorsItr.next(), linesItr.next().getAuthor());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public FileResult getFileResult(String relativePath) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(configs.get(), relativePath);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        return FileInfoAnalyzer.analyzeTextFile(configs.get(), fileInfo);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Returns a {@link Author} that has git id and aliases of all authors in testrepo-Alpha, so that no commits"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * will be filtered out in the `git log` command."},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    protected Author getAlphaAllAliasAuthor() {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        author.setAuthorAliases(Arrays.asList(FAKE_AUTHOR_NAME, EUGENE_AUTHOR_NAME, YONG_AUTHOR_NAME));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"sikai00":6,"-":193}}]
